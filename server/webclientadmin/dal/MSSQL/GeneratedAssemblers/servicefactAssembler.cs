//-------------------------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by EntitiesToDTOs.v3.2 (entitiestodtos.codeplex.com).
//     Timestamp: 2020/07/24 - 14:16:20
//
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//-------------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Text;
using System.Linq;
using Sigesoft.Server.WebClientAdmin.DAL;

namespace Sigesoft.Server.WebClientAdmin.BE
{

    /// <summary>
    /// Assembler for <see cref="servicefact"/> and <see cref="servicefactDto"/>.
    /// </summary>
    public static partial class servicefactAssembler
    {
        /// <summary>
        /// Invoked when <see cref="ToDTO"/> operation is about to return.
        /// </summary>
        /// <param name="dto"><see cref="servicefactDto"/> converted from <see cref="servicefact"/>.</param>
        static partial void OnDTO(this servicefact entity, servicefactDto dto);

        /// <summary>
        /// Invoked when <see cref="ToEntity"/> operation is about to return.
        /// </summary>
        /// <param name="entity"><see cref="servicefact"/> converted from <see cref="servicefactDto"/>.</param>
        static partial void OnEntity(this servicefactDto dto, servicefact entity);

        /// <summary>
        /// Converts this instance of <see cref="servicefactDto"/> to an instance of <see cref="servicefact"/>.
        /// </summary>
        /// <param name="dto"><see cref="servicefactDto"/> to convert.</param>
        public static servicefact ToEntity(this servicefactDto dto)
        {
            if (dto == null) return null;

            var entity = new servicefact();

            entity.i_ServiceFactId = dto.i_ServiceFactId;
            entity.v_ServiceId = dto.v_ServiceId;
            entity.cdoc_serie = dto.cdoc_serie;
            entity.cdoc_nro = dto.cdoc_nro;
            entity.prec_venta = dto.prec_venta;
            entity.cusu_crea = dto.cusu_crea;
            entity.v_comment = dto.v_comment;

            dto.OnEntity(entity);

            return entity;
        }

        /// <summary>
        /// Converts this instance of <see cref="servicefact"/> to an instance of <see cref="servicefactDto"/>.
        /// </summary>
        /// <param name="entity"><see cref="servicefact"/> to convert.</param>
        public static servicefactDto ToDTO(this servicefact entity)
        {
            if (entity == null) return null;

            var dto = new servicefactDto();

            dto.i_ServiceFactId = entity.i_ServiceFactId;
            dto.v_ServiceId = entity.v_ServiceId;
            dto.cdoc_serie = entity.cdoc_serie;
            dto.cdoc_nro = entity.cdoc_nro;
            dto.prec_venta = entity.prec_venta;
            dto.cusu_crea = entity.cusu_crea;
            dto.v_comment = entity.v_comment;

            entity.OnDTO(dto);

            return dto;
        }

        /// <summary>
        /// Converts each instance of <see cref="servicefactDto"/> to an instance of <see cref="servicefact"/>.
        /// </summary>
        /// <param name="dtos"></param>
        /// <returns></returns>
        public static List<servicefact> ToEntities(this IEnumerable<servicefactDto> dtos)
        {
            if (dtos == null) return null;

            return dtos.Select(e => e.ToEntity()).ToList();
        }

        /// <summary>
        /// Converts each instance of <see cref="servicefact"/> to an instance of <see cref="servicefactDto"/>.
        /// </summary>
        /// <param name="entities"></param>
        /// <returns></returns>
        public static List<servicefactDto> ToDTOs(this IEnumerable<servicefact> entities)
        {
            if (entities == null) return null;

            return entities.Select(e => e.ToDTO()).ToList();
        }

    }
}
