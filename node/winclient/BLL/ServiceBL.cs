using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using System.Linq.Dynamic;
using Sigesoft.Node.WinClient.BE;
using Sigesoft.Node.WinClient.DAL;
using Sigesoft.Common;
using System.Collections;
using System.Transactions;
using System.Data.Objects;

namespace Sigesoft.Node.WinClient.BLL
{
    public class ServiceBL
    {
        List<int> ListaDiente = new List<int>();
        //Devart.Data.PostgreSql.PgSqlMonitor mon = new Devart.Data.PostgreSql.PgSqlMonitor();

        #region Service

        public List<ServiceList> GetServicesPagedAndFiltered(ref OperationResult pobjOperationResult, int? pintPageIndex, int? pintResultsPerPage, string pstrSortExpression, string pstrFilterExpression, DateTime? pdatBeginDate, DateTime? pdatEndDate)
        {
            //mon.IsActive = true;

            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
                var query = from A in dbContext.service                                
                            join B in dbContext.systemparameter on new { a = A.i_ServiceStatusId.Value, b = 125 } equals new { a = B.i_ParameterId, b = B.i_GroupId } into B_join
                            from B in B_join.DefaultIfEmpty()
                            join C in dbContext.systemparameter on new { a = A.i_MasterServiceId.Value, b = 119 } equals new { a = C.i_ParameterId, b = C.i_GroupId } into C_join
                            from C in C_join.DefaultIfEmpty()
                            join D in dbContext.calendar on A.v_ServiceId equals D.v_ServiceId into D_join
                            from D in D_join.DefaultIfEmpty()
                            join E in dbContext.protocol on A.v_ProtocolId equals E.v_ProtocolId
                            join F in dbContext.organization on E.v_CustomerOrganizationId equals F.v_OrganizationId
                            join G in dbContext.location on E.v_CustomerLocationId equals G.v_LocationId
                            join H in dbContext.systemparameter on new { a = E.i_MasterServiceTypeId.Value, b = 119 } equals new { a = H.i_ParameterId, b = H.i_GroupId } into H_join
                            from H in H_join.DefaultIfEmpty()

                            join I in dbContext.person on A.v_PersonId equals I.v_PersonId
                            join K in dbContext.systemparameter on new { a = A.i_AptitudeStatusId.Value, b = 124 } equals new { a = K.i_ParameterId, b = K.i_GroupId } into K_join
                            from K in K_join.DefaultIfEmpty()
                            join L in dbContext.datahierarchy on new { a = I.i_DocTypeId.Value, b = 106 } equals new { a = L.i_ItemId, b = L.i_GroupId } into L_join
                            from L in L_join.DefaultIfEmpty()

                            join et in dbContext.systemparameter on new { a = E.i_EsoTypeId.Value, b = 118 }
                                                equals new { a = et.i_ParameterId, b = et.i_GroupId } into et_join  // TIPO ESO [ESOA,ESOR,ETC]
                            from et in et_join.DefaultIfEmpty()

                            //// Empresa / Sede Cliente ******************************************************
                            //join oc in dbContext.organization on new { a = E.v_CustomerOrganizationId }
                            //        equals new { a = oc.v_OrganizationId } into oc_join
                            //from oc in oc_join.DefaultIfEmpty()

                            //join lc in dbContext.location on new { a = E.v_CustomerOrganizationId, b = E.v_CustomerLocationId }
                            //      equals new { a = lc.v_OrganizationId, b = lc.v_LocationId } into lc_join
                            //from lc in lc_join.DefaultIfEmpty()

                            ////**********************************************************************************

                            join J1 in dbContext.systemuser on new { i_InsertUserId = A.i_InsertUserId.Value }
                                                            equals new { i_InsertUserId = J1.i_SystemUserId } into J1_join
                            from J1 in J1_join.DefaultIfEmpty()

                            join J2 in dbContext.systemuser on new { i_UpdateUserId = A.i_UpdateUserId.Value }
                                                            equals new { i_UpdateUserId = J2.i_SystemUserId } into J2_join
                            from J2 in J2_join.DefaultIfEmpty()
                            where A.i_IsDeleted == 0 //&& D.i_LineStatusId == (int)LineStatus.EnCircuito
                            select new ServiceList
                            {
                                b_Seleccionar = false,
                                v_ServiceId = A.v_ServiceId,
                                v_Nodo = A.v_ServiceId.Substring(0, 4),
                                v_CalendarId = D.v_CalendarId,
                                v_ProtocolId = A.v_ProtocolId,
                                v_PersonId = A.v_PersonId,
                                i_MasterServiceId = A.i_MasterServiceId.Value,
                                v_MasterServiceName = C.v_Value1,
                                i_ServiceStatusId = A.i_ServiceStatusId.Value,
                                v_ServiceStatusName = B.v_Value1,
                                i_AptitudeStatusId = A.i_AptitudeStatusId.Value,
                                d_ServiceDate = (DateTime)A.d_ServiceDate,
                                d_GlobalExpirationDate = (DateTime)A.d_GlobalExpirationDate,
                                d_ObsExpirationDate = (DateTime)A.d_ObsExpirationDate,
                                i_FlagAgentId = A.i_FlagAgentId.Value,
                                d_DateTimeCalendar = (DateTime)D.d_DateTimeCalendar,

                                v_OrganizationName = F.v_Name,
                                v_GenderName = G.v_Name,
                                v_ServiceTypeName = H.v_Value1,
                                i_ServiceTypeId = E.i_MasterServiceTypeId.Value,
                                i_EsoTypeId = E.i_EsoTypeId.Value,
                                v_LocationId = E.v_EmployerLocationId,
                                v_LocationName = G.v_Name,
                                v_Pacient = I.v_FirstLastName + " " + I.v_SecondLastName + " " + I.v_FirstName,
                                v_PacientDocument = I.v_FirstName + " " + I.v_FirstLastName + " " + I.v_SecondLastName + " " + I.v_DocNumber,
                                v_ProtocolName = E.v_Name,
                                v_CreationUser = J1.v_UserName,
                                v_UpdateUser = J2.v_UserName,
                                d_CreationDate = A.d_InsertDate,
                                d_UpdateDate = A.d_UpdateDate,
                                v_AptitudeStatusName = K.v_Value1,
                                v_DocTypeName = L.v_Value1,
                                v_DocNumber = I.v_DocNumber,

                                v_CustomerOrganizationId = E.v_CustomerOrganizationId,
                                v_CustomerLocationId = E.v_CustomerLocationId,
                                v_EsoTypeName = et.v_Value1,
                                i_StatusLiquidation = A.i_InsertUserOccupationalMedicalId
                            };

                if (!string.IsNullOrEmpty(pstrFilterExpression))
                {
                    query = query.Where(pstrFilterExpression);
                }
                if (pdatBeginDate.HasValue && pdatEndDate.HasValue)
                {
                    query = query.Where("d_ServiceDate >= @0 && d_ServiceDate <= @1", pdatBeginDate.Value, pdatEndDate.Value);
                }
                if (!string.IsNullOrEmpty(pstrSortExpression))
                {
                    query = query.OrderBy(pstrSortExpression);
                }
                if (pintPageIndex.HasValue && pintResultsPerPage.HasValue)
                {
                    int intStartRowIndex = pintPageIndex.Value * pintResultsPerPage.Value;
                    query = query.Skip(intStartRowIndex);
                }
                if (pintResultsPerPage.HasValue)
                {
                    query = query.Take(pintResultsPerPage.Value);
                }

                pobjOperationResult.Success = 1;

                // valida por nodo
                if (int.Parse(Common.Utils.GetApplicationConfigValue("NodeId")) == 3)
                {
                    return query.ToList();//.FindAll(p => p.v_Nodo == "N003");
                }
                if (int.Parse(Common.Utils.GetApplicationConfigValue("NodeId")) == 4)
                {
                    return query.ToList().FindAll(p => p.v_Nodo == "N004");
                }
                else if (int.Parse(Common.Utils.GetApplicationConfigValue("NodeId")) == 5)
                {
                    return query.ToList().FindAll(p => p.v_Nodo == "N005");
                }
                else if (int.Parse(Common.Utils.GetApplicationConfigValue("NodeId")) == 6)
                {
                    return query.ToList().FindAll(p => p.v_Nodo == "N006");
                }
                else if (int.Parse(Common.Utils.GetApplicationConfigValue("NodeId")) == 7)
                {
                    return query.ToList().FindAll(p => p.v_Nodo == "N007");
                }

                List<ServiceList> objData = query.ToList();

                return objData;

            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
                return null;
            }
        }

        //DAVID 20180319
        public List<ServiceList> GetServicesPagedAndFilteredFullNode(ref OperationResult pobjOperationResult, int? pintPageIndex, int? pintResultsPerPage, string pstrSortExpression, string pstrFilterExpression, DateTime? pdatBeginDate, DateTime? pdatEndDate)
        {
            //mon.IsActive = true;

            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
                var query = from A in dbContext.service

                            join B in dbContext.systemparameter on new { a = A.i_ServiceStatusId.Value, b = 125 } equals new { a = B.i_ParameterId, b = B.i_GroupId } into B_join
                            from B in B_join.DefaultIfEmpty()

                            join C in dbContext.systemparameter on new { a = A.i_MasterServiceId.Value, b = 119 } equals new { a = C.i_ParameterId, b = C.i_GroupId } into C_join
                            from C in C_join.DefaultIfEmpty()
                            join D in dbContext.calendar on A.v_ServiceId equals D.v_ServiceId into D_join
                            from D in D_join.DefaultIfEmpty()
                            join E in dbContext.protocol on A.v_ProtocolId equals E.v_ProtocolId into E_join
                            from E in E_join.DefaultIfEmpty()
                            join F in dbContext.organization on E.v_CustomerOrganizationId equals F.v_OrganizationId into F_join
                            from F in F_join.DefaultIfEmpty()
                            join G in dbContext.location on E.v_CustomerLocationId equals G.v_LocationId into G_join
                            from G in G_join.DefaultIfEmpty()
                            join H in dbContext.systemparameter on new { a = E.i_MasterServiceTypeId.Value, b = 119 } equals new { a = H.i_ParameterId, b = H.i_GroupId } into H_join
                            from H in H_join.DefaultIfEmpty()

                            join I in dbContext.person on A.v_PersonId equals I.v_PersonId into I_join
                            from I in I_join.DefaultIfEmpty()

                            join K in dbContext.systemparameter on new { a = A.i_AptitudeStatusId.Value, b = 124 } equals new { a = K.i_ParameterId, b = K.i_GroupId } into K_join
                            from K in K_join.DefaultIfEmpty()

                            join L in dbContext.datahierarchy on new { a = I.i_DocTypeId.Value, b = 106 } equals new { a = L.i_ItemId, b = L.i_GroupId } into L_join
                            from L in L_join.DefaultIfEmpty()

                            join et in dbContext.systemparameter on new { a = E.i_EsoTypeId.Value, b = 118 }
                                                equals new { a = et.i_ParameterId, b = et.i_GroupId } into et_join  // TIPO ESO [ESOA,ESOR,ETC]
                            from et in et_join.DefaultIfEmpty()

                            join M in dbContext.systemparameter on new { a = E.i_EsoTypeId.Value, b = 310 }
                                                equals new { a = M.i_ParameterId, b = M.i_GroupId } into M_join  // TIPO ESO [ESOA,ESOR,ETC]
                            from M in M_join.DefaultIfEmpty()

                            join J1 in dbContext.systemuser on new { i_InsertUserId = A.i_InsertUserId.Value }
                                                            equals new { i_InsertUserId = J1.i_SystemUserId } into J1_join
                            from J1 in J1_join.DefaultIfEmpty()

                            join J2 in dbContext.systemuser on new { i_UpdateUserId = A.i_UpdateUserId.Value }
                                                            equals new { i_UpdateUserId = J2.i_SystemUserId } into J2_join
                            from J2 in J2_join.DefaultIfEmpty()
                            where A.i_IsDeleted == 0
                            select new ServiceList
                            {
                                b_Seleccionar = false,
                                v_ServiceId = A.v_ServiceId,
                                v_Nodo = A.v_ServiceId.Substring(0, 4),
                                v_CalendarId = D.v_CalendarId,
                                v_ProtocolId = A.v_ProtocolId,
                                v_PersonId = A.v_PersonId,
                                i_MasterServiceId = A.i_MasterServiceId.Value,
                                v_MasterServiceName = C.v_Value1,
                                i_ServiceStatusId = A.i_ServiceStatusId.Value,
                                v_ServiceStatusName = B.v_Value1,
                                i_AptitudeStatusId = A.i_AptitudeStatusId.Value,
                                d_ServiceDate = (DateTime)A.d_ServiceDate,
                                d_GlobalExpirationDate = (DateTime)A.d_GlobalExpirationDate,
                                d_ObsExpirationDate = (DateTime)A.d_ObsExpirationDate,
                                i_FlagAgentId = A.i_FlagAgentId.Value,
                                //d_DateTimeCalendar = (DateTime)D.d_DateTimeCalendar,

                                v_OrganizationId = F.v_OrganizationId,
                                v_OrganizationName = F.v_Name,
                                v_GenderName = G.v_Name,
                                v_ServiceTypeName = H.v_Value1,
                                i_ServiceTypeId = E.i_MasterServiceTypeId.Value,
                                i_EsoTypeId = E.i_EsoTypeId.Value,
                                v_LocationId = E.v_EmployerLocationId,
                                v_LocationName = G.v_Name,
                                v_Pacient = I.v_FirstLastName + " " + I.v_SecondLastName + " " + I.v_FirstName,
                                v_PacientDocument = I.v_FirstName + " " + I.v_FirstLastName + " " + I.v_SecondLastName + " " + I.v_DocNumber,
                                v_ProtocolName = E.v_Name,
                                v_CreationUser = J1.v_UserName,
                                v_UpdateUser = J2.v_UserName,
                                d_CreationDate = A.d_InsertDate,
                                d_UpdateDate = A.d_UpdateDate,
                                v_AptitudeStatusName = K.v_Value1,
                                v_DocTypeName = L.v_Value1,
                                v_DocNumber = I.v_DocNumber,

                                v_CustomerOrganizationId = E.v_CustomerOrganizationId,
                                v_CustomerLocationId = E.v_CustomerLocationId,
                                v_EsoTypeName = et.v_Value1,
                                i_StatusLiquidation = A.i_InsertUserOccupationalMedicalId,
                                Email = F.v_Mail,
                                Contratista = M.v_Value1,
                                Sede = A.v_Sede
                            };

                if (!string.IsNullOrEmpty(pstrFilterExpression))
                {
                    query = query.Where(pstrFilterExpression);
                }
                if (pdatBeginDate.HasValue && pdatEndDate.HasValue)
                {
                    query = query.Where("d_ServiceDate >= @0 && d_ServiceDate <= @1", pdatBeginDate.Value, pdatEndDate.Value);
                }
                if (!string.IsNullOrEmpty(pstrSortExpression))
                {
                    query = query.OrderBy(pstrSortExpression);
                }
                if (pintPageIndex.HasValue && pintResultsPerPage.HasValue)
                {
                    int intStartRowIndex = pintPageIndex.Value * pintResultsPerPage.Value;
                    query = query.Skip(intStartRowIndex);
                }
                if (pintResultsPerPage.HasValue)
                {
                    query = query.Take(pintResultsPerPage.Value);
                }

                pobjOperationResult.Success = 1;

                // valida por nodo
                if (int.Parse(Common.Utils.GetApplicationConfigValue("NodeId")) == 3)
                {
                    //v_PacientDocument.Contains(\"sobrino\")
                    //query = query.Where("v_ServiceId.Contains(\"N003\")");
                    return query.ToList();//.FindAll(p => p.v_Nodo == "N003");
                }
                if (int.Parse(Common.Utils.GetApplicationConfigValue("NodeId")) == 4)
                {
                    return query.ToList().FindAll(p => p.v_Nodo == "N004");
                }
                else if (int.Parse(Common.Utils.GetApplicationConfigValue("NodeId")) == 5)
                {
                    return query.ToList().FindAll(p => p.v_Nodo == "N005");
                }
                else if (int.Parse(Common.Utils.GetApplicationConfigValue("NodeId")) == 6)
                {
                    return query.ToList().FindAll(p => p.v_Nodo == "N006");
                }
                else if (int.Parse(Common.Utils.GetApplicationConfigValue("NodeId")) == 7)
                {
                    return query.ToList().FindAll(p => p.v_Nodo == "N007");
                }

                List<ServiceList> objData = query.ToList();

                return objData;

            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
                return null;
            }
        }


        public List<ServiceList> GetServicesPagedAndFilteredFullNodeJessicaOblitas(ref OperationResult pobjOperationResult, int? pintPageIndex, int? pintResultsPerPage, string pstrSortExpression, string pstrFilterExpression, DateTime? pdatBeginDate, DateTime? pdatEndDate)
        {
            //mon.IsActive = true;

            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
                var query = from A in dbContext.service
                            join B in dbContext.systemparameter on new { a = A.i_ServiceStatusId.Value, b = 125 } equals new { a = B.i_ParameterId, b = B.i_GroupId } into B_join
                            from B in B_join.DefaultIfEmpty()
                            join C in dbContext.systemparameter on new { a = A.i_MasterServiceId.Value, b = 119 } equals new { a = C.i_ParameterId, b = C.i_GroupId } into C_join
                            from C in C_join.DefaultIfEmpty()
                            join D in dbContext.calendar on A.v_ServiceId equals D.v_ServiceId into D_join
                            from D in D_join.DefaultIfEmpty()
                            join E in dbContext.protocol on A.v_ProtocolId equals E.v_ProtocolId into E_join
                            from E in E_join.DefaultIfEmpty()
                            join F in dbContext.organization on E.v_CustomerOrganizationId equals F.v_OrganizationId into F_join
                            from F in F_join.DefaultIfEmpty()
                            join G in dbContext.location on E.v_CustomerLocationId equals G.v_LocationId into G_join
                            from G in G_join.DefaultIfEmpty()
                            join H in dbContext.systemparameter on new { a = E.i_MasterServiceTypeId.Value, b = 119 } equals new { a = H.i_ParameterId, b = H.i_GroupId } into H_join
                            from H in H_join.DefaultIfEmpty()

                            join I in dbContext.person on A.v_PersonId equals I.v_PersonId into I_join
                            from I in I_join.DefaultIfEmpty()



                            join K in dbContext.systemparameter on new { a = A.i_AptitudeStatusId.Value, b = 124 } equals new { a = K.i_ParameterId, b = K.i_GroupId } into K_join
                            from K in K_join.DefaultIfEmpty()

                            join L in dbContext.datahierarchy on new { a = I.i_DocTypeId.Value, b = 106 } equals new { a = L.i_ItemId, b = L.i_GroupId } into L_join
                            from L in L_join.DefaultIfEmpty()

                            join et in dbContext.systemparameter on new { a = E.i_EsoTypeId.Value, b = 118 }
                                                equals new { a = et.i_ParameterId, b = et.i_GroupId } into et_join  // TIPO ESO [ESOA,ESOR,ETC]
                            from et in et_join.DefaultIfEmpty()

                            join M in dbContext.systemparameter on new { a = E.i_EsoTypeId.Value, b = 310 }
                                                equals new { a = M.i_ParameterId, b = M.i_GroupId } into M_join  // TIPO ESO [ESOA,ESOR,ETC]
                            from M in M_join.DefaultIfEmpty()

                            //// Empresa / Sede Cliente ******************************************************
                            //join oc in dbContext.organization on new { a = E.v_CustomerOrganizationId }
                            //        equals new { a = oc.v_OrganizationId } into oc_join
                            //from oc in oc_join.DefaultIfEmpty()

                            //join lc in dbContext.location on new { a = E.v_CustomerOrganizationId, b = E.v_CustomerLocationId }
                            //      equals new { a = lc.v_OrganizationId, b = lc.v_LocationId } into lc_join
                            //from lc in lc_join.DefaultIfEmpty()

                            ////**********************************************************************************

                            join J1 in dbContext.systemuser on new { i_InsertUserId = A.i_InsertUserId.Value }
                                                            equals new { i_InsertUserId = J1.i_SystemUserId } into J1_join
                            from J1 in J1_join.DefaultIfEmpty()

                            join J2 in dbContext.systemuser on new { i_UpdateUserId = A.i_UpdateUserId.Value }
                                                            equals new { i_UpdateUserId = J2.i_SystemUserId } into J2_join
                            from J2 in J2_join.DefaultIfEmpty()
                            where A.i_IsDeleted == 0 //&& D.i_LineStatusId == (int)LineStatus.EnCircuito
                                //orderby A.d_ServiceDate
                            && A.d_ServiceDate != null
                            select new ServiceList
                            {
                                b_Seleccionar = false,
                                v_ServiceId = A.v_ServiceId,
                                v_Nodo = A.v_ServiceId.Substring(0, 4),
                                v_CalendarId = D.v_CalendarId,
                                v_ProtocolId = A.v_ProtocolId,
                                v_PersonId = A.v_PersonId,
                                i_MasterServiceId = A.i_MasterServiceId.Value,
                                v_MasterServiceName = C.v_Value1,
                                i_ServiceStatusId = A.i_ServiceStatusId.Value,
                                v_ServiceStatusName = B.v_Value1,
                                i_AptitudeStatusId = A.i_AptitudeStatusId.Value,
                                d_ServiceDate = A.d_ServiceDate == null ? DateTime.Now : (DateTime)A.d_ServiceDate,
                                d_GlobalExpirationDate = A.d_GlobalExpirationDate == null ? DateTime.Now : (DateTime)A.d_GlobalExpirationDate,
                                d_ObsExpirationDate = A.d_ObsExpirationDate == null ? DateTime.Now : (DateTime)A.d_ObsExpirationDate,
                                i_FlagAgentId = A.i_FlagAgentId.Value,
                                d_DateTimeCalendar = D.d_DateTimeCalendar == null ? DateTime.Now : (DateTime)D.d_DateTimeCalendar,

                                v_OrganizationId = F.v_OrganizationId,
                                v_OrganizationName = F.v_Name,
                                v_GenderName = G.v_Name,
                                v_ServiceTypeName = H.v_Value1,
                                i_ServiceTypeId = E.i_MasterServiceTypeId.Value,
                                i_EsoTypeId = E.i_EsoTypeId.Value,
                                v_LocationId = E.v_EmployerLocationId,
                                v_LocationName = G.v_Name,
                                v_Pacient = I.v_FirstLastName + " " + I.v_SecondLastName + " " + I.v_FirstName,
                                v_PacientDocument = I.v_FirstName + " " + I.v_FirstLastName + " " + I.v_SecondLastName + " " + I.v_DocNumber,
                                v_ProtocolName = E.v_Name,
                                v_CreationUser = J1.v_UserName,
                                v_UpdateUser = J2.v_UserName,
                                d_CreationDate = A.d_InsertDate,
                                d_UpdateDate = A.d_UpdateDate,
                                v_AptitudeStatusName = K.v_Value1,
                                v_DocTypeName = L.v_Value1,
                                v_DocNumber = I.v_DocNumber,

                                v_CustomerOrganizationId = E.v_CustomerOrganizationId,
                                v_CustomerLocationId = E.v_CustomerLocationId,
                                v_EsoTypeName = et.v_Value1,
                                i_StatusLiquidation = A.i_InsertUserOccupationalMedicalId,
                                Email = F.v_Mail,
                                Contratista = M.v_Value1,
                                Sede = A.v_Sede,
                                d_InsertDate = A.d_InsertDate == null ? DateTime.Now : A.d_InsertDate.Value
                            };

                if (!string.IsNullOrEmpty(pstrFilterExpression))
                {
                    query = query.Where(pstrFilterExpression);
                }
                if (pdatBeginDate.HasValue && pdatEndDate.HasValue)
                {
                    query = query.Where("d_InsertDate >= @0 && d_InsertDate <= @1", pdatBeginDate.Value, pdatEndDate.Value.AddDays(1));
                }
                if (!string.IsNullOrEmpty(pstrSortExpression))
                {
                    query = query.OrderBy(pstrSortExpression);
                }
                if (pintPageIndex.HasValue && pintResultsPerPage.HasValue)
                {
                    int intStartRowIndex = pintPageIndex.Value * pintResultsPerPage.Value;
                    query = query.Skip(intStartRowIndex);
                }
                if (pintResultsPerPage.HasValue)
                {
                    query = query.Take(pintResultsPerPage.Value);
                }

                pobjOperationResult.Success = 1;

                List<ServiceList> objData = query.ToList();

                return objData;

            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
                return null;
            }
        }



        public List<ServiceList> GetServicesPagedAndFiltered_Interface(ref OperationResult pobjOperationResult, int? pintPageIndex, int? pintResultsPerPage, string pstrSortExpression, string pstrFilterExpression, DateTime? pdatBeginDate, DateTime? pdatEndDate)
        {
            //mon.IsActive = true;

            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
                var query = from A in dbContext.service
                            join B in dbContext.systemparameter on new { a = A.i_ServiceStatusId.Value, b = 125 } equals new { a = B.i_ParameterId, b = B.i_GroupId } into B_join
                            from B in B_join.DefaultIfEmpty()
                            join C in dbContext.systemparameter on new { a = A.i_MasterServiceId.Value, b = 119 } equals new { a = C.i_ParameterId, b = C.i_GroupId } into C_join
                            from C in C_join.DefaultIfEmpty()
                            join D in dbContext.calendar on A.v_ServiceId equals D.v_ServiceId into D_join
                            from D in D_join.DefaultIfEmpty()
                            join E in dbContext.protocol on A.v_ProtocolId equals E.v_ProtocolId
                            join F in dbContext.organization on E.v_CustomerOrganizationId equals F.v_OrganizationId
                            join G in dbContext.location on E.v_CustomerLocationId equals G.v_LocationId
                            join H in dbContext.systemparameter on new { a = E.i_MasterServiceTypeId.Value, b = 119 } equals new { a = H.i_ParameterId, b = H.i_GroupId } into H_join
                            from H in H_join.DefaultIfEmpty()

                            join I in dbContext.person on A.v_PersonId equals I.v_PersonId
                            join K in dbContext.systemparameter on new { a = A.i_AptitudeStatusId.Value, b = 124 } equals new { a = K.i_ParameterId, b = K.i_GroupId } into K_join
                            from K in K_join.DefaultIfEmpty()
                            join L in dbContext.datahierarchy on new { a = I.i_DocTypeId.Value, b = 106 } equals new { a = L.i_ItemId, b = L.i_GroupId } into L_join
                            from L in L_join.DefaultIfEmpty()
                            join M in dbContext.servicecomponent on A.v_ServiceId equals M.v_ServiceId into M_join
                            from M in M_join.DefaultIfEmpty()

                            join et in dbContext.systemparameter on new { a = E.i_EsoTypeId.Value, b = 118 }
                                                equals new { a = et.i_ParameterId, b = et.i_GroupId } into et_join  // TIPO ESO [ESOA,ESOR,ETC]
                            from et in et_join.DefaultIfEmpty()


                            join J1 in dbContext.systemuser on new { i_InsertUserId = A.i_InsertUserId.Value }
                                                            equals new { i_InsertUserId = J1.i_SystemUserId } into J1_join
                            from J1 in J1_join.DefaultIfEmpty()

                            join J2 in dbContext.systemuser on new { i_UpdateUserId = A.i_UpdateUserId.Value }
                                                            equals new { i_UpdateUserId = J2.i_SystemUserId } into J2_join
                            from J2 in J2_join.DefaultIfEmpty()
                            where A.i_IsDeleted == 0 //&& D.i_LineStatusId == (int)LineStatus.EnCircuito
                            select new ServiceList
                            {
                                b_Seleccionar = false,
                                v_ServiceId = A.v_ServiceId,
                                v_CalendarId = D.v_CalendarId,
                                v_ProtocolId = A.v_ProtocolId,
                                v_PersonId = A.v_PersonId,
                                i_MasterServiceId = A.i_MasterServiceId.Value,
                                v_MasterServiceName = C.v_Value1,
                                i_ServiceStatusId = A.i_ServiceStatusId.Value,
                                v_ServiceStatusName = B.v_Value1,
                                i_AptitudeStatusId = A.i_AptitudeStatusId.Value,
                                d_ServiceDate = (DateTime)A.d_ServiceDate,
                                d_GlobalExpirationDate = (DateTime)A.d_GlobalExpirationDate,
                                d_ObsExpirationDate = (DateTime)A.d_ObsExpirationDate,
                                i_FlagAgentId = A.i_FlagAgentId.Value,
                                d_DateTimeCalendar = (DateTime)D.d_DateTimeCalendar,

                                v_OrganizationName = F.v_Name,
                                v_GenderName = G.v_Name,
                                v_ServiceTypeName = H.v_Value1,
                                i_ServiceTypeId = E.i_MasterServiceTypeId.Value,
                                i_EsoTypeId = E.i_EsoTypeId.Value,
                                v_LocationId = E.v_EmployerLocationId,
                                v_LocationName = G.v_Name,
                                v_Pacient = I.v_FirstLastName + " " + I.v_SecondLastName + " " + I.v_FirstName,
                                v_PacientDocument = I.v_FirstName + " " + I.v_FirstLastName + " " + I.v_SecondLastName + " " + I.v_DocNumber,
                                v_ProtocolName = E.v_Name,
                                v_CreationUser = J1.v_UserName,
                                v_UpdateUser = J2.v_UserName,
                                d_CreationDate = A.d_InsertDate,
                                d_UpdateDate = A.d_UpdateDate,
                                v_AptitudeStatusName = K.v_Value1,
                                v_DocTypeName = L.v_Value1,
                                v_DocNumber = I.v_DocNumber,

                                v_CustomerOrganizationId = E.v_CustomerOrganizationId,
                                v_CustomerLocationId = E.v_CustomerLocationId,
                                v_EsoTypeName = et.v_Value1,
                                i_StatusLiquidation = A.i_InsertUserOccupationalMedicalId,
                                v_ComponentId = M.v_ComponentId
                            };

                if (!string.IsNullOrEmpty(pstrFilterExpression))
                {
                    query = query.Where(pstrFilterExpression);
                }
                if (pdatBeginDate.HasValue && pdatEndDate.HasValue)
                {
                    query = query.Where("d_ServiceDate >= @0 && d_ServiceDate <= @1", pdatBeginDate.Value, pdatEndDate.Value);
                }
                if (!string.IsNullOrEmpty(pstrSortExpression))
                {
                    query = query.OrderBy(pstrSortExpression);
                }
                if (pintPageIndex.HasValue && pintResultsPerPage.HasValue)
                {
                    int intStartRowIndex = pintPageIndex.Value * pintResultsPerPage.Value;
                    query = query.Skip(intStartRowIndex);
                }
                if (pintResultsPerPage.HasValue)
                {
                    query = query.Take(pintResultsPerPage.Value);
                }

                List<ServiceList> objData = query.ToList();
                pobjOperationResult.Success = 1;
                return objData;

            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
                return null;
            }
        }

        public string AddService(ref OperationResult pobjOperationResult, serviceDto pobjDtoEntity, List<string> ClientSession)
        {
            //mon.IsActive = true;
            string NewId = "(No generado)";
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
                service objEntity = serviceAssembler.ToEntity(pobjDtoEntity);

                objEntity.d_InsertDate = DateTime.Now;
                objEntity.i_InsertUserId = Int32.Parse(ClientSession[2]);
                objEntity.i_IsDeleted = 0;
                // Autogeneramos el Pk de la tabla
                int intNodeId = int.Parse(ClientSession[0]);
                NewId = Common.Utils.GetNewId(intNodeId, Utils.GetNextSecuentialId(intNodeId, 23), "SR");
                objEntity.v_ServiceId = NewId;

                dbContext.AddToservice(objEntity);
                dbContext.SaveChanges();

                pobjOperationResult.Success = 1;
                // Llenar entidad Log
                LogBL.SaveLog(ClientSession[0], ClientSession[1], ClientSession[2], LogEventType.CREACION, "SERVICIO", "v_ServiceId=" + NewId.ToString(), Success.Ok, null);
                return NewId;
            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
                // Llenar entidad Log
                LogBL.SaveLog(ClientSession[0], ClientSession[1], ClientSession[2], LogEventType.CREACION, "SERVICIO", "v_ServiceId=" + NewId.ToString(), Success.Failed, pobjOperationResult.ExceptionMessage);
                return null;
            }
        }

        public void UpdateService(ref OperationResult pobjOperationResult, serviceDto pobjDtoEntity, List<string> ClientSession)
        {
            //mon.IsActive = true;

            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                // Obtener la entidad fuente
                var objEntitySource = (from a in dbContext.service
                                       where a.v_ServiceId == pobjDtoEntity.v_ServiceId
                                       select a).FirstOrDefault();

                // Crear la entidad con los datos actualizados
                pobjDtoEntity.d_UpdateDate = DateTime.Now;
                pobjDtoEntity.i_UpdateUserId = Int32.Parse(ClientSession[2]);
                service objEntity = serviceAssembler.ToEntity(pobjDtoEntity);

                // Copiar los valores desde la entidad actualizada a la Entidad Fuente
                dbContext.service.ApplyCurrentValues(objEntity);

                // Guardar los cambios
                dbContext.SaveChanges();

                pobjOperationResult.Success = 1;
                // Llenar entidad Log
                LogBL.SaveLog(ClientSession[0], ClientSession[1], ClientSession[2], LogEventType.ACTUALIZACION, "SERVICIO", "v_ServiceId=" + objEntity.v_ServiceId.ToString(), Success.Ok, null);
                return;
            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
                // Llenar entidad Log
                LogBL.SaveLog(ClientSession[0], ClientSession[1], ClientSession[2], LogEventType.ACTUALIZACION, "SERVICIO", "v_ServiceId=" + pobjDtoEntity.v_ServiceId.ToString(), Success.Failed, pobjOperationResult.ExceptionMessage);
                return;
            }
        }

        public serviceDto GetService(ref OperationResult pobjOperationResult, string pstrServiceId)
        {
            //mon.IsActive = true;

            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
                serviceDto objDtoEntity = null;

                var objEntity = (from a in dbContext.service
                                 where a.v_ServiceId == pstrServiceId
                                 select a).FirstOrDefault();

                if (objEntity != null)
                    objDtoEntity = serviceAssembler.ToDTO(objEntity);

                pobjOperationResult.Success = 1;
                return objDtoEntity;
            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
                return null;
            }
        }

        public void UpdateServiceOffice(ref OperationResult pobjOperationResult, serviceDto pobjDtoEntity, List<string> ClientSession)
        {
            //mon.IsActive = true;

            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                // Obtener la entidad fuente
                var objEntitySource = (from a in dbContext.service
                                       where a.v_ServiceId == pobjDtoEntity.v_ServiceId
                                       select a).FirstOrDefault();

                // Crear la entidad con los datos actualizados

                objEntitySource.i_ServiceStatusId = pobjDtoEntity.i_ServiceStatusId;
                objEntitySource.v_Motive = pobjDtoEntity.v_Motive;
                objEntitySource.d_UpdateDate = DateTime.Now;
                objEntitySource.i_UpdateUserId = Int32.Parse(ClientSession[2]);

                dbContext.SaveChanges();

                pobjOperationResult.Success = 1;
                // Llenar entidad Log
                LogBL.SaveLog(ClientSession[0], ClientSession[1], ClientSession[2], LogEventType.ACTUALIZACION, "SERVICIO", "v_ServiceId=" + pobjDtoEntity.v_ServiceId.ToString(), Success.Ok, null);
                return;
            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
                // Llenar entidad Log
                LogBL.SaveLog(ClientSession[0], ClientSession[1], ClientSession[2], LogEventType.ACTUALIZACION, "SERVICIO", "v_ServiceId=" + pobjDtoEntity.v_ServiceId.ToString(), Success.Failed, pobjOperationResult.ExceptionMessage);
                return;
            }
        }

        public ServiceList GetServiceReport(string pstrServiceId)
        {
            //mon.IsActive = true;

            var exFisicoId = Constants.EXAMEN_FISICO_ID;
            //var exFisico7C = Constants.EXAMEN_FISICO_7C_ID;

            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                var objEntity = (from A in dbContext.service
                                 join B in dbContext.protocol on A.v_ProtocolId equals B.v_ProtocolId into B_join
                                 from B in B_join.DefaultIfEmpty()

                                 join C in dbContext.organization on B.v_CustomerOrganizationId equals C.v_OrganizationId into C_join
                                 from C in C_join.DefaultIfEmpty()

                                 join C1 in dbContext.organization on A.v_EmpresaFacturacionId equals C1.v_OrganizationId into C1_join
                                 from C1 in C1_join.DefaultIfEmpty()

                                 join D in dbContext.datahierarchy on new { a = C.i_SectorTypeId.Value, b = 104 }
                                                        equals new { a = D.i_ItemId, b = D.i_GroupId } into D_join
                                 from D in D_join.DefaultIfEmpty()

                                 join E in dbContext.datahierarchy on new { a = C.i_DepartmentId.Value, b = 113 }
                                                       equals new { a = E.i_ItemId, b = E.i_GroupId } into E_join
                                 from E in E_join.DefaultIfEmpty()

                                 join F in dbContext.datahierarchy on new { a = C.i_ProvinceId.Value, b = 113 }
                                                       equals new { a = F.i_ItemId, b = F.i_GroupId } into F_join
                                 from F in F_join.DefaultIfEmpty()

                                 join G in dbContext.datahierarchy on new { a = C.i_DistrictId.Value, b = 113 }
                                                       equals new { a = G.i_ItemId, b = G.i_GroupId } into G_join
                                 from G in G_join.DefaultIfEmpty()

                                 join H in dbContext.person on A.v_PersonId equals H.v_PersonId into H_join
                                 from H in H_join.DefaultIfEmpty()

                                 join I in dbContext.datahierarchy on new { a = H.i_DepartmentId.Value, b = 113 }
                                                       equals new { a = I.i_ItemId, b = I.i_GroupId } into I_join
                                 from I in I_join.DefaultIfEmpty()

                                 join J in dbContext.datahierarchy on new { a = H.i_ProvinceId.Value, b = 113 }
                                                       equals new { a = J.i_ItemId, b = J.i_GroupId } into J_join
                                 from J in J_join.DefaultIfEmpty()

                                 join K in dbContext.datahierarchy on new { a = H.i_DistrictId.Value, b = 113 }
                                                       equals new { a = K.i_ItemId, b = K.i_GroupId } into K_join
                                 from K in K_join.DefaultIfEmpty()

                                 join L in dbContext.systemparameter on new { a = H.i_TypeOfInsuranceId.Value, b = 188 }
                                                      equals new { a = L.i_ParameterId, b = L.i_GroupId } into L_join
                                 from L in L_join.DefaultIfEmpty()

                                 join M in dbContext.systemparameter on new { a = H.i_MaritalStatusId.Value, b = 101 }
                                              equals new { a = M.i_ParameterId, b = M.i_GroupId } into M_join
                                 from M in M_join.DefaultIfEmpty()

                                 join N in dbContext.datahierarchy on new { a = H.i_LevelOfId.Value, b = 108 }
                                                 equals new { a = N.i_ItemId, b = N.i_GroupId } into N_join
                                 from N in N_join.DefaultIfEmpty()


                                 //join C1 in dbContext.organization on B.v_EmployerOrganizationId equals C1.v_OrganizationId into C1_join
                                 //from C1 in C1_join.DefaultIfEmpty()


                                 //join su in dbContext.systemuser on A.i_UpdateUserMedicalAnalystId.Value equals su.i_SystemUserId into su_join
                                 //from su in su_join.DefaultIfEmpty()

                                 //join pr in dbContext.professional on su.v_PersonId equals pr.v_PersonId into pr_join
                                 //from pr in pr_join.DefaultIfEmpty()


                                 //join P1 in dbContext.person on new { a = pr.v_PersonId }
                                 //        equals new { a = P1.v_PersonId } into P1_join
                                 //from P1 in P1_join.DefaultIfEmpty()

                                 join O in dbContext.systemparameter on new { a = 134, b = A.i_MacId.Value }
                                                        equals new { a = O.i_GroupId, b = O.i_ParameterId } into O_join
                                 from O in O_join.DefaultIfEmpty()

                                 // Examen fisico *******************************************************************
                                 join sc in dbContext.servicecomponent on new { a = pstrServiceId, b = exFisicoId }
                                                          equals new { a = sc.v_ServiceId, b = sc.v_ComponentId } into sc_join
                                 from sc in sc_join.DefaultIfEmpty()

                                 join E1 in dbContext.systemuser on sc.i_ApprovedUpdateUserId equals E1.i_SystemUserId into E1_join
                                 from E1 in E1_join.DefaultIfEmpty()

                                 join F1 in dbContext.professional on E1.v_PersonId equals F1.v_PersonId into F1_join
                                 from F1 in F1_join.DefaultIfEmpty()

                                 join per in dbContext.person on new { a = E1.v_PersonId }
                                      equals new { a = per.v_PersonId } into per_join
                                 from per in per_join.DefaultIfEmpty()

                                 //// Examen fisico 7C *******************************************************************
                                 //join sc1 in dbContext.servicecomponent on new { a = pstrServiceId, b = exFisico7C }
                                 //                                   equals new { a = sc1.v_ServiceId, b = sc1.v_ComponentId } into sc1_join
                                 //from sc1 in sc1_join.DefaultIfEmpty()

                                 //join su7c in dbContext.systemuser on sc1.i_ApprovedUpdateUserId equals su7c.i_SystemUserId into su7c_join
                                 //from su7c in su7c_join.DefaultIfEmpty()

                                 //join p7c in dbContext.professional on su7c.v_PersonId equals p7c.v_PersonId into p7c_join
                                 //from p7c in p7c_join.DefaultIfEmpty()

                                 //join per7c in dbContext.person on new { a = su7c.v_PersonId }
                                 //       equals new { a = per7c.v_PersonId } into per7c_join
                                 //from per7c in per7c_join.DefaultIfEmpty()

                                 //******************************************************************************

                                 where A.v_ServiceId == pstrServiceId

                                 select new ServiceList
                                 {
                                     //-----------------CABECERA---------------------------------
                                     v_PersonId = H.v_PersonId,
                                     v_ServiceId = A.v_ServiceId,
                                     d_ServiceDate = A.d_ServiceDate,
                                     i_DiaV = A.d_ServiceDate.Value.Day,
                                     i_MesV = A.d_ServiceDate.Value.Month,
                                     i_AnioV = A.d_ServiceDate.Value.Year,
                                     i_EsoTypeId = B.i_EsoTypeId.Value, // tipo de ESO : Pre-Ocupacional ,  Periodico, etc 
                                     b_Photo = H.b_PersonImage,
                                     //---------------DATOS DE LA EMPRESA--------------------------------
                                     EmpresaTrabajo = C1.v_Name,
                                     //EmpresaEmpleadora = C1.v_Name,
                                     RubroEmpresaTrabajo = D.v_Value1,
                                     DireccionEmpresaTrabajo = C.v_Address,
                                     DepartamentoEmpresaTrabajo = E.v_Value1,
                                     ProvinciaEmpresaTrabajo = F.v_Value1,
                                     DistritoEmpresaTrabajo = G.v_Value1,
                                     v_CurrentOccupation = H.v_CurrentOccupation,
                                     EmpresaFacturacion = C1.v_Name,
                                     //---------------DATOS DE FILIACIÓN TRABAJADOR--------------------------------
                                     i_DocTypeId = H.i_DocTypeId.Value,
                                     v_Pacient = H.v_FirstName + " " + H.v_FirstLastName + " " + H.v_SecondLastName,
                                     d_BirthDate = H.d_Birthdate,
                                     i_DiaN = H.d_Birthdate.Value.Day,
                                     i_MesN = H.d_Birthdate.Value.Month,
                                     i_AnioN = H.d_Birthdate.Value.Year,
                                     v_DocNumber = H.v_DocNumber,
                                     v_AdressLocation = H.v_AdressLocation,

                                     DepartamentoPaciente = I.v_Value1,
                                     ProvinciaPaciente = J.v_Value1,
                                     DistritoPaciente = K.v_Value1,
                                     i_ResidenceInWorkplaceId = H.i_ResidenceInWorkplaceId.Value,
                                     v_ResidenceTimeInWorkplace = H.v_ResidenceTimeInWorkplace,
                                     i_TypeOfInsuranceId = H.i_TypeOfInsuranceId.Value,
                                     Email = H.v_Mail,
                                     Telefono = H.v_TelephoneNumber,
                                     EstadoCivil = M.v_Value1,
                                     GradoInstruccion = N.v_Value1,
                                     v_Story = A.v_Story,
                                     i_AptitudeStatusId = A.i_AptitudeStatusId,
                                     d_GlobalExpirationDate = A.d_GlobalExpirationDate,
                                     v_MainSymptom = A.v_MainSymptom,

                                     HijosVivos = H.i_NumberLivingChildren,
                                     HijosMuertos = H.i_NumberDeadChildren,
                                     HijosDependientes = H.i_NumberDependentChildren,

                                     v_BirthPlace = H.v_BirthPlace,
                                     i_PlaceWorkId = H.i_PlaceWorkId.Value,
                                     v_ExploitedMineral = H.v_ExploitedMineral,
                                     i_AltitudeWorkId = H.i_AltitudeWorkId.Value,
                                     v_EmergencyPhone = H.v_EmergencyPhone,
                                     i_SexTypeId = H.i_SexTypeId,
                                     i_MaritalStatusId = H.i_MaritalStatusId.Value,
                                     i_LevelOfId = H.i_LevelOfId.Value,
                                     FirmaTrabajador = H.b_RubricImage,
                                     HuellaTrabajador = H.b_FingerPrintImage,

                                     //Datos del Doctor
                                     //FirmaDoctor = pr.b_SignatureImage,
                                     FirmaDoctor = F1.b_SignatureImage,//F1.b_SignatureImage == null ? p7c.b_SignatureImage : F1.b_SignatureImage,
                                     //NombreDoctor = P1.v_FirstName + " " + P1.v_FirstLastName + " " + P1.v_SecondLastName,
                                     NombreDoctor = per.v_FirstName + " " + per.v_FirstLastName + " " + per.v_SecondLastName,//per.v_FirstName == "" ? per7c.v_FirstName + " " + per7c.v_FirstLastName + " " + per7c.v_SecondLastName : per.v_FirstName + " " + per.v_FirstLastName + " " + per.v_SecondLastName,
                                     //CMP = pr.v_ProfessionalCode,
                                     CMP = F1.v_ProfessionalCode,// == null ? p7c.v_ProfessionalCode : F1.v_ProfessionalCode,

                                     d_Fur = A.d_Fur,
                                     v_CatemenialRegime = A.v_CatemenialRegime,
                                     i_MacId = A.i_MacId,
                                     v_Mac = O.v_Value1,

                                     // Antecedentes ginecologicos
                                     d_PAP = A.d_PAP.Value,
                                     d_Mamografia = A.d_Mamografia.Value,
                                     v_CiruGine = A.v_CiruGine,
                                     v_Gestapara = A.v_Gestapara,
                                     v_Menarquia = A.v_Menarquia,
                                     v_Findings = A.v_Findings,


                                 });

                var verificaobj = objEntity.ToList();

                var sql = (from a in objEntity.ToList()
                           select new ServiceList
                           {
                               //-----------------CABECERA---------------------------------
                               v_ServiceId = a.v_ServiceId,
                               d_ServiceDate = a.d_ServiceDate,
                               i_DiaV = a.d_ServiceDate.Value.Day,
                               i_MesV = a.d_ServiceDate.Value.Month,
                               i_AnioV = a.d_ServiceDate.Value.Year,
                               i_EsoTypeId = a.i_EsoTypeId, // tipo de ESO : Pre-Ocupacional ,  Periodico, etc 
                               //---------------DATOS DE LA EMPRESA--------------------------------
                               EmpresaTrabajo = a.EmpresaTrabajo,
                               EmpresaEmpleadora = a.EmpresaEmpleadora,
                               RubroEmpresaTrabajo = a.RubroEmpresaTrabajo,
                               DireccionEmpresaTrabajo = a.DireccionEmpresaTrabajo,
                               DepartamentoEmpresaTrabajo = a.DepartamentoEmpresaTrabajo,
                               ProvinciaEmpresaTrabajo = a.ProvinciaEmpresaTrabajo,
                               DistritoEmpresaTrabajo = a.DistritoEmpresaTrabajo,
                               v_CurrentOccupation = a.v_CurrentOccupation,
                               EmpresaFacturacion = a.EmpresaFacturacion,
                               //---------------DATOS DE FILIACIÓN TRABAJADOR--------------------------------
                               i_DocTypeId = a.i_DocTypeId,
                               v_Pacient = a.v_Pacient,
                               d_BirthDate = a.d_BirthDate,
                               i_DiaN = a.i_DiaN,
                               i_MesN = a.i_MesN,
                               i_AnioN = a.i_AnioN,
                               i_Edad = GetAge(a.d_BirthDate.Value),
                               //i_Edad =30,
                               v_DocNumber = a.v_DocNumber,
                               v_AdressLocation = a.v_AdressLocation,
                               DepartamentoPaciente = a.DepartamentoPaciente,
                               ProvinciaPaciente = a.ProvinciaPaciente,
                               DistritoPaciente = a.DistritoPaciente,
                               i_ResidenceInWorkplaceId = a.i_ResidenceInWorkplaceId,
                               v_ResidenceTimeInWorkplace = a.v_ResidenceTimeInWorkplace,
                               i_TypeOfInsuranceId = a.i_TypeOfInsuranceId,
                               Email = a.Email,
                               Telefono = a.Telefono,
                               EstadoCivil = a.EstadoCivil,
                               GradoInstruccion = a.GradoInstruccion,
                               v_Story = a.v_Story,
                               i_AptitudeStatusId = a.i_AptitudeStatusId,
                               v_OwnerOrganizationName = (from n in dbContext.organization
                                                          where n.v_OrganizationId == Constants.OWNER_ORGNIZATION_ID
                                                          select n.v_Name + " " + n.v_Address).SingleOrDefault<string>(),

                               HijosVivos = a.HijosVivos,
                               HijosMuertos = a.HijosMuertos,
                               HijosDependientes = a.HijosDependientes,
                               v_BirthPlace = a.v_BirthPlace,
                               i_PlaceWorkId = a.i_PlaceWorkId,
                               v_ExploitedMineral = a.v_ExploitedMineral,
                               i_AltitudeWorkId = a.i_AltitudeWorkId,
                               v_EmergencyPhone = a.v_EmergencyPhone,
                               i_SexTypeId = a.i_SexTypeId,
                               i_MaritalStatusId = a.i_MaritalStatusId,
                               i_LevelOfId = a.i_LevelOfId,

                               FirmaTrabajador = a.FirmaTrabajador,
                               HuellaTrabajador = a.HuellaTrabajador,

                               //Datos del Doctor
                               FirmaDoctor = a.FirmaDoctor,
                               NombreDoctor = a.NombreDoctor,
                               CMP = a.CMP,

                               d_Fur = a.d_Fur,
                               v_CatemenialRegime = a.v_CatemenialRegime,
                               i_MacId = a.i_MacId,
                               v_Mac = a.v_Mac,

                               //// Antecedentes ginecologicos
                               d_PAP = a.d_PAP,
                               d_Mamografia = a.d_Mamografia,
                               v_CiruGine = a.v_CiruGine,
                               v_Gestapara = a.v_Gestapara,
                               v_Menarquia = a.v_Menarquia,
                               v_Findings = a.v_Findings,

                           }).FirstOrDefault();

                return sql;
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        #region Info Cabecera / Anamnesis  del sericio

        public ServiceList GetServicePersonData(ref OperationResult pobjOperationResult, string pstrServiceId)
        {
            //mon.IsActive = true;
            var isDeleted = 0;

            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                var query = from A in dbContext.service
                            join B in dbContext.systemparameter on new { a = A.i_ServiceStatusId.Value, b = 125 }
                                     equals new { a = B.i_ParameterId, b = B.i_GroupId } into B_join  // ESTADO SERVICIO
                            from B in B_join.DefaultIfEmpty()

                            join G in dbContext.systemparameter on new { a = A.i_AptitudeStatusId.Value, b = 124 } // ESTADO APTITUD ESO 
                                    equals new { a = G.i_ParameterId, b = G.i_GroupId } into J4_join
                            from G in J4_join.DefaultIfEmpty()

                            join J1 in dbContext.systemparameter on new { a = 119, b = A.i_MasterServiceId.Value }  // DESCRIPCION DEL SERVICIO
                                                       equals new { a = J1.i_GroupId, b = J1.i_ParameterId } into J1_join
                            from J1 in J1_join.DefaultIfEmpty()

                            join J2 in dbContext.systemparameter on new { a = 119, b = J1.i_ParentParameterId.Value } // TIPO DE SERVICIO
                                                      equals new { a = J2.i_GroupId, b = J2.i_ParameterId } into J2_join
                            from J2 in J2_join.DefaultIfEmpty()

                            join D in dbContext.person on A.v_PersonId equals D.v_PersonId

                            join J in dbContext.systemparameter on new { a = D.i_SexTypeId.Value, b = 100 }
                                               equals new { a = J.i_ParameterId, b = J.i_GroupId } into J_join // GENERO
                            from J in J_join.DefaultIfEmpty()

                            join E in dbContext.protocol on A.v_ProtocolId equals E.v_ProtocolId

                            join F in dbContext.groupoccupation on E.v_GroupOccupationId equals F.v_GroupOccupationId into J5_join // GENERO
                            from F in J5_join.DefaultIfEmpty()

                            join H in dbContext.systemparameter on new { a = E.i_EsoTypeId.Value, b = 118 }
                                                equals new { a = H.i_ParameterId, b = H.i_GroupId } into J3_join  // TIPO ESO [ESOA,ESOR,ETC]
                            from H in J3_join.DefaultIfEmpty()

                            where (A.v_ServiceId == pstrServiceId) &&
                                  (A.i_IsDeleted == isDeleted)

                            select new ServiceList
                            {
                                v_ServiceId = A.v_ServiceId,
                                v_ProtocolId = A.v_ProtocolId,
                                v_ProtocolName = E.v_Name,
                                v_PersonId = D.v_PersonId,
                                v_FirstName = D.v_FirstName,
                                v_FirstLastName = D.v_FirstLastName,
                                v_SecondLastName = D.v_SecondLastName,
                                d_BirthDate = D.d_Birthdate,
                                i_SexTypeId = D.i_SexTypeId,
                                v_ServiceStatusName = B.v_Value1,
                                i_AptitudeStatusId = A.i_AptitudeStatusId,
                                d_GlobalExpirationDate = A.d_GlobalExpirationDate.Value,
                                d_ObsExpirationDate = A.d_ObsExpirationDate,
                                d_ServiceDate = A.d_ServiceDate,
                                v_MasterServiceName = J1.v_Value1,
                                v_ServiceTypeName = J2.v_Value1,
                                i_MasterServiceId = A.i_MasterServiceId.Value,
                                v_GroupOcupationName = F.v_Name,
                                v_EsoTypeName = H.v_Value1,
                                i_ServiceTypeId = E.i_MasterServiceTypeId.Value,
                                v_GenderName = J.v_Value1,

                                i_HasSymptomId = A.i_HasSymptomId,
                                v_MainSymptom = A.v_MainSymptom,
                                i_TimeOfDisease = A.i_TimeOfDisease,
                                i_TimeOfDiseaseTypeId = A.i_TimeOfDiseaseTypeId,
                                v_Story = A.v_Story,
                                i_DreamId = A.i_DreamId,
                                i_UrineId = A.i_UrineId,
                                i_DepositionId = A.i_DepositionId,
                                i_AppetiteId = A.i_AppetiteId,
                                i_ThirstId = A.i_ThirstId,
                                d_Fur = A.d_Fur.Value,
                                v_CatemenialRegime = A.v_CatemenialRegime,
                                i_MacId = A.i_MacId,
                                i_DestinationMedicationId = A.i_DestinationMedicationId,
                                i_TransportMedicationId = (int)A.i_TransportMedicationId,
                                i_HasMedicalBreakId = A.i_HasMedicalBreakId,
                                i_HasRestrictionId = A.i_HasRestrictionId,
                                d_MedicalBreakStartDate = A.d_MedicalBreakStartDate,
                                d_MedicalBreakEndDate = A.d_MedicalBreakEndDate,
                                d_StartDateRestriction = A.d_StartDateRestriction,
                                d_EndDateRestriction = A.d_EndDateRestriction,
                                v_GeneralRecomendations = A.v_GeneralRecomendations,
                                i_IsNewControl = A.i_IsNewControl,
                                //b_PersonImage = D.b_PersonImage,
                                i_HazInterconsultationId = A.i_HazInterconsultationId,
                                d_NextAppointment = A.d_NextAppointment,
                                i_SendToTracking = A.i_SendToTracking,
                                v_CurrentOccupation = D.v_CurrentOccupation,
                                d_PAP = A.d_PAP.Value,
                                d_Mamografia = A.d_Mamografia.Value,
                                v_CiruGine = A.v_CiruGine,
                                v_Gestapara = A.v_Gestapara,
                                v_Menarquia = A.v_Menarquia,
                                v_Findings = A.v_Findings,
                                i_EsoTypeId = E.i_EsoTypeId,
                                Sede = A.v_Sede,
                                v_DocNumber = D.v_DocNumber,
                                v_OrganizationId = E.v_CustomerOrganizationId
                            };

                ServiceList objData = query.FirstOrDefault();
                pobjOperationResult.Success = 1;
                return objData;
            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
                return null;
            }
        }

        public ServiceList GetServicePersonDataReport(string pstrServiceId)
        {
            //mon.IsActive = true;
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                var query = from A in dbContext.service
                            join B in dbContext.systemparameter on new { a = A.i_ServiceStatusId.Value, b = 125 }
                                     equals new { a = B.i_ParameterId, b = B.i_GroupId }  // ESTADO SERVICIO

                            join G in dbContext.systemparameter on new { a = A.i_AptitudeStatusId.Value, b = 124 } // ESTADO APTITUD ESO 
                                    equals new { a = G.i_ParameterId, b = G.i_GroupId } into J4_join
                            from G in J4_join.DefaultIfEmpty()

                            join J1 in dbContext.systemparameter on new { a = 119, b = A.i_MasterServiceId.Value }  // DESCRIPCION DEL SERVICIO
                                                       equals new { a = J1.i_GroupId, b = J1.i_ParameterId } into J1_join
                            from J1 in J1_join.DefaultIfEmpty()

                            join J2 in dbContext.systemparameter on new { a = 119, b = J1.i_ParentParameterId.Value } // TIPO DE SERVICIO
                                                      equals new { a = J2.i_GroupId, b = J2.i_ParameterId } into J2_join
                            from J2 in J2_join.DefaultIfEmpty()

                            //join C in dbContext.component on A.v_ComponentId equals C.v_ComponentId
                            join D in dbContext.person on A.v_PersonId equals D.v_PersonId
                            join J in dbContext.systemparameter on new { a = D.i_SexTypeId.Value, b = 100 }
                                               equals new { a = J.i_ParameterId, b = J.i_GroupId }  // GENERO
                            join E in dbContext.protocol on A.v_ProtocolId equals E.v_ProtocolId
                            join F in dbContext.groupoccupation on E.v_GroupOccupationId equals F.v_GroupOccupationId

                            join H in dbContext.systemparameter on new { a = E.i_EsoTypeId.Value, b = 118 }
                                                equals new { a = H.i_ParameterId, b = H.i_GroupId } into J3_join  // TIPO ESO [ESOA,ESOR,ETC]
                            from H in J3_join.DefaultIfEmpty()

                            where A.v_ServiceId == pstrServiceId && A.i_IsDeleted == 0
                            select new ServiceList
                            {
                                v_ServiceId = A.v_ServiceId,
                                v_ProtocolId = A.v_ProtocolId,
                                v_ProtocolName = E.v_Name,
                                v_PersonId = D.v_PersonId,
                                v_FirstName = D.v_FirstName,
                                v_FirstLastName = D.v_FirstLastName,
                                v_SecondLastName = D.v_SecondLastName,
                                d_BirthDate = D.d_Birthdate,
                                i_SexTypeId = D.i_SexTypeId,
                                v_ServiceStatusName = B.v_Value1,
                                i_AptitudeStatusId = A.i_AptitudeStatusId,
                                d_GlobalExpirationDate = A.d_GlobalExpirationDate.Value,
                                d_ObsExpirationDate = A.d_ObsExpirationDate,
                                d_ServiceDate = A.d_ServiceDate,
                                v_MasterServiceName = J1.v_Value1,
                                v_ServiceTypeName = J2.v_Value1,
                                i_MasterServiceId = A.i_MasterServiceId.Value,
                                v_GroupOcupationName = F.v_Name,
                                v_EsoTypeName = H.v_Value1,
                                i_ServiceTypeId = E.i_MasterServiceTypeId.Value,
                                v_GenderName = J.v_Value1,

                                i_HasSymptomId = A.i_HasSymptomId,
                                v_MainSymptom = A.v_MainSymptom,
                                i_TimeOfDisease = A.i_TimeOfDisease,
                                i_TimeOfDiseaseTypeId = A.i_TimeOfDiseaseTypeId,
                                v_Story = A.v_Story,
                                i_DreamId = A.i_DreamId,
                                i_UrineId = A.i_UrineId,
                                i_DepositionId = A.i_DepositionId,
                                i_AppetiteId = A.i_AppetiteId,
                                i_ThirstId = A.i_ThirstId,
                                d_Fur = A.d_Fur.Value,
                                v_CatemenialRegime = A.v_CatemenialRegime,
                                i_MacId = A.i_MacId,
                                i_DestinationMedicationId = A.i_DestinationMedicationId,
                                i_TransportMedicationId = (int)A.i_TransportMedicationId,
                                i_HasMedicalBreakId = A.i_HasMedicalBreakId,
                                i_HasRestrictionId = A.i_HasRestrictionId,
                                d_MedicalBreakStartDate = A.d_MedicalBreakStartDate,
                                d_MedicalBreakEndDate = A.d_MedicalBreakEndDate,
                                d_StartDateRestriction = A.d_StartDateRestriction,
                                d_EndDateRestriction = A.d_EndDateRestriction,
                                v_GeneralRecomendations = A.v_GeneralRecomendations,
                                i_IsNewControl = A.i_IsNewControl,
                                b_PersonImage = D.b_PersonImage,
                                i_HazInterconsultationId = A.i_HazInterconsultationId,
                                d_NextAppointment = A.d_NextAppointment,
                                i_SendToTracking = A.i_SendToTracking,
                                v_CurrentOccupation = D.v_CurrentOccupation,
                                d_PAP = A.d_PAP.Value,
                                d_Mamografia = A.d_Mamografia.Value,
                                v_CiruGine = A.v_CiruGine,
                                v_Gestapara = A.v_Gestapara,
                                v_Menarquia = A.v_Menarquia,
                                v_Findings = A.v_Findings
                            };

                ServiceList objData = query.FirstOrDefault();

                return objData;
            }
            catch (Exception ex)
            {

                return null;
            }
        }

        #endregion

        #endregion

        #region Service Component

        public void AddServiceComponent(ref OperationResult pobjOperationResult, servicecomponentDto pobjDtoEntity, List<string> ClientSession)
        {
            //mon.IsActive = true;
            string NewId = "(No generado)";
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
                servicecomponent objEntity = servicecomponentAssembler.ToEntity(pobjDtoEntity);

                objEntity.d_InsertDate = DateTime.Now;
                objEntity.i_InsertUserId = Int32.Parse(ClientSession[2]);
                objEntity.i_IsDeleted = 0;
                // Autogeneramos el Pk de la tabla
                int intNodeId = int.Parse(ClientSession[0]);
                NewId = Common.Utils.GetNewId(intNodeId, Utils.GetNextSecuentialId(intNodeId, 24), "SC");
                objEntity.v_ServiceComponentId = NewId;

                dbContext.AddToservicecomponent(objEntity);
                dbContext.SaveChanges();

                pobjOperationResult.Success = 1;
                // Llenar entidad Log
                LogBL.SaveLog(ClientSession[0], ClientSession[1], ClientSession[2], LogEventType.CREACION, "COMPONENTE DE SERVICIO", "v_ServiceComponentId=" + NewId.ToString(), Success.Ok, null);
                return;
            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
                // Llenar entidad Log
                LogBL.SaveLog(ClientSession[0], ClientSession[1], ClientSession[2], LogEventType.CREACION, "COMPONENTE DE SERVICIO", "v_ServiceComponentId=" + NewId.ToString(), Success.Failed, pobjOperationResult.ExceptionMessage);
                return;
            }
        }

        public List<ServiceComponentList> GetServiceComponentsRoadMap(ref OperationResult pobjOperationResult, string pstrServiceId)
        {
            //mon.IsActive = true;
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
                var query = from A in dbContext.servicecomponent
                            join B in dbContext.systemparameter on new { a = A.i_ServiceComponentStatusId.Value, b = 127 } equals new { a = B.i_ParameterId, b = B.i_GroupId }
                            join C in dbContext.component on A.v_ComponentId equals C.v_ComponentId
                            join D in dbContext.systemparameter on new { a = A.i_QueueStatusId.Value, b = 128 } equals new { a = D.i_ParameterId, b = D.i_GroupId }
                            join E in dbContext.service on A.v_ServiceId equals E.v_ServiceId
                            join F in dbContext.systemparameter on new { a = C.i_CategoryId.Value, b = 116 }  // Categoria
                                   equals new { a = F.i_ParameterId, b = F.i_GroupId } into F_join
                            from F in F_join.DefaultIfEmpty()
                            where (A.v_ServiceId == pstrServiceId) &&
                                  (A.i_IsDeleted == 0) &&
                                  (A.i_IsRequiredId == 1)
                            orderby F.v_Value1, C.v_Name
                            select new ServiceComponentList
                            {
                                v_ComponentId = A.v_ComponentId,
                                v_ComponentName = C.v_Name,
                                i_ServiceComponentStatusId = A.i_ServiceComponentStatusId.Value,
                                v_ServiceComponentStatusName = B.v_Value1,
                                d_StartDate = A.d_StartDate.Value,
                                d_EndDate = A.d_EndDate.Value,
                                i_QueueStatusId = A.i_QueueStatusId.Value,
                                v_QueueStatusName = D.v_Value1,
                                ServiceStatusId = E.i_ServiceStatusId.Value,
                                v_Motive = E.v_Motive,
                                v_CategoryName = C.i_CategoryId.Value == -1 ? C.v_Name : F.v_Value1
                            };

                List<ServiceComponentList> objData = query.ToList();
                pobjOperationResult.Success = 1;
                return objData;
            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
                return null;
            }
        }

        public List<ServiceComponentList> GetServiceComponentsPreLiquidation(ref OperationResult pobjOperationResult, string pstrServiceId)
        {
            //mon.IsActive = true;
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
                var query = from A in dbContext.servicecomponent
                            join B in dbContext.systemparameter on new { a = A.i_ServiceComponentStatusId.Value, b = 127 } equals new { a = B.i_ParameterId, b = B.i_GroupId }
                            join C in dbContext.component on A.v_ComponentId equals C.v_ComponentId
                            join D in dbContext.systemparameter on new { a = A.i_QueueStatusId.Value, b = 128 } equals new { a = D.i_ParameterId, b = D.i_GroupId }
                            join E in dbContext.service on A.v_ServiceId equals E.v_ServiceId
                            join F in dbContext.systemparameter on new { a = C.i_CategoryId.Value, b = 116 }  // Categoria
                                   equals new { a = F.i_ParameterId, b = F.i_GroupId } into F_join
                            from F in F_join.DefaultIfEmpty()
                            where (A.v_ServiceId == pstrServiceId) &&
                                  (A.i_IsDeleted == 0) &&
                                  (A.i_IsRequiredId == (int)SiNo.SI)

                            orderby F.v_Value1, C.v_Name

                            let InternalGroup = (A.v_ComponentId == Constants.GINECOLOGIA_ID ? "Ginecología" :
                                                  A.v_ComponentId == Constants.EXAMEN_MAMA_ID ? "Ginecología" :
                                                  A.v_ComponentId == Constants.EXAMEN_FISICO_ID ? "Medicina" :
                                                  A.v_ComponentId == Constants.ANTROPOMETRIA_ID ? "Medicina" :
                                                  A.v_ComponentId == Constants.FUNCIONES_VITALES_ID ? "Medicina" :
                                                  A.v_ComponentId == Constants.ALTURA_ESTRUCTURAL_ID ? "Medicina" :
                                                  A.v_ComponentId == Constants.ALTURA_GEOGRAFICA_ID ? "Medicina" :
                                                  A.v_ComponentId == Constants.OSTEO_MUSCULAR_ID ? "Medicina" :
                                                  A.v_ComponentId == Constants.TAMIZAJE_DERMATOLOGIO_ID ? "Medicina" :
                                                  A.v_ComponentId == Constants.TEST_ROMBERG_ID ? "Medicina" :
                                                  A.v_ComponentId == Constants.ODONTOGRAMA_ID ? "Odontología" :
                                                  A.v_ComponentId == Constants.OFTALMOLOGIA_ID ? "Oftalmología" :
                                                  A.v_ComponentId == Constants.PAPANICOLAU_ID ? "Papanicolau" :
                                                  string.Empty
                                                 )

                            let InternalCode = (A.v_ComponentId == Constants.GINECOLOGIA_ID ? "1314" :
                                                 A.v_ComponentId == Constants.EXAMEN_MAMA_ID ? "1314" :
                                                 A.v_ComponentId == Constants.EXAMEN_FISICO_ID ? "1314" :
                                                 A.v_ComponentId == Constants.ANTROPOMETRIA_ID ? "1314" :
                                                 A.v_ComponentId == Constants.FUNCIONES_VITALES_ID ? "1314" :
                                                 A.v_ComponentId == Constants.ALTURA_ESTRUCTURAL_ID ? "1314" :
                                                 A.v_ComponentId == Constants.ALTURA_GEOGRAFICA_ID ? "1314" :
                                                 A.v_ComponentId == Constants.OSTEO_MUSCULAR_ID ? "1314" :
                                                 A.v_ComponentId == Constants.TAMIZAJE_DERMATOLOGIO_ID ? "1314" :
                                                 A.v_ComponentId == Constants.TEST_ROMBERG_ID ? "1314" :
                                                 A.v_ComponentId == Constants.ODONTOGRAMA_ID ? "1532" :
                                                 A.v_ComponentId == Constants.OFTALMOLOGIA_ID ? "1314" :
                                                 A.v_ComponentId == Constants.PAPANICOLAU_ID ? "69" :
                                                 string.Empty
                                                )

                            select new ServiceComponentList
                            {
                                v_ComponentId = A.v_ComponentId,
                                v_ComponentName = C.v_Name,
                                i_ServiceComponentStatusId = A.i_ServiceComponentStatusId.Value,
                                v_ServiceComponentStatusName = B.v_Value1,
                                d_StartDate = A.d_StartDate.Value,
                                d_EndDate = A.d_EndDate.Value,
                                i_QueueStatusId = A.i_QueueStatusId.Value,
                                v_QueueStatusName = D.v_Value1,
                                ServiceStatusId = E.i_ServiceStatusId.Value,
                                v_Motive = E.v_Motive,
                                v_CategoryName = C.i_CategoryId.Value == -1 ? C.v_Name : F.v_Value1,
                                r_Price = A.r_Price,
                                v_InternalGroup = InternalGroup,
                                v_InternalCode = InternalCode,
                                i_StatusLiquidation = E.i_InsertUserOccupationalMedicalId
                            };

                List<ServiceComponentList> objData = query.ToList();
                pobjOperationResult.Success = 1;
                return objData;
            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
                return null;
            }
        }

        public List<ServiceComponentList> GetServiceComponents(ref OperationResult pobjOperationResult, string pstrServiceId)
        {

            int isDeleted = (int)SiNo.NO;
            int isRequired = (int)SiNo.SI;

            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                var query = (from A in dbContext.servicecomponent
                             join B in dbContext.systemparameter on new { a = A.i_ServiceComponentStatusId.Value, b = 127 }
                                      equals new { a = B.i_ParameterId, b = B.i_GroupId }
                             join C in dbContext.component on A.v_ComponentId equals C.v_ComponentId
                             join D in dbContext.systemparameter on new { a = A.i_QueueStatusId.Value, b = 128 }
                                      equals new { a = D.i_ParameterId, b = D.i_GroupId }
                             join E in dbContext.service on A.v_ServiceId equals E.v_ServiceId
                             join F in dbContext.systemparameter on new { a = C.i_CategoryId.Value, b = 116 }
                                      equals new { a = F.i_ParameterId, b = F.i_GroupId } into F_join
                             from F in F_join.DefaultIfEmpty()

                             where A.v_ServiceId == pstrServiceId &&
                                   A.i_IsDeleted == isDeleted &&
                                   A.i_IsRequiredId == isRequired

                             select new ServiceComponentList
                             {
                                 v_ComponentId = A.v_ComponentId,
                                 v_ComponentName = C.v_Name,
                                 i_ServiceComponentStatusId = A.i_ServiceComponentStatusId.Value,
                                 v_ServiceComponentStatusName = B.v_Value1,
                                 d_StartDate = A.d_StartDate.Value,
                                 d_EndDate = A.d_EndDate.Value,
                                 i_QueueStatusId = A.i_QueueStatusId.Value,
                                 v_QueueStatusName = D.v_Value1,
                                 ServiceStatusId = E.i_ServiceStatusId.Value,
                                 v_Motive = E.v_Motive,
                                 i_CategoryId = C.i_CategoryId.Value,
                                 v_CategoryName = C.i_CategoryId.Value == -1 ? C.v_Name : F.v_Value1,
                                 v_ServiceId = E.v_ServiceId,
                                 v_ServiceComponentId = A.v_ServiceComponentId,
                             });

                var objData = query.AsEnumerable()
                             .Where(s => s.i_CategoryId != -1)
                             .OrderBy(x => x.i_CategoryId);
                //.GroupBy(x => x.i_CategoryId)
                //.Select(group => group.First());

                List<ServiceComponentList> obj = objData.ToList();

                obj.AddRange(query.Where(p => p.i_CategoryId == -1));

                pobjOperationResult.Success = 1;
                return obj;
            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
                return null;
            }
        }

        // Alejandro new
        public List<ServiceComponentList> GetServiceComponentsByRequired(ref OperationResult pobjOperationResult, string pstrServiceId, SiNo requiredId)
        {

            int isDeleted = (int)SiNo.NO;
            int isRequired = (int)requiredId;

            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                var query = (from A in dbContext.servicecomponent
                             join B in dbContext.systemparameter on new { a = A.i_ServiceComponentStatusId.Value, b = 127 }
                                      equals new { a = B.i_ParameterId, b = B.i_GroupId }
                             join C in dbContext.component on A.v_ComponentId equals C.v_ComponentId
                             join D in dbContext.systemparameter on new { a = A.i_QueueStatusId.Value, b = 128 }
                                      equals new { a = D.i_ParameterId, b = D.i_GroupId }
                             join E in dbContext.service on A.v_ServiceId equals E.v_ServiceId
                             join F in dbContext.systemparameter on new { a = C.i_CategoryId.Value, b = 116 }
                                      equals new { a = F.i_ParameterId, b = F.i_GroupId } into F_join
                             from F in F_join.DefaultIfEmpty()

                             where A.v_ServiceId == pstrServiceId &&
                                   A.i_IsDeleted == isDeleted &&
                                   A.i_IsRequiredId == isRequired

                             select new ServiceComponentList
                             {
                                 v_ComponentId = A.v_ComponentId,
                                 v_ComponentName = C.v_Name,
                                 i_ServiceComponentStatusId = A.i_ServiceComponentStatusId.Value,
                                 v_ServiceComponentStatusName = B.v_Value1,
                                 d_StartDate = A.d_StartDate.Value,
                                 d_EndDate = A.d_EndDate.Value,
                                 i_QueueStatusId = A.i_QueueStatusId.Value,
                                 v_QueueStatusName = D.v_Value1,
                                 ServiceStatusId = E.i_ServiceStatusId.Value,
                                 v_Motive = E.v_Motive,
                                 i_CategoryId = C.i_CategoryId,
                                 v_CategoryName = C.i_CategoryId.Value == -1 ? C.v_Name : F.v_Value1,
                                 v_ServiceId = E.v_ServiceId,
                                 v_ServiceComponentId = A.v_ServiceComponentId,
                             });

                var objData = query.AsEnumerable()
                             .Where(s => s.i_CategoryId != -1);
                //.GroupBy(x => x.i_CategoryId)
                //.Select(group => group.First());

                List<ServiceComponentList> obj = objData.ToList();

                obj.AddRange(query.Where(p => p.i_CategoryId == -1));

                var sql = (from sc in dbContext.servicecomponent
                           join c in dbContext.component on sc.v_ComponentId equals c.v_ComponentId
                           where sc.v_ServiceId == pstrServiceId && sc.i_IsRequiredId == isRequired

                           select new ServiceComponentList
                           {
                               i_CategoryId = c.i_CategoryId,
                               v_ServiceComponentId = sc.v_ServiceComponentId,
                               v_ComponentId = sc.v_ComponentId,
                               i_IsRequiredId = sc.i_IsRequiredId
                           }).ToList();

                obj.Sort((x, y) => x.i_CategoryId.Value.CompareTo(y.i_CategoryId.Value));
                sql.Sort((x, y) => x.i_CategoryId.Value.CompareTo(y.i_CategoryId.Value));

                foreach (var item in obj)
                {
                    if (item.i_CategoryId == -1)  // No tiene consultorio / categoria
                    {
                        item.v_ServiceComponentConcatId = item.v_ServiceComponentId;
                        item.v_ComponentConcatId = item.v_ComponentId;
                    }
                    else
                    {
                        var list = sql.FindAll(p => p.i_CategoryId == item.i_CategoryId);
                        item.v_ServiceComponentConcatId = string.Join("|", list.Select(p => p.v_ServiceComponentId));
                        item.v_ComponentConcatId = string.Join("|", list.Select(p => p.v_ComponentId));
                    }

                }

                obj.Sort((x, y) => x.v_CategoryName.CompareTo(y.v_CategoryName));

                pobjOperationResult.Success = 1;
                return obj;
            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
                return null;
            }
        }

        public List<ServiceComponentList> GetServiceComponentsByCategoryExceptLab(ref OperationResult pobjOperationResult, string pstrServiceId)
        {
            int isDeleted = (int)SiNo.NO;
            int isRequired = (int)SiNo.SI;

            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                var query = (from A in dbContext.servicecomponent
                             join B in dbContext.systemparameter on new { a = A.i_ServiceComponentStatusId.Value, b = 127 }
                                      equals new { a = B.i_ParameterId, b = B.i_GroupId }
                             join C in dbContext.component on A.v_ComponentId equals C.v_ComponentId
                             join D in dbContext.systemparameter on new { a = A.i_QueueStatusId.Value, b = 128 }
                                      equals new { a = D.i_ParameterId, b = D.i_GroupId }
                             join E in dbContext.service on A.v_ServiceId equals E.v_ServiceId
                             join F in dbContext.systemparameter on new { a = C.i_CategoryId.Value, b = 116 }
                                      equals new { a = F.i_ParameterId, b = F.i_GroupId } into F_join
                             from F in F_join.DefaultIfEmpty()

                             where A.v_ServiceId == pstrServiceId &&
                                   A.i_IsDeleted == isDeleted &&
                                   A.i_IsRequiredId == isRequired

                             select new ServiceComponentList
                             {
                                 v_ComponentId = A.v_ComponentId,
                                 v_ComponentName = C.v_Name,
                                 i_ServiceComponentStatusId = A.i_ServiceComponentStatusId.Value,
                                 v_ServiceComponentStatusName = B.v_Value1,
                                 d_StartDate = A.d_StartDate.Value,
                                 d_EndDate = A.d_EndDate.Value,
                                 i_QueueStatusId = A.i_QueueStatusId.Value,
                                 v_QueueStatusName = D.v_Value1,
                                 ServiceStatusId = E.i_ServiceStatusId.Value,
                                 v_Motive = E.v_Motive,
                                 i_CategoryId = C.i_CategoryId.Value,
                                 v_CategoryName = C.i_CategoryId.Value == -1 ? C.v_Name : F.v_Value1,
                                 v_ServiceId = E.v_ServiceId
                             });

                var objData = query.AsEnumerable()
                             .Where(s => s.i_CategoryId != -1 && s.i_CategoryId != 1)
                             .OrderBy(x => x.i_CategoryId);
                //.Select(group => group.First());

                List<ServiceComponentList> obj = objData.ToList();

                obj.AddRange(query.Where(p => p.i_CategoryId == -1));
                obj.AddRange(query.Where(p => p.i_CategoryId == 1));
                pobjOperationResult.Success = 1;
                var orden = obj.OrderBy(o => o.i_CategoryId).ToList();
                return orden;
            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
                return null;
            }
        }

        public List<ServiceComponentList> GetServiceComponentsWithoutCategory(ref OperationResult pobjOperationResult, string pstrServiceId)
        {
            int isDeleted = (int)SiNo.NO;
            int isRequired = (int)SiNo.SI;

            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                var query = (from A in dbContext.servicecomponent
                             join B in dbContext.systemparameter on new { a = A.i_ServiceComponentStatusId.Value, b = 127 }
                                      equals new { a = B.i_ParameterId, b = B.i_GroupId }
                             join C in dbContext.component on A.v_ComponentId equals C.v_ComponentId
                             join D in dbContext.systemparameter on new { a = A.i_QueueStatusId.Value, b = 128 }
                                      equals new { a = D.i_ParameterId, b = D.i_GroupId }
                             join E in dbContext.service on A.v_ServiceId equals E.v_ServiceId
                             join F in dbContext.systemparameter on new { a = C.i_CategoryId.Value, b = 116 }
                                      equals new { a = F.i_ParameterId, b = F.i_GroupId } into F_join
                             from F in F_join.DefaultIfEmpty()

                             where A.v_ServiceId == pstrServiceId &&
                                   A.i_IsDeleted == isDeleted &&
                                   A.i_IsRequiredId == isRequired

                             select new ServiceComponentList
                             {
                                 v_ComponentId = A.v_ComponentId,
                                 v_ComponentName = C.v_Name,
                                 i_ServiceComponentStatusId = A.i_ServiceComponentStatusId.Value,
                                 v_ServiceComponentStatusName = B.v_Value1,
                                 d_StartDate = A.d_StartDate.Value,
                                 d_EndDate = A.d_EndDate.Value,
                                 i_QueueStatusId = A.i_QueueStatusId.Value,
                                 v_QueueStatusName = D.v_Value1,
                                 ServiceStatusId = E.i_ServiceStatusId.Value,
                                 v_Motive = E.v_Motive,
                                 i_CategoryId = C.i_CategoryId.Value,
                                 v_CategoryName = C.i_CategoryId.Value == -1 ? C.v_Name : F.v_Value1,
                                 v_ServiceId = E.v_ServiceId
                             });

                var objData = query.AsEnumerable()
                             .Where(s => s.i_CategoryId != -1 && s.i_CategoryId != 1)
                             .GroupBy(x => x.i_CategoryId)
                             .Select(group => group.First());

                List<ServiceComponentList> obj = objData.ToList();

                obj.AddRange(query.Where(p => p.i_CategoryId == -1));
                obj.AddRange(query.Where(p => p.i_CategoryId == 1));
                pobjOperationResult.Success = 1;
                var orden = obj.OrderBy(o => o.i_CategoryId).ToList();
                return orden;
            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
                return null;
            }
        }

        public List<ServiceComponentList> GetServiceComponentsCulminados(ref OperationResult pobjOperationResult, string pstrServiceId)
        {
            //mon.IsActive = true;
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
                var query = (from A in dbContext.servicecomponent
                             join B in dbContext.systemparameter on new { a = A.i_ServiceComponentStatusId.Value, b = 127 }
                                    equals new { a = B.i_ParameterId, b = B.i_GroupId }
                             join C in dbContext.component on A.v_ComponentId equals C.v_ComponentId
                             where (A.v_ServiceId == pstrServiceId) &&
                                   (A.i_IsDeleted == 0) &&
                                   (A.i_IsRequiredId == (int?)SiNo.SI) &&
                                   (A.i_ServiceComponentStatusId != (int)ServiceComponentStatus.Culminado)

                             select new ServiceComponentList
                             {
                                 v_ComponentId = A.v_ComponentId,
                                 v_ComponentName = C.v_Name,
                                 i_ServiceComponentStatusId = A.i_ServiceComponentStatusId.Value,
                                 v_ServiceComponentStatusName = B.v_Value1
                             }).ToList();

                pobjOperationResult.Success = 1;
                return query;
            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
                return null;
            }
        }

        private List<ComponentFieldsList> GetComponentFields(string pstrComponentId, string pstrServiceId)
        {
            SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

            var query = (from A in dbContext.componentfields
                         join B in dbContext.componentfield on A.v_ComponentFieldId equals B.v_ComponentFieldId
                         join J1 in dbContext.datahierarchy on new { a = 105, b = B.i_MeasurementUnitId.Value }  // UNID MEDIDA
                                   equals new { a = J1.i_GroupId, b = J1.i_ItemId } into J1_join
                         from J1 in J1_join.DefaultIfEmpty()
                         orderby B.i_Order
                         where A.v_ComponentId == pstrComponentId &&
                         A.i_IsDeleted == 0 &&
                         B.i_IsDeleted == 0
                         select new ComponentFieldsList
                         {
                             v_ComponentFieldId = A.v_ComponentFieldId,
                             v_ComponentId = A.v_ComponentId,
                             v_TextLabel = B.v_TextLabel,
                             i_LabelWidth = B.i_LabelWidth.Value,
                             v_DefaultText = B.v_DefaultText,
                             i_ControlId = B.i_ControlId.Value,
                             i_GroupId = B.i_GroupId.Value,
                             i_ItemId = B.i_ItemId.Value,
                             i_ControlWidth = B.i_WidthControl.Value,
                             i_HeightControl = B.i_HeightControl.Value,
                             i_MaxLenght = B.i_MaxLenght.Value,
                             i_IsRequired = B.i_IsRequired.Value,
                             i_Column = B.i_Column.Value,
                             v_MeasurementUnitName = J1.v_Value1,
                             i_IsCalculate = B.i_IsCalculate.Value,
                             i_Order = B.i_Order.Value,
                             i_MeasurementUnitId = B.i_MeasurementUnitId.Value,
                             r_ValidateValue1 = B.r_ValidateValue1.Value,
                             r_ValidateValue2 = B.r_ValidateValue2.Value,
                             v_Group = A.v_Group,
                             v_Formula = B.v_Formula

                         }).ToList();


            var q = (from a in query
                     select new ComponentFieldsList
                     {
                         v_ComponentFieldId = a.v_ComponentFieldId,
                         v_ComponentId = a.v_ComponentId,
                         v_TextLabel = a.v_TextLabel,
                         i_LabelWidth = a.i_LabelWidth,
                         v_DefaultText = a.v_DefaultText,
                         i_ControlId = a.i_ControlId,
                         i_GroupId = a.i_GroupId,
                         i_ItemId = a.i_ItemId,
                         i_ControlWidth = a.i_ControlWidth,
                         i_HeightControl = a.i_HeightControl,
                         i_MaxLenght = a.i_MaxLenght,
                         i_IsRequired = a.i_IsRequired,
                         i_Column = a.i_Column,
                         v_MeasurementUnitName = a.v_MeasurementUnitName,
                         i_IsCalculate = a.i_IsCalculate,
                         i_Order = a.i_Order,
                         i_MeasurementUnitId = a.i_MeasurementUnitId,
                         r_ValidateValue1 = a.r_ValidateValue1,
                         r_ValidateValue2 = a.r_ValidateValue2,
                         v_Group = a.v_Group,
                         v_Formula = a.v_Formula,
                         i_HasAutomaticDxId = (from jjj in dbContext.diagnosticrepository
                                               where jjj.v_ComponentFieldId == a.v_ComponentFieldId &&
                                               jjj.v_ServiceId == pstrServiceId &&
                                               jjj.i_IsDeleted == 0
                                               select jjj.v_ComponentFieldId != null ? (int?)SiNo.SI : (int?)SiNo.NO
                                               ).SingleOrDefault()

                     }).ToList();


            Formulate formu = null;
            TargetFieldOfCalculate targetFieldOfCalculate = null;

            foreach (var item in q)
            {
                List<Formulate> formuList = new List<Formulate>();
                List<TargetFieldOfCalculate> targetFieldOfCalculateList = new List<TargetFieldOfCalculate>();

                var find = (from a in q
                            where ((a.v_Formula != null) &&
                                (a.v_Formula.Contains(item.v_ComponentFieldId)))
                            select a).ToList();

                if (find.Count != 0)
                {
                    item.i_IsSourceFieldToCalculate = (int)SiNo.SI;

                    foreach (var f in find)
                    {
                        formu = new Formulate();
                        formu.v_Formula = f.v_Formula;
                        formu.v_TargetFieldOfCalculateId = f.v_ComponentFieldId;
                        formuList.Add(formu);

                        targetFieldOfCalculate = new TargetFieldOfCalculate();
                        targetFieldOfCalculate.v_TargetFieldOfCalculateId = f.v_ComponentFieldId;
                        targetFieldOfCalculateList.Add(targetFieldOfCalculate);
                    }

                    item.Formula = formuList;
                    item.TargetFieldOfCalculateId = targetFieldOfCalculateList;
                }

            }

            return q;

        }

        private List<ComponentFieldValues> GetComponentFieldValues(string pstrComponentFieldId)
        {
            int isDeleted = (int)SiNo.NO;

            SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

            List<ComponentFieldValues> fieldValues = (from A in dbContext.componentfieldvalues

                                                      join ddd in dbContext.diseases on A.v_Diseases equals ddd.v_DiseasesId into J3_join // Diagnosticos
                                                      from ddd in J3_join.DefaultIfEmpty()
                                                      join D in dbContext.componentfields on A.v_ComponentFieldId equals D.v_ComponentFieldId
                                                      join J1 in dbContext.systemuser on new { i_InsertUserId = A.i_InsertUserId.Value }
                                                                                      equals new { i_InsertUserId = J1.i_SystemUserId } into J1_join
                                                      from J1 in J1_join.DefaultIfEmpty()

                                                      join J2 in dbContext.systemuser on new { i_UpdateUserId = A.i_UpdateUserId.Value }
                                                                                      equals new { i_UpdateUserId = J2.i_SystemUserId } into J2_join
                                                      from J2 in J2_join.DefaultIfEmpty()

                                                      where A.v_ComponentFieldId == pstrComponentFieldId &&
                                                      A.i_IsDeleted == isDeleted
                                                      select new ComponentFieldValues
                                                      {
                                                          v_ComponentFieldValuesId = A.v_ComponentFieldValuesId,
                                                          v_ComponentFieldsId = A.v_ComponentFieldId,
                                                          v_AnalyzingValue1 = A.v_AnalyzingValue1,
                                                          v_AnalyzingValue2 = A.v_AnalyzingValue2,
                                                          i_OperatorId = A.i_OperatorId.Value,
                                                          //v_Recommendation = A.v_Recommendation,
                                                          v_LegalStandard = A.v_LegalStandard,
                                                          i_IsAnormal = A.i_IsAnormal,
                                                          i_ValidationMonths = A.i_ValidationMonths,
                                                          v_DiseasesName = ddd.v_Name,
                                                          v_DiseasesId = A.v_Diseases,
                                                          v_ComponentId = D.v_ComponentId
                                                      }).ToList();



            // Carga inicial de Recomendaciones / Restricciones.
            foreach (var fv in fieldValues)
            {
                fv.Recomendations = (from A in dbContext.componentfieldvaluesrecommendation
                                     join B in dbContext.masterrecommendationrestricction on A.v_MasterRecommendationRestricctionId // BOLSA CONFIG. POR M. MENDEZ
                                                                                         equals B.v_MasterRecommendationRestricctionId
                                     join C in dbContext.componentfieldvalues on A.v_ComponentFieldValuesId equals C.v_ComponentFieldValuesId
                                     join D in dbContext.componentfields on C.v_ComponentFieldId equals D.v_ComponentFieldId
                                     where (A.v_ComponentFieldValuesId == fv.v_ComponentFieldValuesId) &&
                                     (A.i_IsDeleted == 0) && (B.i_TypifyingId == (int)Typifying.Recomendaciones)
                                     select new RecomendationList
                                     {
                                         v_MasterRecommendationRestrictionId = A.v_MasterRecommendationRestricctionId,
                                         v_ComponentFieldValuesRecommendationId = A.v_ComponentFieldValuesRecommendationId,
                                         v_ComponentFieldValuesId = A.v_ComponentFieldValuesId,
                                         v_MasterRecommendationId = A.v_MasterRecommendationRestricctionId,
                                         v_RecommendationName = B.v_Name,
                                         i_RecordStatus = (int)RecordStatus.Grabado,
                                         i_RecordType = (int)RecordType.NoTemporal,
                                         v_ComponentId = D.v_ComponentId
                                     }).ToList();



                fv.Restrictions = (from A in dbContext.componentfieldvaluesrestriction
                                   join B in dbContext.masterrecommendationrestricction on A.v_MasterRecommendationRestricctionId
                                                                                         equals B.v_MasterRecommendationRestricctionId
                                   join C in dbContext.componentfieldvalues on A.v_ComponentFieldValuesId equals C.v_ComponentFieldValuesId
                                   join D in dbContext.componentfields on C.v_ComponentFieldId equals D.v_ComponentFieldId
                                   where A.v_ComponentFieldValuesId == fv.v_ComponentFieldValuesId &&
                                   A.i_IsDeleted == 0 && B.i_TypifyingId == (int)Typifying.Restricciones
                                   select new RestrictionList
                                   {
                                       v_ComponentFieldValuesRestrictionId = A.v_ComponentFieldValuesRestrictionId,
                                       v_ComponentFieldValuesId = A.v_ComponentFieldValuesId,
                                       v_MasterRestrictionId = A.v_MasterRecommendationRestricctionId,
                                       v_RestrictionName = B.v_Name,
                                       i_RecordStatus = (int)RecordStatus.Grabado,
                                       i_RecordType = (int)RecordType.NoTemporal,
                                       v_ComponentId = D.v_ComponentId
                                   }).ToList();
            }

            return fieldValues;
        }

        private List<ServiceComponentFieldsList> GetServiceComponentFields(string pstrServiceComponentId, string pstrServiceId)
        {
            var isDeleted = (int)SiNo.NO;
            var isDeleted1 = (int)SiNo.NO;
            string serviceId = pstrServiceId;
            var serviceComponentId = pstrServiceComponentId;

            SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

            #region serviceComponentFieldValues

            var serviceComponentFieldValues = (from s in dbContext.service
                                               join sc in dbContext.servicecomponent on s.v_ServiceId equals sc.v_ServiceId
                                               join scfs in dbContext.servicecomponentfields on sc.v_ServiceComponentId equals scfs.v_ServiceComponentId
                                               join A in dbContext.servicecomponentfieldvalues on scfs.v_ServiceComponentFieldsId equals A.v_ServiceComponentFieldsId

                                               where s.v_ServiceId == pstrServiceId &&
                                                     A.i_IsDeleted == isDeleted

                                               select new ServiceComponentFieldValuesList
                                               {
                                                   v_ComponentFieldId = scfs.v_ComponentFieldId,
                                                   v_ServiceComponentFieldValuesId = A.v_ServiceComponentFieldValuesId,
                                                   v_ComponentFieldValuesId = A.v_ComponentFieldValuesId,
                                                   v_ServiceComponentFieldsId = A.v_ServiceComponentFieldsId,
                                                   v_Value1 = A.v_Value1,
                                                   v_Value2 = A.v_Value2,
                                                   i_Index = A.i_Index,
                                                   i_Value1 = A.i_Value1
                                               }).ToList();

            #endregion

            var serviceComponentFields = (from A in dbContext.servicecomponentfields
                                          join ss in
                                              (from jjj in dbContext.diagnosticrepository
                                               where //(jjj.v_ComponentFieldId == "") &&
                                                     (jjj.v_ServiceId == serviceId) &&
                                                     (jjj.i_IsDeleted == 0)

                                               select new
                                               {
                                                   v_ComponentFieldId = jjj.v_ComponentFieldId,
                                                   i_HasAutomaticDxId = jjj.v_ComponentFieldId != null ? (int?)SiNo.SI : (int?)SiNo.NO
                                               }) on A.v_ComponentFieldId equals ss.v_ComponentFieldId into feePayments

                                          from ss in feePayments.DefaultIfEmpty()

                                          where (A.v_ServiceComponentId == serviceComponentId) &&
                                                (A.i_IsDeleted == isDeleted)

                                          select new ServiceComponentFieldsList
                                          {
                                              v_ServiceComponentFieldsId = A.v_ServiceComponentFieldsId,
                                              v_ComponentFieldsId = A.v_ComponentFieldId,
                                              v_ServiceComponentId = A.v_ServiceComponentId,
                                              i_HasAutomaticDxId = ss.i_HasAutomaticDxId,
                                          }).ToList();



            if (serviceComponentFields.Count != 0)
            {
                //serviceComponentFields = (from a in serviceComponentFields
                //                          let hazAutoDx = (from jjj in dbContext.diagnosticrepository
                //                                           where (jjj.v_ComponentFieldId == a.v_ComponentFieldsId) &&
                //                                                 (jjj.v_ServiceId == serviceId) &&
                //                                                 (jjj.i_IsDeleted == 0)
                //                                           select jjj.v_ComponentFieldId != null ? (int?)SiNo.SI : (int?)SiNo.NO)
                //                          select new ServiceComponentFieldsList
                //                          {
                //                              v_ServiceComponentFieldsId = a.v_ServiceComponentFieldsId,
                //                              v_ComponentFieldsId = a.v_ComponentFieldsId,
                //                              v_ServiceComponentId = a.v_ServiceComponentId,
                //                              //i_HasAutomaticDxId = (from jjj in dbContext.diagnosticrepository
                //                              //                      where jjj.v_ComponentFieldId == a.v_ComponentFieldsId &&
                //                              //                       jjj.v_ServiceId == pstrServiceId &&
                //                              //                       jjj.i_IsDeleted == 0
                //                              //                      select jjj.v_ComponentFieldId != null ? (int?)SiNo.SI : (int?)SiNo.NO
                //                              //                      ).SingleOrDefault()
                //                              i_HasAutomaticDxId = hazAutoDx.FirstOrDefault<int?>(),


                //                          }).ToList();


                //// Carga inicial de servicecomponentfieldvalues
                //foreach (var fv in q)
                //{
                //    fv.ServiceComponentFieldValues = GetServiceComponentFieldValues(fv.v_ServiceComponentFieldsId);
                //}

                // Ordenar la lista temp para hacer busquedas rapidas sobre ella (obligatorio)
                serviceComponentFieldValues.Sort((x, y) => x.v_ServiceComponentFieldsId.CompareTo(y.v_ServiceComponentFieldsId));
                serviceComponentFields.Sort((x, y) => x.v_ServiceComponentFieldsId.CompareTo(y.v_ServiceComponentFieldsId));
                serviceComponentFields.ForEach(a => a.ServiceComponentFieldValues = serviceComponentFieldValues.FindAll(p => p.v_ServiceComponentFieldsId == a.v_ServiceComponentFieldsId));

                return serviceComponentFields;
            }
            else
            {
                return serviceComponentFields;
            }
            //var dd = new List<ServiceComponentFieldsList>();
            //return dd;
        }

        private List<ServiceComponentFieldValuesList> GetServiceComponentFieldValues(string pstrServiceComponentFieldsId)
        {
            SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

            List<ServiceComponentFieldValuesList> serviceComponentFieldValues = (from A in dbContext.servicecomponentfieldvalues
                                                                                 join scf in dbContext.servicecomponentfields on A.v_ServiceComponentFieldsId equals scf.v_ServiceComponentFieldsId
                                                                                 where A.v_ServiceComponentFieldsId == pstrServiceComponentFieldsId &&
                                                                                  A.i_IsDeleted == 0
                                                                                 select new ServiceComponentFieldValuesList
                                                                                 {
                                                                                     v_ComponentFieldId = scf.v_ComponentFieldId,
                                                                                     v_ServiceComponentFieldValuesId = A.v_ServiceComponentFieldValuesId,
                                                                                     v_ComponentFieldValuesId = A.v_ComponentFieldValuesId,
                                                                                     v_ServiceComponentFieldsId = A.v_ServiceComponentFieldsId,
                                                                                     v_Value1 = A.v_Value1,
                                                                                     v_Value2 = A.v_Value2,
                                                                                     i_Index = A.i_Index,
                                                                                     i_Value1 = A.i_Value1
                                                                                 }).ToList();


            return serviceComponentFieldValues;
        }

        public List<ComponentList> GetServiceComponentsForBuildMenu(ref OperationResult pobjOperationResult, string pstrServiceId)
        {

            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                var isDeleted = (int?)SiNo.NO;
                int? componentTypeId = (int?)ComponentType.Examen;
                int? isRequiredId = (int?)SiNo.SI;
                var recomId = (int)Typifying.Recomendaciones;
                var restricId = (int)Typifying.Restricciones;
                int groupMeasurementUnitId = 105;

                #region Recomendation

                var _valueFieldsRecome = (from s in dbContext.service
                                          join sc in dbContext.servicecomponent on s.v_ServiceId equals sc.v_ServiceId
                                          join c in dbContext.component on sc.v_ComponentId equals c.v_ComponentId
                                          join cfs in dbContext.componentfields on c.v_ComponentId equals cfs.v_ComponentId
                                          join cfsv in dbContext.componentfieldvalues on cfs.v_ComponentFieldId equals cfsv.v_ComponentFieldId
                                          join rec in dbContext.componentfieldvaluesrecommendation on cfsv.v_ComponentFieldValuesId equals rec.v_ComponentFieldValuesId
                                          join mrec in dbContext.masterrecommendationrestricction on rec.v_MasterRecommendationRestricctionId equals mrec.v_MasterRecommendationRestricctionId

                                          where (rec.i_IsDeleted == isDeleted) &&
                                                (mrec.i_TypifyingId == recomId) &&
                                                (s.v_ServiceId == pstrServiceId)

                                          select new RecomendationList
                                          {
                                              v_ComponentFieldValuesRecommendationId = rec.v_ComponentFieldValuesRecommendationId,
                                              v_ComponentFieldValuesId = rec.v_ComponentFieldValuesId,
                                              v_MasterRecommendationId = rec.v_MasterRecommendationRestricctionId,
                                              v_RecommendationName = mrec.v_Name,
                                              v_ComponentId = sc.v_ComponentId,
                                              i_RecordStatus = (int)RecordStatus.Grabado,
                                              i_RecordType = (int)RecordType.NoTemporal,

                                          }).ToList();

                #endregion

                #region Restriction

                var _valueFieldsRestri = (from s in dbContext.service
                                          join sc in dbContext.servicecomponent on s.v_ServiceId equals sc.v_ServiceId
                                          join c in dbContext.component on sc.v_ComponentId equals c.v_ComponentId
                                          join cfs in dbContext.componentfields on c.v_ComponentId equals cfs.v_ComponentId
                                          join cfsv in dbContext.componentfieldvalues on cfs.v_ComponentFieldId equals cfsv.v_ComponentFieldId
                                          join res in dbContext.componentfieldvaluesrestriction on cfsv.v_ComponentFieldValuesId equals res.v_ComponentFieldValuesId
                                          join mres in dbContext.masterrecommendationrestricction on res.v_MasterRecommendationRestricctionId equals mres.v_MasterRecommendationRestricctionId

                                          where (res.i_IsDeleted == isDeleted) &&
                                                (mres.i_TypifyingId == restricId) &&
                                                (s.v_ServiceId == pstrServiceId)

                                          select new RestrictionList
                                          {
                                              v_ComponentFieldValuesRestrictionId = res.v_ComponentFieldValuesRestrictionId,
                                              v_ComponentFieldValuesId = res.v_ComponentFieldValuesId,
                                              v_MasterRestrictionId = res.v_MasterRecommendationRestricctionId,
                                              v_RestrictionName = mres.v_Name,
                                              v_ComponentId = sc.v_ComponentId,
                                              i_RecordStatus = (int)RecordStatus.Grabado,
                                              i_RecordType = (int)RecordType.NoTemporal
                                          }).ToList();
                #endregion

                #region Values

                var _valueFields = (from s in dbContext.service
                                    join sc in dbContext.servicecomponent on s.v_ServiceId equals sc.v_ServiceId
                                    join c in dbContext.component on sc.v_ComponentId equals c.v_ComponentId
                                    join cfs in dbContext.componentfields on c.v_ComponentId equals cfs.v_ComponentId
                                    join cfsv in dbContext.componentfieldvalues on cfs.v_ComponentFieldId equals cfsv.v_ComponentFieldId
                                    where (cfsv.i_IsDeleted == isDeleted) &&
                                          (s.v_ServiceId == pstrServiceId)

                                    select new ComponentFieldValues
                                    {
                                        v_ComponentFieldValuesId = cfsv.v_ComponentFieldValuesId,
                                        v_ComponentFieldsId = cfsv.v_ComponentFieldId,
                                        v_AnalyzingValue1 = cfsv.v_AnalyzingValue1,
                                        v_AnalyzingValue2 = cfsv.v_AnalyzingValue2,
                                        i_OperatorId = cfsv.i_OperatorId.Value,
                                        v_LegalStandard = cfsv.v_LegalStandard,
                                        i_IsAnormal = cfsv.i_IsAnormal,
                                        i_ValidationMonths = cfsv.i_ValidationMonths,
                                        v_DiseasesName = cfsv.diseases.v_Name,
                                        v_DiseasesId = cfsv.v_Diseases,
                                        v_ComponentId = sc.v_ComponentId,
                                        i_GenderId = cfsv.i_GenderId,

                                    }).ToList();

                _valueFields.ForEach(a =>
                {
                    a.Recomendations = _valueFieldsRecome.FindAll(p => p.v_ComponentFieldValuesId == a.v_ComponentFieldValuesId);
                    a.Restrictions = _valueFieldsRestri.FindAll(p => p.v_ComponentFieldValuesId == a.v_ComponentFieldValuesId);
                });

                #endregion

                #region Fields

                var _comFields = (from s in dbContext.service
                                  join sc in dbContext.servicecomponent on s.v_ServiceId equals sc.v_ServiceId
                                  join c in dbContext.component on sc.v_ComponentId equals c.v_ComponentId
                                  join cfs in dbContext.componentfields on c.v_ComponentId equals cfs.v_ComponentId
                                  join cf in dbContext.componentfield on cfs.v_ComponentFieldId equals cf.v_ComponentFieldId

                                  let hazAutoDx = (from jjj in dbContext.diagnosticrepository
                                                   where (jjj.v_ComponentFieldId == cfs.v_ComponentFieldId) &&
                                                       (jjj.v_ServiceId == pstrServiceId) &&
                                                       (jjj.i_IsDeleted == isDeleted)
                                                   //select jjj.v_ComponentFieldId != null ? (int?)SiNo.SI : (int?)SiNo.NO)
                                                   select new
                                                   {
                                                       //v_ComponentFieldId = jjj.v_ComponentFieldId
                                                       i_HasAutomaticDxId = jjj.v_ComponentFieldId != null ? (int?)SiNo.SI : (int?)SiNo.NO
                                                   })

                                  //let measurementUnitId = cfs.componentfield.i_MeasurementUnitId.Value

                                  join dh in dbContext.datahierarchy on new { a = groupMeasurementUnitId, b = cf.i_MeasurementUnitId.Value }  // UNID MEDIDA
                                                      equals new { a = dh.i_GroupId, b = dh.i_ItemId } into dh_join
                                  from dh in dh_join.DefaultIfEmpty()

                                  where (cfs.i_IsDeleted == isDeleted) &&
                                        (cf.i_IsDeleted == isDeleted) &&
                                        (s.v_ServiceId == pstrServiceId)

                                  select new ComponentFieldsList
                                  {
                                      v_ComponentFieldId = cf.v_ComponentFieldId,
                                      v_TextLabel = cf.v_TextLabel,
                                      v_ComponentId = cfs.v_ComponentId,
                                      i_LabelWidth = cf.i_LabelWidth.Value,
                                      i_HeightLabel = cf.i_HeightLabel,
                                      v_DefaultText = cf.v_DefaultText,
                                      i_ControlId = cf.i_ControlId.Value,
                                      i_GroupId = cf.i_GroupId.Value,
                                      i_ItemId = cf.i_ItemId.Value,
                                      i_ControlWidth = cf.i_WidthControl.Value,
                                      i_HeightControl = cf.i_HeightControl.Value,
                                      i_MaxLenght = cf.i_MaxLenght.Value,
                                      i_IsRequired = cf.i_IsRequired.Value,
                                      i_Column = cf.i_Column.Value,
                                      v_MeasurementUnitName = dh.v_Value1,
                                      i_IsCalculate = cf.i_IsCalculate.Value,
                                      i_Order = cf.i_Order.Value,
                                      i_MeasurementUnitId = cf.i_MeasurementUnitId.Value,
                                      r_ValidateValue1 = cf.r_ValidateValue1.Value,
                                      r_ValidateValue2 = cf.r_ValidateValue2.Value,
                                      v_Group = cfs.v_Group,
                                      v_Formula = cf.v_Formula,
                                      i_NroDecimales = cf.i_NroDecimales.Value,
                                      i_ReadOnly = cf.i_ReadOnly.Value,
                                      i_Enabled = cf.i_Enabled.Value,
                                      //i_HasAutomaticDxId = hazAutoDx.FirstOrDefault().v_ComponentFieldId != null ? (int?)SiNo.SI : (int?)SiNo.NO
                                      i_HasAutomaticDxId = hazAutoDx.FirstOrDefault().i_HasAutomaticDxId,
                                      //Values = _valueFields.Where(p => p.v_ComponentFieldsId == cfs.v_ComponentFieldId)
                                      //Values = xcfsv
                                  }).ToList();

                // Ordenar la lista temp para hacer busquedas rapidas sobre ella (obligatorio)
                _valueFields.Sort((x, y) => x.v_ComponentFieldsId.CompareTo(y.v_ComponentFieldsId));
                _comFields.Sort((x, y) => x.v_ComponentFieldId.CompareTo(y.v_ComponentFieldId));
                _comFields.ForEach(a => a.Values = _valueFields.FindAll(p => p.v_ComponentFieldsId == a.v_ComponentFieldId));


                Formulate formu = null;
                TargetFieldOfCalculate targetFieldOfCalculate = null;

                foreach (var item in _comFields)
                {
                    List<Formulate> formuList = new List<Formulate>();
                    List<TargetFieldOfCalculate> targetFieldOfCalculateList = new List<TargetFieldOfCalculate>();

                    var find = _comFields.FindAll(p => p.v_Formula != null && p.v_Formula.Contains(item.v_ComponentFieldId));

                    if (find.Count != 0)
                    {
                        item.i_IsSourceFieldToCalculate = (int)SiNo.SI;

                        foreach (var f in find)
                        {
                            formu = new Formulate();
                            formu.v_Formula = f.v_Formula;
                            formu.v_TargetFieldOfCalculateId = f.v_ComponentFieldId;
                            formuList.Add(formu);

                            targetFieldOfCalculate = new TargetFieldOfCalculate();
                            targetFieldOfCalculate.v_TargetFieldOfCalculateId = f.v_ComponentFieldId;
                            targetFieldOfCalculateList.Add(targetFieldOfCalculate);
                        }

                        item.Formula = formuList;
                        item.TargetFieldOfCalculateId = targetFieldOfCalculateList;
                    }

                }

                // obligatorio para que los controles se dibujen en orden adecuado
                _comFields.Sort((x, y) => x.i_Order.CompareTo(y.i_Order));

                #endregion

                #region Components

                List<ComponentList> components = (from aaa in dbContext.servicecomponent
                                                  join bbb in dbContext.component on aaa.v_ComponentId equals bbb.v_ComponentId
                                                  join J1 in dbContext.systemuser on new { i_InsertUserId = aaa.i_InsertUserId.Value }
                                                                  equals new { i_InsertUserId = J1.i_SystemUserId } into J1_join
                                                  from J1 in J1_join.DefaultIfEmpty()

                                                  join J2 in dbContext.systemuser on new { i_UpdateUserId = aaa.i_UpdateUserId.Value }
                                                                                  equals new { i_UpdateUserId = J2.i_SystemUserId } into J2_join
                                                  from J2 in J2_join.DefaultIfEmpty()

                                                  join fff in dbContext.systemparameter on new { a = bbb.i_CategoryId.Value, b = 116 } // CATEGORIA DEL EXAMEN
                                                                                               equals new { a = fff.i_ParameterId, b = fff.i_GroupId } into J5_join
                                                  from fff in J5_join.DefaultIfEmpty()

                                                  where (aaa.v_ServiceId == pstrServiceId) &&
                                                        (bbb.i_ComponentTypeId == (int?)ComponentType.Examen) &&
                                                        (aaa.i_IsDeleted == isDeleted) &&
                                                        (bbb.i_IsDeleted == isDeleted) &&
                                                        (aaa.i_IsRequiredId == (int?)SiNo.SI)
                                                  //orderby aaa.v_ServiceComponentId, aaa.i_index
                                                  select new ComponentList
                                                  {
                                                      v_ComponentId = bbb.v_ComponentId,
                                                      v_Name = bbb.v_Name,
                                                      i_UIIsVisibleId = bbb.i_UIIsVisibleId,
                                                      i_ComponentTypeId = bbb.i_ComponentTypeId,
                                                      v_ServiceComponentId = aaa.v_ServiceComponentId,
                                                      v_CreationUser = J1.v_UserName,
                                                      v_UpdateUser = J2.v_UserName,
                                                      d_CreationDate = aaa.d_InsertDate,
                                                      d_UpdateDate = aaa.d_UpdateDate,
                                                      i_IsDeleted = aaa.i_IsDeleted.Value,
                                                      i_CategoryId = bbb.i_CategoryId,
                                                      v_CategoryName = fff.v_Value1,
                                                      i_GroupedComponentId = bbb.i_CategoryId,
                                                      v_GroupedComponentName = fff.v_Value1,
                                                      v_ComponentCopyId = bbb.v_ComponentId,
                                                      //i_Index = aaa.i_index
                                                      i_Index = bbb.i_UIIndex
                                                  }).ToList();

                // Ordenar la lista temp para hacer busquedas rapidas sobre ella (obligatorio)

                components.Sort((x, y) => x.v_ComponentId.CompareTo(y.v_ComponentId));
                components.ForEach(a => a.Fields = _comFields.FindAll(p => p.v_ComponentId == a.v_ComponentId));


                // Orden obligatorio para capturar siempre el v_ServiceComponentId correcto
                components.OrderBy(o1 => o1.v_ServiceComponentId).ThenBy(o2 => o2.i_Index).ToList();

                #endregion

                #region Agrupar componentes individuales en un solo examen component ejem: Laboratorio , Psicologia

                List<ComponentList> groupedComponentsName = null;

                var categories = components.FindAll(p => p.i_CategoryId != -1)
                                .GroupBy(g => g.i_CategoryId)
                                .Select(s => s.First())
                                .OrderBy(o => o.i_CategoryId).ToList();

                // Ordenar la lista temp para hacer busquedas rapidas sobre ella (obligatorio)
                components.Sort((x, y) => x.i_CategoryId.Value.CompareTo(y.i_CategoryId.Value));

                for (int i = 0; i < categories.Count; i++)
                {
                    var categoryId = categories[i].i_CategoryId;

                    var componentsByCategory = components.FindAll(p => p.i_CategoryId == categoryId)
                                              .OrderBy(o => o.i_Index).ToList();

                    var join = string.Join("|", componentsByCategory.Select(p => p.v_ComponentId));
                    categories[i].v_ComponentId = join;

                    groupedComponentsName = new List<ComponentList>();

                    for (int j = 0; j < componentsByCategory.Count; j++)
                    {
                        var groupedComponentName = new ComponentList();
                        groupedComponentName.v_ComponentId = componentsByCategory[j].v_ComponentCopyId;
                        groupedComponentName.v_GroupedComponentName = componentsByCategory[j].v_Name;
                        groupedComponentName.i_Index = componentsByCategory[j].i_Index;
                        groupedComponentsName.Add(groupedComponentName);
                    }

                    categories[i].GroupedComponentsName = groupedComponentsName;
                }


                // Buscar componentes individuales
                var componentsToImport = components.FindAll(p => p.i_CategoryId != -1)
                                        .OrderBy(o => o.i_CategoryId).ToList();

                // Importar los campos de cada uno de los componentes individuales hacia el nuevo componente             
                for (int i = 0; i < categories.Count; i++)
                {
                    var categoryId = categories[i].i_CategoryId;

                    var fields = componentsToImport.FindAll(p => p.i_CategoryId == categoryId)
                                .SelectMany(p => p.Fields).ToList();

                    categories[i].i_IsGroupedComponent = (int)SiNo.SI;
                    categories[i].v_Name = categories[i].v_CategoryName;
                    categories[i].Fields = new List<ComponentFieldsList>();
                    categories[i].Fields.AddRange(fields);
                }

                // Eliminar los componentes individuales ya no sirven
                for (int i = 0; i < componentsToImport.Count; i++)
                {
                    components.Remove(componentsToImport[i]);
                }

                // Agregar los nuevos componentes (LAB,PSICOLOGIA) a la lista de examenes que va alimentar el ESO
                components.AddRange(categories);

                #endregion

                pobjOperationResult.Success = 1;

                return components;
            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
                return null;
            }
        }

        //DAVID 20171206
        public List<ComponentList> GetServiceComponentsForBuildMinimalMenu(ref OperationResult pobjOperationResult, string pstrServiceId, int p_RoleId, int p_NodeId)
        {

            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                var isDeleted = (int?)SiNo.NO;
                int? componentTypeId = (int?)ComponentType.Examen;
                int? isRequiredId = (int?)SiNo.SI;
                var recomId = (int)Typifying.Recomendaciones;
                var restricId = (int)Typifying.Restricciones;
                int groupMeasurementUnitId = 105;

                #region Recomendation

                var _valueFieldsRecome = (from s in dbContext.service
                                          join sc in dbContext.servicecomponent on s.v_ServiceId equals sc.v_ServiceId
                                          join rncp in dbContext.rolenodecomponentprofile on sc.v_ComponentId equals rncp.v_ComponentId
                                          join c in dbContext.component on sc.v_ComponentId equals c.v_ComponentId
                                          join cfs in dbContext.componentfields on c.v_ComponentId equals cfs.v_ComponentId
                                          join cfsv in dbContext.componentfieldvalues on cfs.v_ComponentFieldId equals cfsv.v_ComponentFieldId
                                          join rec in dbContext.componentfieldvaluesrecommendation on cfsv.v_ComponentFieldValuesId equals rec.v_ComponentFieldValuesId
                                          join mrec in dbContext.masterrecommendationrestricction on rec.v_MasterRecommendationRestricctionId equals mrec.v_MasterRecommendationRestricctionId

                                          where (rec.i_IsDeleted == isDeleted) &&
                                                (mrec.i_TypifyingId == recomId) &&
                                                (s.v_ServiceId == pstrServiceId) &&
                                                (rncp.i_RoleId == p_RoleId) && //Se Setea al Rol Grupo 115 ID 16	MÉDICO GENERAL
                                                (rncp.i_NodeId == p_NodeId)  //Se Setea NODO al Rol Grupo 115 ID 16	NODO

                                          select new RecomendationList
                                          {
                                              v_ComponentFieldValuesRecommendationId = rec.v_ComponentFieldValuesRecommendationId,
                                              v_ComponentFieldValuesId = rec.v_ComponentFieldValuesId,
                                              v_MasterRecommendationId = rec.v_MasterRecommendationRestricctionId,
                                              v_RecommendationName = mrec.v_Name,
                                              v_ComponentId = sc.v_ComponentId,
                                              i_RecordStatus = (int)RecordStatus.Grabado,
                                              i_RecordType = (int)RecordType.NoTemporal,

                                          }).ToList();

                #endregion

                #region Restriction

                var _valueFieldsRestri = (from s in dbContext.service
                                          join sc in dbContext.servicecomponent on s.v_ServiceId equals sc.v_ServiceId
                                          join rncp in dbContext.rolenodecomponentprofile on sc.v_ComponentId equals rncp.v_ComponentId
                                          join c in dbContext.component on sc.v_ComponentId equals c.v_ComponentId
                                          join cfs in dbContext.componentfields on c.v_ComponentId equals cfs.v_ComponentId
                                          join cfsv in dbContext.componentfieldvalues on cfs.v_ComponentFieldId equals cfsv.v_ComponentFieldId
                                          join res in dbContext.componentfieldvaluesrestriction on cfsv.v_ComponentFieldValuesId equals res.v_ComponentFieldValuesId
                                          join mres in dbContext.masterrecommendationrestricction on res.v_MasterRecommendationRestricctionId equals mres.v_MasterRecommendationRestricctionId

                                          where (res.i_IsDeleted == isDeleted) &&
                                                (mres.i_TypifyingId == restricId) &&
                                                (s.v_ServiceId == pstrServiceId) &&
                                                (rncp.i_RoleId == p_RoleId) && //Se Setea al Rol Grupo 115 ID 16	MÉDICO GENERAL
                                                (rncp.i_NodeId == p_NodeId)  //Se Setea NODO al Rol Grupo 115 ID 16	NODO

                                          select new RestrictionList
                                          {
                                              v_ComponentFieldValuesRestrictionId = res.v_ComponentFieldValuesRestrictionId,
                                              v_ComponentFieldValuesId = res.v_ComponentFieldValuesId,
                                              v_MasterRestrictionId = res.v_MasterRecommendationRestricctionId,
                                              v_RestrictionName = mres.v_Name,
                                              v_ComponentId = sc.v_ComponentId,
                                              i_RecordStatus = (int)RecordStatus.Grabado,
                                              i_RecordType = (int)RecordType.NoTemporal
                                          }).ToList();
                #endregion

                #region Values

                var _valueFields = (from s in dbContext.service
                                    join sc in dbContext.servicecomponent on s.v_ServiceId equals sc.v_ServiceId
                                    join rncp in dbContext.rolenodecomponentprofile on sc.v_ComponentId equals rncp.v_ComponentId
                                    join c in dbContext.component on sc.v_ComponentId equals c.v_ComponentId
                                    join cfs in dbContext.componentfields on c.v_ComponentId equals cfs.v_ComponentId
                                    join cfsv in dbContext.componentfieldvalues on cfs.v_ComponentFieldId equals cfsv.v_ComponentFieldId
                                    where (cfsv.i_IsDeleted == isDeleted) &&
                                          (s.v_ServiceId == pstrServiceId) &&
                                          (rncp.i_RoleId == p_RoleId) && //Se Setea al Rol Grupo 115 ID 16	MÉDICO GENERAL
                                          (rncp.i_NodeId == p_NodeId)  //Se Setea NODO al Rol Grupo 115 ID 16	NODO

                                    select new ComponentFieldValues
                                    {
                                        v_ComponentFieldValuesId = cfsv.v_ComponentFieldValuesId,
                                        v_ComponentFieldsId = cfsv.v_ComponentFieldId,
                                        v_AnalyzingValue1 = cfsv.v_AnalyzingValue1,
                                        v_AnalyzingValue2 = cfsv.v_AnalyzingValue2,
                                        i_OperatorId = cfsv.i_OperatorId.Value,
                                        v_LegalStandard = cfsv.v_LegalStandard,
                                        i_IsAnormal = cfsv.i_IsAnormal,
                                        i_ValidationMonths = cfsv.i_ValidationMonths,
                                        v_DiseasesName = cfsv.diseases.v_Name,
                                        v_DiseasesId = cfsv.v_Diseases,
                                        v_ComponentId = sc.v_ComponentId,
                                        i_GenderId = cfsv.i_GenderId,

                                    }).ToList();

                _valueFields.ForEach(a =>
                {
                    a.Recomendations = _valueFieldsRecome.FindAll(p => p.v_ComponentFieldValuesId == a.v_ComponentFieldValuesId);
                    a.Restrictions = _valueFieldsRestri.FindAll(p => p.v_ComponentFieldValuesId == a.v_ComponentFieldValuesId);
                });

                #endregion

                #region Fields

                var _comFields = (from s in dbContext.service
                                  join sc in dbContext.servicecomponent on s.v_ServiceId equals sc.v_ServiceId
                                  join rncp in dbContext.rolenodecomponentprofile on sc.v_ComponentId equals rncp.v_ComponentId
                                  join c in dbContext.component on sc.v_ComponentId equals c.v_ComponentId
                                  join cfs in dbContext.componentfields on c.v_ComponentId equals cfs.v_ComponentId
                                  join cf in dbContext.componentfield on cfs.v_ComponentFieldId equals cf.v_ComponentFieldId

                                  let hazAutoDx = (from jjj in dbContext.diagnosticrepository
                                                   where (jjj.v_ComponentFieldId == cfs.v_ComponentFieldId) &&
                                                       (jjj.v_ServiceId == pstrServiceId) &&
                                                       (jjj.i_IsDeleted == isDeleted)
                                                   //select jjj.v_ComponentFieldId != null ? (int?)SiNo.SI : (int?)SiNo.NO)
                                                   select new
                                                   {
                                                       //v_ComponentFieldId = jjj.v_ComponentFieldId
                                                       i_HasAutomaticDxId = jjj.v_ComponentFieldId != null ? (int?)SiNo.SI : (int?)SiNo.NO
                                                   })

                                  //let measurementUnitId = cfs.componentfield.i_MeasurementUnitId.Value

                                  join dh in dbContext.datahierarchy on new { a = groupMeasurementUnitId, b = cf.i_MeasurementUnitId.Value }  // UNID MEDIDA
                                                      equals new { a = dh.i_GroupId, b = dh.i_ItemId } into dh_join
                                  from dh in dh_join.DefaultIfEmpty()

                                  where (cfs.i_IsDeleted == isDeleted) &&
                                        (cf.i_IsDeleted == isDeleted) &&
                                        (s.v_ServiceId == pstrServiceId) &&
                                        (rncp.i_RoleId == p_RoleId) && //Se Setea al Rol Grupo 115 ID 16	MÉDICO GENERAL
                                        (rncp.i_NodeId == p_NodeId)  //Se Setea NODO al Rol Grupo 115 ID 16	NODO

                                  select new ComponentFieldsList
                                  {
                                      v_ComponentFieldId = cf.v_ComponentFieldId,
                                      v_TextLabel = cf.v_TextLabel,
                                      v_ComponentId = cfs.v_ComponentId,
                                      i_LabelWidth = cf.i_LabelWidth.Value,
                                      i_HeightLabel = cf.i_HeightLabel,
                                      v_DefaultText = cf.v_DefaultText,
                                      i_ControlId = cf.i_ControlId.Value,
                                      i_GroupId = cf.i_GroupId.Value,
                                      i_ItemId = cf.i_ItemId.Value,
                                      i_ControlWidth = cf.i_WidthControl.Value,
                                      i_HeightControl = cf.i_HeightControl.Value,
                                      i_MaxLenght = cf.i_MaxLenght.Value,
                                      i_IsRequired = cf.i_IsRequired.Value,
                                      i_Column = cf.i_Column.Value,
                                      v_MeasurementUnitName = dh.v_Value1,
                                      i_IsCalculate = cf.i_IsCalculate.Value,
                                      i_Order = cf.i_Order.Value,
                                      i_MeasurementUnitId = cf.i_MeasurementUnitId.Value,
                                      r_ValidateValue1 = cf.r_ValidateValue1.Value,
                                      r_ValidateValue2 = cf.r_ValidateValue2.Value,
                                      v_Group = cfs.v_Group,
                                      v_Formula = cf.v_Formula,
                                      i_NroDecimales = cf.i_NroDecimales.Value,
                                      i_ReadOnly = cf.i_ReadOnly.Value,
                                      i_Enabled = cf.i_Enabled.Value,
                                      //i_HasAutomaticDxId = hazAutoDx.FirstOrDefault().v_ComponentFieldId != null ? (int?)SiNo.SI : (int?)SiNo.NO
                                      i_HasAutomaticDxId = hazAutoDx.FirstOrDefault().i_HasAutomaticDxId,
                                      //Values = _valueFields.Where(p => p.v_ComponentFieldsId == cfs.v_ComponentFieldId)
                                      //Values = xcfsv
                                  }).ToList();

                // Ordenar la lista temp para hacer busquedas rapidas sobre ella (obligatorio)
                _valueFields.Sort((x, y) => x.v_ComponentFieldsId.CompareTo(y.v_ComponentFieldsId));
                _comFields.Sort((x, y) => x.v_ComponentFieldId.CompareTo(y.v_ComponentFieldId));
                _comFields.ForEach(a => a.Values = _valueFields.FindAll(p => p.v_ComponentFieldsId == a.v_ComponentFieldId));


                Formulate formu = null;
                TargetFieldOfCalculate targetFieldOfCalculate = null;

                foreach (var item in _comFields)
                {
                    List<Formulate> formuList = new List<Formulate>();
                    List<TargetFieldOfCalculate> targetFieldOfCalculateList = new List<TargetFieldOfCalculate>();

                    var find = _comFields.FindAll(p => p.v_Formula != null && p.v_Formula.Contains(item.v_ComponentFieldId));

                    if (find.Count != 0)
                    {
                        item.i_IsSourceFieldToCalculate = (int)SiNo.SI;

                        foreach (var f in find)
                        {
                            formu = new Formulate();
                            formu.v_Formula = f.v_Formula;
                            formu.v_TargetFieldOfCalculateId = f.v_ComponentFieldId;
                            formuList.Add(formu);

                            targetFieldOfCalculate = new TargetFieldOfCalculate();
                            targetFieldOfCalculate.v_TargetFieldOfCalculateId = f.v_ComponentFieldId;
                            targetFieldOfCalculateList.Add(targetFieldOfCalculate);
                        }

                        item.Formula = formuList;
                        item.TargetFieldOfCalculateId = targetFieldOfCalculateList;
                    }
                }

                // obligatorio para que los controles se dibujen en orden adecuado
                _comFields.Sort((x, y) => x.i_Order.CompareTo(y.i_Order));

                #endregion

                #region Components

                List<ComponentList> components = (from aaa in dbContext.servicecomponent
                                                  join rncp in dbContext.rolenodecomponentprofile on aaa.v_ComponentId equals rncp.v_ComponentId
                                                  join bbb in dbContext.component on aaa.v_ComponentId equals bbb.v_ComponentId
                                                  join J1 in dbContext.systemuser on new { i_InsertUserId = aaa.i_InsertUserId.Value }
                                                                  equals new { i_InsertUserId = J1.i_SystemUserId } into J1_join
                                                  from J1 in J1_join.DefaultIfEmpty()

                                                  join J2 in dbContext.systemuser on new { i_UpdateUserId = aaa.i_UpdateUserId.Value }
                                                                                  equals new { i_UpdateUserId = J2.i_SystemUserId } into J2_join
                                                  from J2 in J2_join.DefaultIfEmpty()

                                                  join fff in dbContext.systemparameter on new { a = bbb.i_CategoryId.Value, b = 116 } // CATEGORIA DEL EXAMEN
                                                                                               equals new { a = fff.i_ParameterId, b = fff.i_GroupId } into J5_join
                                                  from fff in J5_join.DefaultIfEmpty()

                                                  where (rncp.i_RoleId == p_RoleId) && //Se Setea al Rol Grupo 115 ID 16	MÉDICO GENERAL
                                                        (rncp.i_NodeId == p_NodeId) &&  //Se Setea NODO al Rol Grupo 115 ID 16	NODO
                                                        (aaa.v_ServiceId == pstrServiceId) &&
                                                        (bbb.i_ComponentTypeId == (int?)ComponentType.Examen) &&
                                                        (aaa.i_IsDeleted == isDeleted) &&
                                                        (bbb.i_IsDeleted == isDeleted) &&
                                                        (aaa.i_IsRequiredId == (int?)SiNo.SI)
                                                  //orderby aaa.v_ServiceComponentId, aaa.i_index
                                                  select new ComponentList
                                                  {
                                                      v_ComponentId = bbb.v_ComponentId,
                                                      v_Name = bbb.v_Name,
                                                      i_UIIsVisibleId = bbb.i_UIIsVisibleId,
                                                      i_ComponentTypeId = bbb.i_ComponentTypeId,
                                                      v_ServiceComponentId = aaa.v_ServiceComponentId,
                                                      v_CreationUser = J1.v_UserName,
                                                      v_UpdateUser = J2.v_UserName,
                                                      d_CreationDate = aaa.d_InsertDate,
                                                      d_UpdateDate = aaa.d_UpdateDate,
                                                      i_IsDeleted = aaa.i_IsDeleted.Value,
                                                      i_CategoryId = bbb.i_CategoryId,
                                                      v_CategoryName = fff.v_Value1,
                                                      i_GroupedComponentId = bbb.i_CategoryId,
                                                      v_GroupedComponentName = fff.v_Value1,
                                                      v_ComponentCopyId = bbb.v_ComponentId,
                                                      //i_Index = aaa.i_index
                                                      i_Index = bbb.i_UIIndex
                                                  }).ToList();

                // Ordenar la lista temp para hacer busquedas rapidas sobre ella (obligatorio)

                components.Sort((x, y) => x.v_ComponentId.CompareTo(y.v_ComponentId));
                components.ForEach(a => a.Fields = _comFields.FindAll(p => p.v_ComponentId == a.v_ComponentId));


                // Orden obligatorio para capturar siempre el v_ServiceComponentId correcto
                components.OrderBy(o1 => o1.v_ServiceComponentId).ThenBy(o2 => o2.i_Index).ToList();

                #endregion

                #region Agrupar componentes individuales en un solo examen component ejem: Laboratorio , Psicologia

                List<ComponentList> groupedComponentsName = null;

                var categories = components.FindAll(p => p.i_CategoryId != -1)
                                .GroupBy(g => g.i_CategoryId)
                                .Select(s => s.First())
                                .OrderBy(o => o.i_CategoryId).ToList();

                // Ordenar la lista temp para hacer busquedas rapidas sobre ella (obligatorio)
                components.Sort((x, y) => x.i_CategoryId.Value.CompareTo(y.i_CategoryId.Value));

                for (int i = 0; i < categories.Count; i++)
                {
                    var categoryId = categories[i].i_CategoryId;

                    var componentsByCategory = components.FindAll(p => p.i_CategoryId == categoryId)
                                              .OrderBy(o => o.i_Index).ToList();

                    var join = string.Join("|", componentsByCategory.Select(p => p.v_ComponentId));
                    categories[i].v_ComponentId = join;

                    groupedComponentsName = new List<ComponentList>();

                    for (int j = 0; j < componentsByCategory.Count; j++)
                    {
                        var groupedComponentName = new ComponentList();
                        groupedComponentName.v_ComponentId = componentsByCategory[j].v_ComponentCopyId;
                        groupedComponentName.v_GroupedComponentName = componentsByCategory[j].v_Name;
                        groupedComponentName.i_Index = componentsByCategory[j].i_Index;
                        groupedComponentsName.Add(groupedComponentName);
                    }

                    categories[i].GroupedComponentsName = groupedComponentsName;
                }


                // Buscar componentes individuales
                var componentsToImport = components.FindAll(p => p.i_CategoryId != -1)
                                        .OrderBy(o => o.i_CategoryId).ToList();

                // Importar los campos de cada uno de los componentes individuales hacia el nuevo componente             
                for (int i = 0; i < categories.Count; i++)
                {
                    var categoryId = categories[i].i_CategoryId;

                    var fields = componentsToImport.FindAll(p => p.i_CategoryId == categoryId)
                                .SelectMany(p => p.Fields).ToList();

                    categories[i].i_IsGroupedComponent = (int)SiNo.SI;
                    categories[i].v_Name = categories[i].v_CategoryName;
                    categories[i].Fields = new List<ComponentFieldsList>();
                    categories[i].Fields.AddRange(fields);
                }

                // Eliminar los componentes individuales ya no sirven
                for (int i = 0; i < componentsToImport.Count; i++)
                {
                    components.Remove(componentsToImport[i]);
                }

                // Agregar los nuevos componentes (LAB,PSICOLOGIA) a la lista de examenes que va alimentar el ESO
                components.AddRange(categories);

                #endregion

                pobjOperationResult.Success = 1;

                return components;
            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
                return null;
            }
        }

        public ServiceComponentList GetServiceComponentsInfo(ref OperationResult pobjOperationResult, string pstrServiceComponentId, string pstrServiceId)
        {

            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
                var query = (from aaa in dbContext.servicecomponent
                             join bbb in dbContext.component on aaa.v_ComponentId equals bbb.v_ComponentId
                             join cfs in dbContext.componentfields on bbb.v_ComponentId equals cfs.v_ComponentId
                             join cf in dbContext.componentfield on cfs.v_ComponentFieldId equals cf.v_ComponentFieldId
                             join J1 in dbContext.systemuser on new { i_InsertUserId = aaa.i_InsertUserId.Value }
                                             equals new { i_InsertUserId = J1.i_SystemUserId } into J1_join
                             from J1 in J1_join.DefaultIfEmpty()

                             join J2 in dbContext.systemuser on new { i_UpdateUserId = aaa.i_ApprovedUpdateUserId.Value }
                                                             equals new { i_UpdateUserId = J2.i_SystemUserId } into J2_join
                             from J2 in J2_join.DefaultIfEmpty()

                             join B in dbContext.systemparameter on new { a = aaa.i_ServiceComponentStatusId.Value, b = 127 }
                                                        equals new { a = B.i_ParameterId, b = B.i_GroupId } // estado del examen componente

                             where aaa.v_ServiceComponentId == pstrServiceComponentId &&
                                    bbb.i_ComponentTypeId == (int?)ComponentType.Examen &&
                                    aaa.i_IsDeleted == 0
                             orderby aaa.i_index

                             select new ServiceComponentList
                             {
                                 v_ServiceComponentId = aaa.v_ServiceComponentId,
                                 v_ComponentId = aaa.v_ComponentId,
                                 v_ComponentName = bbb.v_Name,
                                 i_ServiceComponentStatusId = aaa.i_ServiceComponentStatusId.Value,
                                 v_ServiceComponentStatusName = B.v_Value1,
                                 v_Comment = aaa.v_Comment,
                                 i_ExternalInternalId = aaa.i_ExternalInternalId.Value,
                                 d_StartDate = aaa.d_StartDate.Value,
                                 d_EndDate = aaa.d_EndDate.Value,
                                 i_QueueStatusId = aaa.i_QueueStatusId.Value,
                                 v_CreationUser = J1.v_UserName,
                                 v_UpdateUser = J2.v_UserName,
                                 d_CreationDate = aaa.d_InsertDate,
                                 d_UpdateDate = aaa.d_UpdateDate,
                                 i_IsDeleted = aaa.i_IsDeleted.Value,
                                 i_ControlId = cf.i_ControlId,
                                 i_IsApprovedId = aaa.i_IsApprovedId
                             }).FirstOrDefault();

                // Cargar campos del componente Ejem Triaje : talla ; Peso ; etc
                query.ServiceComponentFields = GetServiceComponentFields(pstrServiceComponentId, pstrServiceId);

                pobjOperationResult.Success = 1;
                return query;
            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
                return null;
            }
        }

        public void UpdateServiceComponent(ref OperationResult pobjOperationResult, servicecomponentDto pobjDtoEntity, List<string> ClientSession)
        {
            //mon.IsActive = true;

            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                // Obtener la entidad fuente
                var objEntitySource = (from a in dbContext.servicecomponent
                                       where a.v_ServiceComponentId == pobjDtoEntity.v_ServiceComponentId
                                       select a).FirstOrDefault();

                // Crear la entidad con los datos actualizados
                servicecomponent objEntity = servicecomponentAssembler.ToEntity(pobjDtoEntity);

                // Copiar los valores desde la entidad actualizada a la Entidad Fuente
                dbContext.servicecomponent.ApplyCurrentValues(objEntity);

                // Guardar los cambios
                dbContext.SaveChanges();

                pobjOperationResult.Success = 1;
                // Llenar entidad Log
                LogBL.SaveLog(ClientSession[0], ClientSession[1], ClientSession[2], LogEventType.ACTUALIZACION, "COMPONENTE SERVICIO", "v_ServiceComponentId=" + objEntity.v_ServiceComponentId.ToString(), Success.Ok, null);
                return;
            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
                // Llenar entidad Log
                LogBL.SaveLog(ClientSession[0], ClientSession[1], ClientSession[2], LogEventType.ACTUALIZACION, "COMPONENTE SERVICIO", "v_ServiceComponentId=" + pobjDtoEntity.v_ServiceComponentId.ToString(), Success.Failed, pobjOperationResult.ExceptionMessage);
                return;
            }
        }

        public void UpdateServiceComponentOffice(List<servicecomponentDto> list)
        {
            //mon.IsActive = true;

            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                foreach (var item in list)
                {
                    // Obtener la entidad fuente

                    var objEntitySource = dbContext.servicecomponent.SingleOrDefault(p => p.v_ServiceComponentId == item.v_ServiceComponentId);
                    objEntitySource.i_QueueStatusId = item.i_QueueStatusId;
                    objEntitySource.i_Iscalling = item.i_Iscalling;
                }

                // Guardar los cambios
                dbContext.SaveChanges();

                return;
            }
            catch (Exception ex)
            {
                return;
            }
        }

        public void UpdateServiceComponentOfficeLlamando(servicecomponentDto pobjDtoEntity, List<string> ClientSession)
        {
            //mon.IsActive = true;

            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                // Obtener la entidad fuente
                var objEntitySource = (from a in dbContext.servicecomponent
                                       where a.v_ServiceComponentId == pobjDtoEntity.v_ServiceComponentId
                                       select a).FirstOrDefault();

                // Crear la entidad con los datos actualizados
                objEntitySource.i_QueueStatusId = pobjDtoEntity.i_QueueStatusId;
                //objEntitySource.i_Iscalling = (int)SiNo.SI;
                objEntitySource.i_InsertUserId = Int32.Parse(ClientSession[2]);
                // Guardar los cambios
                dbContext.SaveChanges();
            }
            catch (Exception)
            {
                return;
            }
        }


        public void UpdateServiceComponentVisor(ref OperationResult pobjOperationResult, string pstrServiceComponentId, int pintFlagIsCalling)
        {
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                // Obtener la entidad fuente
                var objEntitySource = (from a in dbContext.servicecomponent
                                       where a.v_ServiceComponentId == pstrServiceComponentId
                                       select a).FirstOrDefault();
                objEntitySource.i_Iscalling = pintFlagIsCalling;

                // Guardar los cambios
                dbContext.SaveChanges();

                pobjOperationResult.Success = 1;
                return;
            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
                // Llenar entidad Log
                return;
            }
        }

        public void UpdateServiceComponentFromEso(ref OperationResult pobjOperationResult, servicecomponentDto pobjDtoEntity, List<string> ClientSession, bool? enabledchkApproved)
        {
            //mon.IsActive = true;

            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
                string[] componentId = null;

                if (pobjDtoEntity.v_ComponentId != null)
                {
                    if (pobjDtoEntity.v_ComponentId.Contains('|'))
                    {
                        componentId = pobjDtoEntity.v_ComponentId.Split('|');
                    }
                    else
                    {
                        componentId = new string[1];
                        componentId[0] = pobjDtoEntity.v_ComponentId;
                    }
                }

                // Obtener la entidad fuente
                var objEntitySource = (from a in dbContext.servicecomponent
                                       where (a.v_ServiceId == pobjDtoEntity.v_ServiceId) &&
                                             (componentId.Contains(a.v_ComponentId))
                                       select a).ToList();

                foreach (var item in objEntitySource)
                {
                    // Crear la entidad con los datos actualizados
                    item.v_Comment = pobjDtoEntity.v_Comment;
                    //MIRAR DAVID
                    item.i_ServiceComponentStatusId = pobjDtoEntity.i_ServiceComponentStatusId;
                    item.i_ExternalInternalId = pobjDtoEntity.i_ExternalInternalId;
                    item.d_UpdateDate = DateTime.Now;
                    // Logica para soportar al tecnologo y al especialista que aprueba el examen

                    int? isApproved = (from a in dbContext.component
                                       where (a.v_ComponentId == item.v_ComponentId) &&
                                           (a.i_IsDeleted == 0)
                                       select a.i_IsApprovedId).FirstOrDefault();

                    // El examen Necesita ser aprobado / Revisado y diagnosticado x especialista

                    if (isApproved == (int)SiNo.SI)
                    {
                        // Lo esta aprobando el especialista que tambien es un medico evaluador
                        if (enabledchkApproved.Value)
                        {
                            item.i_ApprovedUpdateUserId = Int32.Parse(ClientSession[2]);
                            item.d_ApprovedUpdateDate = DateTime.Now;
                            item.i_IsApprovedId = pobjDtoEntity.i_IsApprovedId;
                        }
                        else
                        {
                            // El tecnologo esta registrando los datos
                            item.i_UpdateUserTechnicalDataRegisterId = Int32.Parse(ClientSession[2]);
                            item.d_UpdateDateTechnicalDataRegister = DateTime.Now;
                        }
                    }
                    else
                    {
                        item.i_ApprovedUpdateUserId = Int32.Parse(ClientSession[2]);
                        item.d_ApprovedUpdateDate = DateTime.Now;
                    }

                    // Una sola vez se graba la fecha de creacion / grabacion del examen
                    if (item.d_ApprovedInsertDate == null)
                    {
                        item.d_ApprovedInsertDate = DateTime.Now;
                    }

                }

                // Guardar los cambios
                dbContext.SaveChanges();

                pobjOperationResult.Success = 1;
                // Llenar entidad Log
                LogBL.SaveLog(ClientSession[0], ClientSession[1], ClientSession[2], LogEventType.ACTUALIZACION, "COMPONENTE SERVICIO", "v_ServiceComponentId=" + pobjDtoEntity.v_ServiceComponentId.ToString(), Success.Ok, null);
                return;
            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
                // Llenar entidad Log
                LogBL.SaveLog(ClientSession[0], ClientSession[1], ClientSession[2], LogEventType.ACTUALIZACION, "COMPONENTE SERVICIO", "v_ServiceComponentId=" + pobjDtoEntity.v_ServiceComponentId.ToString(), Success.Failed, pobjOperationResult.ExceptionMessage);
                return;
            }
        }

        public servicecomponentDto GetServiceComponent(ref OperationResult pobjOperationResult, string pstrServiceComponentId)
        {
            //mon.IsActive = true;

            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
                servicecomponentDto objDtoEntity = null;

                var objEntity = (from a in dbContext.servicecomponent
                                 where a.v_ServiceComponentId == pstrServiceComponentId
                                 select a).FirstOrDefault();

                if (objEntity != null)
                    objDtoEntity = servicecomponentAssembler.ToDTO(objEntity);

                pobjOperationResult.Success = 1;
                return objDtoEntity;
            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
                return null;
            }
        }


        public List<ServiceComponentList> GetServiceComponentByCategoryId(ref OperationResult pobjOperationResult, int pstrCategoryId, string pstrServiceId)
        {
            //mon.IsActive = true;

            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
                //servicecomponentDto objDtoEntity = null;

                var objEntity = (from a in dbContext.servicecomponent
                                 join b in dbContext.component on a.v_ComponentId equals b.v_ComponentId
                                 where b.i_CategoryId == pstrCategoryId && a.v_ServiceId == pstrServiceId && a.i_IsRequiredId == (int)SiNo.SI
                                 select new ServiceComponentList
                                 {
                                     v_ServiceComponentId = a.v_ServiceComponentId,
                                     v_ServiceId = a.v_ServiceId,
                                     v_ComponentId = a.v_ComponentId,
                                     v_ComponentName = b.v_Name
                                 }).ToList();

                //if (objEntity != null)
                //    objDtoEntity = servicecomponentAssembler.ToDTO(objEntity);
                List<ServiceComponentList> objDataList = objEntity.ToList();
                pobjOperationResult.Success = 1;
                return objDataList;
            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
                return null;
            }
        }



        #region Anamnesis

        public void UpdateAnamnesis(ref OperationResult pobjOperationResult, serviceDto pobjDtoEntity, List<string> ClientSession)
        {
            //mon.IsActive = true;

            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                // Obtener la entidad fuente
                var objEntitySource = (from a in dbContext.service
                                       where a.v_ServiceId == pobjDtoEntity.v_ServiceId
                                       select a).FirstOrDefault();

                // Crear la entidad con los datos actualizados
                objEntitySource.v_MainSymptom = pobjDtoEntity.v_MainSymptom;
                objEntitySource.i_TimeOfDisease = pobjDtoEntity.i_TimeOfDisease;
                objEntitySource.i_TimeOfDiseaseTypeId = pobjDtoEntity.i_TimeOfDiseaseTypeId;
                objEntitySource.v_Story = pobjDtoEntity.v_Story;
                objEntitySource.i_DreamId = pobjDtoEntity.i_DreamId;
                objEntitySource.i_UrineId = pobjDtoEntity.i_UrineId;
                objEntitySource.i_DepositionId = pobjDtoEntity.i_DepositionId;
                objEntitySource.i_AppetiteId = pobjDtoEntity.i_AppetiteId;
                objEntitySource.i_ThirstId = pobjDtoEntity.i_ThirstId;
                objEntitySource.d_Fur = pobjDtoEntity.d_Fur;
                objEntitySource.v_CatemenialRegime = pobjDtoEntity.v_CatemenialRegime;
                objEntitySource.i_MacId = pobjDtoEntity.i_MacId;
                objEntitySource.i_HasSymptomId = pobjDtoEntity.i_HasSymptomId;

                objEntitySource.d_PAP = pobjDtoEntity.d_PAP;
                objEntitySource.d_Mamografia = pobjDtoEntity.d_Mamografia;
                objEntitySource.v_Menarquia = pobjDtoEntity.v_Menarquia;
                objEntitySource.v_Gestapara = pobjDtoEntity.v_Gestapara;
                objEntitySource.v_CiruGine = pobjDtoEntity.v_CiruGine;
                objEntitySource.v_Findings = pobjDtoEntity.v_Findings;
                // datos de cabecera del Servicio
                objEntitySource.i_AptitudeStatusId = pobjDtoEntity.i_AptitudeStatusId;
                objEntitySource.i_IsNewControl = pobjDtoEntity.i_IsNewControl;

                objEntitySource.d_UpdateDate = DateTime.Now;
                objEntitySource.i_UpdateUserId = Int32.Parse(ClientSession[2]);

                // Guardar los cambios
                dbContext.SaveChanges();

                pobjOperationResult.Success = 1;
                // Llenar entidad Log
                LogBL.SaveLog(ClientSession[0], ClientSession[1], ClientSession[2], LogEventType.ACTUALIZACION, "SERVICIO", "v_ServiceId=" + pobjDtoEntity.v_ServiceId.ToString(), Success.Ok, null);
                return;
            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
                // Llenar entidad Log
                LogBL.SaveLog(ClientSession[0], ClientSession[1], ClientSession[2], LogEventType.ACTUALIZACION, "SERVICIO", "v_ServiceId=" + pobjDtoEntity.v_ServiceId.ToString(), Success.Failed, pobjOperationResult.ExceptionMessage);
                return;
            }
        }


        #endregion

        #region Diagnosticos del examen / componente

        public List<DiagnosticRepositoryList> GetDisgnosticsByServiceId(ref OperationResult pobjOperationResult, string pstrServiceId)
        {
            //mon.IsActive = true;

            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
                List<DiagnosticRepositoryList> query = (from ccc in dbContext.diagnosticrepository

                                                        join ddd in dbContext.diseases on ccc.v_DiseasesId equals ddd.v_DiseasesId  // Diagnosticos                                                  

                                                        join ggg in dbContext.systemparameter on new { a = ccc.i_FinalQualificationId.Value, b = 138 } //CALIFICACION FINAL
                                                                                            equals new { a = ggg.i_ParameterId, b = ggg.i_GroupId } into J4_join
                                                        from ggg in J4_join.DefaultIfEmpty()

                                                        join hhh in dbContext.systemparameter on new { a = ccc.i_DiagnosticTypeId.Value, b = 166 } // TIPO  [Accidenete, Enfermedad]
                                                                                                equals new { a = hhh.i_ParameterId, b = hhh.i_GroupId } into J3_join
                                                        from hhh in J3_join.DefaultIfEmpty()

                                                        join iii in dbContext.systemparameter on new { a = ccc.i_IsSentToAntecedent.Value, b = 111 } // RESPUESTA SI/NO
                                                                                            equals new { a = iii.i_ParameterId, b = iii.i_GroupId } into J6_join
                                                        from iii in J6_join.DefaultIfEmpty()

                                                        join JJJ in dbContext.systemparameter on new { a = ccc.i_DiagnosticSourceId.Value, b = 167 } // ORIGEN OCU
                                                                                           equals new { a = JJJ.i_ParameterId, b = JJJ.i_GroupId } into J7_join
                                                        from JJJ in J7_join.DefaultIfEmpty()

                                                        join J1 in dbContext.systemuser on new { i_InsertUserId = ccc.i_InsertUserId.Value }
                                                                        equals new { i_InsertUserId = J1.i_SystemUserId } into J1_join
                                                        from J1 in J1_join.DefaultIfEmpty()

                                                        join J2 in dbContext.systemuser on new { i_UpdateUserId = ccc.i_UpdateUserId.Value }
                                                                                        equals new { i_UpdateUserId = J2.i_SystemUserId } into J2_join
                                                        from J2 in J2_join.DefaultIfEmpty()

                                                        where ccc.v_ServiceId == pstrServiceId &&
                                                              ccc.i_IsDeleted == 0

                                                        select new DiagnosticRepositoryList
                                                        {
                                                            v_DiagnosticRepositoryId = ccc.v_DiagnosticRepositoryId,
                                                            v_ServiceId = ccc.v_ServiceId,
                                                            v_ComponentId = ccc.v_ComponentId,
                                                            v_DiseasesId = ccc.v_DiseasesId,
                                                            i_AutoManualId = ccc.i_AutoManualId,
                                                            i_PreQualificationId = ccc.i_PreQualificationId,
                                                            i_FinalQualificationId = ccc.i_FinalQualificationId,
                                                            i_DiagnosticTypeId = ccc.i_DiagnosticTypeId,
                                                            i_IsSentToAntecedent = ccc.i_IsSentToAntecedent,
                                                            d_ExpirationDateDiagnostic = ccc.d_ExpirationDateDiagnostic,
                                                            i_GenerateMedicalBreak = ccc.i_GenerateMedicalBreak,
                                                            v_DiseasesName = ddd.v_Name,

                                                            v_FinalQualificationName = ggg.v_Value1,
                                                            v_DiagnosticTypeName = hhh.v_Value1,
                                                            v_IsSentToAntecedentName = iii.v_Value1,
                                                            i_RecordStatus = (int)RecordStatus.Grabado,
                                                            i_RecordType = (int)RecordType.NoTemporal,

                                                            v_CreationUser = J1.v_UserName,
                                                            v_UpdateUser = J2.v_UserName,
                                                            d_CreationDate = J1.d_InsertDate,
                                                            d_UpdateDate = J2.d_UpdateDate,
                                                            i_IsDeleted = ccc.i_IsDeleted.Value,

                                                            i_DiagnosticSourceId = ccc.i_DiagnosticSourceId,
                                                            v_DiagnosticSourceName = JJJ.v_Value1,
                                                            // Accidente laboral
                                                            i_ShapeAccidentId = ccc.i_ShapeAccidentId,
                                                            i_BodyPartId = ccc.i_BodyPartId,
                                                            i_ClassificationOfWorkAccidentId = ccc.i_ClassificationOfWorkAccidentId,
                                                            // Enfermedad laboral
                                                            i_RiskFactorId = ccc.i_RiskFactorId,
                                                            i_ClassificationOfWorkdiseaseId = ccc.i_ClassificationOfWorkdiseaseId

                                                        }).ToList();


                pobjOperationResult.Success = 1;
                return query;
            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
                return null;
            }
        }


        public List<DiagnosticRepositoryList> GetServiceComponentDisgnosticsForGridView(ref OperationResult pobjOperationResult, string pstrServiceId, string pstrComponentId)
        {
            //mon.IsActive = true;

            try
            {
                string[] components = pstrComponentId.Split('|');

                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
                var query = (from ccc in dbContext.diagnosticrepository
                             join bbb in dbContext.component on ccc.v_ComponentId equals bbb.v_ComponentId

                             join ddd in dbContext.diseases on ccc.v_DiseasesId equals ddd.v_DiseasesId  // Diagnosticos

                             join eee in dbContext.systemparameter on new { a = ccc.i_AutoManualId.Value, b = 136 } // Auto / Manual
                                                                     equals new { a = eee.i_ParameterId, b = eee.i_GroupId }

                             join fff in dbContext.systemparameter on new { a = ccc.i_PreQualificationId.Value, b = 137 } // PRE-CALIFICACION
                                                                 equals new { a = fff.i_ParameterId, b = fff.i_GroupId } into J5_join
                             from fff in J5_join.DefaultIfEmpty()

                             join ggg in dbContext.systemparameter on new { a = ccc.i_FinalQualificationId.Value, b = 138 } //CALIFICACION FINAL
                                                                 equals new { a = ggg.i_ParameterId, b = ggg.i_GroupId } into J4_join
                             from ggg in J4_join.DefaultIfEmpty()

                             join hhh in dbContext.systemparameter on new { a = ccc.i_DiagnosticTypeId.Value, b = 139 } // TIPO DE DX [Enfermedad comun, etc]
                                                                     equals new { a = hhh.i_ParameterId, b = hhh.i_GroupId } into J3_join
                             from hhh in J3_join.DefaultIfEmpty()

                             join iii in dbContext.systemparameter on new { a = ccc.i_IsSentToAntecedent.Value, b = 111 } // RESPUESTA SI/NO
                                                                  equals new { a = iii.i_ParameterId, b = iii.i_GroupId } into J6_join
                             from iii in J6_join.DefaultIfEmpty()

                             join J1 in dbContext.systemuser on new { i_InsertUserId = ccc.i_InsertUserId.Value }
                                             equals new { i_InsertUserId = J1.i_SystemUserId } into J1_join
                             from J1 in J1_join.DefaultIfEmpty()

                             join J2 in dbContext.systemuser on new { i_UpdateUserId = ccc.i_UpdateUserId.Value }
                                                             equals new { i_UpdateUserId = J2.i_SystemUserId } into J2_join
                             from J2 in J2_join.DefaultIfEmpty()

                             where (ccc.v_ServiceId == pstrServiceId) &&
                                 //bbb.i_ComponentTypeId == (int?)ComponentType.Examen &&
                                   (components.Contains(ccc.v_ComponentId)) &&
                                 //ccc.v_ComponentId == pstrComponentId &&
                                   (ccc.i_IsDeleted == 0)
                             select new DiagnosticRepositoryList
                             {
                                 v_DiagnosticRepositoryId = ccc.v_DiagnosticRepositoryId,
                                 v_ServiceId = ccc.v_ServiceId,
                                 v_ComponentId = ccc.v_ComponentId,
                                 v_DiseasesId = ccc.v_DiseasesId,
                                 i_AutoManualId = ccc.i_AutoManualId,
                                 i_PreQualificationId = ccc.i_PreQualificationId,
                                 i_FinalQualificationId = ccc.i_FinalQualificationId,
                                 i_DiagnosticTypeId = ccc.i_DiagnosticTypeId,
                                 i_IsSentToAntecedent = ccc.i_IsSentToAntecedent,
                                 d_ExpirationDateDiagnostic = ccc.d_ExpirationDateDiagnostic,
                                 i_GenerateMedicalBreak = ccc.i_GenerateMedicalBreak,
                                 v_ComponentFieldsId = ccc.v_ComponentFieldId,
                                 v_DiseasesName = ddd.v_Name,
                                 v_AutoManualName = eee.v_Value1,

                                 v_PreQualificationName = fff.v_Value1,
                                 v_FinalQualificationName = ggg.v_Value1,
                                 v_DiagnosticTypeName = hhh.v_Value1,
                                 v_IsSentToAntecedentName = iii.v_Value1,
                                 i_RecordStatus = (int)RecordStatus.Grabado,
                                 i_RecordType = (int)RecordType.NoTemporal,

                                 v_CreationUser = J1.v_UserName,
                                 v_UpdateUser = J2.v_UserName,
                                 d_CreationDate = J1.d_InsertDate,
                                 d_UpdateDate = J2.d_UpdateDate,
                                 i_IsDeleted = ccc.i_IsDeleted.Value
                             }).ToList();


                var q = (from a in query
                         select new DiagnosticRepositoryList
                         {
                             v_DiagnosticRepositoryId = a.v_DiagnosticRepositoryId,
                             v_ServiceId = a.v_ServiceId,
                             v_ComponentId = a.v_ComponentId,
                             v_DiseasesId = a.v_DiseasesId,
                             i_AutoManualId = a.i_AutoManualId,
                             i_PreQualificationId = a.i_PreQualificationId,
                             i_FinalQualificationId = a.i_FinalQualificationId,
                             i_DiagnosticTypeId = a.i_DiagnosticTypeId,
                             i_IsSentToAntecedent = a.i_IsSentToAntecedent,
                             d_ExpirationDateDiagnostic = a.d_ExpirationDateDiagnostic,
                             i_GenerateMedicalBreak = a.i_GenerateMedicalBreak,
                             v_ComponentFieldsId = a.v_ComponentFieldsId,

                             v_RestrictionsName = ConcatenateRestriction(a.v_DiagnosticRepositoryId),
                             v_RecomendationsName = ConcatenateRecommendation(a.v_DiagnosticRepositoryId),
                             v_DiseasesName = a.v_DiseasesName,
                             v_AutoManualName = a.v_AutoManualName,

                             v_PreQualificationName = a.v_PreQualificationName,
                             v_FinalQualificationName = a.v_FinalQualificationName,
                             v_DiagnosticTypeName = a.v_DiagnosticTypeName,
                             v_IsSentToAntecedentName = a.v_IsSentToAntecedentName,
                             i_RecordStatus = a.i_RecordStatus,
                             i_RecordType = a.i_RecordType,

                             v_CreationUser = a.v_CreationUser,
                             v_UpdateUser = a.v_UpdateUser,
                             d_CreationDate = a.d_CreationDate,
                             d_UpdateDate = a.d_UpdateDate,
                             i_IsDeleted = a.i_IsDeleted

                         }).ToList();

                // Agregamos Restricciones / Recomendaciones
                OperationResult objOperationResult = new OperationResult();

                foreach (DiagnosticRepositoryList dr in q)
                {
                    dr.Restrictions = GetServiceRestrictionsByDiagnosticRepositoryId(ref objOperationResult, dr.v_DiagnosticRepositoryId);
                    dr.Recomendations = GetServiceRecommendationByDiagnosticRepositoryId(ref objOperationResult, dr.v_DiagnosticRepositoryId);
                }

                //List<DiagnosticRepositoryList> objData = query.ToList();
                pobjOperationResult.Success = 1;
                return q;
            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
                return null;
            }
        }

        public void AddDiagnosticRepository(ref OperationResult pobjOperationResult, List<DiagnosticRepositoryList> pobjDiagnosticRepository, servicecomponentDto pobjServiceComponent, List<string> ClientSession, bool? enabledchkApproved)
        {
            //mon.IsActive = true;
            string NewId0 = "(No generado)";
            int intNodeId = int.Parse(ClientSession[0]);
            string componentId = null;

            //try
            //{
            SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

            if (pobjDiagnosticRepository != null)
            {
                foreach (var dr in pobjDiagnosticRepository)
                {

                    #region DiagnosticRepository -> ADD / UPDATE / DELETE

                    // ADD
                    if (dr.i_RecordType == (int)RecordType.Temporal && (dr.i_RecordStatus == (int)RecordStatus.Agregado || dr.i_RecordStatus == (int)RecordStatus.Modificado))
                    {
                        diagnosticrepository objEntity = new diagnosticrepository();

                        // En caso de haber mas de un ComponentID quiere decir que lo datos provienen de un examen agrupador con una categoria (LAB,PSICOLOGIA) 
                        // entonces cojo el ID del hijo mayor (osea el primer ID)[0]
                        // Buscar un palote
                        if (dr.v_ComponentId != null)
                        {
                            if (dr.v_ComponentId.Contains('|'))
                                componentId = (dr.v_ComponentId.Split('|'))[0];
                            else
                                componentId = dr.v_ComponentId;
                        }

                        objEntity.v_DiagnosticRepositoryId = dr.v_DiagnosticRepositoryId;
                        objEntity.v_ServiceId = dr.v_ServiceId;
                        objEntity.v_ComponentId = componentId;
                        objEntity.v_DiseasesId = dr.v_DiseasesId;
                        // ID del Control que generó el DX automático [v_ComponentFieldsId]
                        objEntity.v_ComponentFieldId = dr.v_ComponentFieldsId;
                        objEntity.i_AutoManualId = dr.i_AutoManualId;
                        objEntity.i_PreQualificationId = dr.i_PreQualificationId;
                        // Total Diagnósticos
                        objEntity.i_FinalQualificationId = dr.i_FinalQualificationId;
                        objEntity.i_DiagnosticTypeId = dr.i_DiagnosticTypeId;
                        objEntity.i_IsSentToAntecedent = dr.i_IsSentToAntecedent;
                        objEntity.d_ExpirationDateDiagnostic = dr.d_ExpirationDateDiagnostic;

                        objEntity.d_InsertDate = DateTime.Now;
                        objEntity.i_InsertUserId = Int32.Parse(ClientSession[2]);
                        objEntity.i_IsDeleted = 0;

                        // Accidente laboral
                        objEntity.i_DiagnosticSourceId = dr.i_DiagnosticSourceId;
                        objEntity.i_ShapeAccidentId = dr.i_ShapeAccidentId;
                        objEntity.i_BodyPartId = dr.i_BodyPartId;
                        objEntity.i_ClassificationOfWorkAccidentId = dr.i_ClassificationOfWorkAccidentId;

                        // Enfermedad laboral
                        objEntity.i_RiskFactorId = dr.i_RiskFactorId;
                        objEntity.i_ClassificationOfWorkdiseaseId = dr.i_ClassificationOfWorkdiseaseId;

                        // Autogeneramos el Pk de la tabla                      
                        NewId0 = Common.Utils.GetNewId(intNodeId, Utils.GetNextSecuentialId(intNodeId, 29), "DR");
                        objEntity.v_DiagnosticRepositoryId = NewId0;

                        dbContext.AddTodiagnosticrepository(objEntity);

                    }                                                // UPDATE
                    else if (dr.i_RecordType == (int)RecordType.NoTemporal && dr.i_RecordStatus == (int)RecordStatus.Modificado)
                    {
                        // Obtener la entidad fuente
                        var objEntitySource = (from a in dbContext.diagnosticrepository
                                               where a.v_DiagnosticRepositoryId == dr.v_DiagnosticRepositoryId
                                               select a).FirstOrDefault();

                        // Crear la entidad con los datos actualizados   
                        objEntitySource.i_AutoManualId = dr.i_AutoManualId;
                        objEntitySource.i_PreQualificationId = dr.i_PreQualificationId;
                        objEntitySource.v_ComponentId = dr.v_ComponentId.Split('|')[0];
                        // ID del Control que generó el DX automático [v_ComponentFieldsId]
                        //objEntitySource.v_ComponentFieldsId = dr.v_ComponentFieldsId;
                        // Total Diagnósticos
                        if (objEntitySource.i_FinalQualificationId == null)
                            objEntitySource.i_FinalQualificationId = dr.i_FinalQualificationId;

                        objEntitySource.i_DiagnosticTypeId = dr.i_DiagnosticTypeId;
                        objEntitySource.i_IsSentToAntecedent = dr.i_IsSentToAntecedent;
                        objEntitySource.d_ExpirationDateDiagnostic = dr.d_ExpirationDateDiagnostic;

                        // Accidente laboral
                        objEntitySource.i_DiagnosticSourceId = dr.i_DiagnosticSourceId;
                        objEntitySource.i_ShapeAccidentId = dr.i_ShapeAccidentId;
                        objEntitySource.i_BodyPartId = dr.i_BodyPartId;
                        objEntitySource.i_ClassificationOfWorkAccidentId = dr.i_ClassificationOfWorkAccidentId;

                        // Enfermedad laboral
                        objEntitySource.i_RiskFactorId = dr.i_RiskFactorId;
                        objEntitySource.i_ClassificationOfWorkdiseaseId = dr.i_ClassificationOfWorkdiseaseId;

                        objEntitySource.d_UpdateDate = DateTime.Now;
                        objEntitySource.i_UpdateUserId = Int32.Parse(ClientSession[2]);

                    }                                                // DELETE
                    else if (dr.i_RecordType == (int)RecordType.NoTemporal && dr.i_RecordStatus == (int)RecordStatus.EliminadoLogico)
                    {
                        // Obtener la entidad fuente
                        var objEntitySource = (from a in dbContext.diagnosticrepository
                                               where a.v_DiagnosticRepositoryId == dr.v_DiagnosticRepositoryId
                                               select a).FirstOrDefault();

                        // Crear la entidad con los datos actualizados                                                           
                        objEntitySource.d_UpdateDate = DateTime.Now;
                        objEntitySource.i_UpdateUserId = Int32.Parse(ClientSession[2]);
                        objEntitySource.i_IsDeleted = 1;

                    }

                    #endregion

                    #region Restricciones -> ADD / DELETE

                    if (dr.Restrictions != null)
                    {
                        // Operaciones básicas [Add,Update,Delete] restricciones 
                        foreach (var r in dr.Restrictions)
                        {
                            if (r.i_RecordType == (int)RecordType.Temporal && r.i_RecordStatus == (int)RecordStatus.Agregado)
                            {
                                restriction objRestriction = new restriction();

                                var NewId1 = Common.Utils.GetNewId(intNodeId, Utils.GetNextSecuentialId(intNodeId, 30), "RD");
                                objRestriction.v_ServiceId = r.v_ServiceId;
                                objRestriction.v_ComponentId = r.v_ComponentId.Split('|')[0];
                                //objRestriction.v_RestrictionByDiagnosticId = NewId1;
                                objRestriction.v_RestrictionId = NewId1;
                                objRestriction.v_DiagnosticRepositoryId = NewId0 == "(No generado)" ? dr.v_DiagnosticRepositoryId : NewId0;

                                objRestriction.v_MasterRestrictionId = r.v_MasterRestrictionId.Length > 16 ? null : r.v_MasterRestrictionId;
                                objRestriction.d_InsertDate = DateTime.Now;
                                objRestriction.i_InsertUserId = Int32.Parse(ClientSession[2]);
                                objRestriction.i_IsDeleted = 0;

                                dbContext.AddTorestriction(objRestriction);

                            }
                            else if (r.i_RecordType == (int)RecordType.NoTemporal && r.i_RecordStatus == (int)RecordStatus.EliminadoLogico)
                            {
                                // Obtener la entidad fuente v_RestrictionByDiagnosticId
                                var objEntitySource = (from a in dbContext.restriction
                                                       where a.v_RestrictionId == r.v_RestrictionByDiagnosticId
                                                       select a).FirstOrDefault();

                                // Crear la entidad con los datos actualizados                                                           
                                objEntitySource.d_UpdateDate = DateTime.Now;
                                objEntitySource.i_UpdateUserId = Int32.Parse(ClientSession[2]);
                                objEntitySource.i_IsDeleted = 1;

                            }
                        }
                    }

                    #endregion

                    #region Recomendaciones -> ADD / DELETE

                    if (dr.Recomendations != null)
                    {
                        // Grabar recomendaciones 
                        foreach (var r in dr.Recomendations)
                        {
                            if (r.i_RecordType == (int)RecordType.Temporal && r.i_RecordStatus == (int)RecordStatus.Agregado)
                            {
                                recommendation objRecommendation = new recommendation();

                                var NewId1 = Common.Utils.GetNewId(intNodeId, Utils.GetNextSecuentialId(intNodeId, 32), "RR");
                                objRecommendation.v_ServiceId = r.v_ServiceId;
                                objRecommendation.v_ComponentId = r.v_ComponentId.Split('|')[0];
                                objRecommendation.v_RecommendationId = NewId1;
                                objRecommendation.v_DiagnosticRepositoryId = NewId0 == "(No generado)" ? dr.v_DiagnosticRepositoryId : NewId0;

                                //objRecommendation.v_MasterRecommendationId = r.v_RecommendationId.Length > 16 ? null : r.v_MasterRecommendationId;
                                objRecommendation.v_MasterRecommendationId = r.v_MasterRecommendationId;
                                objRecommendation.d_InsertDate = DateTime.Now;
                                objRecommendation.i_InsertUserId = Int32.Parse(ClientSession[2]);
                                objRecommendation.i_IsDeleted = 0;

                                dbContext.AddTorecommendation(objRecommendation);

                            }
                            else if (r.i_RecordType == (int)RecordType.NoTemporal && r.i_RecordStatus == (int)RecordStatus.EliminadoLogico)
                            {
                                // Obtener la entidad fuente
                                var objEntitySource = (from a in dbContext.recommendation
                                                       where a.v_RecommendationId == r.v_RecommendationId
                                                       select a).FirstOrDefault();

                                // Crear la entidad con los datos actualizados                                                           
                                objEntitySource.d_UpdateDate = DateTime.Now;
                                objEntitySource.i_UpdateUserId = Int32.Parse(ClientSession[2]);
                                objEntitySource.i_IsDeleted = 1;

                            }
                        }
                    }

                    #endregion

                }

                // Guardar los cambios
                dbContext.SaveChanges();

                pobjOperationResult.Success = 1;
                // Llenar entidad Log
                LogBL.SaveLog(ClientSession[0], ClientSession[1], ClientSession[2], LogEventType.CREACION, "DIAGNOSTICOS / RESTRICCIONES / RECOMENDACIONES POR EXAMEN COMPONENTE", "v_DiagnosticRepositoryId=" + NewId0.ToString(), Success.Ok, null);

                //}
                //catch (Exception ex)
                //{
                //    pobjOperationResult.Success = 0;
                //    pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
                //    // Llenar entidad Log
                //    LogBL.SaveLog(ClientSession[0], ClientSession[1], ClientSession[2], LogEventType.CREACION, "DIAGNOSTICOS / RESTRICCIONES / RECOMENDACIONES POR EXAMEN COMPONENTE", "v_DiagnosticRepositoryId=" + NewId0.ToString(), Success.Failed, pobjOperationResult.ExceptionMessage);
                //    return;
                //}
            }

            if (pobjServiceComponent != null)
            {
                // Actualizar algunos valores de ServiceComponent
                OperationResult objOperationResult = new OperationResult();
                UpdateServiceComponentFromEso(ref objOperationResult, pobjServiceComponent, ClientSession, enabledchkApproved);
            }

        }

        private string ConcatenateRestriction(string pstrDiagnosticRepositoryId)
        {
            SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

            var qry = (from a in dbContext.restriction  // RESTRICCIONES POR Diagnosticos
                       join eee in dbContext.masterrecommendationrestricction on a.v_MasterRestrictionId equals eee.v_MasterRecommendationRestricctionId
                       where a.v_DiagnosticRepositoryId == pstrDiagnosticRepositoryId &&
                       a.i_IsDeleted == 0 && eee.i_TypifyingId == (int)Typifying.Restricciones
                       select new
                       {
                           v_RestrictionsName = eee.v_Name
                       }).ToList();

            return string.Join(", ", qry.Select(p => p.v_RestrictionsName));
        }

        private string ConcatenateRecommendation(string pstrDiagnosticRepositoryId)
        {
            SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

            var qry = (from a in dbContext.recommendation  // RECOMENDACIONES
                       join eee in dbContext.masterrecommendationrestricction on a.v_MasterRecommendationId equals eee.v_MasterRecommendationRestricctionId
                       where a.v_DiagnosticRepositoryId == pstrDiagnosticRepositoryId &&
                       a.i_IsDeleted == 0 && eee.i_TypifyingId == (int)Typifying.Recomendaciones
                       select new
                       {
                           v_RecommendationName = eee.v_Name
                       }).ToList();

            return string.Join(", ", qry.Select(p => p.v_RecommendationName));
        }

        public bool AddServiceComponentValues(ref OperationResult pobjOperationResult, List<ServiceComponentFieldsList> pobjServicecomponentfields, List<string> ClientSession, string pstrPersonId, string pServiceComponentId)
        {

            bool result = false;

            string NewId, NewId2 = "(No generado)";
            try
            {
                //using (var ts = new TransactionScope())
                //{

                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                // NO hay campos que grabar osea no se ha modificado nada
                if (pobjServicecomponentfields.Count == 0)
                {
                    pobjOperationResult.Success = 1;
                    return true;
                }

                int intNodeId = int.Parse(ClientSession[0]);
                //BETO USA ESTO 20180512
                //DAVID para separar los NewId del SECUENCIAL
                int scfvToSave = pobjServicecomponentfields.Count;
                int scfvSecuential = Utils.GetNextGroupOfSecuentialId(intNodeId, 35, scfvToSave);
                int scfvSecuentialSave = Utils.GetNextGroupOfSecuentialIdwithSave(intNodeId, 35, scfvToSave);

                int scfToSave = pobjServicecomponentfields.Count;
                int scfSecuential = Utils.GetNextGroupOfSecuentialId(intNodeId, 36, scfToSave);
                int scfSecuentialSave = Utils.GetNextGroupOfSecuentialIdwithSave(intNodeId, 36, scfToSave);

                List<string> grupoFactorSanguineo = new List<string>();

                var serviceComponentfields = (from a in dbContext.servicecomponentfields
                                              where a.v_ServiceComponentId == pServiceComponentId
                                              select a).ToList();

                //var ENT = serviceComponentfields.SelectMany(P => P.servicecomponentfieldvalues.Where(p => p.v_ServiceComponentFieldsId == "N009-CF000517532")).ToList();

                serviceComponentfields.Sort((x, y) => x.v_ComponentFieldId.CompareTo(y.v_ComponentFieldId));

                foreach (var cf in pobjServicecomponentfields)
                {
                    var q = serviceComponentfields.Find(p => p.v_ComponentFieldId == cf.v_ComponentFieldsId);

                    if (q == null)   // ADD
                    {
                        #region GRABAR CAMPOS DE UN SERVICE COMPONENT

                        servicecomponentfields objEntity = new servicecomponentfields();

                        objEntity.v_ComponentFieldId = cf.v_ComponentFieldsId;
                        objEntity.v_ServiceComponentId = cf.v_ServiceComponentId;
                        objEntity.d_InsertDate = DateTime.Now;
                        objEntity.i_InsertUserId = Int32.Parse(ClientSession[2]);
                        objEntity.i_IsDeleted = 0;

                        // Autogeneramos el Pk de la tabla               
                        //NewId = Common.Utils.GetNewId(intNodeId, Utils.GetNextSecuentialId(intNodeId, 35), "CF");
                        NewId2 = Common.Utils.GetNewId(intNodeId, scfvSecuential, "CF");
                        objEntity.v_ServiceComponentFieldsId = NewId2;

                        dbContext.AddToservicecomponentfields(objEntity);
                        //dbContext.SaveChanges();

                        #endregion

                        foreach (var fv in cf.ServiceComponentFieldValues)
                        {
                            #region Buscar y almacenar GRUPO y FACTOR SANGUINEO en una lista temp

                            if (cf.v_ComponentFieldsId == Constants.GRUPO_SANGUINEO_ID)
                            {
                                grupoFactorSanguineo.Add(fv.v_Value1);
                            }

                            if (cf.v_ComponentFieldsId == Constants.FACTOR_SANGUINEO_ID)
                            {
                                grupoFactorSanguineo.Add(fv.v_Value1);
                            }

                            #endregion

                            #region GRABAR VALORES DE UN SERVICE COMPONENT

                            servicecomponentfieldvalues objEntity1 = new servicecomponentfieldvalues();

                            objEntity1.v_ComponentFieldValuesId = fv.v_ComponentFieldValuesId;
                            objEntity1.v_Value1 = fv.v_Value1;
                            objEntity1.d_InsertDate = DateTime.Now;
                            objEntity1.i_InsertUserId = Int32.Parse(ClientSession[2]);
                            objEntity1.i_IsDeleted = 0;

                            // Autogeneramos el Pk de la tabla               
                            //var NewId1 = Common.Utils.GetNewId(intNodeId, Utils.GetNextSecuentialId(intNodeId, 36), "CV");
                            var NewId3 = Common.Utils.GetNewId(intNodeId, scfSecuential, "CV");
                            objEntity1.v_ServiceComponentFieldValuesId = NewId3;
                            objEntity1.v_ServiceComponentFieldsId = NewId2;

                            dbContext.AddToservicecomponentfieldvalues(objEntity1);

                            #endregion
                        }
                    }
                    else         // UPDATE
                    {
                        #region ACTUALIZAR CAMPOS DE UN SERVICE COMPONENT

                        //q.v_ComponentFieldId = cf.v_ComponentFieldsId;
                        //q.v_ServiceComponentId = cf.v_ServiceComponentId;
                        q.d_UpdateDate = DateTime.Now;
                        q.i_UpdateUserId = Int32.Parse(ClientSession[2]);

                        // Guardar los cambios
                        //dbContext.SaveChanges();

                        #endregion

                        foreach (var fv in cf.ServiceComponentFieldValues)
                        {
                            #region Buscar y almacenar GRUPO y FACTOR SANGUINEO en una lista temp

                            if (cf.v_ComponentFieldsId == Constants.GRUPO_SANGUINEO_ID)
                            {
                                grupoFactorSanguineo.Add(fv.v_Value1);
                            }

                            if (cf.v_ComponentFieldsId == Constants.FACTOR_SANGUINEO_ID)
                            {
                                grupoFactorSanguineo.Add(fv.v_Value1);
                            }

                            #endregion

                            #region ACTUALIZAR VALORES DE UN SERVICE COMPONENT

                            var q1 = (from a in dbContext.servicecomponentfieldvalues
                                      where a.v_ServiceComponentFieldsId == q.v_ServiceComponentFieldsId
                                      select a).FirstOrDefault();

                            // problema k pasaba con examen fisico se grababa el campo pero no el valor si el valor no esta grabado
                            // se graba a la prepo
                            if (q1 == null)
                            {
                                servicecomponentfieldvalues objEntity1 = new servicecomponentfieldvalues();

                                objEntity1.v_ComponentFieldValuesId = fv.v_ComponentFieldValuesId;
                                objEntity1.v_Value1 = fv.v_Value1;
                                objEntity1.d_InsertDate = DateTime.Now;
                                objEntity1.i_InsertUserId = Int32.Parse(ClientSession[2]);
                                objEntity1.i_IsDeleted = 0;

                                // Autogeneramos el Pk de la tabla               
                                var NewId1 = Common.Utils.GetNewId(intNodeId, Utils.GetNextSecuentialId(intNodeId, 36), "CV");
                                objEntity1.v_ServiceComponentFieldValuesId = NewId1;
                                objEntity1.v_ServiceComponentFieldsId = q.v_ServiceComponentFieldsId;

                                dbContext.AddToservicecomponentfieldvalues(objEntity1);
                            }
                            else
                            {
                                //if (q.v_ServiceComponentFieldsId == "N009-CF000517532")
                                //{
                                //    var ff = cf.v_Value1;
                                //}

                                //q1.v_ComponentFieldValuesId = fv.v_ComponentFieldValuesId;
                                q1.v_Value1 = fv.v_Value1;
                                q1.d_UpdateDate = DateTime.Now;
                                q1.i_UpdateUserId = Int32.Parse(ClientSession[2]);
                            }

                            #endregion
                        }
                    }
                    scfvSecuential = scfvSecuential + 1;
                    scfSecuential = scfSecuential + 1;
                }

                if (grupoFactorSanguineo.Count != 0)
                {
                    #region GRABAR GRUPO y FACTOR SANGUINEO

                    var person = (from a in dbContext.person
                                  where a.v_PersonId == pstrPersonId
                                  select a).FirstOrDefault();

                    person.i_BloodGroupId = int.Parse(grupoFactorSanguineo[0]);
                    person.i_BloodFactorId = int.Parse(grupoFactorSanguineo[1]);
                    person.d_UpdateDate = DateTime.Now;
                    person.i_UpdateUserId = Int32.Parse(ClientSession[2]);
                    //dbContext.SaveChanges();

                    #endregion
                }



                result = (dbContext.SaveChanges() > 0);

                pobjOperationResult.Success = 1;
                // Llenar entidad Log
                LogBL.SaveLog(ClientSession[0], ClientSession[1], ClientSession[2], LogEventType.CREACION, "CAMPOS DE UN COMPONENTE DE SERVICIO", "v_ServiceComponentId=" + NewId2.ToString(), Success.Ok, null);
                //ts.Complete();
                //}
            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
                // Llenar entidad Log
                LogBL.SaveLog(ClientSession[0], ClientSession[1], ClientSession[2], LogEventType.CREACION, "CAMPOS DE UN COMPONENTE DE SERVICIO", "v_ServiceComponentId=" + NewId2.ToString(), Success.Failed, pobjOperationResult.ExceptionMessage);

            }

            return result;
        }


        public List<DiagnosticRepositoryList> GetDiagnosticoSugeridoSistema(ref OperationResult pobjOperationResult, string pstrComponentFieldsId, string pstrAnalyzingValue)
        {
            //mon.IsActive = true;

            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                List<DiagnosticRepositoryList> query = (from ccc in dbContext.componentfieldvalues
                                                        //join bbb in dbContext.component on ccc.v_ComponentId equals bbb.v_ComponentId

                                                        join ddd in dbContext.diseases on ccc.v_Diseases equals ddd.v_DiseasesId into J6_join  // Diagnosticos
                                                        from ddd in J6_join.DefaultIfEmpty()

                                                        join eee in dbContext.systemparameter on new { a = (int)AutoManual.Automático, b = 136 } // Auto / Manual
                                                                                                equals new { a = eee.i_ParameterId, b = eee.i_GroupId }

                                                        join fff in dbContext.systemparameter on new { a = (int)PreQualification.SinPreCalificar, b = 137 } // PRE-CALIFICACION
                                                                                            equals new { a = fff.i_ParameterId, b = fff.i_GroupId } into J5_join
                                                        from fff in J5_join.DefaultIfEmpty()

                                                        join J1 in dbContext.systemuser on new { i_InsertUserId = ccc.i_InsertUserId.Value }
                                                                        equals new { i_InsertUserId = J1.i_SystemUserId } into J1_join
                                                        from J1 in J1_join.DefaultIfEmpty()

                                                        join J2 in dbContext.systemuser on new { i_UpdateUserId = ccc.i_UpdateUserId.Value }
                                                                                        equals new { i_UpdateUserId = J2.i_SystemUserId } into J2_join
                                                        from J2 in J2_join.DefaultIfEmpty()

                                                        where ccc.v_ComponentFieldId == pstrComponentFieldsId &&
                                                              ccc.i_IsDeleted == 0
                                                        select new DiagnosticRepositoryList
                                                        {
                                                            //v_DiagnosticRepositoryId = ccc.v_DiagnosticRepositoryId,
                                                            //v_ServiceId = ccc.v_ServiceId,
                                                            //v_ComponentId = ccc.v_ComponentId,
                                                            v_DiseasesId = ccc.v_Diseases,
                                                            //i_AutoManualId = ccc.i_AutoManualId,
                                                            //i_PreQualificationId = ccc.i_PreQualificationId,
                                                            //i_FinalQualificationId = ccc.i_FinalQualificationId,
                                                            //i_DiagnosticTypeId = ccc.i_DiagnosticTypeId,
                                                            //i_IsSentToAntecedent = ccc.i_IsSentToAntecedent,
                                                            //d_ExpirationDateDiagnostic = ccc.d_ExpirationDateDiagnostic,
                                                            //i_GenerateMedicalBreak = ccc.i_GenerateMedicalBreak,

                                                            v_ComponentFieldValuesId = ccc.v_ComponentFieldValuesId,
                                                            v_ComponentFieldsId = ccc.v_ComponentFieldId,
                                                            v_LegalStandard = ccc.v_LegalStandard,
                                                            i_OperatorId = ccc.i_OperatorId,
                                                            i_IsAnormal = ccc.i_IsAnormal,
                                                            i_ValidationMonths = ccc.i_ValidationMonths,
                                                            v_AnalyzingValue1 = ccc.v_AnalyzingValue1,
                                                            v_AnalyzingValue2 = ccc.v_AnalyzingValue2,

                                                            v_DiseasesName = ddd.v_Name,
                                                            v_AutoManualName = eee.v_Value1,

                                                            v_PreQualificationName = fff.v_Value1,

                                                            i_RecordStatus = (int)RecordStatus.Grabado,
                                                            i_RecordType = (int)RecordType.NoTemporal,

                                                            v_CreationUser = J1.v_UserName,
                                                            v_UpdateUser = J2.v_UserName,
                                                            d_CreationDate = J1.d_InsertDate,
                                                            d_UpdateDate = J2.d_UpdateDate,
                                                            i_IsDeleted = ccc.i_IsDeleted.Value
                                                        }).ToList();

                float? f = float.Parse(pstrAnalyzingValue);

                var q = (from a in query
                         //where (a.i_OperatorId == (int)Operator2Values.X_esMenorque_A) && (a.r_AnalyzingValue1 < f) &&
                         //       (a.i_OperatorId == (int)Operator2Values.X_esMayorIgualque_A) && (a.r_AnalyzingValue1 >= f)
                         //where a.v_ComponentFieldsId == "Just perfect"
                         select new DiagnosticRepositoryList
                         {
                             //v_DiagnosticRepositoryId = a.v_DiagnosticRepositoryId,
                             //v_ServiceId = a.v_ServiceId,
                             //v_ComponentId = a.v_ComponentId,
                             //v_DiseasesId = a.v_DiseasesId,
                             //i_AutoManualId = a.i_AutoManualId,
                             //i_PreQualificationId = a.i_PreQualificationId,
                             //i_FinalQualificationId = a.i_FinalQualificationId,
                             //i_DiagnosticTypeId = a.i_DiagnosticTypeId,
                             //i_IsSentToAntecedent = a.i_IsSentToAntecedent,
                             //d_ExpirationDateDiagnostic = a.d_ExpirationDateDiagnostic,
                             //i_GenerateMedicalBreak = a.i_GenerateMedicalBreak,

                             //v_RestrictionsName = ConcatenateRestriction(a.v_DiagnosticRepositoryId),
                             //v_RecomendationsName = ConcatenateRecommendation(a.v_DiagnosticRepositoryId),
                             v_ComponentFieldValuesId = a.i_OperatorId == (int)Operator2Values.X_esIgualque_A ? "Toasted" :
                                                        a.i_OperatorId == (int)Operator2Values.X_noesIgualque_A ? "I like it" :
                                                        a.i_OperatorId == (int)Operator2Values.X_esMenorque_A ? "Just perfect" :  // X < 18.5 (bajo peso)
                                                        a.i_OperatorId == (int)Operator2Values.X_esMenorIgualque_A ? "Gonna freeze my" :
                                                        a.i_OperatorId == (int)Operator2Values.X_esMayorque_A ? "Gonna freeze my" :
                                                        a.i_OperatorId == (int)Operator2Values.X_esMayorIgualque_A ? "Gonna freeze my" :  // X >= 40.0
                                                        a.i_OperatorId == (int)Operator2Values.X_esMayorque_A_yMenorque_B ? "Gonna freeze my" :
                                                        a.i_OperatorId == (int)Operator2Values.X_esMayorque_A_yMenorIgualque_B ? "Gonna freeze my" :
                                                        a.i_OperatorId == (int)Operator2Values.X_esMayorIgualque_A_yMenorque_B ? "Gonna freeze my" :
                                                        a.i_OperatorId == (int)Operator2Values.X_esMayorIgualque_A_yMenorIgualque_B ? "Gonna freeze my" : "",

                             i_OperatorId = a.i_OperatorId,
                             i_IsAnormal = a.i_IsAnormal,
                             i_ValidationMonths = a.i_ValidationMonths,
                             v_AnalyzingValue1 = a.v_AnalyzingValue1,
                             v_AnalyzingValue2 = a.v_AnalyzingValue2,
                             v_DiseasesName = a.v_DiseasesName,
                             v_AutoManualName = a.v_AutoManualName,

                             v_PreQualificationName = a.v_PreQualificationName,
                             //v_FinalQualificationName = a.v_FinalQualificationName,
                             //v_DiagnosticTypeName = a.v_DiagnosticTypeName,
                             //v_IsSentToAntecedentName = a.v_IsSentToAntecedentName,
                             i_RecordStatus = a.i_RecordStatus,
                             i_RecordType = a.i_RecordType,

                             v_CreationUser = a.v_CreationUser,
                             v_UpdateUser = a.v_UpdateUser,
                             d_CreationDate = a.d_CreationDate,
                             d_UpdateDate = a.d_UpdateDate,
                             i_IsDeleted = a.i_IsDeleted

                         }).ToList();

                //List<DiagnosticRepositoryList> objData = query.ToList();
                pobjOperationResult.Success = 1;
                return q;
            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
                return null;
            }
        }


        #endregion

        #region Plan Trabajo

        #region Medicacion

        public List<MedicationList> GetServiceMedicationsForGridView(ref OperationResult pobjOperationResult, string pstrServiceId)
        {
            //mon.IsActive = true;

            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                List<MedicationList> query = (from ddd in dbContext.medication
                                              join fff in dbContext.product on ddd.v_ProductId equals fff.v_ProductId
                                              join eee in dbContext.systemparameter on new { a = ddd.i_ViaId.Value, b = 142 } // VIAS [ORAL,INTRAMUSCULAR,ETC]
                                                                                      equals new { a = eee.i_ParameterId, b = eee.i_GroupId }

                                              join J1 in dbContext.systemuser on new { i_InsertUserId = ddd.i_InsertUserId.Value }
                                                              equals new { i_InsertUserId = J1.i_SystemUserId } into J1_join
                                              from J1 in J1_join.DefaultIfEmpty()

                                              join J2 in dbContext.systemuser on new { i_UpdateUserId = ddd.i_UpdateUserId.Value }
                                                                              equals new { i_UpdateUserId = J2.i_SystemUserId } into J2_join
                                              from J2 in J2_join.DefaultIfEmpty()

                                              where ddd.v_ServiceId == pstrServiceId &&
                                                    ddd.i_IsDeleted == 0
                                              select new MedicationList
                                              {
                                                  v_MedicationId = ddd.v_MedicationId,
                                                  v_ProductId = fff.v_ProductId,
                                                  v_ServiceId = ddd.v_ServiceId,
                                                  v_ProductName = fff.v_Name,
                                                  v_PresentationName = fff.v_Presentation,
                                                  r_Quantity = ddd.r_Quantity,
                                                  v_Doses = ddd.v_Doses,
                                                  i_ViaId = ddd.i_ViaId,
                                                  v_ViaName = eee.v_Value1,
                                                  i_RecordStatus = (int)RecordStatus.Grabado,
                                                  i_RecordType = (int)RecordType.NoTemporal,
                                                  v_CreationUser = J1.v_UserName,
                                                  v_UpdateUser = J2.v_UserName,
                                                  d_CreationDate = J1.d_InsertDate,
                                                  d_UpdateDate = J2.d_UpdateDate,
                                                  i_IsDeleted = ddd.i_IsDeleted.Value
                                              }).ToList();



                //List<DiagnosticRepositoryList> objData = query.ToList();
                pobjOperationResult.Success = 1;
                return query;
            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
                return null;
            }
        }

        #endregion

        #region Procedimientos

        public List<ProcedureByServiceList> GetServiceProceduresForGridView(ref OperationResult pobjOperationResult, string pstrServiceId)
        {
            //mon.IsActive = true;

            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                List<ProcedureByServiceList> query = (from ddd in dbContext.procedurebyservice
                                                      join eee in dbContext.datahierarchy on new { a = ddd.i_ProcedureId.Value, b = 111 } // PROCEDIMIENTOS [INYECTABLES,LAVADO OCULAR,ETC]
                                                                                              equals new { a = eee.i_ItemId, b = eee.i_GroupId }

                                                      join J1 in dbContext.systemuser on new { i_InsertUserId = ddd.i_InsertUserId.Value }
                                                                      equals new { i_InsertUserId = J1.i_SystemUserId } into J1_join
                                                      from J1 in J1_join.DefaultIfEmpty()

                                                      join J2 in dbContext.systemuser on new { i_UpdateUserId = ddd.i_UpdateUserId.Value }
                                                                                      equals new { i_UpdateUserId = J2.i_SystemUserId } into J2_join
                                                      from J2 in J2_join.DefaultIfEmpty()

                                                      where ddd.v_ServiceId == pstrServiceId &&
                                                            ddd.i_IsDeleted == 0
                                                      select new ProcedureByServiceList
                                                      {
                                                          v_ProcedureByServiceId = ddd.v_ProcedureByServiceId,
                                                          v_ServiceId = ddd.v_ServiceId,
                                                          i_ProcedureId = ddd.i_ProcedureId,
                                                          v_ProcedureName = eee.v_Value1,
                                                          i_RecordStatus = (int)RecordStatus.Grabado,
                                                          i_RecordType = (int)RecordType.NoTemporal,
                                                          v_CreationUser = J1.v_UserName,
                                                          v_UpdateUser = J2.v_UserName,
                                                          d_CreationDate = J1.d_InsertDate,
                                                          d_UpdateDate = J2.d_UpdateDate,
                                                          i_IsDeleted = ddd.i_IsDeleted.Value
                                                      }).ToList();



                //List<DiagnosticRepositoryList> objData = query.ToList();
                pobjOperationResult.Success = 1;
                return query;
            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
                return null;
            }
        }

        #endregion

        #region Restricciones

        public List<RestrictionList> GetServiceRestrictionsForGridView(ref OperationResult pobjOperationResult, string pstrServiceId)
        {
            //mon.IsActive = true;

            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                List<RestrictionList> query = (from ddd in dbContext.restriction  // RESTRICCIONES 
                                               join fff in dbContext.diagnosticrepository on ddd.v_DiagnosticRepositoryId
                                                                                 equals fff.v_DiagnosticRepositoryId into J7_join
                                               from fff in J7_join.DefaultIfEmpty()

                                               join eee in dbContext.masterrecommendationrestricction on ddd.v_MasterRestrictionId equals eee.v_MasterRecommendationRestricctionId

                                               join J1 in dbContext.systemuser on new { i_InsertUserId = ddd.i_InsertUserId.Value }
                                                               equals new { i_InsertUserId = J1.i_SystemUserId } into J1_join
                                               from J1 in J1_join.DefaultIfEmpty()

                                               join J2 in dbContext.systemuser on new { i_UpdateUserId = ddd.i_UpdateUserId.Value }
                                                                               equals new { i_UpdateUserId = J2.i_SystemUserId } into J2_join
                                               from J2 in J2_join.DefaultIfEmpty()
                                               where (ddd.v_ServiceId == pstrServiceId) &&
                                               (ddd.i_IsDeleted == 0) &&
                                               (fff.i_FinalQualificationId == (int)FinalQualification.Definitivo ||
                                               fff.i_FinalQualificationId == (int)FinalQualification.Presuntivo)

                                               select new RestrictionList
                                               {
                                                   v_DiagnosticRepositoryId = ddd.v_DiagnosticRepositoryId,
                                                   v_RestrictionByDiagnosticId = ddd.v_RestrictionId,
                                                   v_MasterRestrictionId = ddd.v_MasterRestrictionId,
                                                   v_RestrictionName = eee.v_Name,
                                                   v_ComponentId = ddd.v_ComponentId,
                                                   i_RecordStatus = (int)RecordStatus.Grabado,
                                                   i_RecordType = (int)RecordType.NoTemporal,
                                                   d_StartDateRestriction = ddd.d_StartDateRestriction,
                                                   d_EndDateRestriction = ddd.d_EndDateRestriction

                                               }).Concat(from r in dbContext.restriction
                                                         join eee in dbContext.masterrecommendationrestricction on r.v_MasterRestrictionId equals eee.v_MasterRecommendationRestricctionId
                                                         where (r.v_ServiceId == pstrServiceId) &&
                                                         (r.i_IsDeleted == 0) &&
                                                         (r.v_DiagnosticRepositoryId == null)
                                                         select new RestrictionList
                                                         {
                                                             v_DiagnosticRepositoryId = r.v_DiagnosticRepositoryId,
                                                             v_RestrictionByDiagnosticId = r.v_RestrictionId,
                                                             v_MasterRestrictionId = r.v_MasterRestrictionId,
                                                             v_RestrictionName = eee.v_Name,
                                                             v_ComponentId = r.v_ComponentId,
                                                             i_RecordStatus = (int)RecordStatus.Grabado,
                                                             i_RecordType = (int)RecordType.NoTemporal,
                                                             d_StartDateRestriction = r.d_StartDateRestriction,
                                                             d_EndDateRestriction = r.d_EndDateRestriction

                                                         }).ToList();

                //List<DiagnosticRepositoryList> objData = query.ToList();
                pobjOperationResult.Success = 1;
                return query;
            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
                return null;
            }
        }

        public List<RestrictionList> GetServiceRestrictionsByDiagnosticRepositoryId(ref OperationResult pobjOperationResult, string pstrDiagnosticRepositoryId)
        {
            //mon.IsActive = true;

            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                List<RestrictionList> query = (from ddd in dbContext.restriction  // RESTRICCIONES 
                                               join eee in dbContext.masterrecommendationrestricction on ddd.v_MasterRestrictionId equals eee.v_MasterRecommendationRestricctionId // RESTRICIONES

                                               join J1 in dbContext.systemuser on new { i_InsertUserId = ddd.i_InsertUserId.Value }
                                                               equals new { i_InsertUserId = J1.i_SystemUserId } into J1_join
                                               from J1 in J1_join.DefaultIfEmpty()

                                               join J2 in dbContext.systemuser on new { i_UpdateUserId = ddd.i_UpdateUserId.Value }
                                                                               equals new { i_UpdateUserId = J2.i_SystemUserId } into J2_join
                                               from J2 in J2_join.DefaultIfEmpty()

                                               where ddd.v_DiagnosticRepositoryId == pstrDiagnosticRepositoryId &&
                                                     ddd.i_IsDeleted == 0
                                               select new RestrictionList
                                               {
                                                   //v_RestrictionByDiagnosticId = ddd.v_RestrictionByDiagnosticId,
                                                   v_RestrictionByDiagnosticId = ddd.v_RestrictionId,
                                                   v_DiagnosticRepositoryId = ddd.v_DiagnosticRepositoryId,
                                                   v_ServiceId = ddd.v_ServiceId,
                                                   v_ComponentId = ddd.v_ComponentId,
                                                   v_MasterRestrictionId = ddd.v_MasterRestrictionId,
                                                   v_RestrictionName = eee.v_Name,
                                                   i_RecordStatus = (int)RecordStatus.Grabado,
                                                   i_RecordType = (int)RecordType.NoTemporal,
                                                   v_CreationUser = J1.v_UserName,
                                                   v_UpdateUser = J2.v_UserName,
                                                   d_CreationDate = J1.d_InsertDate,
                                                   d_UpdateDate = J2.d_UpdateDate,
                                                   i_IsDeleted = ddd.i_IsDeleted.Value
                                               }).ToList();



                //List<DiagnosticRepositoryList> objData = query.ToList();
                pobjOperationResult.Success = 1;
                return query;
            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
                return null;
            }
        }


        #endregion

        #region Recomendaciones

        public List<RecomendationList> GetServiceRecommendationByDiagnosticRepositoryId(ref OperationResult pobjOperationResult, string pstrDiagnosticRepositoryId)
        {
            //mon.IsActive = true;

            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                List<RecomendationList> query = (from ddd in dbContext.recommendation
                                                 join eee in dbContext.masterrecommendationrestricction on ddd.v_MasterRecommendationId equals eee.v_MasterRecommendationRestricctionId //                                                                                                                                  

                                                 join J1 in dbContext.systemuser on new { i_InsertUserId = ddd.i_InsertUserId.Value }
                                                                 equals new { i_InsertUserId = J1.i_SystemUserId } into J1_join
                                                 from J1 in J1_join.DefaultIfEmpty()

                                                 join J2 in dbContext.systemuser on new { i_UpdateUserId = ddd.i_UpdateUserId.Value }
                                                                                 equals new { i_UpdateUserId = J2.i_SystemUserId } into J2_join
                                                 from J2 in J2_join.DefaultIfEmpty()

                                                 where ddd.v_DiagnosticRepositoryId == pstrDiagnosticRepositoryId &&
                                                       ddd.i_IsDeleted == 0
                                                 select new RecomendationList
                                                 {
                                                     v_RecommendationId = ddd.v_RecommendationId,
                                                     v_DiagnosticRepositoryId = ddd.v_DiagnosticRepositoryId,
                                                     v_ServiceId = ddd.v_ServiceId,
                                                     v_ComponentId = ddd.v_ComponentId,
                                                     v_MasterRecommendationId = ddd.v_MasterRecommendationId,
                                                     v_RecommendationName = eee.v_Name,
                                                     i_RecordStatus = (int)RecordStatus.Grabado,
                                                     i_RecordType = (int)RecordType.NoTemporal,
                                                     v_CreationUser = J1.v_UserName,
                                                     v_UpdateUser = J2.v_UserName,
                                                     d_CreationDate = J1.d_InsertDate,
                                                     d_UpdateDate = J2.d_UpdateDate,
                                                     i_IsDeleted = ddd.i_IsDeleted.Value
                                                 }).ToList();



                //List<DiagnosticRepositoryList> objData = query.ToList();
                pobjOperationResult.Success = 1;
                return query;
            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
                return null;
            }
        }

        public List<RecomendationList> GetServiceRecommendationByServiceId(ref OperationResult pobjOperationResult, string pstrServiceId)
        {
            //mon.IsActive = true;

            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                //List<RecomendationList> query = (from ddd in dbContext.recommendation
                //                                 join fff in dbContext.diagnosticrepository on ddd.v_DiagnosticRepositoryId
                //                                                                 equals fff.v_DiagnosticRepositoryId into J7_join
                //                                 from fff in J7_join.DefaultIfEmpty()

                //                                 join eee in dbContext.masterrecommendationrestricction on ddd.v_MasterRecommendationId equals eee.v_MasterRecommendationRestricctionId  // RECOMENDACIONES                                                                                                                                                                                                                                                         

                //                                 join J1 in dbContext.systemuser on new { i_InsertUserId = ddd.i_InsertUserId.Value }
                //                                                 equals new { i_InsertUserId = J1.i_SystemUserId } into J1_join
                //                                 from J1 in J1_join.DefaultIfEmpty()

                //                                 join J2 in dbContext.systemuser on new { i_UpdateUserId = ddd.i_UpdateUserId.Value }
                //                                                                 equals new { i_UpdateUserId = J2.i_SystemUserId } into J2_join
                //                                 from J2 in J2_join.DefaultIfEmpty()
                //                                 where (ddd.v_ServiceId == pstrServiceId) &&
                //                                       (ddd.i_IsDeleted == 0) &&
                //                                       (fff.i_IsDeleted == 0) &&
                //                                       (fff.i_FinalQualificationId == (int)FinalQualification.Definitivo ||
                //                                        fff.i_FinalQualificationId == (int)FinalQualification.Presuntivo)
                //                                 select new RecomendationList
                //                                 {
                //                                     v_RecommendationId = ddd.v_RecommendationId,
                //                                     v_DiagnosticRepositoryId = ddd.v_DiagnosticRepositoryId,
                //                                     v_ServiceId = ddd.v_ServiceId,
                //                                     v_ComponentId = ddd.v_ComponentId,
                //                                     v_MasterRecommendationId = ddd.v_MasterRecommendationId,
                //                                     v_RecommendationName = eee.v_Name,
                //                                     i_RecordStatus = (int)RecordStatus.Grabado,
                //                                     i_RecordType = (int)RecordType.NoTemporal
                //                                     //v_CreationUser = J1.v_UserName,
                //                                     //v_UpdateUser = J2.v_UserName,
                //                                     //d_CreationDate = J1.d_InsertDate,
                //                                     //d_UpdateDate = J2.d_UpdateDate,
                //                                     //i_IsDeleted = ddd.i_IsDeleted.Value
                //                                 }).Concat(from r in dbContext.recommendation
                //                                           join eee in dbContext.masterrecommendationrestricction on r.v_MasterRecommendationId equals eee.v_MasterRecommendationRestricctionId  // RECOMENDACIONES                                                                                                                                                                                                                                                         
                //                                           where (r.v_ServiceId == pstrServiceId) &&
                //                                           (r.i_IsDeleted == 0) &&
                //                                           (r.v_DiagnosticRepositoryId == null)
                //                                           select new RecomendationList
                //                                           {
                //                                               v_RecommendationId = r.v_RecommendationId,
                //                                               v_DiagnosticRepositoryId = r.v_DiagnosticRepositoryId,
                //                                               v_ServiceId = r.v_ServiceId,
                //                                               v_ComponentId = r.v_ComponentId,
                //                                               v_MasterRecommendationId = r.v_MasterRecommendationId,
                //                                               v_RecommendationName = eee.v_Name,
                //                                               i_RecordStatus = (int)RecordStatus.Grabado,
                //                                               i_RecordType = (int)RecordType.NoTemporal
                //                                               //v_CreationUser = J1.v_UserName,
                //                                               //v_UpdateUser = J2.v_UserName,
                //                                               //d_CreationDate = J1.d_InsertDate,
                //                                               //d_UpdateDate = J2.d_UpdateDate,
                //                                               //i_IsDeleted = ddd.i_IsDeleted.Value
                //                                           }).ToList();

                var query = (from ddd in dbContext.recommendation
                             join fff in dbContext.diagnosticrepository on ddd.v_DiagnosticRepositoryId
                                                             equals fff.v_DiagnosticRepositoryId into J7_join
                             from fff in J7_join.DefaultIfEmpty()

                             join eee in dbContext.masterrecommendationrestricction on ddd.v_MasterRecommendationId equals eee.v_MasterRecommendationRestricctionId  // RECOMENDACIONES                                                                                                                                                                                                                                                         

                             join J1 in dbContext.systemuser on new { i_InsertUserId = ddd.i_InsertUserId.Value }
                                             equals new { i_InsertUserId = J1.i_SystemUserId } into J1_join
                             from J1 in J1_join.DefaultIfEmpty()

                             join J2 in dbContext.systemuser on new { i_UpdateUserId = ddd.i_UpdateUserId.Value }
                                                             equals new { i_UpdateUserId = J2.i_SystemUserId } into J2_join
                             from J2 in J2_join.DefaultIfEmpty()

                             where (ddd.v_ServiceId == pstrServiceId) &&
                                   (ddd.i_IsDeleted == 0) &&
                                   (fff.i_IsDeleted == 0) &&
                                   (fff.i_FinalQualificationId == (int)FinalQualification.Definitivo ||
                                    fff.i_FinalQualificationId == (int)FinalQualification.Presuntivo)

                             select new RecomendationList
                             {
                                 v_RecommendationId = ddd.v_RecommendationId,
                                 v_DiagnosticRepositoryId = ddd.v_DiagnosticRepositoryId,
                                 v_ServiceId = ddd.v_ServiceId,
                                 v_ComponentId = ddd.v_ComponentId,
                                 v_MasterRecommendationId = ddd.v_MasterRecommendationId,
                                 v_RecommendationName = eee.v_Name,
                                 i_RecordStatus = (int)RecordStatus.Grabado,
                                 i_RecordType = (int)RecordType.NoTemporal

                             }).ToList();


                //List<DiagnosticRepositoryList> objData = query.ToList();
                pobjOperationResult.Success = 1;
                return query;
            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
                return null;
            }
        }

        public List<RecomendationList> GetServiceRecommendationByServiceId(string pstrServiceId)
        {
            //mon.IsActive = true;

            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                List<RecomendationList> query = (from ddd in dbContext.recommendation
                                                 join fff in dbContext.diagnosticrepository on ddd.v_DiagnosticRepositoryId
                                                                                 equals fff.v_DiagnosticRepositoryId into J7_join
                                                 from fff in J7_join.DefaultIfEmpty()

                                                 join eee in dbContext.masterrecommendationrestricction on ddd.v_MasterRecommendationId equals eee.v_MasterRecommendationRestricctionId  // RECOMENDACIONES                                                                                                                                                                                                                                                         

                                                 join J1 in dbContext.systemuser on new { i_InsertUserId = ddd.i_InsertUserId.Value }
                                                                 equals new { i_InsertUserId = J1.i_SystemUserId } into J1_join
                                                 from J1 in J1_join.DefaultIfEmpty()

                                                 join J2 in dbContext.systemuser on new { i_UpdateUserId = ddd.i_UpdateUserId.Value }
                                                                                 equals new { i_UpdateUserId = J2.i_SystemUserId } into J2_join
                                                 from J2 in J2_join.DefaultIfEmpty()
                                                 where (ddd.v_ServiceId == pstrServiceId) &&
                                                 (ddd.i_IsDeleted == 0) &&
                                                 (fff.i_IsDeleted == 0) &&
                                                 (fff.i_FinalQualificationId == (int)FinalQualification.Definitivo ||
                                                 fff.i_FinalQualificationId == (int)FinalQualification.Presuntivo)
                                                 select new RecomendationList
                                                 {
                                                     v_RecommendationId = ddd.v_RecommendationId,
                                                     v_DiagnosticRepositoryId = ddd.v_DiagnosticRepositoryId,
                                                     v_ServiceId = ddd.v_ServiceId,
                                                     v_ComponentId = ddd.v_ComponentId,
                                                     v_MasterRecommendationId = ddd.v_MasterRecommendationId,
                                                     v_RecommendationName = eee.v_Name,
                                                     i_RecordStatus = (int)RecordStatus.Grabado,
                                                     i_RecordType = (int)RecordType.NoTemporal
                                                 }).ToList();

                var query1 = new List<RecomendationList>();

                query1 = query.Select((x, index) => new RecomendationList
                {
                    i_Item = index + 1,
                    v_RecommendationId = x.v_RecommendationId,
                    v_DiagnosticRepositoryId = x.v_DiagnosticRepositoryId,
                    v_ServiceId = x.v_ServiceId,
                    v_ComponentId = x.v_ComponentId,
                    v_MasterRecommendationId = x.v_MasterRecommendationId,
                    v_RecommendationName = x.v_RecommendationName,
                    i_RecordStatus = x.i_RecordStatus,
                    i_RecordType = x.i_RecordType
                }).ToList();

                return query1;
            }
            catch (Exception ex)
            {
                return null;
            }
        }



        public List<RestrictionList> GetServiceRestriccionByServiceId(string pstrServiceId)
        {
            //mon.IsActive = true;

            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                List<RestrictionList> query = (from ddd in dbContext.restriction

                                               join fff in dbContext.diagnosticrepository on ddd.v_DiagnosticRepositoryId
                                                                                 equals fff.v_DiagnosticRepositoryId into J7_join
                                               from fff in J7_join.DefaultIfEmpty()

                                               join eee in dbContext.masterrecommendationrestricction on ddd.v_MasterRestrictionId equals eee.v_MasterRecommendationRestricctionId  // RECOMENDACIONES                                                                                                                                                                                                                                                         

                                               where (ddd.v_ServiceId == pstrServiceId) &&
                                               (ddd.i_IsDeleted == 0) &&
                                               (fff.i_IsDeleted == 0)

                                               select new RestrictionList
                                               {
                                                   v_RestrictionId = ddd.v_RestrictionId,
                                                   v_DiagnosticRepositoryId = ddd.v_DiagnosticRepositoryId,
                                                   v_ServiceId = ddd.v_ServiceId,
                                                   v_ComponentId = ddd.v_ComponentId,
                                                   v_MasterRestrictionId = ddd.v_MasterRestrictionId,
                                                   v_RestrictionName = eee.v_Name,
                                                   i_RecordStatus = (int)RecordStatus.Grabado,
                                                   i_RecordType = (int)RecordType.NoTemporal
                                               }).ToList();

                var query1 = new List<RestrictionList>();

                query1 = query.Select((x, index) => new RestrictionList
                {
                    i_Item = index + 1,
                    v_RestrictionId = x.v_RestrictionId,
                    v_DiagnosticRepositoryId = x.v_DiagnosticRepositoryId,
                    v_ServiceId = x.v_ServiceId,
                    v_ComponentId = x.v_ComponentId,
                    v_MasterRestrictionId = x.v_MasterRestrictionId,
                    v_RestrictionName = x.v_RestrictionName,
                    i_RecordStatus = x.i_RecordStatus,
                    i_RecordType = x.i_RecordType
                }).ToList();

                return query1;
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        #endregion

        #region Examenes Auxiliares

        public List<AuxiliaryExamList> GetAuxiliaryExams(ref OperationResult pobjOperationResult, string pstrServiceId)
        {
            //mon.IsActive = true;

            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                var query = (from ddd in dbContext.auxiliaryexam
                             join fff in dbContext.component on ddd.v_ComponentId equals fff.v_ComponentId
                             join eee in dbContext.systemparameter on new { a = fff.i_CategoryId.Value, b = 116 } // caetgoria Exam
                                                     equals new { a = eee.i_ParameterId, b = eee.i_GroupId } into J1_join
                             from J1 in J1_join.DefaultIfEmpty()

                             where (ddd.v_ServiceId == pstrServiceId) &&
                                   (ddd.i_IsDeleted == 0)
                             select new AuxiliaryExamList
                             {
                                 v_AuxiliaryExamId = ddd.v_AuxiliaryExamId,
                                 v_ComponentName = fff.v_Name,
                                 v_CategoryName = J1.v_Value1,
                                 i_RecordStatus = (int)RecordStatus.Grabado,
                                 i_RecordType = (int)RecordType.NoTemporal,
                                 i_IsDeleted = ddd.i_IsDeleted.Value,
                                 v_ComponentId = fff.v_ComponentId
                             }).ToList();

                pobjOperationResult.Success = 1;
                return query;
            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
                return null;
            }
        }

        #endregion

        #region Interconsulta

        public List<DiagnosticRepositoryList> GetInterconsultations(ref OperationResult pobjOperationResult, string pstrServiceId)
        {
            //mon.IsActive = true;

            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                var query = (from ccc in dbContext.diagnosticrepository
                             join ddd in dbContext.diseases on ccc.v_DiseasesId equals ddd.v_DiseasesId  // Diagnosticos                                                  
                             join fff in dbContext.component on ccc.v_InterconsultationDestinationId equals fff.v_ComponentId
                             where (ccc.v_ServiceId == pstrServiceId) &&
                                     (ccc.i_IsDeleted == 0) &&
                                     (ccc.i_SendToInterconsultationId == (int)SiNo.SI)
                             select new DiagnosticRepositoryList
                             {
                                 v_DiagnosticRepositoryId = ccc.v_DiagnosticRepositoryId,
                                 v_ServiceId = ccc.v_ServiceId,
                                 v_DiseasesId = ccc.v_DiseasesId,
                                 v_DiseasesName = ddd.v_Name,
                                 v_OfficeName = fff.v_Name,
                                 i_RecordStatus = (int)RecordStatus.Grabado,
                                 i_RecordType = (int)RecordType.NoTemporal,
                             }).ToList();


                pobjOperationResult.Success = 1;
                return query;
            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
                return null;
            }
        }

        #endregion

        #region Descanso Medico

        public List<DiagnosticRepositoryList> GetMedicalBreaks(ref OperationResult pobjOperationResult, string pstrServiceId)
        {
            //mon.IsActive = true;

            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                var query = (from ccc in dbContext.diagnosticrepository
                             join ddd in dbContext.diseases on ccc.v_DiseasesId equals ddd.v_DiseasesId  // Diagnosticos                                 
                             where (ccc.v_ServiceId == pstrServiceId) &&
                                   (ccc.i_IsDeleted == 0) &&
                                   (ccc.i_GenerateMedicalBreak == (int)SiNo.SI)
                             select new DiagnosticRepositoryList
                             {
                                 v_DiagnosticRepositoryId = ccc.v_DiagnosticRepositoryId,
                                 v_ServiceId = ccc.v_ServiceId,
                                 v_DiseasesId = ccc.v_DiseasesId,
                                 v_DiseasesName = ddd.v_Name,
                                 i_RecordStatus = (int)RecordStatus.Grabado,
                                 i_RecordType = (int)RecordType.NoTemporal,
                             }).ToList();

                pobjOperationResult.Success = 1;
                return query;
            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
                return null;
            }
        }

        #endregion

        #endregion

        #region Analisis de diagnostico -> Total de diagnosticos

        public List<DiagnosticRepositoryList> GetServiceComponentDisgnosticsByServiceId(ref OperationResult pobjOperationResult, string pstrServiceId)
        {

            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                var query = (from ccc in dbContext.diagnosticrepository

                             join bbb in dbContext.component on ccc.v_ComponentId equals bbb.v_ComponentId into J7_join
                             from bbb in J7_join.DefaultIfEmpty()

                             join sc in dbContext.servicecomponent on new { a = ccc.v_ComponentId, b = pstrServiceId }
                                                                    equals new { a = sc.v_ComponentId, b = sc.v_ServiceId } into sc_join
                             from sc in sc_join.DefaultIfEmpty()

                             join ddd in dbContext.diseases on ccc.v_DiseasesId equals ddd.v_DiseasesId  // Diagnosticos

                             join eee in dbContext.systemparameter on new { a = ccc.i_AutoManualId.Value, b = 136 } // Auto / Manual
                                                                     equals new { a = eee.i_ParameterId, b = eee.i_GroupId } into J8_join
                             from eee in J8_join.DefaultIfEmpty()

                             join zzz in dbContext.systemparameter on new { a = bbb.i_CategoryId.Value, b = 116 } // CATEGORIA DEL EXAMEN
                                                                 equals new { a = zzz.i_ParameterId, b = zzz.i_GroupId } into J9_join
                             from zzz in J9_join.DefaultIfEmpty()

                             join fff in dbContext.systemparameter on new { a = ccc.i_PreQualificationId.Value, b = 137 } // PRE-CALIFICACION
                                                                 equals new { a = fff.i_ParameterId, b = fff.i_GroupId } into J5_join
                             from fff in J5_join.DefaultIfEmpty()

                             join ggg in dbContext.systemparameter on new { a = ccc.i_FinalQualificationId.Value, b = 138 } //CALIFICACION FINAL
                                                                 equals new { a = ggg.i_ParameterId, b = ggg.i_GroupId } into J4_join
                             from ggg in J4_join.DefaultIfEmpty()

                             join hhh in dbContext.systemparameter on new { a = ccc.i_DiagnosticTypeId.Value, b = 139 } // TIPO DE DX [Enfermedad comun, etc]
                                                                     equals new { a = hhh.i_ParameterId, b = hhh.i_GroupId } into J3_join
                             from hhh in J3_join.DefaultIfEmpty()

                             join iii in dbContext.systemparameter on new { a = ccc.i_IsSentToAntecedent.Value, b = 111 } // RESPUESTA SI/NO
                                                                 equals new { a = iii.i_ParameterId, b = iii.i_GroupId } into J6_join
                             from iii in J6_join.DefaultIfEmpty()

                             //join J1 in dbContext.systemuser on new { i_InsertUserId = ccc.i_InsertUserId.Value }
                             //                equals new { i_InsertUserId = J1.i_SystemUserId } into J1_join
                             //from J1 in J1_join.DefaultIfEmpty()

                             join J2 in dbContext.systemuser on new { i_UpdateUserId = sc.i_ApprovedUpdateUserId.Value }
                                                             equals new { i_UpdateUserId = J2.i_SystemUserId } into J2_join
                             from J2 in J2_join.DefaultIfEmpty()

                             where ccc.v_ServiceId == pstrServiceId &&
                                     ccc.i_IsDeleted == 0
                             orderby bbb.v_Name

                             select new DiagnosticRepositoryList
                             {
                                 v_DiagnosticRepositoryId = ccc.v_DiagnosticRepositoryId,
                                 v_ServiceId = ccc.v_ServiceId,
                                 v_ComponentId = ccc.v_ComponentId,
                                 v_DiseasesId = ccc.v_DiseasesId,
                                 i_AutoManualId = ccc.i_AutoManualId,
                                 i_PreQualificationId = ccc.i_PreQualificationId,
                                 i_FinalQualificationId = ccc.i_FinalQualificationId,
                                 i_DiagnosticTypeId = ccc.i_DiagnosticTypeId,
                                 i_IsSentToAntecedent = ccc.i_IsSentToAntecedent,
                                 d_ExpirationDateDiagnostic = ccc.d_ExpirationDateDiagnostic,
                                 i_GenerateMedicalBreak = ccc.i_GenerateMedicalBreak,

                                 v_DiseasesName = ddd.v_Name,
                                 v_AutoManualName = eee.v_Value1,

                                 //v_ComponentName = bbb.v_Name,
                                 //v_ComponentName = (ccc.i_AutoManualId == (int)AutoManual.Manual && bbb.i_CategoryId != -1) ? zzz.v_Value1 : bbb.v_Name,
                                 v_ComponentName = bbb.i_CategoryId == -1 ? bbb.v_Name : zzz.v_Value1,
                                 v_PreQualificationName = fff.v_Value1,
                                 v_FinalQualificationName = ggg.v_Value1,
                                 v_DiagnosticTypeName = hhh.v_Value1,
                                 v_IsSentToAntecedentName = iii.v_Value1,
                                 i_RecordStatus = (int)RecordStatus.Grabado,
                                 i_RecordType = (int)RecordType.NoTemporal,

                                 v_UpdateUser = J2.v_UserName,

                                 d_UpdateDate = J2.d_UpdateDate,
                                 i_IsDeleted = ccc.i_IsDeleted.Value

                             }).ToList();


                var q = (from a in query
                         select new DiagnosticRepositoryList
                         {
                             v_DiagnosticRepositoryId = a.v_DiagnosticRepositoryId,
                             v_ServiceId = a.v_ServiceId,
                             v_ComponentId = a.v_ComponentId,
                             v_DiseasesId = a.v_DiseasesId,
                             i_AutoManualId = a.i_AutoManualId,
                             i_PreQualificationId = a.i_PreQualificationId,
                             i_FinalQualificationId = a.i_FinalQualificationId,
                             i_DiagnosticTypeId = a.i_DiagnosticTypeId,
                             i_IsSentToAntecedent = a.i_IsSentToAntecedent,
                             d_ExpirationDateDiagnostic = a.d_ExpirationDateDiagnostic,
                             i_GenerateMedicalBreak = a.i_GenerateMedicalBreak,

                             v_RestrictionsName = ConcatenateRestriction(a.v_DiagnosticRepositoryId),
                             v_RecomendationsName = ConcatenateRecommendation(a.v_DiagnosticRepositoryId),
                             v_DiseasesName = a.v_DiseasesName,
                             v_AutoManualName = a.v_AutoManualName,
                             v_ComponentName = a.v_ComponentName,

                             v_PreQualificationName = a.v_PreQualificationName,
                             v_FinalQualificationName = a.v_FinalQualificationName,
                             v_DiagnosticTypeName = a.v_DiagnosticTypeName,
                             v_IsSentToAntecedentName = a.v_IsSentToAntecedentName,
                             i_RecordStatus = a.i_RecordStatus,
                             i_RecordType = a.i_RecordType,

                             v_UpdateUser = a.v_UpdateUser,

                             d_UpdateDate = a.d_UpdateDate,
                             i_IsDeleted = a.i_IsDeleted

                         }).ToList();

                //List<DiagnosticRepositoryList> objData = query.ToList();
                pobjOperationResult.Success = 1;
                return q;
            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
                return null;
            }
        }

        public DiagnosticRepositoryList GetServiceComponentTotalDiagnostics(ref OperationResult pobjOperationResult, string pstrDiagnosticRepositoryId)
        {
            //mon.IsActive = true;

            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                DiagnosticRepositoryList query = (from ccc in dbContext.diagnosticrepository
                                                  join bbb in dbContext.component on ccc.v_ComponentId equals bbb.v_ComponentId into J7_join
                                                  from bbb in J7_join.DefaultIfEmpty()

                                                  join ddd in dbContext.diseases on ccc.v_DiseasesId equals ddd.v_DiseasesId  // Diagnosticos

                                                  join eee in dbContext.systemparameter on new { a = ccc.i_AutoManualId.Value, b = 136 } // Auto / Manual
                                                                                          equals new { a = eee.i_ParameterId, b = eee.i_GroupId } into J8_join
                                                  from eee in J8_join.DefaultIfEmpty()

                                                  join fff in dbContext.systemparameter on new { a = ccc.i_PreQualificationId.Value, b = 137 } // PRE-CALIFICACION
                                                                                      equals new { a = fff.i_ParameterId, b = fff.i_GroupId } into J5_join
                                                  from fff in J5_join.DefaultIfEmpty()

                                                  join ggg in dbContext.systemparameter on new { a = ccc.i_FinalQualificationId.Value, b = 138 } //CALIFICACION FINAL
                                                                                      equals new { a = ggg.i_ParameterId, b = ggg.i_GroupId } into J4_join
                                                  from ggg in J4_join.DefaultIfEmpty()

                                                  join hhh in dbContext.systemparameter on new { a = ccc.i_DiagnosticTypeId.Value, b = 139 } // TIPO DE DX [Enfermedad comun, etc]
                                                                                          equals new { a = hhh.i_ParameterId, b = hhh.i_GroupId } into J3_join
                                                  from hhh in J3_join.DefaultIfEmpty()

                                                  join iii in dbContext.systemparameter on new { a = ccc.i_IsSentToAntecedent.Value, b = 111 } // RESPUESTA SI/NO
                                                                                       equals new { a = iii.i_ParameterId, b = iii.i_GroupId } into J6_join
                                                  from iii in J6_join.DefaultIfEmpty()

                                                  join J1 in dbContext.systemuser on new { i_InsertUserId = ccc.i_InsertUserId.Value }
                                                                  equals new { i_InsertUserId = J1.i_SystemUserId } into J1_join
                                                  from J1 in J1_join.DefaultIfEmpty()

                                                  join J2 in dbContext.systemuser on new { i_UpdateUserId = ccc.i_UpdateUserId.Value }
                                                                                  equals new { i_UpdateUserId = J2.i_SystemUserId } into J2_join
                                                  from J2 in J2_join.DefaultIfEmpty()

                                                  where ccc.v_DiagnosticRepositoryId == pstrDiagnosticRepositoryId &&
                                                        ccc.i_IsDeleted == 0
                                                  select new DiagnosticRepositoryList
                                                  {
                                                      v_DiagnosticRepositoryId = ccc.v_DiagnosticRepositoryId,
                                                      v_ServiceId = ccc.v_ServiceId,
                                                      v_ComponentId = ccc.v_ComponentId,
                                                      v_DiseasesId = ccc.v_DiseasesId,
                                                      i_AutoManualId = ccc.i_AutoManualId,
                                                      i_PreQualificationId = ccc.i_PreQualificationId,
                                                      i_FinalQualificationId = ccc.i_FinalQualificationId,
                                                      i_DiagnosticTypeId = ccc.i_DiagnosticTypeId,
                                                      i_IsSentToAntecedent = ccc.i_IsSentToAntecedent,
                                                      d_ExpirationDateDiagnostic = ccc.d_ExpirationDateDiagnostic,
                                                      i_GenerateMedicalBreak = ccc.i_GenerateMedicalBreak,

                                                      v_DiseasesName = ddd.v_Name,
                                                      v_AutoManualName = eee.v_Value1,

                                                      v_PreQualificationName = fff.v_Value1,
                                                      v_FinalQualificationName = ggg.v_Value1,
                                                      v_DiagnosticTypeName = hhh.v_Value1,
                                                      v_IsSentToAntecedentName = iii.v_Value1,
                                                      i_RecordStatus = (int)RecordStatus.Grabado,
                                                      i_RecordType = (int)RecordType.NoTemporal,

                                                      v_CreationUser = J1.v_UserName,
                                                      v_UpdateUser = J2.v_UserName,
                                                      d_CreationDate = J1.d_InsertDate,
                                                      d_UpdateDate = J2.d_UpdateDate,
                                                      i_IsDeleted = ccc.i_IsDeleted.Value
                                                  }).FirstOrDefault();



                // Agregamos Restricciones / Recomendaciones
                OperationResult objOperationResult = new OperationResult();

                query.Restrictions = GetServiceRestrictionsByDiagnosticRepositoryId(ref objOperationResult, query.v_DiagnosticRepositoryId);
                query.Recomendations = GetServiceRecommendationByDiagnosticRepositoryId(ref objOperationResult, query.v_DiagnosticRepositoryId);

                pobjOperationResult.Success = 1;
                return query;
            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
                return null;
            }
        }

        public void UpdateTotalDiagnostic(ref OperationResult pobjOperationResult, DiagnosticRepositoryList pobjDiagnosticRepository, string serviceId, List<string> ClientSession)
        {
            //mon.IsActive = true;
            string NewId0 = "(No generado)";
            int intNodeId = int.Parse(ClientSession[0]);

            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                #region DiagnosticRepository -> UPDATE

                // UPDATE

                // Obtener la entidad fuente
                var objEntitySource = (from a in dbContext.diagnosticrepository
                                       where a.v_DiagnosticRepositoryId == pobjDiagnosticRepository.v_DiagnosticRepositoryId
                                       select a).FirstOrDefault();

                // Crear la entidad con los datos actualizados   
                // Total Diagnósticos
                objEntitySource.i_FinalQualificationId = pobjDiagnosticRepository.i_FinalQualificationId;
                objEntitySource.i_DiagnosticTypeId = pobjDiagnosticRepository.i_DiagnosticTypeId;
                objEntitySource.i_IsSentToAntecedent = pobjDiagnosticRepository.i_IsSentToAntecedent;
                objEntitySource.d_ExpirationDateDiagnostic = pobjDiagnosticRepository.d_ExpirationDateDiagnostic;

                objEntitySource.d_UpdateDate = DateTime.Now;
                objEntitySource.i_UpdateUserId = Int32.Parse(ClientSession[2]);

                // Guardar los cambios
                dbContext.SaveChanges();

                #region Setear Fec Vcto Obs con la menor de las fechas solo (DX definitivos o Presuntivos)

                // Buscar la fecha de expiracion Dx minima 
                DateTime? fechaObsMin = (from a in dbContext.diagnosticrepository
                                         where a.v_ServiceId == pobjDiagnosticRepository.v_ServiceId &&
                                         a.i_FinalQualificationId == (int)FinalQualification.Definitivo ||
                                         a.i_FinalQualificationId == (int)FinalQualification.Presuntivo
                                         select a.d_ExpirationDateDiagnostic).Min();

                // Obtener la entidad fuente
                var objService = (from a in dbContext.service
                                  where a.v_ServiceId == pobjDiagnosticRepository.v_ServiceId
                                  select a).FirstOrDefault();

                // Crear la entidad con los datos actualizados   
                objService.d_ObsExpirationDate = fechaObsMin;
                objService.d_UpdateDate = DateTime.Now;
                objService.i_UpdateUserId = Int32.Parse(ClientSession[2]);

                // Guardar los cambios

                dbContext.SaveChanges();

                #endregion

                #endregion

                #region Restricciones -> ADD / DELETE

                if (pobjDiagnosticRepository.Restrictions != null)
                {
                    // Operaciones básicas [Add,Update,Delete] restricciones 
                    foreach (var r in pobjDiagnosticRepository.Restrictions)
                    {
                        if (r.i_RecordType == (int)RecordType.Temporal && r.i_RecordStatus == (int)RecordStatus.Agregado)
                        {
                            restriction objRestriction = new restriction();

                            var NewId1 = Common.Utils.GetNewId(intNodeId, Utils.GetNextSecuentialId(intNodeId, 30), "RD");
                            objRestriction.v_ServiceId = r.v_ServiceId;
                            objRestriction.v_ComponentId = r.v_ComponentId;
                            //objRestriction.v_RestrictionByDiagnosticId = NewId1;
                            objRestriction.v_RestrictionId = NewId1;
                            objRestriction.v_DiagnosticRepositoryId = NewId0 == "(No generado)" ? pobjDiagnosticRepository.v_DiagnosticRepositoryId : NewId0;

                            objRestriction.v_MasterRestrictionId = r.v_MasterRestrictionId;
                            objRestriction.d_InsertDate = DateTime.Now;
                            objRestriction.i_InsertUserId = Int32.Parse(ClientSession[2]);
                            objRestriction.i_IsDeleted = 0;

                            dbContext.AddTorestriction(objRestriction);
                            dbContext.SaveChanges();
                        }
                        else if (r.i_RecordType == (int)RecordType.NoTemporal && r.i_RecordStatus == (int)RecordStatus.EliminadoLogico)
                        {
                            // Obtener la entidad fuente v_RestrictionByDiagnosticId
                            var objRestriction = (from a in dbContext.restriction
                                                  where a.v_RestrictionId == r.v_RestrictionByDiagnosticId
                                                  select a).FirstOrDefault();

                            // Crear la entidad con los datos actualizados                                                           
                            objRestriction.d_UpdateDate = DateTime.Now;
                            objRestriction.i_UpdateUserId = Int32.Parse(ClientSession[2]);
                            objRestriction.i_IsDeleted = 1;

                            // Guardar los cambios
                            dbContext.SaveChanges();
                        }
                    }
                }

                #endregion

                #region Recomendaciones -> ADD / DELETE

                if (pobjDiagnosticRepository.Recomendations != null)
                {
                    // Grabar recomendaciones 
                    foreach (var r in pobjDiagnosticRepository.Recomendations)
                    {
                        if (r.i_RecordType == (int)RecordType.Temporal && r.i_RecordStatus == (int)RecordStatus.Agregado)
                        {
                            recommendation objRecommendation = new recommendation();

                            var NewId1 = Common.Utils.GetNewId(intNodeId, Utils.GetNextSecuentialId(intNodeId, 32), "RR");
                            objRecommendation.v_ServiceId = r.v_ServiceId;
                            objRecommendation.v_ComponentId = r.v_ComponentId;
                            objRecommendation.v_RecommendationId = NewId1;
                            objRecommendation.v_DiagnosticRepositoryId = NewId0 == "(No generado)" ? pobjDiagnosticRepository.v_DiagnosticRepositoryId : NewId0;

                            objRecommendation.v_MasterRecommendationId = r.v_MasterRecommendationId;
                            objRecommendation.d_InsertDate = DateTime.Now;
                            objRecommendation.i_InsertUserId = Int32.Parse(ClientSession[2]);
                            objRecommendation.i_IsDeleted = 0;

                            dbContext.AddTorecommendation(objRecommendation);
                            dbContext.SaveChanges();
                        }
                        else if (r.i_RecordType == (int)RecordType.NoTemporal && r.i_RecordStatus == (int)RecordStatus.EliminadoLogico)
                        {
                            // Obtener la entidad fuente
                            var objRecommendation = (from a in dbContext.recommendation
                                                     where a.v_RecommendationId == r.v_RecommendationId
                                                     select a).FirstOrDefault();

                            // Crear la entidad con los datos actualizados                                                           
                            objRecommendation.d_UpdateDate = DateTime.Now;
                            objRecommendation.i_UpdateUserId = Int32.Parse(ClientSession[2]);
                            objRecommendation.i_IsDeleted = 1;

                            // Guardar los cambios
                            dbContext.SaveChanges();
                        }
                    }
                }

                #endregion


                #region Grabar usuario auditor

                // Grabar ID usuario auditor o cualquiera que grabe en esta zona [Control de calidad]
                // Obtener la entidad service               

                var service = (from a in dbContext.service
                               where a.v_ServiceId == serviceId
                               select a).FirstOrDefault();

                // Crear la entidad con los datos actualizados
                service.d_UpdateDateMedicalAnalyst = DateTime.Now;
                service.i_UpdateUserMedicalAnalystId = Int32.Parse(ClientSession[2]);

                // Guardar los cambios
                dbContext.SaveChanges();

                #endregion

                pobjOperationResult.Success = 1;
                // Llenar entidad Log
                LogBL.SaveLog(ClientSession[0], ClientSession[1], ClientSession[2], LogEventType.CREACION, "DIAGNOSTICOS / RESTRICCIONES / RECOMENDACIONES", "v_DiagnosticRepositoryId=" + NewId0.ToString(), Success.Ok, null);
                return;
            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
                // Llenar entidad Log
                LogBL.SaveLog(ClientSession[0], ClientSession[1], ClientSession[2], LogEventType.CREACION, "DIAGNOSTICOS / RESTRICCIONES / RECOMENDACIONES", "v_DiagnosticRepositoryId=" + NewId0.ToString(), Success.Failed, pobjOperationResult.ExceptionMessage);
                return;
            }
        }

        public void DeleteTotalDiagnostic(ref OperationResult pobjOperationResult, string pstrDiagnosticRepositoryId, List<string> ClientSession)
        {
            //mon.IsActive = true;

            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                #region DiagnosticRepository -> DELETE

                // UPDATE

                // Obtener la entidad fuente
                var objEntitySource = (from a in dbContext.diagnosticrepository
                                       where a.v_DiagnosticRepositoryId == pstrDiagnosticRepositoryId
                                       select a).FirstOrDefault();

                // Crear la entidad con los datos actualizados               
                objEntitySource.d_UpdateDate = DateTime.Now;
                objEntitySource.i_UpdateUserId = Int32.Parse(ClientSession[2]);
                objEntitySource.i_IsDeleted = 1;

                var recomendation = (from a in dbContext.recommendation
                                     where a.v_DiagnosticRepositoryId == pstrDiagnosticRepositoryId
                                     select a).ToList();

                foreach (var rec in recomendation)
                {
                    // Crear la entidad con los datos actualizados               
                    rec.d_UpdateDate = DateTime.Now;
                    rec.i_UpdateUserId = Int32.Parse(ClientSession[2]);
                    rec.i_IsDeleted = 1;
                }

                var restriction = (from a in dbContext.restriction
                                   where a.v_DiagnosticRepositoryId == pstrDiagnosticRepositoryId
                                   select a).ToList();

                foreach (var res in restriction)
                {
                    // Crear la entidad con los datos actualizados               
                    res.d_UpdateDate = DateTime.Now;
                    res.i_UpdateUserId = Int32.Parse(ClientSession[2]);
                    res.i_IsDeleted = 1;
                }

                // Guardar los cambios
                dbContext.SaveChanges();

                #endregion

                pobjOperationResult.Success = 1;
                // Llenar entidad Log
                LogBL.SaveLog(ClientSession[0], ClientSession[1], ClientSession[2], LogEventType.ELIMINACION, "DIAGNOSTICOS", "v_DiagnosticRepositoryId=" + pstrDiagnosticRepositoryId, Success.Ok, null);
                return;
            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
                // Llenar entidad Log
                LogBL.SaveLog(ClientSession[0], ClientSession[1], ClientSession[2], LogEventType.ELIMINACION, "DIAGNOSTICOS", "v_DiagnosticRepositoryId=" + pstrDiagnosticRepositoryId, Success.Failed, pobjOperationResult.ExceptionMessage);
                return;
            }
        }


        #endregion

        #region Conclusiones y Tratamiento

        public List<DiagnosticRepositoryList> GetServiceComponentConclusionesDxServiceId(ref OperationResult pobjOperationResult, string pstrServiceId)
        {
            //mon.IsActive = true;

            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
                List<DiagnosticRepositoryList> query = (from ccc in dbContext.diagnosticrepository
                                                        join bbb in dbContext.component on ccc.v_ComponentId equals bbb.v_ComponentId into J7_join
                                                        from bbb in J7_join.DefaultIfEmpty()

                                                        join ddd in dbContext.diseases on ccc.v_DiseasesId equals ddd.v_DiseasesId  // Diagnosticos

                                                        join eee in dbContext.systemparameter on new { a = ccc.i_AutoManualId.Value, b = 136 } // Auto / Manual
                                                                                                equals new { a = eee.i_ParameterId, b = eee.i_GroupId } into J8_join
                                                        from eee in J8_join.DefaultIfEmpty()

                                                        join fff in dbContext.systemparameter on new { a = ccc.i_PreQualificationId.Value, b = 137 } // PRE-CALIFICACION
                                                                                            equals new { a = fff.i_ParameterId, b = fff.i_GroupId } into J5_join
                                                        from fff in J5_join.DefaultIfEmpty()

                                                        join ggg in dbContext.systemparameter on new { a = ccc.i_FinalQualificationId.Value, b = 138 } //CALIFICACION FINAL
                                                                                            equals new { a = ggg.i_ParameterId, b = ggg.i_GroupId } into J4_join
                                                        from ggg in J4_join.DefaultIfEmpty()

                                                        join hhh in dbContext.systemparameter on new { a = ccc.i_DiagnosticTypeId.Value, b = 139 } // TIPO DE DX [Enfermedad comun, etc]
                                                                                                equals new { a = hhh.i_ParameterId, b = hhh.i_GroupId } into J3_join
                                                        from hhh in J3_join.DefaultIfEmpty()

                                                        join iii in dbContext.systemparameter on new { a = ccc.i_IsSentToAntecedent.Value, b = 111 } // RESPUESTA SI/NO
                                                                                            equals new { a = iii.i_ParameterId, b = iii.i_GroupId } into J6_join
                                                        from iii in J6_join.DefaultIfEmpty()

                                                        join J1 in dbContext.systemuser on new { i_InsertUserId = ccc.i_InsertUserId.Value }
                                                                        equals new { i_InsertUserId = J1.i_SystemUserId } into J1_join
                                                        from J1 in J1_join.DefaultIfEmpty()

                                                        join J2 in dbContext.systemuser on new { i_UpdateUserId = ccc.i_UpdateUserId.Value }
                                                                                        equals new { i_UpdateUserId = J2.i_SystemUserId } into J2_join
                                                        from J2 in J2_join.DefaultIfEmpty()

                                                        join zzz in dbContext.systemparameter on new { a = bbb.i_CategoryId.Value, b = 116 } // CATEGORIA DEL EXAMEN
                                                               equals new { a = zzz.i_ParameterId, b = zzz.i_GroupId } into J9_join
                                                        from zzz in J9_join.DefaultIfEmpty()

                                                        where ccc.v_ServiceId == pstrServiceId &&
                                                        ccc.i_IsDeleted == 0 &&
                                                        (ccc.i_FinalQualificationId == (int)FinalQualification.Definitivo ||
                                                        ccc.i_FinalQualificationId == (int)FinalQualification.Presuntivo)
                                                        orderby bbb.v_Name
                                                        select new DiagnosticRepositoryList
                                                        {
                                                            v_DiagnosticRepositoryId = ccc.v_DiagnosticRepositoryId,
                                                            v_ServiceId = ccc.v_ServiceId,
                                                            v_ComponentId = ccc.v_ComponentId,
                                                            v_DiseasesId = ccc.v_DiseasesId,
                                                            i_AutoManualId = ccc.i_AutoManualId,
                                                            i_PreQualificationId = ccc.i_PreQualificationId,
                                                            i_FinalQualificationId = ccc.i_FinalQualificationId,
                                                            i_DiagnosticTypeId = ccc.i_DiagnosticTypeId,
                                                            i_IsSentToAntecedent = ccc.i_IsSentToAntecedent,
                                                            d_ExpirationDateDiagnostic = ccc.d_ExpirationDateDiagnostic,
                                                            i_GenerateMedicalBreak = ccc.i_GenerateMedicalBreak,

                                                            v_DiseasesName = ddd.v_Name,
                                                            v_AutoManualName = eee.v_Value1,

                                                            v_ComponentName = bbb.i_CategoryId == -1 ? bbb.v_Name : zzz.v_Value1,
                                                            v_PreQualificationName = fff.v_Value1,
                                                            v_FinalQualificationName = ggg.v_Value1,
                                                            v_DiagnosticTypeName = hhh.v_Value1,
                                                            v_IsSentToAntecedentName = iii.v_Value1,
                                                            i_RecordStatus = (int)RecordStatus.Grabado,
                                                            i_RecordType = (int)RecordType.NoTemporal,

                                                            v_CreationUser = J1.v_UserName,
                                                            v_UpdateUser = J2.v_UserName,
                                                            d_CreationDate = J1.d_InsertDate,
                                                            d_UpdateDate = J2.d_UpdateDate,
                                                            i_IsDeleted = ccc.i_IsDeleted.Value
                                                        }).ToList();


                var q = (from a in query
                         select new DiagnosticRepositoryList
                         {
                             v_DiagnosticRepositoryId = a.v_DiagnosticRepositoryId,
                             v_ServiceId = a.v_ServiceId,
                             v_ComponentId = a.v_ComponentId,
                             v_DiseasesId = a.v_DiseasesId,
                             i_AutoManualId = a.i_AutoManualId,
                             i_PreQualificationId = a.i_PreQualificationId,
                             i_FinalQualificationId = a.i_FinalQualificationId,
                             i_DiagnosticTypeId = a.i_DiagnosticTypeId,
                             i_IsSentToAntecedent = a.i_IsSentToAntecedent,
                             d_ExpirationDateDiagnostic = a.d_ExpirationDateDiagnostic,
                             i_GenerateMedicalBreak = a.i_GenerateMedicalBreak,

                             v_RestrictionsName = ConcatenateRestriction(a.v_DiagnosticRepositoryId),
                             v_RecomendationsName = ConcatenateRecommendation(a.v_DiagnosticRepositoryId),
                             v_DiseasesName = a.v_DiseasesName,
                             v_AutoManualName = a.v_AutoManualName,
                             v_ComponentName = a.v_ComponentName,

                             v_PreQualificationName = a.v_PreQualificationName,
                             v_FinalQualificationName = a.v_FinalQualificationName,
                             v_DiagnosticTypeName = a.v_DiagnosticTypeName,
                             v_IsSentToAntecedentName = a.v_IsSentToAntecedentName,
                             i_RecordStatus = a.i_RecordStatus,
                             i_RecordType = a.i_RecordType,

                             v_CreationUser = a.v_CreationUser,
                             v_UpdateUser = a.v_UpdateUser,
                             d_CreationDate = a.d_CreationDate,
                             d_UpdateDate = a.d_UpdateDate,
                             i_IsDeleted = a.i_IsDeleted

                         }).ToList();

                //List<DiagnosticRepositoryList> objData = query.ToList();
                pobjOperationResult.Success = 1;
                return q;
            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
                return null;
            }
        }

        public void AddConclusiones(ref OperationResult pobjOperationResult, List<RestrictionList> pobjRestriction, List<RecomendationList> pobjRecomendation, serviceDto pobjService, servicecomponentDto pobjServiceComponent, List<string> ClientSession)
        {
            //mon.IsActive = true;
            string NewId0 = "(No generado)";
            int intNodeId = int.Parse(ClientSession[0]);

            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                #region Restricciones -> ADD / DELETE

                if (pobjRestriction != null)
                {
                    // Operaciones básicas [Add,Update,Delete] restricciones 
                    foreach (var r in pobjRestriction)
                    {
                        if (r.i_RecordType == (int)RecordType.Temporal && r.i_RecordStatus == (int)RecordStatus.Agregado)
                        {
                            restriction objRestriction = new restriction();

                            var NewId1 = Common.Utils.GetNewId(intNodeId, Utils.GetNextSecuentialId(intNodeId, 30), "RD");
                            //objRestriction.v_RestrictionByDiagnosticId = NewId1;
                            objRestriction.v_RestrictionId = NewId1;
                            objRestriction.v_ServiceId = r.v_ServiceId;
                            objRestriction.v_MasterRestrictionId = r.v_MasterRestrictionId;

                            objRestriction.d_InsertDate = DateTime.Now;
                            objRestriction.i_InsertUserId = Int32.Parse(ClientSession[2]);
                            objRestriction.i_IsDeleted = 0;

                            dbContext.AddTorestriction(objRestriction);
                            //dbContext.SaveChanges();
                        }
                        else if (r.i_RecordType == (int)RecordType.NoTemporal && r.i_RecordStatus == (int)RecordStatus.EliminadoLogico)
                        {
                            // Obtener la entidad fuente v_RestrictionByDiagnosticId
                            var objEntitySource = (from a in dbContext.restriction
                                                   where a.v_RestrictionId == r.v_RestrictionByDiagnosticId
                                                   select a).FirstOrDefault();

                            // Crear la entidad con los datos actualizados                                                           
                            objEntitySource.d_UpdateDate = DateTime.Now;
                            objEntitySource.i_UpdateUserId = Int32.Parse(ClientSession[2]);
                            objEntitySource.i_IsDeleted = 1;

                            // Guardar los cambios
                            //dbContext.SaveChanges();
                        }
                    }
                }

                #endregion

                #region Recomendaciones -> ADD / DELETE

                if (pobjRecomendation != null)
                {
                    // Grabar recomendaciones 
                    foreach (var r in pobjRecomendation)
                    {
                        if (r.i_RecordType == (int)RecordType.Temporal && r.i_RecordStatus == (int)RecordStatus.Agregado)
                        {
                            recommendation objRecommendation = new recommendation();

                            var NewId1 = Common.Utils.GetNewId(intNodeId, Utils.GetNextSecuentialId(intNodeId, 32), "RR");
                            objRecommendation.v_RecommendationId = NewId1;
                            objRecommendation.v_ServiceId = r.v_ServiceId;
                            objRecommendation.v_MasterRecommendationId = r.v_MasterRecommendationId;

                            objRecommendation.d_InsertDate = DateTime.Now;
                            objRecommendation.i_InsertUserId = Int32.Parse(ClientSession[2]);
                            objRecommendation.i_IsDeleted = 0;

                            dbContext.AddTorecommendation(objRecommendation);
                            //dbContext.SaveChanges();
                        }
                        else if (r.i_RecordType == (int)RecordType.NoTemporal && r.i_RecordStatus == (int)RecordStatus.EliminadoLogico)
                        {
                            // Obtener la entidad fuente
                            var objEntitySource = (from a in dbContext.recommendation
                                                   where a.v_RecommendationId == r.v_RecommendationId
                                                   select a).FirstOrDefault();

                            // Crear la entidad con los datos actualizados                                                           
                            objEntitySource.d_UpdateDate = DateTime.Now;
                            objEntitySource.i_UpdateUserId = Int32.Parse(ClientSession[2]);
                            objEntitySource.i_IsDeleted = 1;

                            // Guardar los cambios
                            //dbContext.SaveChanges();
                        }
                    }
                }

                #endregion

                #region Service

                if (pobjService != null)
                {
                    // Obtener la entidad fuente
                    var objService = (from a in dbContext.service
                                      where a.v_ServiceId == pobjService.v_ServiceId
                                      select a).FirstOrDefault();

                    // Crear la entidad con los datos actualizados
                    objService.i_DestinationMedicationId = pobjService.i_DestinationMedicationId;
                    objService.i_TransportMedicationId = pobjService.i_TransportMedicationId;
                    objService.i_HasMedicalBreakId = pobjService.i_HasMedicalBreakId;
                    objService.i_HasRestrictionId = pobjService.i_HasRestrictionId;
                    objService.d_MedicalBreakStartDate = pobjService.d_MedicalBreakStartDate;
                    objService.d_MedicalBreakEndDate = pobjService.d_MedicalBreakEndDate;
                    objService.d_StartDateRestriction = pobjService.d_StartDateRestriction;
                    objService.d_EndDateRestriction = pobjService.d_EndDateRestriction;
                    objService.v_GeneralRecomendations = pobjService.v_GeneralRecomendations;
                    objService.d_GlobalExpirationDate = pobjService.d_GlobalExpirationDate;

                    // datos de cabecera del Servicio
                    objService.i_AptitudeStatusId = pobjService.i_AptitudeStatusId;
                    objService.i_IsNewControl = pobjService.i_IsNewControl;

                    if (objService.i_AptitudeStatusId != (int)AptitudeStatus.SinAptitud)
                    {
                        // Cambiar el estado de la atención en función al estado de Aptitud
                        objService.i_ServiceStatusId = (int)ServiceStatus.Culminado;
                        objService.v_Motive = "Culminación Amutomática de la Atención por Aptitud definida.";
                    }
                    else
                    {
                        objService.i_ServiceStatusId = (int)ServiceStatus.EsperandoAptitud;
                    }

                    // ID usuario Médico ocupacional
                    objService.d_UpdateDateOccupationalMedical = DateTime.Now;
                    objService.i_UpdateUserOccupationalMedicaltId = Int32.Parse(ClientSession[2]);

                    // Guardar los cambios
                    //dbContext.SaveChanges();
                }

                #endregion

                #region ServiceComponent -> UPDATE

                if (pobjServiceComponent != null)
                {
                    // Actualizar algunos valores de ServiceComponent
                    OperationResult objOperationResult = new OperationResult();
                    UpdateServiceComponentFromEso(ref objOperationResult, pobjServiceComponent, ClientSession, null);
                }

                #endregion

                dbContext.SaveChanges();

                pobjOperationResult.Success = 1;
                // Llenar entidad Log
                LogBL.SaveLog(ClientSession[0], ClientSession[1], ClientSession[2], LogEventType.CREACION, "DIAGNOSTICOS / RESTRICCIONES / RECOMENDACIONES POR SERVICIO", "v_DiagnosticRepositoryId=" + NewId0.ToString(), Success.Ok, null);
                return;
            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
                // Llenar entidad Log
                LogBL.SaveLog(ClientSession[0], ClientSession[1], ClientSession[2], LogEventType.CREACION, "DIAGNOSTICOS / RESTRICCIONES / RECOMENDACIONES POR SERVICIO", "v_DiagnosticRepositoryId=" + NewId0.ToString(), Success.Failed, pobjOperationResult.ExceptionMessage);
                return;
            }
        }


        #endregion

        #region Tratamiento

        public void AddTratamiento(ref OperationResult pobjOperationResult, List<MedicationList> pobjMedication, List<ProcedureByServiceList> pobjProcedure, List<DiagnosticRepositoryList> pobjDiagnosticRepository, serviceDto pobjService, servicecomponentDto pobjServiceComponent, List<string> ClientSession, bool? enabledchkApproved)
        {
            //mon.IsActive = true;
            string NewId0 = "(No generado)";
            int intNodeId = int.Parse(ClientSession[0]);

            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
                OperationResult objOperationResult = new OperationResult();

                nodeDto node = new NodeBL().GetNodeByNodeId(ref objOperationResult, int.Parse(ClientSession[0]));
                var _pharmacyWarehouseId = node.v_PharmacyWarehouseId;
                var _movementdetailListDto = new List<movementdetailDto>();

                #region Medication -> ADD / UPDATE / DELETE

                foreach (var m in pobjMedication)
                {
                    // ADD
                    if (m.i_RecordType == (int)RecordType.Temporal && m.i_RecordStatus == (int)RecordStatus.Agregado)
                    {
                        medication objEntity = new medication();

                        objEntity.v_ProductId = m.v_ProductId;
                        objEntity.v_ServiceId = m.v_ServiceId;
                        objEntity.r_Quantity = m.r_Quantity;
                        objEntity.v_Doses = m.v_Doses;
                        objEntity.i_ViaId = m.i_ViaId;
                        objEntity.d_InsertDate = DateTime.Now;
                        objEntity.i_InsertUserId = Int32.Parse(ClientSession[2]);
                        objEntity.i_IsDeleted = 0;

                        // Autogeneramos el Pk de la tabla                      
                        NewId0 = Common.Utils.GetNewId(intNodeId, Utils.GetNextSecuentialId(intNodeId, 33), "MC");
                        objEntity.v_MedicationId = NewId0;

                        dbContext.AddTomedication(objEntity);
                        dbContext.SaveChanges();

                        if (pobjService.i_MasterServiceId != (int)MasterService.Eso)
                        {
                            #region CARGAR PRODUCTOS A DESCONTAR DEL ALMACÉN

                            movementdetailDto mdDto = new movementdetailDto();
                            mdDto.v_ProductId = m.v_ProductId;
                            mdDto.r_Quantity = m.r_Quantity;
                            mdDto.i_MovementTypeId = (int?)Common.MotiveType.EgresoAtencion;
                            _movementdetailListDto.Add(mdDto);

                            #endregion
                        }

                    }                                     // DELETE
                    else if (m.i_RecordType == (int)RecordType.NoTemporal && m.i_RecordStatus == (int)RecordStatus.EliminadoLogico)
                    {
                        // Obtener la entidad fuente
                        var objEntitySource = (from a in dbContext.medication
                                               where a.v_MedicationId == m.v_MedicationId
                                               select a).FirstOrDefault();

                        // Crear la entidad con los datos actualizados                                                           
                        objEntitySource.d_UpdateDate = DateTime.Now;
                        objEntitySource.i_UpdateUserId = Int32.Parse(ClientSession[2]);
                        objEntitySource.i_IsDeleted = 1;

                        // Guardar los cambios
                        dbContext.SaveChanges();
                    }
                }

                #region GRABAR MOVIMIENTOS [CABECERA Y DETALLE]

                if (pobjService.i_MasterServiceId != (int)MasterService.Eso)
                {
                    movementDto objmovementDto = new movementDto();

                    objmovementDto.i_MotiveTypeId = (int?)Common.MotiveType.EgresoAtencion;
                    objmovementDto.d_Date = DateTime.Now;
                    objmovementDto.v_WarehouseId = _pharmacyWarehouseId;
                    objmovementDto.v_ReferenceDocument = string.Empty;
                    objmovementDto.i_IsLocallyProcessed = (int)Common.SiNo.NO; // El movimiento no está procesado aún
                    objmovementDto.i_ProcessTypeId = (int)Common.ProcessType.LOCAL; // Procesado Localmente
                    objmovementDto.i_MovementTypeId = (int)Common.MovementType.EGRESO; // EGRESO DE ALMACÉN
                    objmovementDto.r_TotalQuantity = 0;

                    // Grabar movimiento
                    var _MovementId = new MovementBL().AddMovement(ref objOperationResult,
                                                                    objmovementDto,
                                                                    _movementdetailListDto,
                                                                    ClientSession);
                }

                #endregion

                #endregion

                #region Procedimientos -> ADD / DELETE

                if (pobjProcedure != null)
                {
                    // Operaciones básicas [Add,Update,Delete] restricciones 
                    foreach (var p in pobjProcedure)
                    {
                        if (p.i_RecordType == (int)RecordType.Temporal && p.i_RecordStatus == (int)RecordStatus.Agregado)
                        {
                            procedurebyservice objProcedure = new procedurebyservice();

                            var NewId1 = Common.Utils.GetNewId(intNodeId, Utils.GetNextSecuentialId(intNodeId, 34), "PS");
                            objProcedure.v_ProcedureByServiceId = NewId1;
                            objProcedure.v_ServiceId = p.v_ServiceId;
                            objProcedure.i_ProcedureId = p.i_ProcedureId;
                            //objProcedure.i_ProcedureTypeId = null;

                            objProcedure.d_InsertDate = DateTime.Now;
                            objProcedure.i_InsertUserId = Int32.Parse(ClientSession[2]);
                            objProcedure.i_IsDeleted = 0;

                            dbContext.AddToprocedurebyservice(objProcedure);
                            dbContext.SaveChanges();
                        }
                        else if (p.i_RecordType == (int)RecordType.NoTemporal && p.i_RecordStatus == (int)RecordStatus.EliminadoLogico)
                        {
                            // Obtener la entidad fuente
                            var objEntitySource = (from a in dbContext.procedurebyservice
                                                   where a.v_ProcedureByServiceId == p.v_ProcedureByServiceId
                                                   select a).FirstOrDefault();

                            // Crear la entidad con los datos actualizados                                                           
                            objEntitySource.d_UpdateDate = DateTime.Now;
                            objEntitySource.i_UpdateUserId = Int32.Parse(ClientSession[2]);
                            objEntitySource.i_IsDeleted = 1;

                            // Guardar los cambios
                            dbContext.SaveChanges();
                        }
                    }
                }

                #endregion

                #region Diagnósticos seleccionados -> UPDATE

                foreach (var dr in pobjDiagnosticRepository)
                {
                    // Obtener la entidad fuente
                    var objEntitySource = (from a in dbContext.diagnosticrepository
                                           where a.v_DiagnosticRepositoryId == dr.v_DiagnosticRepositoryId
                                           select a).FirstOrDefault();

                    if (objEntitySource != null)
                    {
                        objEntitySource.i_GenerateMedicalBreak = dr.i_GenerateMedicalBreak;
                        objEntitySource.d_UpdateDate = DateTime.Now;
                        objEntitySource.i_UpdateUserId = Int32.Parse(ClientSession[2]);

                        // Guardar los cambios
                        dbContext.SaveChanges();
                    }

                }

                #endregion

                #region Service

                if (pobjService != null)
                {
                    // Obtener la entidad fuente
                    var objService = (from a in dbContext.service
                                      where a.v_ServiceId == pobjService.v_ServiceId
                                      select a).FirstOrDefault();

                    // Crear la entidad con los datos actualizados
                    objService.i_DestinationMedicationId = pobjService.i_DestinationMedicationId;
                    objService.i_TransportMedicationId = pobjService.i_TransportMedicationId;
                    objService.i_HasMedicalBreakId = pobjService.i_HasMedicalBreakId;
                    objService.d_MedicalBreakStartDate = pobjService.d_MedicalBreakStartDate;
                    objService.d_MedicalBreakEndDate = pobjService.d_MedicalBreakEndDate;
                    // Falta el campo Tiene Restricciones -> Si / No
                    objService.d_StartDateRestriction = pobjService.d_StartDateRestriction;
                    objService.d_EndDateRestriction = pobjService.d_EndDateRestriction;
                    objService.v_GeneralRecomendations = pobjService.v_GeneralRecomendations;

                    // datos de cabecera del Servicio
                    objService.i_AptitudeStatusId = pobjService.i_AptitudeStatusId;
                    objService.i_IsNewControl = pobjService.i_IsNewControl;

                    objService.d_UpdateDate = DateTime.Now;
                    objService.i_UpdateUserId = Int32.Parse(ClientSession[2]);

                    // Guardar los cambios
                    dbContext.SaveChanges();
                }

                #endregion

                #region ServiceComponent -> UPDATE

                if (pobjServiceComponent != null)
                {
                    // Actualizar algunos valores de ServiceComponent
                    OperationResult objOperationResult1 = new OperationResult();
                    UpdateServiceComponentFromEso(ref objOperationResult1, pobjServiceComponent, ClientSession, enabledchkApproved);
                }

                #endregion

                pobjOperationResult.Success = 1;
                // Llenar entidad Log
                LogBL.SaveLog(ClientSession[0], ClientSession[1], ClientSession[2], LogEventType.CREACION, "DIAGNOSTICOS / RESTRICCIONES / RECOMENDACIONES POR SERVICIO", "v_DiagnosticRepositoryId=" + NewId0.ToString(), Success.Ok, null);
                return;
            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
                // Llenar entidad Log
                LogBL.SaveLog(ClientSession[0], ClientSession[1], ClientSession[2], LogEventType.CREACION, "DIAGNOSTICOS / RESTRICCIONES / RECOMENDACIONES POR SERVICIO", "v_DiagnosticRepositoryId=" + NewId0.ToString(), Success.Failed, pobjOperationResult.ExceptionMessage);
                return;
            }
        }

        public void AddWorkPlan(ref OperationResult pobjOperationResult, List<MedicationList> pobjMedication, List<ProcedureByServiceList> pobjProcedure, List<AuxiliaryExamList> auxiliaryExams, List<DiagnosticRepositoryList> interconsultations, List<RestrictionList> restrictions, List<DiagnosticRepositoryList> medicalBreaks, serviceDto pobjService, List<string> ClientSession)
        {
            //mon.IsActive = true;
            string NewId0 = "(No generado)";
            int intNodeId = int.Parse(ClientSession[0]);

            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
                OperationResult objOperationResult = new OperationResult();

                nodeDto node = new NodeBL().GetNodeByNodeId(ref objOperationResult, int.Parse(ClientSession[0]));
                var _pharmacyWarehouseId = node.v_PharmacyWarehouseId;
                var _movementdetailListDto = new List<movementdetailDto>();

                foreach (var m in pobjMedication)
                {
                    #region Medication -> ADD / UPDATE / DELETE

                    // ADD
                    if (m.i_RecordType == (int)RecordType.Temporal && m.i_RecordStatus == (int)RecordStatus.Agregado)
                    {
                        medication objEntity = new medication();

                        objEntity.v_ProductId = m.v_ProductId;
                        objEntity.v_ServiceId = m.v_ServiceId;
                        objEntity.r_Quantity = m.r_Quantity;
                        objEntity.v_Doses = m.v_Doses;
                        objEntity.i_ViaId = m.i_ViaId;
                        objEntity.d_InsertDate = DateTime.Now;
                        objEntity.i_InsertUserId = Int32.Parse(ClientSession[2]);
                        objEntity.i_IsDeleted = 0;

                        // Autogeneramos el Pk de la tabla                      
                        NewId0 = Common.Utils.GetNewId(intNodeId, Utils.GetNextSecuentialId(intNodeId, 33), "MC");
                        objEntity.v_MedicationId = NewId0;

                        dbContext.AddTomedication(objEntity);
                        //dbContext.SaveChanges();

                        if (pobjService.i_MasterServiceId != (int)MasterService.Eso)
                        {
                            #region CARGAR PRODUCTOS A DESCONTAR DEL ALMACÉN

                            movementdetailDto mdDto = new movementdetailDto();
                            mdDto.v_ProductId = m.v_ProductId;
                            mdDto.r_Quantity = m.r_Quantity;
                            mdDto.i_MovementTypeId = (int?)Common.MotiveType.EgresoAtencion;
                            _movementdetailListDto.Add(mdDto);

                            #endregion
                        }

                    }                                     // DELETE
                    else if (m.i_RecordType == (int)RecordType.NoTemporal && m.i_RecordStatus == (int)RecordStatus.EliminadoLogico)
                    {
                        // Obtener la entidad fuente
                        var objEntitySource = (from a in dbContext.medication
                                               where a.v_MedicationId == m.v_MedicationId
                                               select a).FirstOrDefault();

                        // Crear la entidad con los datos actualizados                                                           
                        objEntitySource.d_UpdateDate = DateTime.Now;
                        objEntitySource.i_UpdateUserId = Int32.Parse(ClientSession[2]);
                        objEntitySource.i_IsDeleted = 1;

                        // Guardar los cambios
                        //dbContext.SaveChanges();
                    }

                    #endregion
                }

                #region GRABAR MOVIMIENTOS [CABECERA Y DETALLE]

                if (pobjService.i_MasterServiceId != (int)MasterService.Eso)
                {
                    movementDto objmovementDto = new movementDto();

                    objmovementDto.i_MotiveTypeId = (int?)Common.MotiveType.EgresoAtencion;
                    objmovementDto.d_Date = DateTime.Now;
                    objmovementDto.v_WarehouseId = _pharmacyWarehouseId;
                    objmovementDto.v_ReferenceDocument = string.Empty;
                    objmovementDto.i_IsLocallyProcessed = (int)Common.SiNo.NO; // El movimiento no está procesado aún
                    objmovementDto.i_ProcessTypeId = (int)Common.ProcessType.LOCAL; // Procesado Localmente
                    objmovementDto.i_MovementTypeId = (int)Common.MovementType.EGRESO; // EGRESO DE ALMACÉN
                    objmovementDto.r_TotalQuantity = 0;

                    // Grabar movimiento
                    var _MovementId = new MovementBL().AddMovement(ref objOperationResult,
                                                                    objmovementDto,
                                                                    _movementdetailListDto,
                                                                    ClientSession);
                }

                #endregion

                if (pobjProcedure != null)
                {
                    // Operaciones básicas [Add,Update,Delete] restricciones 
                    foreach (var p in pobjProcedure)
                    {
                        #region Procedimientos -> ADD / DELETE

                        if (p.i_RecordType == (int)RecordType.Temporal && p.i_RecordStatus == (int)RecordStatus.Agregado)
                        {
                            procedurebyservice objProcedure = new procedurebyservice();

                            var NewId1 = Common.Utils.GetNewId(intNodeId, Utils.GetNextSecuentialId(intNodeId, 34), "PS");
                            objProcedure.v_ProcedureByServiceId = NewId1;
                            objProcedure.v_ServiceId = p.v_ServiceId;
                            objProcedure.i_ProcedureId = p.i_ProcedureId;
                            //objProcedure.i_ProcedureTypeId = null;

                            objProcedure.d_InsertDate = DateTime.Now;
                            objProcedure.i_InsertUserId = Int32.Parse(ClientSession[2]);
                            objProcedure.i_IsDeleted = 0;

                            dbContext.AddToprocedurebyservice(objProcedure);
                            //dbContext.SaveChanges();
                        }
                        else if (p.i_RecordType == (int)RecordType.NoTemporal && p.i_RecordStatus == (int)RecordStatus.EliminadoLogico)
                        {
                            // Obtener la entidad fuente
                            var objEntitySource = (from a in dbContext.procedurebyservice
                                                   where a.v_ProcedureByServiceId == p.v_ProcedureByServiceId
                                                   select a).FirstOrDefault();

                            // Crear la entidad con los datos actualizados                                                           
                            objEntitySource.d_UpdateDate = DateTime.Now;
                            objEntitySource.i_UpdateUserId = Int32.Parse(ClientSession[2]);
                            objEntitySource.i_IsDeleted = 1;

                            // Guardar los cambios
                            //dbContext.SaveChanges();
                        }

                        #endregion
                    }
                }

                if (auxiliaryExams != null)
                {
                    foreach (var auxiliaryExam in auxiliaryExams)
                    {
                        #region auxiliaryexam -> ADD / DELETE

                        // ADD
                        if (auxiliaryExam.i_RecordType == (int)RecordType.Temporal && auxiliaryExam.i_RecordStatus == (int)RecordStatus.Agregado)
                        {
                            auxiliaryexam objAuxiliaryExam = new auxiliaryexam();

                            var NewId1 = Common.Utils.GetNewId(intNodeId, Utils.GetNextSecuentialId(intNodeId, 48), "AX");
                            objAuxiliaryExam.v_AuxiliaryExamId = NewId1;
                            objAuxiliaryExam.v_ServiceId = auxiliaryExam.v_ServiceId;
                            objAuxiliaryExam.v_ComponentId = auxiliaryExam.v_ComponentId;

                            objAuxiliaryExam.d_InsertDate = DateTime.Now;
                            objAuxiliaryExam.i_InsertUserId = Int32.Parse(ClientSession[2]);
                            objAuxiliaryExam.i_IsDeleted = 0;

                            dbContext.AddToauxiliaryexam(objAuxiliaryExam);

                        }
                        // DELETE
                        else if (auxiliaryExam.i_RecordType == (int)RecordType.NoTemporal && auxiliaryExam.i_RecordStatus == (int)RecordStatus.EliminadoLogico)
                        {
                            // Obtener la entidad fuente
                            var objEntitySource = (from a in dbContext.auxiliaryexam
                                                   where a.v_AuxiliaryExamId == auxiliaryExam.v_AuxiliaryExamId
                                                   select a).FirstOrDefault();

                            // Crear la entidad con los datos actualizados                                                           
                            objEntitySource.d_UpdateDate = DateTime.Now;
                            objEntitySource.i_UpdateUserId = Int32.Parse(ClientSession[2]);
                            objEntitySource.i_IsDeleted = 1;


                        }

                        #endregion
                    }
                }

                if (interconsultations != null)
                {
                    foreach (var intercon in interconsultations)
                    {
                        #region diagnosticrepository -> ADD / DELETE

                        // ADD
                        if (intercon.i_RecordType == (int)RecordType.Temporal && intercon.i_RecordStatus == (int)RecordStatus.Agregado)
                        {
                            // Obtener la entidad fuente
                            var objEntitySource = (from a in dbContext.diagnosticrepository
                                                   where a.v_DiagnosticRepositoryId == intercon.v_DiagnosticRepositoryId
                                                   select a).FirstOrDefault();

                            if (objEntitySource != null)
                            {
                                objEntitySource.i_SendToInterconsultationId = intercon.i_SendToInterconsultationId;
                                objEntitySource.v_InterconsultationDestinationId = intercon.v_OfficeId;
                                objEntitySource.d_UpdateDate = DateTime.Now;
                                objEntitySource.i_UpdateUserId = Int32.Parse(ClientSession[2]);
                            }
                        }
                        // DELETE
                        else if (intercon.i_RecordType == (int)RecordType.NoTemporal && intercon.i_RecordStatus == (int)RecordStatus.EliminadoLogico)
                        {
                            var objEntitySource = (from a in dbContext.diagnosticrepository
                                                   where a.v_DiagnosticRepositoryId == intercon.v_DiagnosticRepositoryId
                                                   select a).FirstOrDefault();

                            // Crear la entidad con los datos actualizados                                                           
                            objEntitySource.d_UpdateDate = DateTime.Now;
                            objEntitySource.i_UpdateUserId = Int32.Parse(ClientSession[2]);
                            objEntitySource.i_SendToInterconsultationId = (int)SiNo.NO;
                            objEntitySource.v_InterconsultationDestinationId = null;
                        }

                        #endregion
                    }
                }

                if (restrictions != null)
                {
                    foreach (var restriction in restrictions)
                    {
                        #region restriction -> ADD / DELETE

                        // ADD
                        if (restriction.i_RecordType == (int)RecordType.Temporal && restriction.i_RecordStatus == (int)RecordStatus.Agregado)
                        {
                            restriction objRestriction = new restriction();

                            var NewId1 = Common.Utils.GetNewId(intNodeId, Utils.GetNextSecuentialId(intNodeId, 30), "RD");
                            objRestriction.v_ServiceId = restriction.v_ServiceId;
                            objRestriction.v_RestrictionId = NewId1;

                            objRestriction.v_MasterRestrictionId = restriction.v_MasterRestrictionId;
                            objRestriction.d_StartDateRestriction = restriction.d_StartDateRestriction;
                            objRestriction.d_EndDateRestriction = restriction.d_EndDateRestriction;
                            objRestriction.d_InsertDate = DateTime.Now;
                            objRestriction.i_InsertUserId = Int32.Parse(ClientSession[2]);
                            objRestriction.i_IsDeleted = 0;

                            dbContext.AddTorestriction(objRestriction);
                        }
                        // DELETE
                        else if (restriction.i_RecordType == (int)RecordType.NoTemporal && restriction.i_RecordStatus == (int)RecordStatus.EliminadoLogico)
                        {
                            // Obtener la entidad fuente v_RestrictionByDiagnosticId
                            var objEntitySource = (from a in dbContext.restriction
                                                   where a.v_RestrictionId == restriction.v_RestrictionByDiagnosticId
                                                   select a).FirstOrDefault();

                            // Crear la entidad con los datos actualizados                                                           
                            objEntitySource.d_UpdateDate = DateTime.Now;
                            objEntitySource.i_UpdateUserId = Int32.Parse(ClientSession[2]);
                            objEntitySource.i_IsDeleted = 1;
                        }

                        #endregion
                    }

                }

                if (medicalBreaks != null)
                {
                    foreach (var dr in medicalBreaks)
                    {
                        #region Descanso Médico -> ADD / DELETE

                        // ADD
                        if (dr.i_RecordType == (int)RecordType.Temporal && dr.i_RecordStatus == (int)RecordStatus.Agregado)
                        {
                            // Obtener la entidad fuente
                            var objEntitySource = (from a in dbContext.diagnosticrepository
                                                   where a.v_DiagnosticRepositoryId == dr.v_DiagnosticRepositoryId
                                                   select a).FirstOrDefault();

                            if (objEntitySource != null)
                            {
                                objEntitySource.i_GenerateMedicalBreak = dr.i_GenerateMedicalBreak;
                                objEntitySource.d_UpdateDate = DateTime.Now;
                                objEntitySource.i_UpdateUserId = Int32.Parse(ClientSession[2]);
                            }

                        }
                        // DELETE
                        else if (dr.i_RecordType == (int)RecordType.NoTemporal && dr.i_RecordStatus == (int)RecordStatus.EliminadoLogico)
                        {
                            // Obtener la entidad fuente v_RestrictionByDiagnosticId
                            var objEntitySource = (from a in dbContext.diagnosticrepository
                                                   where a.v_DiagnosticRepositoryId == dr.v_DiagnosticRepositoryId
                                                   select a).FirstOrDefault();

                            // Crear la entidad con los datos actualizados                                                           
                            objEntitySource.d_UpdateDate = DateTime.Now;
                            objEntitySource.i_UpdateUserId = Int32.Parse(ClientSession[2]);
                            objEntitySource.i_GenerateMedicalBreak = 0;
                        }


                        #endregion
                    }
                }

                if (pobjService != null)
                {
                    #region Service -> UPDATE

                    // Obtener la entidad fuente
                    var objService = (from a in dbContext.service
                                      where a.v_ServiceId == pobjService.v_ServiceId
                                      select a).FirstOrDefault();

                    // Crear la entidad con los datos actualizados
                    objService.i_DestinationMedicationId = pobjService.i_DestinationMedicationId;
                    objService.i_TransportMedicationId = pobjService.i_TransportMedicationId;
                    objService.i_HasMedicalBreakId = pobjService.i_HasMedicalBreakId;
                    objService.d_MedicalBreakStartDate = pobjService.d_MedicalBreakStartDate;
                    objService.d_MedicalBreakEndDate = pobjService.d_MedicalBreakEndDate;

                    objService.v_GeneralRecomendations = pobjService.v_GeneralRecomendations;

                    objService.d_NextAppointment = pobjService.d_NextAppointment;
                    objService.i_SendToTracking = pobjService.i_SendToTracking;

                    // datos de cabecera del Servicio

                    objService.i_IsNewControl = pobjService.i_IsNewControl;
                    objService.i_HasRestrictionId = pobjService.i_HasRestrictionId;
                    objService.i_HazInterconsultationId = pobjService.i_HazInterconsultationId;

                    objService.d_UpdateDate = DateTime.Now;
                    objService.i_UpdateUserId = Int32.Parse(ClientSession[2]);

                    #endregion

                }

                // Guardar los cambios
                dbContext.SaveChanges();

                pobjOperationResult.Success = 1;
                // Llenar entidad Log
                LogBL.SaveLog(ClientSession[0], ClientSession[1], ClientSession[2], LogEventType.CREACION, "DIAGNOSTICOS / RESTRICCIONES / RECOMENDACIONES POR SERVICIO", "v_DiagnosticRepositoryId=" + NewId0.ToString(), Success.Ok, null);
                return;
            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
                // Llenar entidad Log
                LogBL.SaveLog(ClientSession[0], ClientSession[1], ClientSession[2], LogEventType.CREACION, "DIAGNOSTICOS / RESTRICCIONES / RECOMENDACIONES POR SERVICIO", "v_DiagnosticRepositoryId=" + NewId0.ToString(), Success.Failed, pobjOperationResult.ExceptionMessage);
                return;
            }
        }


        #endregion

        #region Antecedentes

        public List<PersonMedicalHistoryList> GetAntecedentConsolidateForService_(ref OperationResult pobjOperationResult, string pstrPersonId)
        {
            //mon.IsActive = true;

            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                List<PersonMedicalHistoryList> lis = new List<PersonMedicalHistoryList>();

                int isDeleted = (int)SiNo.NO;

                #region querys individuales

                // Obtener todos loa antecedentes de una persona (una o varias empresas)
                var historyId = (from a in dbContext.history
                                 where a.v_PersonId == pstrPersonId && a.i_IsDeleted == isDeleted
                                 select new PersonMedicalHistoryList
                                 {
                                     v_AntecedentTypeName = "Ocupacionales",
                                     v_DiseasesName = null,
                                     v_HistoryId = a.v_HistoryId,
                                     d_StartDate = a.d_StartDate,
                                     d_EndDate = a.d_EndDate,
                                     v_Occupation = a.v_workstation,
                                     v_GroupName = null
                                 }).ToList();

                // personmedicalhistory
                var q1tmp = (from A in dbContext.personmedicalhistory
                             join F in dbContext.history on A.v_PersonId equals F.v_PersonId
                             join B in dbContext.systemparameter on new { a = A.v_DiseasesId, b = 147 }      // MINI CIE10
                                                               equals new { a = B.v_Value1, b = B.i_GroupId } into B_join
                             from B in B_join.DefaultIfEmpty()
                             join C in dbContext.systemparameter on new { a = B.i_ParentParameterId.Value, b = 147 }
                                                               equals new { a = C.i_ParameterId, b = C.i_GroupId } into C_join
                             from C in C_join.DefaultIfEmpty()
                             join D in dbContext.diseases on A.v_DiseasesId equals D.v_DiseasesId
                             join E in dbContext.systemparameter on new { a = A.i_TypeDiagnosticId.Value, b = 139 }
                                                                equals new { a = E.i_ParameterId, b = E.i_GroupId }

                             where A.i_IsDeleted == isDeleted && A.v_PersonId == pstrPersonId

                             select new PersonMedicalHistoryList
                             {
                                 v_AntecedentTypeName = "Medicos-Personales",
                                 //v_PersonMedicalHistoryId = A.v_PersonMedicalHistoryId,
                                 //v_PersonId = A.v_PersonId,
                                 //v_DiseasesId = A.v_DiseasesId,
                                 v_DiseasesName = D.v_Name,
                                 //i_TypeDiagnosticId = A.i_TypeDiagnosticId,
                                 d_StartDate = A.d_StartDate,
                                 v_GroupName = null

                             }).ToList();

                var q1 = (from A in q1tmp
                          select new PersonMedicalHistoryList
                          {
                              v_AntecedentTypeName = "Medicos-Personales",
                              v_DiseasesName = A.v_DiseasesName,
                              v_DateOrGroup = A.d_StartDate.Value.ToShortDateString(),
                              d_StartDate = A.d_StartDate,
                          }).ToList();

                // typeofeep
                var q2 = (from A in historyId
                          select new PersonMedicalHistoryList
                          {
                              v_AntecedentTypeName = "Ocupacionales, " + A.v_Occupation,
                              v_DiseasesName = ConcatenateTypeOfeep(A.v_HistoryId),
                              v_DateOrGroup = A.d_StartDate.Value.ToString("MM/yyyy") + " - " + A.d_EndDate.Value.ToString("MM/yyyy"),
                              d_StartDate = A.d_StartDate,
                          }).ToList();

                // workstationdangers
                var q3 = (from A in historyId
                          select new PersonMedicalHistoryList
                          {
                              v_AntecedentTypeName = "Ocupacionales, " + A.v_Occupation,
                              v_DiseasesName = ConcatenateWorkStationDangers(A.v_HistoryId),
                              v_DateOrGroup = A.d_StartDate.Value.ToString("MM/yyyy") + " - " + A.d_EndDate.Value.ToString("MM/yyyy"),
                              d_StartDate = A.d_StartDate,
                          }).ToList();

                // noxioushabits
                var q4 = (from A in dbContext.noxioushabits
                          join B in dbContext.systemparameter on new { a = A.i_TypeHabitsId.Value, b = 148 }  // HÁBITOS NOCIVOS
                                                         equals new { a = B.i_ParameterId, b = B.i_GroupId } into B_join
                          from B in B_join.DefaultIfEmpty()
                          where A.i_IsDeleted == 0 && A.v_PersonId == pstrPersonId
                          select new PersonMedicalHistoryList
                          {
                              v_AntecedentTypeName = "Hábitos Nocivos",
                              v_DiseasesName = B.v_Value1 + ", " + A.v_Frequency,
                          }).ToList();

                // familymedicalantecedents

                var q5tmp = (from A in dbContext.familymedicalantecedents
                             join B in dbContext.systemparameter on new { a = A.i_TypeFamilyId.Value, b = 149 }  // ANTECEDENTES FAMILIARES MÉDICOS
                                                            equals new { a = B.i_ParameterId, b = B.i_GroupId } into B_join
                             from B in B_join.DefaultIfEmpty()
                             join C in dbContext.systemparameter on new { a = B.i_ParentParameterId.Value, b = 149 }
                                                          equals new { a = C.i_ParameterId, b = C.i_GroupId } into C_join
                             from C in C_join.DefaultIfEmpty()
                             where A.i_IsDeleted == 0 && A.v_PersonId == pstrPersonId
                             group C by new { C.i_ParameterId, C.v_Value1 } into g
                             select new PersonMedicalHistoryList
                             {
                                 v_AntecedentTypeName = "Familiares",
                                 i_TypeFamilyId = g.Key.i_ParameterId,
                                 v_TypeFamilyName = g.Key.v_Value1
                             }).ToList();

                var q5 = (from A in q5tmp
                          select new PersonMedicalHistoryList
                          {
                              v_AntecedentTypeName = A.v_AntecedentTypeName,
                              v_DiseasesName = ConcatenateFamilyMedicalAntecedents(pstrPersonId, A.i_TypeFamilyId),
                              v_DateOrGroup = A.v_TypeFamilyName
                          }).ToList();

                #endregion

                #region Fusion

                if (q1.Count > 0)
                    lis.AddRange(q1);
                if (q2.Count > 0)
                    lis.AddRange(q2);
                if (q3.Count > 0)
                    lis.AddRange(q3);
                if (q4.Count > 0)
                    lis.AddRange(q4);
                if (q5.Count > 0)
                    lis.AddRange(q5);

                #endregion

                //var ss = lis.OrderByDescending(x => x.v_AntecedentTypeName).ThenByDescending(x => x.d_StartDate).ToList();

                pobjOperationResult.Success = 1;
                //return lis.OrderByDescending(x => x.v_AntecedentTypeName).ThenByDescending(x => x.d_StartDate).ToList();
                return lis.OrderBy(x => x.v_AntecedentTypeName).ToList();


            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
                return null;
            }
        }

        public List<PersonMedicalHistoryList> GetAntecedentConsolidateForService(ref OperationResult pobjOperationResult, string pstrPersonId)
        {
            //mon.IsActive = true;

            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                List<PersonMedicalHistoryList> lis = new List<PersonMedicalHistoryList>();

                int isDeleted = (int)SiNo.NO;

                #region querys individuales

                // Obtener todos loa antecedentes de una persona (una o varias empresas)
                var historyId = (from a in dbContext.history
                                 where a.v_PersonId == pstrPersonId && a.i_IsDeleted == isDeleted
                                 select new PersonMedicalHistoryList
                                 {
                                     v_AntecedentTypeName = "Ocupacionales",
                                     v_DiseasesName = null,
                                     v_HistoryId = a.v_HistoryId,
                                     d_StartDate = a.d_StartDate,
                                     d_EndDate = a.d_EndDate,
                                     v_Occupation = a.v_workstation,
                                     v_GroupName = null
                                 }).ToList();

                // personmedicalhistory
                var q1tmp = (from A in dbContext.personmedicalhistory
                             //join F in dbContext.history on A.v_PersonId equals F.v_PersonId
                             //join B in dbContext.systemparameter on new { a = A.v_DiseasesId, b = 147 }      // MINI CIE10
                             //                                  equals new { a = B.v_Value1, b = B.i_GroupId } into B_join
                             //from B in B_join.DefaultIfEmpty()
                             //join C in dbContext.systemparameter on new { a = B.i_ParentParameterId.Value, b = 147 }
                             //                                  equals new { a = C.i_ParameterId, b = C.i_GroupId } into C_join
                             //from C in C_join.DefaultIfEmpty()
                             join D in dbContext.diseases on A.v_DiseasesId equals D.v_DiseasesId
                             //join E in dbContext.systemparameter on new { a = A.i_TypeDiagnosticId.Value, b = 139 }
                             //                                   equals new { a = E.i_ParameterId, b = E.i_GroupId }

                             where A.i_IsDeleted == isDeleted && A.v_PersonId == pstrPersonId

                             select new PersonMedicalHistoryList
                             {
                                 v_AntecedentTypeName = "Medicos-Personales",
                                 //v_PersonMedicalHistoryId = A.v_PersonMedicalHistoryId,
                                 //v_PersonId = A.v_PersonId,
                                 //v_DiseasesId = A.v_DiseasesId,
                                 v_DiseasesName = D.v_Name,
                                 //i_TypeDiagnosticId = A.i_TypeDiagnosticId,
                                 d_StartDate = A.d_StartDate,
                                 v_GroupName = null

                             }).ToList();

                var q1 = (from A in q1tmp
                          select new PersonMedicalHistoryList
                          {
                              v_AntecedentTypeName = "Medicos-Personales",
                              v_DiseasesName = A.v_DiseasesName,
                              v_DateOrGroup = A.d_StartDate.Value.ToShortDateString(),
                              //d_StartDate = A.d_StartDate,
                              d_StartDate = A.d_StartDate.Value
                          }).ToList();

                // typeofeep
                var q2 = (from A in historyId
                          select new PersonMedicalHistoryList
                          {
                              v_AntecedentTypeName = "Ocupacionales, " + A.v_Occupation,
                              v_DiseasesName = ConcatenateTypeOfeep(A.v_HistoryId),
                              v_DateOrGroup = A.d_StartDate.Value.ToString("MM/yyyy") + " - " + A.d_EndDate.Value.ToString("MM/yyyy"),
                              d_StartDate = A.d_StartDate,
                          }).ToList();

                // workstationdangers
                var q3 = (from A in historyId
                          select new PersonMedicalHistoryList
                          {
                              v_AntecedentTypeName = "Ocupacionales, " + A.v_Occupation,
                              v_DiseasesName = ConcatenateWorkStationDangers(A.v_HistoryId),
                              v_DateOrGroup = A.d_StartDate.Value.ToString("MM/yyyy") + " - " + A.d_EndDate.Value.ToString("MM/yyyy"),
                              d_StartDate = A.d_StartDate,
                          }).ToList();

                // noxioushabits
                var q4 = (from A in dbContext.noxioushabits
                          join B in dbContext.systemparameter on new { a = A.i_TypeHabitsId.Value, b = 148 }  // HÁBITOS NOCIVOS
                                                         equals new { a = B.i_ParameterId, b = B.i_GroupId } into B_join
                          from B in B_join.DefaultIfEmpty()
                          where A.i_IsDeleted == 0 && A.v_PersonId == pstrPersonId
                          select new PersonMedicalHistoryList
                          {
                              v_AntecedentTypeName = "Hábitos Nocivos",
                              v_DiseasesName = B.v_Value1 + ", " + A.v_Frequency,
                          }).ToList();

                // familymedicalantecedents

                var q5tmp = (from A in dbContext.familymedicalantecedents
                             join B in dbContext.systemparameter on new { a = A.i_TypeFamilyId.Value, b = 149 }  // ANTECEDENTES FAMILIARES MÉDICOS
                                                            equals new { a = B.i_ParameterId, b = B.i_GroupId } into B_join
                             from B in B_join.DefaultIfEmpty()
                             join C in dbContext.systemparameter on new { a = B.i_ParentParameterId.Value, b = 149 }
                                                          equals new { a = C.i_ParameterId, b = C.i_GroupId } into C_join
                             from C in C_join.DefaultIfEmpty()
                             where A.i_IsDeleted == 0 && A.v_PersonId == pstrPersonId
                             group C by new { C.i_ParameterId, C.v_Value1 } into g
                             select new PersonMedicalHistoryList
                             {
                                 v_AntecedentTypeName = "Familiares",
                                 i_TypeFamilyId = g.Key.i_ParameterId,
                                 v_TypeFamilyName = g.Key.v_Value1
                             }).ToList();

                var q5 = (from A in q5tmp
                          select new PersonMedicalHistoryList
                          {
                              v_AntecedentTypeName = A.v_AntecedentTypeName,
                              v_DiseasesName = ConcatenateFamilyMedicalAntecedents(pstrPersonId, A.i_TypeFamilyId),
                              v_DateOrGroup = A.v_TypeFamilyName
                          }).ToList();

                #endregion

                #region Fusion

                if (q1.Count > 0)
                    lis.AddRange(q1);
                if (q2.Count > 0)
                    lis.AddRange(q2);
                if (q3.Count > 0)
                    lis.AddRange(q3);
                if (q4.Count > 0)
                    lis.AddRange(q4);
                if (q5.Count > 0)
                    lis.AddRange(q5);

                #endregion

                //var ss = lis.OrderByDescending(x => x.v_AntecedentTypeName).ThenByDescending(x => x.d_StartDate).ToList();

                pobjOperationResult.Success = 1;
                //return lis.OrderByDescending(x => x.v_AntecedentTypeName).ThenByDescending(x => x.d_StartDate).ToList();
                return lis.OrderBy(x => x.v_AntecedentTypeName).ToList();


            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
                return null;
            }
        }


        public List<ServiceList> GetServicesConsolidateForService(ref OperationResult pobjOperationResult, string pstrPersonId, string pstrServiceId)
        {
            //mon.IsActive = true;

            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                var service = (from A in dbContext.service
                               join C in dbContext.systemparameter on new { a = A.i_MasterServiceId.Value, b = 119 }  // TIPO SERVICIO
                                                          equals new { a = C.i_ParameterId, b = C.i_GroupId }
                               where A.v_PersonId == pstrPersonId &&
                               A.v_ServiceId != pstrServiceId &&
                               A.i_ServiceStatusId != (int)ServiceStatus.PorIniciar &&
                               A.i_IsDeleted == 0
                               select new ServiceList
                               {
                                   v_ServiceId = A.v_ServiceId,
                                   v_MasterServiceName = C.v_Value1,
                                   d_ServiceDate = A.d_ServiceDate
                               });

                var q = (from A in service.ToList()
                         select new ServiceList
                         {
                             v_ServiceId = A.v_ServiceId,
                             v_MasterServiceName = A.v_MasterServiceName,
                             d_ServiceDate = A.d_ServiceDate,
                             v_DiseaseName = ConcatenateDxForServiceAntecedent(A.v_ServiceId),
                         }).OrderByDescending(p => p.d_ServiceDate).ToList();


                pobjOperationResult.Success = 1;
                return q;
            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
                return null;
            }
        }

        private string ConcatenateDxForServiceAntecedent(string pstrserviceId)
        {
            SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

            var qry = (from A in dbContext.diagnosticrepository
                       join B in dbContext.diseases on A.v_DiseasesId equals B.v_DiseasesId
                       where A.v_ServiceId == pstrserviceId &&
                       A.i_IsDeleted == 0
                       select new
                       {
                           v_DiseasesName = B.v_Name
                       }).ToList();

            return string.Join(", ", qry.Select(p => p.v_DiseasesName));
        }

        private string ConcatenateTypeOfeep(string pstrHistoryId)
        {
            SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

            var qry = (from A in dbContext.typeofeep
                       join B in dbContext.systemparameter on new { a = A.i_TypeofEEPId.Value, b = 146 }  // TIPO DE EPP USADO
                                                            equals new { a = B.i_ParameterId, b = B.i_GroupId }
                       where A.v_HistoryId == pstrHistoryId &&
                       A.i_IsDeleted == 0
                       select new
                       {
                           v_DiseasesName = B.v_Value1
                       }).ToList();

            return qry.Count == 0 ? "No usa EPP" : string.Join(", ", qry.Select(p => p.v_DiseasesName));
        }

        private string ConcatenateWorkStationDangers(string pstrHistoryId)
        {
            SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

            var qry = (from A in dbContext.workstationdangers
                       join B in dbContext.systemparameter on new { a = A.i_DangerId.Value, b = 145 } // PELIGROS EN EL PUESTO
                                                              equals new { a = B.i_ParameterId, b = B.i_GroupId }
                       where A.v_HistoryId == pstrHistoryId &&
                       A.i_IsDeleted == 0
                       select new
                       {
                           v_DiseasesName = B.v_Value1
                       }).ToList();

            return qry.Count == 0 ? "No refiere peligros en el puesto" : string.Join(", ", qry.Select(p => p.v_DiseasesName));
        }

        private string ConcatenateFamilyMedicalAntecedents(string pstrPersonId, int pintTypeFamilyId)
        {
            SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

            var qry = (from A in dbContext.familymedicalantecedents
                       join B in dbContext.systemparameter on new { a = A.i_TypeFamilyId.Value, b = 149 }  // ANTECEDENTES FAMILIARES MÉDICOS
                                                    equals new { a = B.i_ParameterId, b = B.i_GroupId } into B_join
                       from B in B_join.DefaultIfEmpty()
                       join C in dbContext.systemparameter on new { a = B.i_ParentParameterId.Value, b = 149 }  // [PADRE,MADRE,HERMANOS]
                                                      equals new { a = C.i_ParameterId, b = C.i_GroupId } into C_join
                       from C in C_join.DefaultIfEmpty()
                       join D in dbContext.diseases on new { a = A.v_DiseasesId }
                                                               equals new { a = D.v_DiseasesId } into D_join
                       from D in D_join.DefaultIfEmpty()
                       where A.v_PersonId == pstrPersonId &&
                       A.i_IsDeleted == 0 && C.i_ParameterId == pintTypeFamilyId
                       select new
                       {
                           v_DiseasesName = D.v_Name
                       }).ToList();

            return string.Join(", ", qry.Select(p => p.v_DiseasesName));
        }

        #endregion

        #region Permisos x examenes componentes

        //public List<RoleNodeComponentProfileList> GetRoleNodeComponentProfile(ref OperationResult pobjOperationResult, int pintNodeId, int pintRoleId, string pstrComponentId)
        //{
        //    mon.IsActive = true;

        //    try
        //    {
        //        SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

        //        var query = (from a in dbContext.rolenodecomponentprofile
        //                     join b in dbContext.component on a.v_ComponentId equals b.v_ComponentId
        //                     where a.i_NodeId == pintNodeId &&
        //                     a.i_RoleId == pintRoleId && a.v_ComponentId == pstrComponentId &&
        //                     a.i_IsDeleted == 0
        //                     select new RoleNodeComponentProfileList
        //                     {
        //                         v_RoleNodeComponentId = a.v_RoleNodeComponentId,
        //                         i_NodeId = a.i_NodeId,
        //                         i_RoleId = a.i_RoleId,
        //                         v_ComponentName = b.v_Name,
        //                         v_Read = a.i_Read == 1 ? "Si" : "No",
        //                         v_Write = a.i_Write == 1 ? "Si" : "No",
        //                         v_Dx = a.i_Dx == 1 ? "Si" : "No",
        //                         v_Approved = a.i_Approved == 1 ? "Si" : "No"
        //                     });


        //        List<RoleNodeComponentProfileList> objData = query.ToList();

        //        pobjOperationResult.Success = 1;
        //        return objData;
        //    }
        //    catch (Exception ex)
        //    {
        //        pobjOperationResult.Success = 0;
        //        pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
        //        return null;
        //    }
        //}

        public rolenodecomponentprofileDto GetRoleNodeComponentProfile(ref OperationResult pobjOperationResult, int pintNodeId, int pintRoleId, string pstrComponentId)
        {
            //mon.IsActive = true;

            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
                rolenodecomponentprofileDto dtoEntity = null;

                string[] componentId = null;

                if (pstrComponentId != null)
                {
                    if (pstrComponentId.Contains('|'))
                    {
                        componentId = pstrComponentId.Split('|');
                    }
                    else
                    {
                        componentId = new string[1];
                        componentId[0] = pstrComponentId;
                    }
                }

                var query = (from a in dbContext.rolenodecomponentprofile
                             where (a.i_NodeId == pintNodeId) &&
                             (a.i_RoleId == pintRoleId) &&
                             (componentId.Contains(a.v_ComponentId)) &&
                             (a.i_IsDeleted == (int)SiNo.NO)
                             select a).FirstOrDefault();

                if (query != null)
                    dtoEntity = rolenodecomponentprofileAssembler.ToDTO(query);

                pobjOperationResult.Success = 1;
                return dtoEntity;
            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
                return null;
            }
        }

        // alejandro new 

        public List<rolenodecomponentprofileDto> GetRoleNodeComponentProfileAll(ref OperationResult pobjOperationResult, int pintNodeId, int pintRoleId, string pstrComponentId)
        {
            //mon.IsActive = true;

            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
                List<rolenodecomponentprofileDto> dtoEntity = null;

                string[] componentId = null;

                if (pstrComponentId != null)
                {
                    if (pstrComponentId.Contains('|'))
                    {
                        componentId = pstrComponentId.Split('|');
                    }
                    else
                    {
                        componentId = new string[1];
                        componentId[0] = pstrComponentId;
                    }
                }

                var query = (from a in dbContext.rolenodecomponentprofile
                             where (a.i_NodeId == pintNodeId) &&
                             (a.i_RoleId == pintRoleId) &&
                             (componentId.Contains(a.v_ComponentId)) &&
                             (a.i_IsDeleted == (int)SiNo.NO)
                             select a).ToList();

                if (query != null && query.Count != 0)
                    dtoEntity = rolenodecomponentprofileAssembler.ToDTOs(query);

                pobjOperationResult.Success = 1;
                return dtoEntity;
            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
                return null;
            }
        }


        public List<RoleNodeComponentProfileList> GetRoleNodeComponentProfileByRoleNodeId(int pintNodeId, int pintRoleId)
        {
            //mon.IsActive = true;

            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                var query = (from a in dbContext.rolenodecomponentprofile

                             join catExa in dbContext.systemparameter on new { a = a.component.i_CategoryId.Value, b = 116 } // categoria de examenes (consultorios)
                                           equals new { a = catExa.i_ParameterId, b = catExa.i_GroupId } into catExa_join
                             from catExa in catExa_join.DefaultIfEmpty()


                             where (a.i_NodeId == pintNodeId) &&
                                   (a.i_RoleId == pintRoleId) &&
                                   (a.i_IsDeleted == (int)SiNo.NO)

                             select new RoleNodeComponentProfileList
                             {
                                 v_ComponentId = a.v_ComponentId,
                                 v_ComponentName = a.component.v_Name,
                                 v_RoleNodeComponentId = a.v_RoleNodeComponentId,
                                 i_CategoryId = a.component.i_CategoryId,
                                 v_CategoryName = a.component.i_CategoryId == -1 ? a.component.v_Name : catExa.v_Value1
                             }).ToList();

                return query;
            }
            catch (Exception)
            {
                throw;

            }

        }

        public List<rolenodecomponentprofileDto> GetRoleNodeComponentProfileByRoleNodeId_(int pintNodeId, int pintRoleId)
        {
            //mon.IsActive = true;

            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                var query = (from a in dbContext.rolenodecomponentprofile
                             where (a.i_NodeId == pintNodeId) &&
                                   (a.i_RoleId == pintRoleId) &&
                                   (a.i_IsDeleted == (int)SiNo.NO)
                             select new rolenodecomponentprofileDto
                             {
                                 v_ComponentId = a.v_ComponentId,
                                 v_RoleNodeComponentId = a.v_RoleNodeComponentId,
                                 i_Read = a.i_Read.Value
                             }).ToList();

                return query;
            }
            catch (Exception)
            {
                throw;
            }

        }


        public static List<KeyValueDTO> GetRoleNodeComponentProfileByRoleNodeIdNew(int pintNodeId, int pintRoleId)
        {
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                var query = (from a in dbContext.rolenodecomponentprofile

                             join catExa in dbContext.systemparameter on new { a = a.component.i_CategoryId.Value, b = 116 } // categoria de examenes (consultorios)
                                           equals new { a = catExa.i_ParameterId, b = catExa.i_GroupId } into catExa_join
                             from catExa in catExa_join.DefaultIfEmpty()


                             where (a.i_NodeId == pintNodeId) &&
                                   (a.i_RoleId == pintRoleId) &&
                                   (a.i_IsDeleted == (int)SiNo.NO)

                             select new RoleNodeComponentProfileList
                             {
                                 v_ComponentId = a.v_ComponentId,
                                 v_ComponentName = a.component.v_Name,
                                 v_RoleNodeComponentId = a.v_RoleNodeComponentId,
                                 i_CategoryId = a.component.i_CategoryId,
                                 v_CategoryName = a.component.i_CategoryId == -1 ? a.component.v_Name : catExa.v_Value1
                             }).ToList();

                var query2 = query.AsEnumerable()
                            .Select(x => new KeyValueDTO
                            {
                                Id = x.v_RoleNodeComponentId.ToString(),
                                Value1 = x.v_ComponentId,
                                Value2 = x.v_ComponentName,
                                Value3 = x.v_CategoryName
                            }).ToList();

                return query2;
            }
            catch (Exception ex)
            {
                throw;
            }
        }

        #endregion

        #endregion

        #region RoleNodeComponentProfile



        #endregion

        #region Reports

        // Alejandro
        private string ConcatenateEppsAndPercentage(string pstrHistoryId)
        {
            SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

            int[] tipoEPPRuido = { (int)TipoEPP.Orejeras, 
                                   (int)TipoEPP.TaponesAuditivosEspuma,
                                   (int)TipoEPP.TaponesAuditivosSilicona 
                                 };

            var qry = (from a in dbContext.typeofeep
                       join C1 in dbContext.systemparameter on new { a = a.i_TypeofEEPId.Value, b = 146 }
                                                                equals new { a = C1.i_ParameterId, b = C1.i_GroupId }
                       where a.v_HistoryId == pstrHistoryId &&
                             a.i_IsDeleted == 0 &&
                             tipoEPPRuido.Contains(a.i_TypeofEEPId.Value)
                       select new
                       {
                           v_Epps = C1.v_Value1,
                           r_Percentage = a.r_Percentage
                       }).ToList();

            return string.Join(", ", qry.Select(p => p.v_Epps + " " + p.r_Percentage + " % "));

            //return string.Join(", ", qry.Select(p => 
            //    new { v_Epps = p.v_Epps, 
            //          r_Percentage = p.r_Percentage 

            //        }));

        }

        // Alejandro
        public List<ReportHistoriaOcupacionalList> ReportHistoriaOcupacionalAudiometria(string pstrserviceId)
        {
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                var isDeleted = 0;

                var ruido = (int)PeligrosEnElPuesto.Ruido;

                var objEntity = (from A in dbContext.service
                                 join B in dbContext.person on A.v_PersonId equals B.v_PersonId

                                 join D in dbContext.history on B.v_PersonId equals D.v_PersonId into D_join
                                 from D in D_join.DefaultIfEmpty()

                                 join wd in dbContext.workstationdangers on D.v_HistoryId equals wd.v_HistoryId

                                 //*****
                                 join ter in dbContext.systemparameter on new { a = wd.i_NoiseSource.Value, b = (int)SystemParameterGroups.TiempoExpsosicionRuido } // Tiempo exp. al ruido
                                               equals new { a = ter.i_ParameterId, b = ter.i_GroupId } into ter_join
                                 from ter in ter_join.DefaultIfEmpty()

                                 join nr in dbContext.systemparameter on new { a = wd.i_NoiseLevel.Value, b = (int)SystemParameterGroups.NivelRuido } // Nivel de ruido
                                              equals new { a = nr.i_ParameterId, b = nr.i_GroupId } into nr_join
                                 from nr in nr_join.DefaultIfEmpty()
                                 //************

                                 join pro in dbContext.protocol on A.v_ProtocolId equals pro.v_ProtocolId

                                 // Empresa / Sede Trabajo  ********************************************************
                                 join ow in dbContext.organization on new { a = A.v_EmpresaFacturacionId }
                                         equals new { a = ow.v_OrganizationId } into ow_join
                                 from ow in ow_join.DefaultIfEmpty()

                                 join lw in dbContext.location on new { a = pro.v_WorkingOrganizationId, b = pro.v_WorkingLocationId }
                                      equals new { a = lw.v_OrganizationId, b = lw.v_LocationId } into lw_join
                                 from lw in lw_join.DefaultIfEmpty()

                                 //************************************************************************************

                                 where (A.v_ServiceId == pstrserviceId) &&
                                       (D.i_IsDeleted == isDeleted) &&
                                       (wd.i_DangerId == ruido)

                                 select new ReportHistoriaOcupacionalList
                                 {
                                     IdHistory = D.v_HistoryId,
                                     //Trabajador = B.v_FirstLastName + " " + B.v_SecondLastName + " " + B.v_FirstName,
                                     IdServicio = A.v_ServiceId,
                                     FNacimiento = B.d_Birthdate,
                                     Genero = B.i_SexTypeId.Value,
                                     LugarNacimiento = B.v_BirthPlace,

                                     Puesto = B.v_CurrentOccupation,
                                     FechaInicio = D.d_StartDate,
                                     FechaFin = D.d_EndDate,
                                     Empresa = D.v_Organization,
                                     Altitud = D.i_GeografixcaHeight.Value,
                                     AreaTrabajo = D.v_TypeActivity,
                                     PuestoTrabajo = D.v_workstation,

                                     FuenteRuidoName = wd.v_TimeOfExposureToNoise,
                                     NivelRuidoName = nr.v_Value1,
                                     TiempoExpoRuidoName = ter.v_Value1,
                                     v_PersonId = B.v_PersonId,
                                     //
                                     v_FullPersonName = B.v_FirstLastName + " " + B.v_SecondLastName + " " + B.v_FirstName,
                                     v_WorkingOrganizationName = ow.v_Name,
                                     v_FullWorkingOrganizationName = ow.v_Name + " / " + lw.v_Name,
                                     NroDocumento = B.v_DocNumber,
                                     FirmaTrabajador = B.b_RubricImage,
                                     HuellaTrabajador = B.b_FingerPrintImage,

                                 });

                var MedicalCenter = GetInfoMedicalCenter();

                var sql = (from a in objEntity.ToList()
                           let date1 = a.FechaInicio == null ? "" : a.FechaInicio.Value.ToString("MMMM / yyyy")
                           let date2 = a.FechaFin == null ? "" : a.FechaFin.Value.ToString("MMMM / yyyy")

                           select new ReportHistoriaOcupacionalList
                           {
                               IdHistory = a.IdHistory,
                               //Trabajador = a.Trabajador,
                               IdServicio = a.IdServicio,
                               FechaNacimiento = a.FNacimiento == null ? "" : a.FNacimiento.Value.ToString("dd/MM/yyyy"),
                               Genero = a.Genero,
                               LugarNacimiento = a.LugarNacimiento,

                               Puesto = a.Puesto,
                               FechaInicio = a.FechaInicio,
                               FechaFin = a.FechaFin,
                               Fechas = "Fecha Ini. \n" + date1 + "\n" + "Fecha Fin. \n" + date2,
                               Empresa = a.Empresa,

                               AreaTrabajo = a.AreaTrabajo,
                               PuestoTrabajo = a.PuestoTrabajo,

                               //Peligros = ConcatenateExposiciones(a.IdHistory),
                               Epp = ConcatenateEppsAndPercentage(a.IdHistory),

                               FuenteRuidoName = a.FuenteRuidoName,
                               NivelRuidoName = a.NivelRuidoName,
                               TiempoExpoRuidoName = a.TiempoExpoRuidoName,
                               v_PersonId = a.v_PersonId,

                               b_Logo = MedicalCenter.b_Image,
                               EmpresaPropietaria = MedicalCenter.v_Name,
                               EmpresaPropietariaDireccion = MedicalCenter.v_Address,
                               EmpresaPropietariaTelefono = MedicalCenter.v_PhoneNumber,
                               EmpresaPropietariaEmail = MedicalCenter.v_Mail,

                               //
                               v_FullPersonName = a.v_FullPersonName,
                               v_WorkingOrganizationName = a.v_WorkingOrganizationName,
                               v_FullWorkingOrganizationName = a.v_FullWorkingOrganizationName,
                               NroDocumento = a.NroDocumento,
                               FirmaTrabajador = a.FirmaTrabajador,
                               HuellaTrabajador = a.HuellaTrabajador,

                           }).ToList();

                return sql;
            }
            catch (Exception)
            {

                throw;
            }
        }


        // Alejandro
        public List<DiagnosticRepositoryList> GetDiagnosticRepositoryByComponent(string pstrServiceId, string componentId)
        {
            //mon.IsActive = true;

            int isDeleted = (int)SiNo.NO;

            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                var recomId = (int)Typifying.Recomendaciones;

                var qryRecom = (from dr in dbContext.diagnosticrepository
                                join a in dbContext.recommendation on dr.v_DiagnosticRepositoryId equals a.v_DiagnosticRepositoryId  // RECOMENDACIONES
                                join eee in dbContext.masterrecommendationrestricction on a.v_MasterRecommendationId equals eee.v_MasterRecommendationRestricctionId

                                where dr.v_ServiceId == pstrServiceId &&
                                      dr.v_ComponentId == componentId &&
                                      a.i_IsDeleted == isDeleted &&
                                      eee.i_TypifyingId == recomId
                                select new RecomendationList
                                {
                                    v_DiagnosticRepositoryId = dr.v_DiagnosticRepositoryId,
                                    v_RecommendationName = eee.v_Name,
                                    v_ServiceId = dr.v_ServiceId
                                }).ToList();

                var restricId = (int)Typifying.Restricciones;

                var qryRestric = (from dr in dbContext.diagnosticrepository
                                  join a in dbContext.restriction on dr.v_DiagnosticRepositoryId equals a.v_DiagnosticRepositoryId  // RECOMENDACIONES
                                  join eee in dbContext.masterrecommendationrestricction on a.v_MasterRestrictionId equals eee.v_MasterRecommendationRestricctionId

                                  where dr.v_ServiceId == pstrServiceId &&
                                        dr.v_ComponentId == componentId &&
                                        a.i_IsDeleted == isDeleted &&
                                        eee.i_TypifyingId == restricId
                                  select new RestrictionList
                                  {
                                      v_DiagnosticRepositoryId = dr.v_DiagnosticRepositoryId,
                                      v_RestrictionName = eee.v_Name,
                                      v_ServiceId = dr.v_ServiceId
                                  }).ToList();


                var query = (from ccc in dbContext.diagnosticrepository

                             //join sss in dbContext.service on ccc.v_ServiceId equals sss.v_ServiceId  // ESO

                             join ddd in dbContext.diseases on ccc.v_DiseasesId equals ddd.v_DiseasesId  // Diagnosticos

                             where (ccc.v_ServiceId == pstrServiceId) &&
                                   (ccc.v_ComponentId == componentId) &&
                                   (ccc.i_IsDeleted == isDeleted) //&&
                             //(ccc.i_FinalQualificationId == (int)FinalQualification.Definitivo ||
                             //ccc.i_FinalQualificationId == (int)FinalQualification.Presuntivo)

                             select new DiagnosticRepositoryList
                             {
                                 v_DiagnosticRepositoryId = ccc.v_DiagnosticRepositoryId,
                                 v_ServiceId = ccc.v_ServiceId,
                                 v_DiseasesId = ccc.v_DiseasesId,
                                 i_AutoManualId = ccc.i_AutoManualId,
                                 i_PreQualificationId = ccc.i_PreQualificationId,
                                 i_FinalQualificationId = ccc.i_FinalQualificationId,
                                 i_DiagnosticTypeId = ccc.i_DiagnosticTypeId,

                                 d_ExpirationDateDiagnostic = ccc.d_ExpirationDateDiagnostic,

                                 v_DiseasesName = ddd.v_Name,
                                 v_ComponentFieldsId = ccc.v_ComponentFieldId

                             }).ToList();

                query.ForEach(a =>
                {
                    a.Recomendations = qryRecom.FindAll(p => p.v_DiagnosticRepositoryId == a.v_DiagnosticRepositoryId);
                    a.Restrictions = qryRestric.FindAll(p => p.v_DiagnosticRepositoryId == a.v_DiagnosticRepositoryId);
                });


                //var q = (from a in query
                //         select new DiagnosticRepositoryList
                //         {
                //             v_DiagnosticRepositoryId = a.v_DiagnosticRepositoryId,
                //             v_ServiceId = a.v_ServiceId,
                //             v_DiseasesId = a.v_DiseasesId,
                //             i_DiagnosticTypeId = a.i_DiagnosticTypeId,
                //             d_ExpirationDateDiagnostic = a.d_ExpirationDateDiagnostic,



                //             v_DiseasesName = a.v_DiseasesName,
                //             v_RecomendationsName = ConcatenateRecommendation(a.v_DiagnosticRepositoryId),
                //             v_RestrictionsName = ConcatenateRestriction(a.v_DiagnosticRepositoryId),
                //             v_AptitudeStatusName = a.v_AptitudeStatusName,
                //             v_OccupationName = a.v_OccupationName  // por ahora se muestra el GESO
                //         }).ToList();


                return query;
            }
            catch (Exception ex)
            {

                return null;
            }
        }

        // Alejandro xxxxxx David
        public List<AudiometriaUserControlList> ReportAudiometriaUserControl(string pstrserviceId, string pstrComponentId)
        {
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
                var audiometriaList = new List<AudiometriaUserControlList>();

                var __sql = ValoresComponentesUserControl(pstrserviceId, pstrComponentId);

                if (__sql.Count == 0)
                    return audiometriaList;

                var multimediaFileId_OD = string.Empty;
                var multimediaFileId_OI = string.Empty;

                var xMultimediaFileId_OD = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_MULTIMEDIA_FILE_OD);
                if (xMultimediaFileId_OD != null)
                    multimediaFileId_OD = xMultimediaFileId_OD.v_Value1;

                var xMultimediaFileId_OI = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_MULTIMEDIA_FILE_OI);
                if (xMultimediaFileId_OI != null)
                    multimediaFileId_OI = xMultimediaFileId_OI.v_Value1;

                var img_OD = (from mf in dbContext.multimediafile where mf.v_MultimediaFileId == multimediaFileId_OD select mf.b_File).SingleOrDefault();
                var img_OI = (from mf in dbContext.multimediafile where mf.v_MultimediaFileId == multimediaFileId_OI select mf.b_File).SingleOrDefault();

                var ent = new AudiometriaUserControlList();
                // OD
                var xVA_OD_125 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_VA_OD_125);
                if (xVA_OD_125 != null)
                    ent.VA_OD_125 = xVA_OD_125.v_Value1;

                var xVA_OD_250 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_VA_OD_250);
                if (xVA_OD_250 != null)
                    ent.VA_OD_250 = xVA_OD_250.v_Value1;

                var xVA_OD_500 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_VA_OD_500);
                if (xVA_OD_500 != null)
                    ent.VA_OD_500 = xVA_OD_500.v_Value1;

                var xVA_OD_1000 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_VA_OD_1000);
                if (xVA_OD_1000 != null)
                    ent.VA_OD_1000 = xVA_OD_1000.v_Value1;

                var xVA_OD_2000 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_VA_OD_2000);
                if (xVA_OD_2000 != null)
                    ent.VA_OD_2000 = xVA_OD_2000.v_Value1;

                var xVA_OD_3000 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_VA_OD_3000);
                if (xVA_OD_3000 != null)
                    ent.VA_OD_3000 = xVA_OD_3000.v_Value1;

                var xVA_OD_4000 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_VA_OD_4000);
                if (xVA_OD_4000 != null)
                    ent.VA_OD_4000 = xVA_OD_4000.v_Value1;

                var xVA_OD_6000 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_VA_OD_6000);
                if (xVA_OD_6000 != null)
                    ent.VA_OD_6000 = xVA_OD_6000.v_Value1;

                var xVA_OD_8000 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_VA_OD_8000);
                if (xVA_OD_8000 != null)
                    ent.VA_OD_8000 = xVA_OD_8000.v_Value1;

                var xVO_OD_125 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_VO_OD_125);
                if (xVO_OD_125 != null)
                    ent.VO_OD_125 = xVO_OD_125.v_Value1;

                var xVO_OD_250 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_VO_OD_250);
                if (xVO_OD_250 != null)
                    ent.VO_OD_250 = xVO_OD_250.v_Value1;

                var xVO_OD_500 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_VO_OD_500);
                if (xVO_OD_500 != null)
                    ent.VO_OD_500 = xVO_OD_500.v_Value1;

                var xVO_OD_1000 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_VO_OD_1000);
                if (xVO_OD_1000 != null)
                    ent.VO_OD_1000 = xVO_OD_1000.v_Value1;

                var xVO_OD_2000 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_VO_OD_2000);
                if (xVO_OD_2000 != null)
                    ent.VO_OD_2000 = xVO_OD_2000.v_Value1;

                var xVO_OD_3000 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_VO_OD_3000);
                if (xVO_OD_3000 != null)
                    ent.VO_OD_3000 = xVO_OD_3000.v_Value1;

                var xVO_OD_4000 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_VO_OD_4000);
                if (xVO_OD_4000 != null)
                    ent.VO_OD_4000 = xVO_OD_4000.v_Value1;

                var xVO_OD_6000 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_VO_OD_6000);
                if (xVO_OD_6000 != null)
                    ent.VO_OD_6000 = xVO_OD_6000.v_Value1;

                var xVO_OD_8000 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_VO_OD_8000);
                if (xVO_OD_8000 != null)
                    ent.VO_OD_8000 = xVO_OD_8000.v_Value1;

                // OI
                var xVA_OI_125 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_VA_OI_125);
                if (xVA_OI_125 != null)
                    ent.VA_OI_125 = xVA_OI_125.v_Value1;

                var xVA_OI_250 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_VA_OI_250);
                if (xVA_OI_250 != null)
                    ent.VA_OI_250 = xVA_OI_250.v_Value1;

                var xVA_OI_500 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_VA_OI_500);
                if (xVA_OI_500 != null)
                    ent.VA_OI_500 = xVA_OI_500.v_Value1;

                var xVA_OI_1000 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_VA_OI_1000);
                if (xVA_OI_1000 != null)
                    ent.VA_OI_1000 = xVA_OI_1000.v_Value1;

                var xVA_OI_2000 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_VA_OI_2000);
                if (xVA_OI_2000 != null)
                    ent.VA_OI_2000 = xVA_OI_2000.v_Value1;

                var xVA_OI_3000 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_VA_OI_3000);
                if (xVA_OI_3000 != null)
                    ent.VA_OI_3000 = xVA_OI_3000.v_Value1;

                var xVA_OI_4000 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_VA_OI_4000);
                if (xVA_OI_4000 != null)
                    ent.VA_OI_4000 = xVA_OI_4000.v_Value1;

                var xVA_OI_6000 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_VA_OI_6000);
                if (xVA_OI_6000 != null)
                    ent.VA_OI_6000 = xVA_OI_6000.v_Value1;

                var xVA_OI_8000 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_VA_OI_8000);
                if (xVA_OI_8000 != null)
                    ent.VA_OI_8000 = xVA_OI_8000.v_Value1;

                var xVO_OI_125 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_VO_OI_125);
                if (xVO_OI_125 != null)
                    ent.VO_OI_125 = xVO_OI_125.v_Value1;

                var xVO_OI_250 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_VO_OI_250);
                if (xVO_OI_250 != null)
                    ent.VO_OI_250 = xVO_OI_250.v_Value1;

                var xVO_OI_500 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_VO_OI_500);
                if (xVO_OI_500 != null)
                    ent.VO_OI_500 = xVO_OI_500.v_Value1;

                var xVO_OI_1000 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_VO_OI_1000);
                if (xVO_OI_1000 != null)
                    ent.VO_OI_1000 = xVO_OI_1000.v_Value1;

                var xVO_OI_2000 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_VO_OI_2000);
                if (xVO_OI_2000 != null)
                    ent.VO_OI_2000 = xVO_OI_2000.v_Value1;

                var xVO_OI_3000 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_VO_OI_3000);
                if (xVO_OI_3000 != null)
                    ent.VO_OI_3000 = xVO_OI_3000.v_Value1;

                var xVO_OI_4000 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_VO_OI_4000);
                if (xVO_OI_4000 != null)
                    ent.VO_OI_4000 = xVO_OI_4000.v_Value1;

                var xVO_OI_6000 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_VO_OI_6000);
                if (xVO_OI_6000 != null)
                    ent.VO_OI_6000 = xVO_OI_6000.v_Value1;

                var xVO_OI_8000 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_VO_OI_8000);
                if (xVO_OI_8000 != null)
                    ent.VO_OI_8000 = xVO_OI_8000.v_Value1;

                //// AGVR nuevos campos
                //var xtxt_VA_OD_125 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_VA_OD_125);
                //if (xtxt_VA_OD_125 != null)
                //    ent.txt_VA_OD_125 = xtxt_VA_OD_125.v_Value1;

                //var xtxt_VA_OD_250 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_VA_OD_250);
                //if (xtxt_VA_OD_250 != null)
                //    ent.txt_VA_OD_250 = xtxt_VA_OD_250.v_Value1;

                //var xtxt_VO_OD_125 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_VO_OD_125);
                //if (xtxt_VO_OD_125 != null)
                //    ent.txt_VO_OD_125 = xtxt_VO_OD_125.v_Value1;

                //var xtxt_VO_OD_250 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_VO_OD_250);
                //if (xtxt_VO_OD_250 != null)
                //    ent.txt_VO_OD_250 = xtxt_VO_OD_250.v_Value1;

                //var xtxt_VA_OI_125 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_VA_OI_125);
                //if (xtxt_VA_OI_125 != null)
                //    ent.txt_VA_OI_125 = xtxt_VA_OI_125.v_Value1;

                //var xtxt_VA_OI_250 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_VA_OI_250);
                //if (xtxt_VA_OI_250 != null)
                //    ent.txt_VA_OI_125 = xtxt_VA_OI_250.v_Value1;

                //var xtxt_VO_OI_125 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_VO_OI_125);
                //if (xtxt_VO_OI_125 != null)
                //    ent.txt_VA_OI_125 = xtxt_VO_OI_125.v_Value1;

                //var xtxt_VO_OI_250 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_VO_OI_250);
                //if (xtxt_VO_OI_250 != null)
                //    ent.txt_VA_OI_125 = xtxt_VO_OI_250.v_Value1;

                ent.b_AudiogramaOD = img_OD;
                ent.b_AudiogramaOI = img_OI;

                audiometriaList.Add(ent);

                return audiometriaList;
            }
            catch (Exception)
            {

                throw;
            }
        }

        public List<AudiometriaList> ReportAudiometria(string pstrserviceId, string pstrComponentId)
        {
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                var objEntity = (from A in dbContext.service
                                 join B in dbContext.person on A.v_PersonId equals B.v_PersonId
                                 join E in dbContext.servicecomponent on new { a = pstrserviceId, b = pstrComponentId }
                                                                        equals new { a = E.v_ServiceId, b = E.v_ComponentId }

                                 // Usuario Medico Evaluador / Medico Aprobador ****************************
                                 join me in dbContext.systemuser on E.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
                                 from me in me_join.DefaultIfEmpty()

                                 join pme in dbContext.professional on me.v_PersonId equals pme.v_PersonId into pme_join
                                 from pme in pme_join.DefaultIfEmpty()

                                 // Usuario Tecnologo *************************************
                                 join tec in dbContext.systemuser on E.i_UpdateUserTechnicalDataRegisterId equals tec.i_SystemUserId into tec_join
                                 from tec in tec_join.DefaultIfEmpty()

                                 join ptec in dbContext.professional on tec.v_PersonId equals ptec.v_PersonId into ptec_join
                                 from ptec in ptec_join.DefaultIfEmpty()
                                 // *******************************************************  

                                 join pro in dbContext.protocol on A.v_ProtocolId equals pro.v_ProtocolId

                                 join H in dbContext.systemparameter on new { a = pro.i_EsoTypeId.Value, b = 118 }
                                                 equals new { a = H.i_ParameterId, b = H.i_GroupId }  // TIPO ESO [ESOA,ESOR,ETC]

                                 // Empresa / Sede Trabajo  ********************************************************
                                 join ow in dbContext.organization on new { a = pro.v_WorkingOrganizationId }
                                         equals new { a = ow.v_OrganizationId } into ow_join
                                 from ow in ow_join.DefaultIfEmpty()

                                 join lw in dbContext.location on new { a = pro.v_WorkingOrganizationId, b = pro.v_WorkingLocationId }
                                      equals new { a = lw.v_OrganizationId, b = lw.v_LocationId } into lw_join
                                 from lw in lw_join.DefaultIfEmpty()

                                 //************************************************************************************

                                 join J in dbContext.organization on pro.v_CustomerOrganizationId equals J.v_OrganizationId into J_join
                                 from J in J_join.DefaultIfEmpty()

                                 join K in dbContext.organization on A.v_EmpresaFacturacionId equals K.v_OrganizationId into K_join
                                 from K in K_join.DefaultIfEmpty()

                                 where A.v_ServiceId == pstrserviceId

                                 select new AudiometriaList
                                 {
                                     intTypeEso = pro.i_EsoTypeId.Value,
                                     v_PersonId = A.v_PersonId,

                                     v_FullPersonName = B.v_FirstLastName + " " + B.v_SecondLastName + " " + B.v_FirstName,

                                     d_BirthDate = B.d_Birthdate,
                                     d_ServiceDate = A.d_ServiceDate,

                                     v_DocNumber = B.v_DocNumber,
                                     i_SexTypeId = B.i_SexTypeId.Value,

                                     FirmaTecnologo = ptec.b_SignatureImage,
                                     FirmaMedico = pme.b_SignatureImage,

                                     Puesto = B.v_CurrentOccupation,
                                     v_SexType = B.i_SexTypeId == (int)Gender.MASCULINO ? "M" : "F",
                                     //
                                     v_EsoTypeName = H.v_Value1,
                                     v_ServiceComponentId = E.v_ServiceComponentId,
                                     //v_WorkingOrganizationName = ow.v_Name,
                                     //v_FullWorkingOrganizationName = ow.v_Name + " / " + lw.v_Name,
                                     v_WorkingOrganizationName = K.v_Name,
                                     v_FullWorkingOrganizationName = K.v_Name + " / " + lw.v_Name,
                                     FirmaTrabajador = B.b_RubricImage,
                                     HuellaTrabajador = B.b_FingerPrintImage,
                                     RazonSocialEmpresaCliente = K.v_Name,
                                     LogoEmpresaCliente = J.b_Image

                                 });

                var MedicalCenter = GetInfoMedicalCenter();

                var __sql = ValoresComponente(pstrserviceId, pstrComponentId);

                var sql = (from a in objEntity.ToList()

                           select new AudiometriaList
                           {

                               v_PersonId = a.v_PersonId,
                               v_FullPersonName = a.v_FullPersonName,
                               i_TypeEso = a.intTypeEso.ToString(),
                               d_BirthDate = a.d_BirthDate,
                               i_AgePacient = GetAge(a.d_BirthDate.Value),
                               d_ServiceDate = a.d_ServiceDate,
                               v_DocNumber = a.v_DocNumber,
                               i_SexTypeId = a.i_SexTypeId,
                               FirmaMedico = a.FirmaMedico,
                               FirmaTecnologo = a.FirmaTecnologo,
                               Puesto = a.Puesto,
                               v_SexType = a.v_SexType,

                               // Requisitos para la Audiometria                         
                               CambiosAltitud = __sql.Count == 0 ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_REQUISITOS_CAMBIOS_ALTITUD).v_Value1,
                               ExpuestoRuido = __sql.Count == 0 ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_REQUISITOS_EXPUESTO_RUIDO).v_Value1,
                               ProcesoInfeccioso = __sql.Count == 0 ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_REQUISITOS_PROCESO_INFECCIOSO).v_Value1,
                               DurmioNochePrevia = __sql.Count == 0 ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_REQUISITOS_DURMIO_NOCHE_PREVIA).v_Value1,
                               ConsumioAlcoholDiaPrevio = __sql.Count == 0 ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_REQUISITOS_CONSUMIO_ALCOHOL_DIA_PREVIO).v_Value1,

                               //Antecedentes para minera
                               AUDIOMETRIA_MINERA_USA_PROT = __sql.Count == 0 ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_MINERA_USA_PROT).v_Value1,
                               AUDIOMETRIA_MINERA_TIPO_PROT = __sql.Count == 0 ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_MINERA_TIPO_PROT).v_Value1,
                               AUDIOMETRIA_MINERA_TIEMPO_PUESTO = __sql.Count == 0 ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_MINERA_TIEMPO_PUESTO).v_Value1,
                               AUDIOMETRIA_MINERA_EXP_DIARIA = __sql.Count == 0 ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_MINERA_EXP_DIARIA).v_Value1,
                               AUDIOMETRIA_MINERA_EXPO_RUI = __sql.Count == 0 ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_MINERA_EXPO_RUI).v_Value1,
                               AUDIOMETRIA_MINERA_FRE_EPP = __sql.Count == 0 ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_MINERA_FRE_EPP).v_Value1,
                               AUDIOMETRIA_MINERA_FUENTE = __sql.Count == 0 ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_MINERA_FUENTE).v_Value1,
                               AUDIOMETRIA_MINERA_NIVEL = __sql.Count == 0 ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_MINERA_NIVEL).v_Value1,
                               AUDIOMETRIA_MINERA_APRE_RUI = __sql.Count == 0 ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_MINERA_APRE_RUI).v_Value1Name,



                               //// Antecedentes Medicos de importancia
                               AUDIOMETRIA_ANTECEDENTES_TEC = __sql.Count == 0 ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_ANTECEDENTES_TEC).v_Value1,
                               AUDIOMETRIA_ANTECEDENTES_RINITIS = __sql.Count == 0 ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_ANTECEDENTES_RINITIS).v_Value1,
                               AUDIOMETRIA_ANTECEDENTES_SINOSITIS = __sql.Count == 0 ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_ANTECEDENTES_SINOSITIS).v_Value1,
                               AUDIOMETRIA_ANTECEDENTES_SORDERA = __sql.Count == 0 ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_ANTECEDENTES_SORDERA).v_Value1,
                               AUDIOMETRIA_ANTECEDENTES_PAROTIDITIS = __sql.Count == 0 ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_ANTECEDENTES_PAROTIDITIS).v_Value1,

                               AUDIOMETRIA_ANTECEDENTES_MENINGITIS = __sql.Count == 0 ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_ANTECEDENTES_MENINGITIS).v_Value1,
                               AUDIOMETRIA_ANTECEDENTES_SARAMPION = __sql.Count == 0 ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_ANTECEDENTES_SARAMPION).v_Value1,
                               AUDIOMETRIA_ANTECEDENTES_OTOTOXICO = __sql.Count == 0 ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_ANTECEDENTES_OTOTOXICO).v_Value1,
                               AUDIOMETRIA_ANTECEDENTES_SORDERA_FAMILIAR = __sql.Count == 0 ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_ANTECEDENTES_SORDERA_FAMILIAR).v_Value1,
                               AUDIOMETRIA_ANTECEDENTES_DISLIPIDEMIA = __sql.Count == 0 ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_ANTECEDENTES_DISLIPIDEMIA).v_Value1,

                               AUDIOMETRIA_ANTECEDENTES_TRAUMA_ACUSTICO = __sql.Count == 0 ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_ANTECEDENTES_TRAUMA_ACUSTICO).v_Value1,
                               AUDIOMETRIA_ANTECEDENTES_DIABETES_MELLITUS = __sql.Count == 0 ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_ANTECEDENTES_DIABETES_MELLITUS).v_Value1,
                               AUDIOMETRIA_ANTECEDENTES_ENF_TIROIDEA = __sql.Count == 0 ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_ANTECEDENTES_ENF_TIROIDEA).v_Value1,
                               AUDIOMETRIA_ANTECEDENTES_OTITIS_MEDIA_CRONICA = __sql.Count == 0 ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_ANTECEDENTES_OTITIS_MEDIA_CRONICA).v_Value1,

                               AUDIOMETRIA_ANTECEDENTES_OTROS = __sql.Count == 0 ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_ANTECEDENTES_OTROS).v_Value1,

                               //// Hobbies

                               AUDIOMETRIA_HOBBIES_USO_MP3 = __sql.Count == 0 ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_HOBBIES_USO_MP3).v_Value1,
                               AUDIOMETRIA_HOBBIES_PRACTICA_TIRO = __sql.Count == 0 ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_HOBBIES_PRACTICA_TIRO).v_Value1,
                               AUDIOMETRIA_HOBBIES_DISCOTECAS = __sql.Count == 0 ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_HOBBIES_DISCOTECAS).v_Value1,
                               AUDIOMETRIA_HOBBIES_SERVICIO_MILITAR = __sql.Count == 0 ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_HOBBIES_SERVICIO_MILITAR).v_Value1,
                               AUDIOMETRIA_HOBBIES_CONSUMO_TABACO = __sql.Count == 0 ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_HOBBIES_CONSUMO_TABACO).v_Value1,

                               //// Sintomas actuales

                               AUDIOMETRIA_SINTOMAS_ACTUALES_SORDERA = __sql.Count == 0 ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_SINTOMAS_ACTUALES_SORDERA).v_Value1,
                               AUDIOMETRIA_SINTOMAS_ACTUALES_ACUFENOS = __sql.Count == 0 ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_SINTOMAS_ACTUALES_ACUFENOS).v_Value1,
                               AUDIOMETRIA_SINTOMAS_ACTUALES_VERTIGOS = __sql.Count == 0 ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_SINTOMAS_ACTUALES_VERTIGOS).v_Value1,
                               AUDIOMETRIA_SINTOMAS_ACTUALES_OTALGIA = __sql.Count == 0 ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_SINTOMAS_ACTUALES_OTALGIA).v_Value1,
                               AUDIOMETRIA_SINTOMAS_ACTUALES_SECRECION_OTICA = __sql.Count == 0 ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_SINTOMAS_ACTUALES_SECRECION_OTICA).v_Value1,
                               AUDIOMETRIA_SINTOMAS_ACTUALES_OTROS = __sql.Count == 0 ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_SINTOMAS_ACTUALES_OTROS).v_Value1,

                               //// Otoscopia

                               OidoIzquierdo = __sql.Count == 0 ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_OTOSCOPIA_OIDO_IZQUIERDO).v_Value1,
                               OidoDerecho = __sql.Count == 0 ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_OTOSCOPIA_OIDO_DERECHO).v_Value1,

                               b_Logo = MedicalCenter.b_Image,
                               EmpresaPropietaria = MedicalCenter.v_Name,
                               EmpresaPropietariaDireccion = MedicalCenter.v_Address,
                               EmpresaPropietariaTelefono = MedicalCenter.v_PhoneNumber,
                               EmpresaPropietariaEmail = MedicalCenter.v_Mail,

                               //
                               v_EsoTypeName = a.v_EsoTypeName,
                               v_ServiceComponentId = a.v_ServiceComponentId,
                               v_WorkingOrganizationName = a.v_WorkingOrganizationName,
                               v_FullWorkingOrganizationName = a.v_FullWorkingOrganizationName,
                               FirmaTrabajador = a.FirmaTrabajador,
                               HuellaTrabajador = a.HuellaTrabajador,
                               RazonSocialEmpresaCliente = a.LogoEmpresaCliente == null ? a.RazonSocialEmpresaCliente : "",
                               LogoEmpresaCliente = a.LogoEmpresaCliente,
                               DxConcatenados = GetDiagnosticByServiceIdAndComponent(pstrserviceId, pstrComponentId),
                           }).ToList();

                return sql;
            }
            catch (Exception)
            {

                throw;
            }
        }

        // Alejandro
        public List<ServiceComponentFieldValuesList> ValoresComponentesUserControl(string pstrServiceId, string pstrComponentId)
        {
            SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
            int rpta = 0;
            try
            {
                var serviceComponentFieldValues = (from A in dbContext.service
                                                   join B in dbContext.servicecomponent on A.v_ServiceId equals B.v_ServiceId
                                                   join C in dbContext.servicecomponentfields on B.v_ServiceComponentId equals C.v_ServiceComponentId
                                                   join D in dbContext.servicecomponentfieldvalues on C.v_ServiceComponentFieldsId equals D.v_ServiceComponentFieldsId
                                                   where A.v_ServiceId == pstrServiceId
                                                          && B.v_ComponentId == pstrComponentId
                                                          && B.i_IsDeleted == 0
                                                          && C.i_IsDeleted == 0

                                                   select new ServiceComponentFieldValuesList
                                                   {
                                                       v_ComponentFieldId = C.v_ComponentFieldId,
                                                       //v_ComponentFielName = G.v_TextLabel,
                                                       v_ServiceComponentFieldsId = C.v_ServiceComponentFieldsId,
                                                       v_Value1 = D.v_Value1
                                                   }).ToList();



                return serviceComponentFieldValues;
            }
            catch (Exception)
            {

                throw;
            }

        }


        public List<DiagnosticRepositoryList> GetAptitudeCertificate(ref OperationResult pobjOperationResult, string pstrServiceId)
        {
            //mon.IsActive = true;
            var isDeleted = 0;
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                var query = (from sss in dbContext.service
                             join ccc in dbContext.diagnosticrepository on sss.v_ServiceId equals ccc.v_ServiceId into ccc_join
                             from ccc in ccc_join.DefaultIfEmpty()  // ESO

                             join ddd in dbContext.diseases on ccc.v_DiseasesId equals ddd.v_DiseasesId into ddd_join
                             from ddd in ddd_join.DefaultIfEmpty()  // Diagnosticos

                             join D in dbContext.person on sss.v_PersonId equals D.v_PersonId

                             join J in dbContext.systemparameter on new { a = D.i_SexTypeId.Value, b = 100 }
                                                equals new { a = J.i_ParameterId, b = J.i_GroupId }  // GENERO

                             join E in dbContext.protocol on sss.v_ProtocolId equals E.v_ProtocolId

                             join J11 in dbContext.organization on E.v_CustomerOrganizationId equals J11.v_OrganizationId into J11_join
                             from J11 in J11_join.DefaultIfEmpty()

                             //join F in dbContext.groupoccupation on E.v_GroupOccupationId equals F.v_GroupOccupationId into F_join
                             //from F in F_join.DefaultIfEmpty()  // Administrativo / operativos

                             join ooo in dbContext.organization on E.v_CustomerOrganizationId equals ooo.v_OrganizationId into ooo_join
                             from ooo in ooo_join.DefaultIfEmpty()  // Administrativo / operativos

                             join ooo2 in dbContext.organization on sss.v_EmpresaFacturacionId equals ooo2.v_OrganizationId into ooo2_join
                             from ooo2 in ooo2_join.DefaultIfEmpty()  // Administrativo / operativos

                             join lll in dbContext.location on E.v_CustomerLocationId equals lll.v_LocationId into lll_join
                             from lll in lll_join.DefaultIfEmpty()  // Administrativo / operativos

                             join H in dbContext.systemparameter on new { a = E.i_EsoTypeId.Value, b = 118 }
                                                 equals new { a = H.i_ParameterId, b = H.i_GroupId }  // TIPO ESO [ESOA,ESOR,ETC]

                             join G in dbContext.systemparameter on new { a = sss.i_AptitudeStatusId.Value, b = 124 }
                                      equals new { a = G.i_ParameterId, b = G.i_GroupId }  // ESTADO APTITUD ESO                    

                             join J3 in dbContext.systemparameter on new { a = 119, b = sss.i_MasterServiceId.Value }  // DESCRIPCION DEL SERVICIO
                                                        equals new { a = J3.i_GroupId, b = J3.i_ParameterId } into J3_join
                             from J3 in J3_join.DefaultIfEmpty()

                             join J1 in dbContext.systemuser on new { i_InsertUserId = ccc.i_InsertUserId.Value }
                                             equals new { i_InsertUserId = J1.i_SystemUserId } into J1_join
                             from J1 in J1_join.DefaultIfEmpty()

                             join J2 in dbContext.systemuser on new { i_UpdateUserId = ccc.i_UpdateUserId.Value }
                                                             equals new { i_UpdateUserId = J2.i_SystemUserId } into J2_join
                             from J2 in J2_join.DefaultIfEmpty()

                             join su in dbContext.systemuser on sss.i_UpdateUserOccupationalMedicaltId.Value equals su.i_SystemUserId into su_join
                             from su in su_join.DefaultIfEmpty()

                             join pr in dbContext.professional on su.v_PersonId equals pr.v_PersonId into pr_join
                             from pr in pr_join.DefaultIfEmpty()

                             where (ccc.v_ServiceId == pstrServiceId) &&
                                   (ccc.i_IsDeleted == isDeleted)
                             //(ccc.i_FinalQualificationId == (int)FinalQualification.Definitivo ||
                             //ccc.i_FinalQualificationId == (int)FinalQualification.Presuntivo)

                             select new DiagnosticRepositoryList
                             {
                                 v_DiagnosticRepositoryId = ccc.v_DiagnosticRepositoryId,
                                 v_ServiceId = ccc.v_ServiceId,
                                 v_DiseasesId = ccc.v_DiseasesId,
                                 i_AutoManualId = ccc.i_AutoManualId,
                                 i_PreQualificationId = ccc.i_PreQualificationId,
                                 i_FinalQualificationId = ccc.i_FinalQualificationId,
                                 i_DiagnosticTypeId = ccc.i_DiagnosticTypeId,
                                 d_ExpirationDateDiagnostic = ccc.d_ExpirationDateDiagnostic,
                                 v_DiseasesName = ddd.v_Name,
                                 v_CreationUser = J1.v_UserName,
                                 v_UpdateUser = J2.v_UserName,
                                 d_CreationDate = J1.d_InsertDate,
                                 d_UpdateDate = J2.d_UpdateDate,
                                 i_IsDeleted = ccc.i_IsDeleted.Value,
                                 v_ProtocolId = E.v_ProtocolId,
                                 v_ProtocolName = E.v_Name,
                                 v_PersonId = D.v_PersonId,
                                 d_BirthDate = D.d_Birthdate,
                                 v_EsoTypeName = H.v_Value1,
                                 v_OrganizationPartialName = ooo2.v_Name,
                                 v_LocationName = lll.v_Name,
                                 v_FirstName = D.v_FirstName,
                                 v_FirstLastName = D.v_FirstLastName,
                                 v_SecondLastName = D.v_SecondLastName,
                                 v_DocNumber = D.v_DocNumber,
                                 v_GenderName = J.v_Value1,
                                 v_AptitudeStatusName = G.v_Value1,
                                 v_OccupationName = D.v_CurrentOccupation,
                                 g_Image = pr.b_SignatureImage,
                                 d_ServiceDate = sss.d_ServiceDate,
                                 i_AptitudeStatusId = sss.i_AptitudeStatusId,
                                 i_EsoTypeId_Old = E.i_EsoTypeId.Value,
                                 //RazonSocialEmpresaCliente = J11.v_Name,
                                 RazonSocialEmpresaCliente = ooo2.v_Name,
                                 LogoEmpresaCliente = J11.b_Image
                             });

                var MedicalCenter = GetInfoMedicalCenter();

                var q = (from a in query.ToList()
                         select new DiagnosticRepositoryList
                         {
                             v_DiagnosticRepositoryId = a.v_DiagnosticRepositoryId,
                             v_ServiceId = a.v_ServiceId,
                             v_DiseasesId = a.v_DiseasesId,
                             i_DiagnosticTypeId = a.i_DiagnosticTypeId,
                             d_ExpirationDateDiagnostic = a.d_ExpirationDateDiagnostic,
                             v_CreationUser = a.v_CreationUser,
                             v_UpdateUser = a.v_UpdateUser,
                             d_CreationDate = a.d_CreationDate,
                             d_UpdateDate = a.d_UpdateDate,
                             i_IsDeleted = a.i_IsDeleted,
                             i_EsoTypeId = a.i_EsoTypeId_Old.ToString(),
                             v_EsoTypeName = a.v_EsoTypeName,
                             v_OrganizationName = string.Format("{0} / {1}", a.v_OrganizationPartialName, a.v_LocationName),
                             v_PersonName = string.Format("{0} {1}, {2}", a.v_FirstLastName, a.v_SecondLastName, a.v_FirstName),
                             v_DocNumber = a.v_DocNumber,
                             i_Age = a.d_BirthDate == null ? (int?)null : DateTime.Today.AddTicks(-a.d_BirthDate.Value.Ticks).Year - 1,
                             v_GenderName = a.v_GenderName,
                             v_DiseasesName = a.v_DiseasesName,
                             v_RecomendationsName = ConcatenateRecommendation(a.v_DiagnosticRepositoryId),
                             v_RestrictionsName = ConcatenateRestriction(a.v_DiagnosticRepositoryId),
                             v_AptitudeStatusName = a.v_AptitudeStatusName,
                             v_OccupationName = a.v_OccupationName,  // por ahora se muestra el GESO
                             g_Image = a.g_Image,
                             b_Logo = MedicalCenter.b_Image,
                             EmpresaPropietaria = MedicalCenter.v_Name,
                             EmpresaPropietariaDireccion = MedicalCenter.v_Address,
                             EmpresaPropietariaTelefono = MedicalCenter.v_PhoneNumber,
                             EmpresaPropietariaEmail = MedicalCenter.v_Mail,
                             v_ServiceDate = a.d_ServiceDate == null ? string.Empty : a.d_ServiceDate.Value.ToShortDateString(),
                             i_AptitudeStatusId = a.i_AptitudeStatusId,

                             RazonSocialEmpresaCliente = a.LogoEmpresaCliente == null ? a.RazonSocialEmpresaCliente : "",
                             LogoEmpresaCliente = a.LogoEmpresaCliente,
                         }).ToList();


                pobjOperationResult.Success = 1;
                return q;
            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
                return null;
            }
        }

        public ReporteExcelCovid19 ReporteExcelCovid19(string serviceId)
        {
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
                var result = new ReporteExcelCovid19();

                var query = (from ser in dbContext.service

                             join serComp in dbContext.servicecomponent on ser.v_ServiceId equals serComp.v_ServiceId into serComp_join
                             from serComp in serComp_join.DefaultIfEmpty()

                             join prot in dbContext.protocol on ser.v_ProtocolId equals prot.v_ProtocolId into prot_join
                             from prot in prot_join.DefaultIfEmpty()

                             join org in dbContext.organization on prot.v_CustomerOrganizationId equals org.v_OrganizationId into org_join
                             from org in org_join.DefaultIfEmpty()

                             join per in dbContext.person on ser.v_PersonId equals per.v_PersonId into per_join
                             from per in per_join.DefaultIfEmpty()

                             join K in dbContext.systemparameter on new { a = ser.i_AptitudeStatusId.Value, b = 124 } equals new { a = K.i_ParameterId, b = K.i_GroupId }

                             where ser.v_ServiceId == serviceId
                             select new
                             {
                                 FechaExamen = ser.d_ServiceDate.Value,
                                 CentroMedico = "Salus Laboris",
                                 Unidad = "",
                                 EmpresaEmpleadora = org.v_Name,
                                 NombresApellidos = per.v_FirstLastName + " " + per.v_SecondLastName + " " + per.v_FirstName,
                                 Dni = per.v_DocNumber,
                                 FechaNacimiento = per.d_Birthdate.Value,
                                 Aptitud = K.v_Value1,
                                 Motivo = "",
                                 Tecnico = "",
                                 ComponentId = serComp.v_ComponentId,
                                 Celular = per.v_TelephoneNumber,
                                 ProtocolName = prot.v_Name
                             }).ToList();


                var datosPersonales = query.FirstOrDefault();
                result.FechaExamen = datosPersonales.FechaExamen;
                result.CentroMedico = datosPersonales.CentroMedico;
                result.Unidad = ObtenerSede(datosPersonales.ProtocolName);
                result.EmpresaEmpleadora = datosPersonales.EmpresaEmpleadora;
                result.NombresApellidos = datosPersonales.NombresApellidos;
                result.Dni = datosPersonales.Dni;
                result.FechaNacimiento = datosPersonales.FechaNacimiento;
                result.Aptitud = datosPersonales.Aptitud;
                result.Motivo = datosPersonales.Motivo;
                result.Tecnico = datosPersonales.Tecnico;
                result.Edad = GetAge(datosPersonales.FechaNacimiento).ToString();
                result.Celular = datosPersonales.Celular;

                var CertificadoCovid19 = query.Find(p => p.ComponentId == Constants.CERTIFICADO_COVID_ID);
                if (CertificadoCovid19 != null)
                {
                    var resultados = ValoresComponente(serviceId, Constants.CERTIFICADO_COVID_ID);
                    var Tecnico = ObtenerDatosTecnicoLabCovid19(serviceId, Constants.CERTIFICADO_COVID_ID);
                    result.Tecnico = Tecnico == null ? "----" : Tecnico;
                    result.Sintomas = resultados.Count == 0 ? string.Empty : resultados.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_COVID_TIENE_SINTOMAS_ID) == null ? "" : resultados.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_COVID_TIENE_SINTOMAS_ID).v_Value1Name;

                    result.ValorExamen = resultados.Count == 0 ? string.Empty : resultados.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_COVID_RES_1_PRUEBA_ID) == null ? "" : resultados.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_COVID_RES_1_PRUEBA_ID).v_Value1Name;

                    var resultadoExamen = resultados.Count == 0 ? string.Empty : resultados.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_COVID_RES_1_PRUEBA_ID) == null ? "" : resultados.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_COVID_RES_1_PRUEBA_ID).v_Value1;

                    if (resultadoExamen == "2") //IgM Positivo
                    {
                        result.Resultado = "IgM Positivo";
                    }
                    else if (resultadoExamen == "3") //IgG Positivo
                    {
                        result.Resultado = "IgG Positivo";
                    }
                    else if (resultadoExamen == "4") //IgM e IgG positivo
                    {
                        result.Resultado = "IgM e IgG positivo";
                    }
                    else if (resultadoExamen == "1") //IgM e IgG positivo
                    {
                        result.Resultado = "NO VÁLIDO";
                    }
                    else if (resultadoExamen == "5") //IgM e IgG positivo
                    {
                        result.Resultado = "NO SE REALIZÓ";
                    }
                    else if (resultadoExamen == "0") //IgM e IgG positivo
                    {
                        result.Resultado = "NEGATIVO";
                    }
                    else
                    {
                        result.Resultado = "SIN DATOS";
                    }
                }

                var Covid19 = query.Find(p => p.ComponentId == Constants.COVID_ID);
                if (Covid19 != null)
                {
                    var resultados = ValoresComponente(serviceId, Constants.COVID_ID);
                    var Tecnico = ObtenerDatosTecnicoLabCovid19(serviceId, Constants.COVID_ID);
                    result.Tecnico = Tecnico == null ? "----" : Tecnico;
                    result.Sintomas = resultados.Count == 0 ? string.Empty : resultados.Find(p => p.v_ComponentFieldId == Constants.COVID_TIENE_SINTOMAS_ID) == null ? "" : resultados.Find(p => p.v_ComponentFieldId == Constants.COVID_TIENE_SINTOMAS_ID).v_Value1Name;

                    result.ValorExamen = resultados.Count == 0 ? string.Empty : resultados.Find(p => p.v_ComponentFieldId == Constants.COVID_RES_1_PRUEBA_ID) == null ? "" : resultados.Find(p => p.v_ComponentFieldId == Constants.COVID_RES_1_PRUEBA_ID).v_Value1Name;

                    var resultadoExamen = resultados.Count == 0 ? string.Empty : resultados.Find(p => p.v_ComponentFieldId == Constants.COVID_RES_1_PRUEBA_ID) == null ? "" : resultados.Find(p => p.v_ComponentFieldId == Constants.COVID_RES_1_PRUEBA_ID).v_Value1;

                    if (resultadoExamen == "2") //IgM Positivo
                    {
                        result.Resultado = "IgM Positivo";
                    }
                    else if (resultadoExamen == "3") //IgG Positivo
                    {
                        result.Resultado = "IgG Positivo";
                    }
                    else if (resultadoExamen == "4") //IgM e IgG positivo
                    {
                        result.Resultado = "IgM e IgG positivo";
                    }
                    else if (resultadoExamen == "1") //IgM e IgG positivo
                    {
                        result.Resultado = "NO VÁLIDO";
                    }
                    else if (resultadoExamen == "5") //IgM e IgG positivo
                    {
                        result.Resultado = "NO SE REALIZÓ";
                    }
                    else if (resultadoExamen == "0") //IgM e IgG positivo
                    {
                        result.Resultado = "NEGATIVO";
                    }
                    else
                    {
                        result.Resultado = "SIN DATOS";
                    }
                }




                return result;



            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public ReporteExcelCovid19JessicaOblitas ReporteExcelCovid19JesicaOblitas(string serviceId)
        {
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
                var result = new ReporteExcelCovid19JessicaOblitas();

                var query = (from ser in dbContext.service

                             join serComp in dbContext.servicecomponent on ser.v_ServiceId equals serComp.v_ServiceId into serComp_join
                             from serComp in serComp_join.DefaultIfEmpty()

                             join prot in dbContext.protocol on ser.v_ProtocolId equals prot.v_ProtocolId into prot_join
                             from prot in prot_join.DefaultIfEmpty()

                             join org in dbContext.organization on prot.v_CustomerOrganizationId equals org.v_OrganizationId into org_join
                             from org in org_join.DefaultIfEmpty()

                             join per in dbContext.person on ser.v_PersonId equals per.v_PersonId into per_join
                             from per in per_join.DefaultIfEmpty()

                             join K in dbContext.systemparameter on new { a = ser.i_AptitudeStatusId.Value, b = 124 } equals new { a = K.i_ParameterId, b = K.i_GroupId } into K_join
                             from K in K_join.DefaultIfEmpty()

                             join M in dbContext.systemparameter on new { a = ser.TipoEmpresaCovidId.Value, b = 310 } equals new { a = M.i_ParameterId, b = M.i_GroupId } into M_join
                             from M in M_join.DefaultIfEmpty()

                             join G in dbContext.systemparameter on new { a = per.i_SexTypeId.Value, b = 100 } equals new { a = G.i_ParameterId, b = G.i_GroupId } into G_join
                             from G in G_join.DefaultIfEmpty()

                             join F in dbContext.systemparameter on new { a = ser.ClinicaExternad.Value, b = 280 } equals new { a = F.i_ParameterId, b = F.i_GroupId } into F_join
                             from F in F_join.DefaultIfEmpty()

                             join H in dbContext.hcactualizado on per.v_DocNumber equals H.Dni into H_join
                             from H in H_join.DefaultIfEmpty()

                             where ser.v_ServiceId == serviceId && ser.d_ServiceDate != null
                             select new
                             {
                                 ServicioId = ser.v_ServiceId,
                                 FechaExamen = ser.d_ServiceDate.Value,
                                 CentroMedico = F.v_Value1,
                                 HC = H.HC,
                                 EmpresaEmpleadora = ser.EmpresaEmpleadora,
                                 Nombres = per.v_FirstName,
                                 ApellidoPaterno = per.v_FirstLastName,
                                 ApellidoMaterno = per.v_SecondLastName,
                                 Puesto = per.v_CurrentOccupation,
                                 Dni = per.v_DocNumber,
                                 Sede = ser.v_Sede,
                                 FechaNacimiento = per.d_Birthdate.Value,
                                 ComponentId = serComp.v_ComponentId,
                                 Celular = per.v_TelephoneNumber,
                                 ProtocolName = prot.v_Name,
                                 ServiceId = ser.v_ServiceId,
                                 Sexo = G.v_Value1,
                                 Tecnico = ser.TecnicoCovid,
                                 FechaRegitro = ser.d_ServiceDate.Value,
                                 SedeHc = H.Sede,
                                 TipoEmpresa =  ser.TipoEmpresaCovidId,
                                 Area = H.Area

                             }).ToList();


                var datosPersonales = query.FirstOrDefault();
                result.ServicioId = datosPersonales.ServiceId;
                result.Nodo = obtenerNodoPorServiceId(datosPersonales.ServiceId);
                result.FechaExamen = datosPersonales.FechaRegitro;
                result.CentroMedico = string.IsNullOrEmpty(datosPersonales.CentroMedico) ? "SALUS LABORIS" : datosPersonales.CentroMedico;

                if (datosPersonales.TipoEmpresa == 1)
	            {
                    result.TipoEmpresa = "BACKUS";
                }
                else if (datosPersonales.TipoEmpresa == 2)
                {
                    result.TipoEmpresa = "TERCERO";
                }
                else if (datosPersonales.TipoEmpresa == 3)
                {
                    result.TipoEmpresa = "REPARTO";
                }
                else
                {
                    result.TipoEmpresa = "BACKUS";
                }

                if (datosPersonales.HC == null)
                {
                    result.EmpresaPrincipal = "TERCEROS";
                    result.EmpresaEmpleadora = datosPersonales.EmpresaEmpleadora == null ? "" : datosPersonales.EmpresaEmpleadora.ToUpper(); 
                }
                else if (datosPersonales.HC.ToUpper() == "BACKUS")
                {
                    result.EmpresaPrincipal = "BACKUS";
                    result.EmpresaEmpleadora = datosPersonales.EmpresaEmpleadora == null ? "" : datosPersonales.EmpresaEmpleadora.ToUpper();
                    //result.EmpresaContratista = "PROPIA";
                }
                else {

                    result.EmpresaPrincipal = "BACKUS";
                    result.EmpresaEmpleadora = datosPersonales.EmpresaEmpleadora== null ? "": datosPersonales.EmpresaEmpleadora.ToUpper();             
                }
                

                result.Nombres = datosPersonales.Nombres.ToUpper();
                result.ApellidoPaterno = datosPersonales.ApellidoPaterno.ToUpper();
                result.ApellidoMaterno = datosPersonales.ApellidoMaterno.ToUpper();
                result.Puesto = datosPersonales.Puesto.ToUpper();
                result.Dni = datosPersonales.Dni;
                result.Sexo = datosPersonales.Sexo.ToUpper(); 
                result.Sede = datosPersonales.SedeHc != "" ? datosPersonales.Sede : datosPersonales.SedeHc;
                result.FechaNacimiento = datosPersonales.FechaNacimiento;
                result.Edad = GetAge(datosPersonales.FechaNacimiento).ToString();
                result.Tecnico = datosPersonales.Tecnico;
                result.Celular = datosPersonales.Celular;


                //ANTECEDENTE DE POSITIVIDAD
                var listaExamenesAnteriores = dbContext.regcovid_background_servicios_anteriores(result.Dni).ToList();
                if (listaExamenesAnteriores.Count == 0)
                {
                    result.AntecedenteResultado = "SIN EXÁMENES ANTERIORES";
                    result.AntecedenteFechaResultado = null;
                }
                else
                {
                    var resultadoPositivo = false;
                    var resultado = "";
                    DateTime? fechaResultado = null;
                    foreach (var servicio in listaExamenesAnteriores)
                    {
                        if (servicio.Resultado.ToUpper() == "IGM POSITIVO" || servicio.Resultado.ToUpper() == "IGG POSITIVO" || servicio.Resultado.ToUpper() == "IGM E IGG POSITIVO")
                        {
                            resultadoPositivo = true;
                            resultado = servicio.Resultado.ToUpper();
                            fechaResultado = servicio.FechaHoraRegistro;
                            break;
                        }
                    }

                    if (resultadoPositivo)
                    {
                        if (fechaResultado.Value.Date != result.FechaExamen.Date)
                        {
                            result.AntecedenteResultado = resultado;
                            result.AntecedenteFechaResultado = fechaResultado;
                        }
                        else
                        {
                            result.AntecedenteResultado = "NINGÚN POSITIVO ANTERIOR";
                            result.AntecedenteFechaResultado = null;
                        }
                        
                    }
                    else
                    {
                        result.AntecedenteResultado = "NINGÚN POSITIVO ANTERIOR";
                        result.AntecedenteFechaResultado = null;
                    }

                }

                var CertificadoCovid19 = query.Find(p => p.ComponentId == Constants.CERTIFICADO_COVID_ID);
                if (CertificadoCovid19 != null)
                {
                    var resultados = ValoresComponente(serviceId, Constants.CERTIFICADO_COVID_ID);
                    //var Tecnico = ObtenerDatosTecnicoLabCovid19(serviceId, Constants.CERTIFICADO_COVID_ID);
                    //result.Tecnico = Tecnico == null ? "----" : Tecnico;
                    result.Sintomas = resultados.Count == 0 ? string.Empty : resultados.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_COVID_TIENE_SINTOMAS_ID) == null ? "" : resultados.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_COVID_TIENE_SINTOMAS_ID).v_Value1Name;
                    var resultadoExamen = resultados.Count == 0 ? string.Empty : resultados.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_COVID_RES_1_PRUEBA_ID) == null ? "" : resultados.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_COVID_RES_1_PRUEBA_ID).v_Value1;

                    result.TipoExamen = "PRUEBA RÁPIDA";
                    if (resultadoExamen == "2") //IgM Positivo
                    {
                        result.Resultado = "IgM POSITIVO";
                    }
                    else if (resultadoExamen == "3") //IgG Positivo
                    {
                        result.Resultado = "IgG POSITIVO";
                    }
                    else if (resultadoExamen == "4") //IgM e IgG positivo
                    {
                        result.Resultado = "IgM e IgG POSITIVO";
                    }
                    else if (resultadoExamen == "1") //IgM e IgG positivo
                    {
                        result.Resultado = "NO VÁLIDO";
                    }
                    else if (resultadoExamen == "5") //IgM e IgG positivo
                    {
                        result.Resultado = "NO SE REALIZÓ";
                    }
                    else if (resultadoExamen == "0") //IgM e IgG positivo
                    {
                        result.Resultado = "NEGATIVO";
                    }
                    else
                    {
                        result.Resultado = "SIN DATOS";
                    }
                }

                var Covid19 = query.Find(p => p.ComponentId == Constants.COVID_ID);
                if (Covid19 != null)
                {
                    var resultados = ValoresComponente(serviceId, Constants.COVID_ID);
                    //var Tecnico = ObtenerDatosTecnicoLabCovid19(serviceId, Constants.COVID_ID);
                    //result.Tecnico = Tecnico == null ? "----" : Tecnico;
                    result.TipoExamen = "PRUEBA RÁPIDA";
                    result.Sintomas = resultados.Count == 0 ? string.Empty : resultados.Find(p => p.v_ComponentFieldId == Constants.COVID_TIENE_SINTOMAS_ID) == null ? "" : resultados.Find(p => p.v_ComponentFieldId == Constants.COVID_TIENE_SINTOMAS_ID).v_Value1Name;

                    var resultadoExamen = resultados.Count == 0 ? string.Empty : resultados.Find(p => p.v_ComponentFieldId == Constants.COVID_RES_1_PRUEBA_ID) == null ? "" : resultados.Find(p => p.v_ComponentFieldId == Constants.COVID_RES_1_PRUEBA_ID).v_Value1;

                    if (resultadoExamen == "2") //IgM Positivo
                    {
                        result.Resultado = "IgM POSITIVO";
                    }
                    else if (resultadoExamen == "3") //IgG Positivo
                    {
                        result.Resultado = "IgG POSITIVO";
                    }
                    else if (resultadoExamen == "4") //IgM e IgG positivo
                    {
                        result.Resultado = "IgM e IgG POSITIVO";
                    }
                    else if (resultadoExamen == "1") //IgM e IgG positivo
                    {
                        result.Resultado = "NO VÁLIDO";
                    }
                    else if (resultadoExamen == "5") //IgM e IgG positivo
                    {
                        result.Resultado = "NO SE REALIZÓ";
                    }
                    else if (resultadoExamen == "0") //IgM e IgG positivo
                    {
                        result.Resultado = "NEGATIVO";
                    }
                    else
                    {
                        result.Resultado = "SIN DATOS";
                    }
                }

                var Antigenos = query.Find(p => p.ComponentId == Constants.ANTIGENOS_ID);
                if (Antigenos != null)
                {
                    var resultados = ValoresComponente(serviceId, Constants.ANTIGENOS_ID);
                    result.Sintomas = resultados.Count == 0 ? string.Empty : resultados.Find(p => p.v_ComponentFieldId == "N006-MF000000229") == null ? "" : resultados.Find(p => p.v_ComponentFieldId == "N006-MF000000229").v_Value1Name;
                    result.TipoExamen = "ANTÍGENOS";
                    var resultadoExamen = resultados.Count == 0 ? string.Empty : resultados.Find(p => p.v_ComponentFieldId == "N006-MF000000251") == null ? "" : resultados.Find(p => p.v_ComponentFieldId == "N006-MF000000251").v_Value1;

                   if (resultadoExamen == "0")
                    {
                        result.Resultado = "NEGATIVO";
                    }
                   else  if (resultadoExamen == "6")
                    {
                        result.Resultado = "POSITIVO";
                    }
                    else
                    {
                        result.Resultado = "SIN DATOS";
                    }
                }

                    return result;
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public ReporteExcelAutomaticoCovid19 ReporteExcelCovid19Backus(string serviceId)
        {
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
                var result = new ReporteExcelAutomaticoCovid19();

                var query = (from ser in dbContext.service

                             join serComp in dbContext.servicecomponent on ser.v_ServiceId equals serComp.v_ServiceId into serComp_join
                             from serComp in serComp_join.DefaultIfEmpty()

                             join prot in dbContext.protocol on ser.v_ProtocolId equals prot.v_ProtocolId into prot_join
                             from prot in prot_join.DefaultIfEmpty()

                             join org in dbContext.organization on prot.v_CustomerOrganizationId equals org.v_OrganizationId into org_join
                             from org in org_join.DefaultIfEmpty()

                             join per in dbContext.person on ser.v_PersonId equals per.v_PersonId into per_join
                             from per in per_join.DefaultIfEmpty()

                             join K in dbContext.systemparameter on new { a = ser.i_AptitudeStatusId.Value, b = 124 } equals new { a = K.i_ParameterId, b = K.i_GroupId } into K_join
                             from K in K_join.DefaultIfEmpty()

                             join M in dbContext.systemparameter on new { a = ser.TipoEmpresaCovidId.Value, b = 310 } equals new { a = M.i_ParameterId, b = M.i_GroupId } into M_join
                             from M in M_join.DefaultIfEmpty()

                             join G in dbContext.systemparameter on new { a = per.i_SexTypeId.Value, b = 100 } equals new { a = G.i_ParameterId, b = G.i_GroupId } into G_join
                             from G in G_join.DefaultIfEmpty()

                             join F in dbContext.systemparameter on new { a = ser.ClinicaExternad.Value, b = 280 } equals new { a = F.i_ParameterId, b = F.i_GroupId } into F_join
                             from F in F_join.DefaultIfEmpty()

                             join H in dbContext.hcactualizado on per.v_DocNumber equals H.Dni into H_join
                             from H in H_join.DefaultIfEmpty()

                             join I in dbContext.systemparameter on new { a = ser.ReasonExamId.Value, b = 409 } equals new { a = I.i_ParameterId, b = I.i_GroupId } into I_join
                             from I in I_join.DefaultIfEmpty()

                             join J in dbContext.systemparameter on new { a = ser.PlaceExamId.Value, b = 410 } equals new { a = J.i_ParameterId, b = J.i_GroupId } into J_join
                             from J in J_join.DefaultIfEmpty()

                             where ser.v_ServiceId == serviceId && ser.d_ServiceDate != null
                             select new
                             {
                                 ServicioId = ser.v_ServiceId,
                                 FechaExamen = ser.d_ServiceDate.Value,
                                 CentroMedico = F.v_Value1,
                                 HC = H.HC,
                                 OrganizationId = org.v_OrganizationId,
                                 EmpresaEmpleadora = ser.EmpresaEmpleadora,
                                 Nombres = per.v_FirstName,
                                 ApellidoPaterno = per.v_FirstLastName,
                                 ApellidoMaterno = per.v_SecondLastName,
                                 Puesto = per.v_CurrentOccupation,
                                 Dni = per.v_DocNumber,
                                 Sede = ser.v_Sede,
                                 FechaNacimiento = per.d_Birthdate.Value,
                                 ComponentId = serComp.v_ComponentId,
                                 Celular = per.v_TelephoneNumber,
                                 ProtocolName = prot.v_Name,
                                 ServiceId = ser.v_ServiceId,
                                 Sexo = G.v_Value1,
                                 Tecnico = ser.TecnicoCovid,
                                 FechaRegitro = ser.d_ServiceDate.Value,
                                 SedeHc = H.Sede,
                                 TipoEmpresa = ser.TipoEmpresaCovidId,
                                 RazonExamen = I.v_Value1,
                                 LugarExamen = J.v_Value1,
                                 Area = H.Area
                             }).ToList();


                var datosPersonales = query.FirstOrDefault();
                result.ServicioId = datosPersonales.ServiceId;
                result.Nodo = obtenerNodoPorServiceId(datosPersonales.ServiceId);
                result.FechaExamen = datosPersonales.FechaRegitro;
                result.CentroMedico = string.IsNullOrEmpty(datosPersonales.CentroMedico) ? "SALUS LABORIS" : datosPersonales.CentroMedico;
                result.RazonExamen = datosPersonales.RazonExamen;
                result.LugarExamen = datosPersonales.LugarExamen;
                result.Area = string.IsNullOrEmpty(datosPersonales.Area) ? "" : datosPersonales.Area;

                
                #region BACKUS
                if (datosPersonales.OrganizationId=="N003-OO000000425")
                {
                    if (datosPersonales.TipoEmpresa == 1)
                    {
                        result.TipoEmpresa = "BACKUS";
                    }
                    else if (datosPersonales.TipoEmpresa == 2)
                    {
                        result.TipoEmpresa = "TERCERO";
                    }
                    else if (datosPersonales.TipoEmpresa == 3)
                    {
                        result.TipoEmpresa = "REPARTO";
                    }
                    else if (datosPersonales.TipoEmpresa == 4 || datosPersonales.TipoEmpresa == 5)
                    {
                        result.TipoEmpresa = "FAMILIAR";
                    }
                    else
                    {
                        result.TipoEmpresa = "BACKUS";
                    }


                    if (datosPersonales.HC == null)
                    {
                        if (result.TipoEmpresa == "FAMILIAR")
                        {
                            result.EmpresaPrincipal = "--";
                            result.EmpresaEmpleadora = "--";
                        }else{
                            result.EmpresaPrincipal = datosPersonales.Sede.ToUpper() == "CD PUCALLPA" ? "SAN JUAN" : "BACKUS";
                            result.EmpresaEmpleadora = datosPersonales.EmpresaEmpleadora == null ? "" : datosPersonales.EmpresaEmpleadora.ToUpper();
                        }
                        
                    }
                    else
                    {
                        result.EmpresaPrincipal = datosPersonales.Sede.ToUpper() == "CD PUCALLPA" ? "SAN JUAN" : "BACKUS";
                        result.EmpresaEmpleadora = datosPersonales.EmpresaEmpleadora == null ? "" : datosPersonales.EmpresaEmpleadora.ToUpper();
                    }    
                }
                

                #endregion

                #region PERU LNG
                if (datosPersonales.OrganizationId == "N003-OO000001651")
                {
                    result.TipoEmpresa = "";
                    result.EmpresaPrincipal = "PERU LNG";
                    result.EmpresaEmpleadora = datosPersonales.EmpresaEmpleadora == null ? "PERU LNG" : datosPersonales.EmpresaEmpleadora.ToUpper();
                }
                #endregion

                #region TRANSPORTES 77 SA
                if (datosPersonales.OrganizationId == "N003-OO000000051")
                {
                    result.TipoEmpresa = "";
                    result.EmpresaPrincipal = "TRANSPORTES 77 SA";
                    result.EmpresaEmpleadora = datosPersonales.EmpresaEmpleadora == null ? "TRANSPORTES 77 SA" : datosPersonales.EmpresaEmpleadora.ToUpper();
                }
                #endregion

                result.Nombres = datosPersonales.Nombres.ToUpper();
                result.ApellidoPaterno = datosPersonales.ApellidoPaterno.ToUpper();
                result.ApellidoMaterno = datosPersonales.ApellidoMaterno.ToUpper();
                result.Puesto = datosPersonales.Puesto.ToUpper();
                result.Dni = datosPersonales.Dni;
                result.Sexo = datosPersonales.Sexo.ToUpper();
                result.Sede = datosPersonales.SedeHc != "" ? datosPersonales.Sede : datosPersonales.SedeHc;
                result.FechaNacimiento = datosPersonales.FechaNacimiento;
                result.Edad = GetAge(datosPersonales.FechaNacimiento).ToString();
                result.Tecnico = datosPersonales.Tecnico;
                result.Celular = datosPersonales.Celular;


                //ANTECEDENTE DE POSITIVIDAD
                var listaExamenesAnteriores = dbContext.regcovid_background_servicios_anteriores(result.Dni).ToList();
                if (listaExamenesAnteriores.Count == 0)
                {
                    result.AntecedenteResultado = "SIN EXÁMENES ANTERIORES";
                    result.AntecedenteFechaResultado = null;
                }
                else
                {
                    var resultadoPositivo = false;
                    var resultado = "";
                    DateTime? fechaResultado = null;
                    foreach (var servicio in listaExamenesAnteriores)
                    {
                        if (servicio.Resultado.ToUpper() == "IGM POSITIVO" || servicio.Resultado.ToUpper() == "IGG POSITIVO" || servicio.Resultado.ToUpper() == "IGM E IGG POSITIVO")
                        {
                            resultadoPositivo = true;
                            resultado = servicio.Resultado.ToUpper();
                            fechaResultado = servicio.FechaHoraRegistro;
                            break;
                        }
                    }

                    if (resultadoPositivo)
                    {
                        if (fechaResultado.Value.Date != result.FechaExamen.Date)
                        {
                            result.AntecedenteResultado = resultado;
                            result.AntecedenteFechaResultado = fechaResultado;
                        }
                        else
                        {
                            result.AntecedenteResultado = "NINGÚN POSITIVO ANTERIOR";
                            result.AntecedenteFechaResultado = null;
                        }

                    }
                    else
                    {
                        result.AntecedenteResultado = "NINGÚN POSITIVO ANTERIOR";
                        result.AntecedenteFechaResultado = null;
                    }

                }

                var CertificadoCovid19 = query.Find(p => p.ComponentId == Constants.CERTIFICADO_COVID_ID);
                if (CertificadoCovid19 != null)
                {
                    var resultados = ValoresComponente(serviceId, Constants.CERTIFICADO_COVID_ID);
                    //var Tecnico = ObtenerDatosTecnicoLabCovid19(serviceId, Constants.CERTIFICADO_COVID_ID);
                    //result.Tecnico = Tecnico == null ? "----" : Tecnico;
                    result.Sintomas = resultados.Count == 0 ? string.Empty : resultados.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_COVID_TIENE_SINTOMAS_ID) == null ? "" : resultados.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_COVID_TIENE_SINTOMAS_ID).v_Value1Name;
                    var resultadoExamen = resultados.Count == 0 ? string.Empty : resultados.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_COVID_RES_1_PRUEBA_ID) == null ? "" : resultados.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_COVID_RES_1_PRUEBA_ID).v_Value1;

                    result.TipoExamen = "PRUEBA RÁPIDA";
                    if (resultadoExamen == "2") //IgM Positivo
                    {
                        result.Resultado = "IgM POSITIVO";
                    }
                    else if (resultadoExamen == "3") //IgG Positivo
                    {
                        result.Resultado = "IgG POSITIVO";
                    }
                    else if (resultadoExamen == "4") //IgM e IgG positivo
                    {
                        result.Resultado = "IgM e IgG POSITIVO";
                    }
                    else if (resultadoExamen == "1") //IgM e IgG positivo
                    {
                        result.Resultado = "NO VÁLIDO";
                    }
                    else if (resultadoExamen == "5") //IgM e IgG positivo
                    {
                        result.Resultado = "NO SE REALIZÓ";
                    }
                    else if (resultadoExamen == "0") //IgM e IgG positivo
                    {
                        result.Resultado = "NEGATIVO";
                    }
                    else
                    {
                        result.Resultado = "SIN DATOS";
                    }
                }

                var Covid19 = query.Find(p => p.ComponentId == Constants.COVID_ID);
                if (Covid19 != null)
                {
                    var resultados = ValoresComponente(serviceId, Constants.COVID_ID);
                    //var Tecnico = ObtenerDatosTecnicoLabCovid19(serviceId, Constants.COVID_ID);
                    //result.Tecnico = Tecnico == null ? "----" : Tecnico;
                    result.TipoExamen = "PRUEBA RÁPIDA";
                    result.Sintomas = resultados.Count == 0 ? string.Empty : resultados.Find(p => p.v_ComponentFieldId == Constants.COVID_TIENE_SINTOMAS_ID) == null ? "" : resultados.Find(p => p.v_ComponentFieldId == Constants.COVID_TIENE_SINTOMAS_ID).v_Value1Name;

                    var resultadoExamen = resultados.Count == 0 ? string.Empty : resultados.Find(p => p.v_ComponentFieldId == Constants.COVID_RES_1_PRUEBA_ID) == null ? "" : resultados.Find(p => p.v_ComponentFieldId == Constants.COVID_RES_1_PRUEBA_ID).v_Value1;

                    if (resultadoExamen == "2") //IgM Positivo
                    {
                        result.Resultado = "IgM POSITIVO";
                    }
                    else if (resultadoExamen == "3") //IgG Positivo
                    {
                        result.Resultado = "IgG POSITIVO";
                    }
                    else if (resultadoExamen == "4") //IgM e IgG positivo
                    {
                        result.Resultado = "IgM e IgG POSITIVO";
                    }
                    else if (resultadoExamen == "1") //IgM e IgG positivo
                    {
                        result.Resultado = "NO VÁLIDO";
                    }
                    else if (resultadoExamen == "5") //IgM e IgG positivo
                    {
                        result.Resultado = "NO SE REALIZÓ";
                    }
                    else if (resultadoExamen == "0") //IgM e IgG positivo
                    {
                        result.Resultado = "NEGATIVO";
                    }
                    else
                    {
                        result.Resultado = "SIN DATOS";
                    }
                }

                var Antigenos = query.Find(p => p.ComponentId == Constants.ANTIGENOS_ID);
                if (Antigenos != null)
                {
                    var resultados = ValoresComponente(serviceId, Constants.ANTIGENOS_ID);
                    result.Sintomas = resultados.Count == 0 ? string.Empty : resultados.Find(p => p.v_ComponentFieldId == "N006-MF000000229") == null ? "" : resultados.Find(p => p.v_ComponentFieldId == "N006-MF000000229").v_Value1Name;
                    result.TipoExamen = "ANTÍGENOS";
                    var resultadoExamen = resultados.Count == 0 ? string.Empty : resultados.Find(p => p.v_ComponentFieldId == "N006-MF000000251") == null ? "" : resultados.Find(p => p.v_ComponentFieldId == "N006-MF000000251").v_Value1;

                    if (resultadoExamen == "0")
                    {
                        result.Resultado = "NEGATIVO";
                    }
                    else if (resultadoExamen == "6")
                    {
                        result.Resultado = "POSITIVO";
                    }
                    else
                    {
                        result.Resultado = "SIN DATOS";
                    }
                }

                return result;
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        private string obtenerNodoPorServiceId(string serviceId)
        {
            var arr = serviceId.Split('-');
            var nodo = "";
            if (arr.Length > 1)
            {
                var prefijo = arr[0];
                if (prefijo == "N100")
                {
                    nodo = "CONO NORTE";
                }
                else if (prefijo == "N101")
                {
                    nodo = "RIMAC";
                }
                else if (prefijo == "N102")
                {
                    nodo = "ATE";
                }
                else if (prefijo == "N103")
                {
                    nodo = "CONO SUR";
                }
                else if (prefijo == "N104")
                {
                    nodo = "CALLAO";
                }
                else if (prefijo == "N105")
                {
                    nodo = "VEGUETA";
                }
                else if (prefijo == "N106")
                {
                    nodo = "TINGO MARIA";
                }
                else if (prefijo == "N107")
                {
                    nodo = "NAZCA";
                }


                else if (prefijo == "N110")
                {
                    nodo = "TRUJILLO";
                }
                else if (prefijo == "N111")
                {
                    nodo = "CHIMBOTE";
                }
                else if (prefijo == "N112")
                {
                    nodo = "PIURA";
                }
                else if (prefijo == "N113")
                {
                    nodo = "TUMBES";
                }
                else if (prefijo == "N114")
                {
                    nodo = "TALARA";
                }
                else if (prefijo == "N116")
                {
                    nodo = "HUÁNUCO";
                }
                else if (prefijo == "N117")
                {
                    nodo = "CHANCHAMAYO";
                }
                else if (prefijo == "N118")
                {
                    nodo = "ICA";
                }
                else if (prefijo == "N120")
                {
                    nodo = "CAÑETE";
                }
                else if (prefijo == "N121")
                {
                    nodo = "SATIPO";
                }
                else if (prefijo == "N003")
                {
                    nodo = "LIMA";
                }
                else
                {
                    nodo = "----";
                }


                return nodo;
            }
            else
            {
                return nodo;
            }
        }

        private string ObtenerDatosTecnicoLabCovid19(string serviceId, string componentId)
        {
            SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
            var query = (from ser in dbContext.servicecomponent

                         join su in dbContext.systemuser on ser.i_ApprovedUpdateUserId equals su.i_SystemUserId into su_join
                         from su in su_join.DefaultIfEmpty()

                         join pr in dbContext.person on su.v_PersonId equals pr.v_PersonId into pr_join
                         from pr in pr_join.DefaultIfEmpty()

                         where ser.v_ServiceId == serviceId && ser.v_ComponentId == componentId

                         select new
                         {
                             Nombres = pr.v_FirstName + " " + pr.v_FirstLastName + " " + pr.v_SecondLastName
                         }
                         ).FirstOrDefault();

            return query.Nombres;
        }

        public List<ReportCertificadoCovid> GetCertificateCovid(ref OperationResult pobjOperationResult, string pstrServiceId)
        {
            //mon.IsActive = true;
            var isDeleted = 0;
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
                var groupUbigeo = 113;
                var query = (from ser in dbContext.service

                             join prot in dbContext.protocol on ser.v_ProtocolId equals prot.v_ProtocolId into prot_join
                             from prot in prot_join.DefaultIfEmpty()

                             join org in dbContext.organization on prot.v_CustomerOrganizationId equals org.v_OrganizationId into org_join
                             from org in org_join.DefaultIfEmpty()

                             join per in dbContext.person on ser.v_PersonId equals per.v_PersonId into per_join
                             from per in per_join.DefaultIfEmpty()

                             join M in dbContext.systemparameter on new { a = per.i_SexTypeId.Value, b = 100 }
                                 equals new { a = M.i_ParameterId, b = M.i_GroupId } into M_join
                             from M in M_join.DefaultIfEmpty()

                             // Ubigeo de la persona *******************************************************
                             join dep in dbContext.datahierarchy on new { a = per.i_DepartmentId.Value, b = groupUbigeo }
                                                  equals new { a = dep.i_ItemId, b = dep.i_GroupId } into dep_join
                             from dep in dep_join.DefaultIfEmpty()

                             join prov in dbContext.datahierarchy on new { a = per.i_ProvinceId.Value, b = groupUbigeo }
                                                   equals new { a = prov.i_ItemId, b = prov.i_GroupId } into prov_join
                             from prov in prov_join.DefaultIfEmpty()

                             join distri in dbContext.datahierarchy on new { a = per.i_DistrictId.Value, b = groupUbigeo }
                                                   equals new { a = distri.i_ItemId, b = distri.i_GroupId } into distri_join
                             from distri in distri_join.DefaultIfEmpty()
                             //*********************************************************************************************

                             join su in dbContext.systemuser on 11 equals su.i_SystemUserId into su_join
                             from su in su_join.DefaultIfEmpty()

                             join pr in dbContext.professional on su.v_PersonId equals pr.v_PersonId into pr_join
                             from pr in pr_join.DefaultIfEmpty()

                             join E in dbContext.servicecomponent on new { a = pstrServiceId, b = Constants.CERTIFICADO_COVID_ID }
                                                                  equals new { a = E.v_ServiceId, b = E.v_ComponentId }

                             // Usuario Medico Evaluador / Medico Aprobador ****************************
                             join me in dbContext.systemuser on E.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
                             from me in me_join.DefaultIfEmpty()

                             join per1 in dbContext.person on me.v_PersonId equals per1.v_PersonId into per1_join
                             from per1 in per1_join.DefaultIfEmpty()


                             let varDpto = dep.v_Value1 == null ? "" : dep.v_Value1
                             let varProv = prov.v_Value1 == null ? "" : prov.v_Value1
                             let varDistri = distri.v_Value1 == null ? "" : distri.v_Value1

                             where (ser.v_ServiceId == pstrServiceId) &&
                                   (ser.i_IsDeleted == isDeleted)

                             select new ReportCertificadoCovid
                             {
                                 FechaActual = ser.d_ServiceDate.Value,
                                 Empleador = org.v_Name,
                                 EmpresaPrincipal = org.v_Name,
                                 Sede = ser.v_Sede,
                                 Area = "----",
                                 Puesto = per.v_CurrentOccupation,
                                 NroIdentificacionSalus = per1.v_DocNumber,
                                 ApellidoPaternoSalus = per1.v_FirstLastName,
                                 ApellidoMaternoSalus = per1.v_SecondLastName,
                                 NombresSalus = per1.v_FirstName,
                                 TipoDoc = "DNI",
                                 NroDoc = per.v_DocNumber,
                                 ApellidoPaterno = per.v_FirstLastName,
                                 ApellidoMaterno = per.v_SecondLastName,
                                 Nombres = per.v_FirstName,
                                 FechaNacimiento = per.d_Birthdate.Value,
                                 Sexo = M.v_Value1,
                                 Celular = per.v_TelephoneNumber,
                                 Direccion = per.v_AdressLocation,
                                 Departamento = varDistri + "-" + varProv + "-" + varDpto, // Santa Anita - Lima - Lima,
                                 Firma = pr.b_SignatureImage,
                                 AptitudId = ser.i_AptitudeStatusId.Value,
                                 FirmaTrabajador = per1.b_RubricImage
                             });


                var covid = ValoresComponente(pstrServiceId, Constants.CERTIFICADO_COVID_ID);
                var Antropometria = ValoresComponente(pstrServiceId, Constants.ANTROPOMETRIA_ID);
                var FV = ValoresComponente(pstrServiceId, Constants.FUNCIONES_VITALES_ID);
                var celulares = query.FirstOrDefault().Celular;
                var celular1 = "";
                var celular2 = "";

                celular1 = celulares.Split(',')[0];
                if (celulares.Length > 12)
                {
                    celular2 = celulares.Split(',')[1];
                }

                var q = (from a in query.ToList()
                         select new ReportCertificadoCovid
                         {
                             FechaActual = a.FechaActual,
                             Empleador = a.Empleador,
                             EmpresaPrincipal = a.EmpresaPrincipal,
                             Sede = a.Sede,
                             Area = a.Area,
                             Puesto = a.Puesto,
                             NroIdentificacionSalus = a.NroIdentificacionSalus,
                             ApellidoPaternoSalus = a.ApellidoPaternoSalus,
                             ApellidoMaternoSalus = a.ApellidoMaternoSalus,
                             NombresSalus = a.NombresSalus,
                             TipoDoc = a.TipoDoc,
                             NroDoc = a.NroDoc,
                             ApellidoPaterno = a.ApellidoPaterno,
                             ApellidoMaterno = a.ApellidoMaterno,
                             Nombres = a.Nombres,
                             Edad = GetAge(a.FechaNacimiento).ToString(),
                             Sexo = a.Sexo,
                             Celular = celular1,
                             OtroTelefono = celular2,
                             Domicilio = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_COVID_DOMICILIO_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_COVID_DOMICILIO_ID).v_Value1,
                             Direccion = a.Direccion,
                             Departamento = a.Departamento,
                             Talla = Antropometria.Count == 0 ? string.Empty : Antropometria.Find(p => p.v_ComponentFieldId == Constants.ANTROPOMETRIA_TALLA_ID).v_Value1,
                             Peso = Antropometria.Count == 0 ? string.Empty : Antropometria.Find(p => p.v_ComponentFieldId == Constants.ANTROPOMETRIA_PESO_ID).v_Value1,
                             Imc = Antropometria.Count == 0 ? string.Empty : Antropometria.Find(p => p.v_ComponentFieldId == Constants.ANTROPOMETRIA_IMC_ID).v_Value1,
                             Temperatura = FV.Count == 0 ? string.Empty : FV.Find(p => p.v_ComponentFieldId == Constants.FUNCIONES_VITALES_TEMPERATURA_ID).v_Value1,
                             EspersonalSalud = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_COVID_ES_PERSONAL_SALUD_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_COVID_ES_PERSONAL_SALUD_ID).v_Value1,
                             Profesion = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_COVID_PROFESION_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_COVID_PROFESION_ID).v_Value1,
                             Tos = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_COVID_TOS_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_COVID_TOS_ID).v_Value1,
                             DolorGarganta = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_COVID_DOLOR_GARGANTA_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_COVID_DOLOR_GARGANTA_ID).v_Value1,
                             CongestionNasal = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_COVID_CONGESTION_NASAL_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_COVID_CONGESTION_NASAL_ID).v_Value1,
                             DificultadRespiratoria = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_COVID_DIFIC_RESPIRA_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_COVID_DIFIC_RESPIRA_ID).v_Value1,
                             Fiebre = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_COVID_FIEBRE_ESCALOFRIO_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_COVID_FIEBRE_ESCALOFRIO_ID).v_Value1,
                             Malestar = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_COVID_MALESTAR_GENERAL_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_COVID_MALESTAR_GENERAL_ID).v_Value1,
                             FechaSintomas = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_COVID_INICIO_SINTOMAS_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_COVID_INICIO_SINTOMAS_ID).v_Value1,
                             Muscular = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_COVID_MUSCULAR_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_COVID_MUSCULAR_ID).v_Value1,
                             Abdominal = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_COVID_ABDOMINAL_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_COVID_ABDOMINAL_ID).v_Value1,
                             Pecho = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_COVID_PECHO_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_COVID_PECHO_ID).v_Value1,
                             Articulaciones = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_COVID_ARTICULACIONES_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_COVID_ARTICULACIONES_ID).v_Value1,

                             TieneSintomas = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_COVID_TIENE_SINTOMAS_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_COVID_TIENE_SINTOMAS_ID).v_Value1,

                             ProcedenciaSolicitud = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_COVID_PROCEDENCIA_SOLICITUD_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_COVID_PROCEDENCIA_SOLICITUD_ID).v_Value1,
                             ResultadoPrueba = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_COVID_RES_1_PRUEBA_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_COVID_RES_1_PRUEBA_ID).v_Value1,
                             ResultadoSegundaPrueba = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_COVID_RES_2_PRUEBA_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_COVID_RES_2_PRUEBA_ID).v_Value1,
                             Seveidad = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_COVID_CLASIFICACION_CLINICA_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_COVID_CLASIFICACION_CLINICA_ID).v_Value1,

                             Mayor60 = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_COVID_MAYOR_60_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_COVID_MAYOR_60_ID).v_Value1,
                             HipertencionArterial = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_COVID_HIPERTENCION_ARTERIAL_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_COVID_HIPERTENCION_ARTERIAL_ID).v_Value1,
                             EnfCardio = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_COVID_ENF_CARDIO_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_COVID_ENF_CARDIO_ID).v_Value1,

                             Diabetes = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_COVID_DIABETES_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_COVID_DIABETES_ID).v_Value1,
                             Obesidad = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_COVID_OBESIDAD_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_COVID_OBESIDAD_ID).v_Value1,
                             Asma = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_COVID_ASMA_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_COVID_ASMA_ID).v_Value1,

                             EnfPulmonarCronica = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_COVID_ENF_PULMONAR_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_COVID_ENF_PULMONAR_ID).v_Value1,
                             InsuficienciaRenal = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_COVID_INSUFICIENCIA_RENAL_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_COVID_INSUFICIENCIA_RENAL_ID).v_Value1,
                             EbfInmunosupresor = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_COVID_INMUNOSUPRESOR_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_COVID_INMUNOSUPRESOR_ID).v_Value1,

                             Cancer = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_COVID_CANCER_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_COVID_CANCER_ID).v_Value1,
                             Embarazo = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_COVID_EMBARAZO_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_COVID_EMBARAZO_ID).v_Value1,
                             PersonalSalud = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_COVID_PERSONAL_SALUD_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_COVID_PERSONAL_SALUD_ID).v_Value1,

                             Pcr = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.CONTINUIDAD_DE_LA_ATENCION_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.CONTINUIDAD_DE_LA_ATENCION_ID).v_Value1,

                             SeguimientoProcede = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_COVID_PROCEDENCIA_SOLICITUD_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_COVID_PROCEDENCIA_SOLICITUD_ID).v_Value1,

                             ViajeFuera = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_COVID_VIAJADO_FUERA_PAIS_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_COVID_VIAJADO_FUERA_PAIS_ID).v_Value1,
                             ContactoCovid = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_COVID_CONTACTO_DIRECTO_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_COVID_CONTACTO_DIRECTO_ID).v_Value1,
                             Establecimiento = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_COVID_ESTABLECIMIENTO_SALUD_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_COVID_ESTABLECIMIENTO_SALUD_ID).v_Value1,
                             TomaMedicacion = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_COVID_TOMA_MEDICACION_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_COVID_TOMA_MEDICACION_ID).v_Value1,
                             Porque = "",
                             Aptitud = a.AptitudId.ToString(),
                             AptitudId = a.AptitudId,

                             Diarrea = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_COVID_DIARREA_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_COVID_DIARREA_ID).v_Value1,
                             Nauseas = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_COVID_NAUSEAS_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_COVID_NAUSEAS_ID).v_Value1,
                             Cefalea = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_COVID_CEFALEA_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_COVID_CEFALEA_ID).v_Value1,
                             Irritabilidad = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_COVID_IRRITABILIDAD_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_COVID_IRRITABILIDAD_ID).v_Value1,
                             Dolor = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_COVID_DOLOR_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_COVID_DOLOR_ID).v_Value1,
                             Otros = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_COVID_OTROS_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_COVID_OTROS_ID).v_Value1,
                             Firma = a.Firma,
                             FirmaTrabajador = a.FirmaTrabajador
                         }).ToList();


                pobjOperationResult.Success = 1;
                return q;
            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
                return null;
            }
        }

        public List<ReportCertificadoCovid> GetCovid(ref OperationResult pobjOperationResult, string pstrServiceId)
        {
            //mon.IsActive = true;
            var isDeleted = 0;
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
                var groupUbigeo = 113;
                var query = (from ser in dbContext.service

                             join prot in dbContext.protocol on ser.v_ProtocolId equals prot.v_ProtocolId into prot_join
                             from prot in prot_join.DefaultIfEmpty()

                             join org in dbContext.organization on prot.v_CustomerOrganizationId equals org.v_OrganizationId into org_join
                             from org in org_join.DefaultIfEmpty()

                             join per in dbContext.person on ser.v_PersonId equals per.v_PersonId into per_join
                             from per in per_join.DefaultIfEmpty()

                             join orgEmp in dbContext.hcactualizado on per.v_DocNumber equals orgEmp.Dni into orgEmp_join
                             from orgEmp in orgEmp_join.DefaultIfEmpty()

                             join M in dbContext.systemparameter on new { a = per.i_SexTypeId.Value, b = 100 }
                                 equals new { a = M.i_ParameterId, b = M.i_GroupId } into M_join
                             from M in M_join.DefaultIfEmpty()

                             // Ubigeo de la persona *******************************************************
                             join dep in dbContext.datahierarchy on new { a = per.i_DepartmentId.Value, b = groupUbigeo }
                                                  equals new { a = dep.i_ItemId, b = dep.i_GroupId } into dep_join
                             from dep in dep_join.DefaultIfEmpty()

                             join prov in dbContext.datahierarchy on new { a = per.i_ProvinceId.Value, b = groupUbigeo }
                                                   equals new { a = prov.i_ItemId, b = prov.i_GroupId } into prov_join
                             from prov in prov_join.DefaultIfEmpty()

                             join distri in dbContext.datahierarchy on new { a = per.i_DistrictId.Value, b = groupUbigeo }
                                                   equals new { a = distri.i_ItemId, b = distri.i_GroupId } into distri_join
                             from distri in distri_join.DefaultIfEmpty()
                             //*********************************************************************************************

                             join su in dbContext.systemuser on 11 equals su.i_SystemUserId into su_join
                             from su in su_join.DefaultIfEmpty()

                             join pr in dbContext.professional on su.v_PersonId equals pr.v_PersonId into pr_join
                             from pr in pr_join.DefaultIfEmpty()

                             join E in dbContext.servicecomponent on new { a = pstrServiceId, b = Constants.COVID_ID }
                                                                  equals new { a = E.v_ServiceId, b = E.v_ComponentId }

                             // Usuario Medico Evaluador / Medico Aprobador ****************************
                             join me in dbContext.systemuser on E.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
                             from me in me_join.DefaultIfEmpty()

                             join per1 in dbContext.person on me.v_PersonId equals per1.v_PersonId into per1_join
                             from per1 in per1_join.DefaultIfEmpty()


                             let varDpto = dep.v_Value1 == null ? "" : dep.v_Value1
                             let varProv = prov.v_Value1 == null ? "" : prov.v_Value1
                             let varDistri = distri.v_Value1 == null ? "" : distri.v_Value1

                             where (ser.v_ServiceId == pstrServiceId) &&
                                   (ser.i_IsDeleted == isDeleted)

                             select new ReportCertificadoCovid
                             {
                                 FechaActual = ser.d_ServiceDate.Value,
                                 Empleador = ser.EmpresaEmpleadora,//orgEmp.EmpresaEmpleadora,
                                 EmpresaPrincipal = org.v_Name,
                                 Sede = ser.v_Sede,
                                 Area = "----",
                                 Puesto = per.v_CurrentOccupation,
                                 NroIdentificacionSalus = per1.v_DocNumber,
                                 ApellidoPaternoSalus = per1.v_FirstLastName,
                                 ApellidoMaternoSalus = per1.v_SecondLastName,
                                 NombresSalus = per1.v_FirstName,
                                 TipoDoc = "DNI",
                                 NroDoc = per.v_DocNumber,
                                 ApellidoPaterno = per.v_FirstLastName,
                                 ApellidoMaterno = per.v_SecondLastName,
                                 Nombres = per.v_FirstName,
                                 FechaNacimiento = per.d_Birthdate.Value,
                                 Sexo = M.v_Value1,
                                 Celular = per.v_TelephoneNumber,
                                 Direccion = per.v_AdressLocation,
                                 Departamento = varDistri + "-" + varProv + "-" + varDpto, // Santa Anita - Lima - Lima,
                                 Firma = pr.b_SignatureImage,
                                 AptitudId = ser.i_AptitudeStatusId.Value
                             });


                var covid = ValoresComponente(pstrServiceId, Constants.COVID_ID);

                var celulares = query.FirstOrDefault().Celular;
                var celular1 = "";
                var celular2 = "";

                celular1 = celulares.Split(',')[0];
                if (celulares.Length > 12)
                {
                    celular2 = celulares.Split(',')[1];
                }

                var q = (from a in query.ToList()
                         select new ReportCertificadoCovid
                         {
                             FechaActual = a.FechaActual,
                             //Empleador = a.Empleador == null ? "TERCEROS" : a.Empleador,
                             Empleador = a.Empleador,
                             EmpresaPrincipal = a.EmpresaPrincipal,
                             Sede = a.Sede,
                             Area = a.Area,
                             Puesto = a.Puesto,
                             NroIdentificacionSalus = a.NroIdentificacionSalus,
                             ApellidoPaternoSalus = a.ApellidoPaternoSalus,
                             ApellidoMaternoSalus = a.ApellidoMaternoSalus,
                             NombresSalus = a.NombresSalus,
                             TipoDoc = a.TipoDoc,
                             NroDoc = a.NroDoc,
                             ApellidoPaterno = a.ApellidoPaterno,
                             ApellidoMaterno = a.ApellidoMaterno,
                             Nombres = a.Nombres,
                             Edad = GetAge(a.FechaNacimiento).ToString(),
                             Sexo = a.Sexo,
                             Celular = celular1,
                             OtroTelefono = celular2,
                             Domicilio = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_DOMICILIO_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_DOMICILIO_ID).v_Value1,
                             Direccion = a.Direccion,
                             Departamento = a.Departamento,
                             EspersonalSalud = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_ES_PERSONAL_SALUD_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_ES_PERSONAL_SALUD_ID).v_Value1,
                             Profesion = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_PROFESION_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_PROFESION_ID).v_Value1,
                             Tos = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_TOS_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_TOS_ID).v_Value1,
                             DolorGarganta = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_DOLOR_GARGANTA_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_DOLOR_GARGANTA_ID).v_Value1,
                             CongestionNasal = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_CONGESTION_NASAL_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_CONGESTION_NASAL_ID).v_Value1,
                             DificultadRespiratoria = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_DIFIC_RESPIRA_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_DIFIC_RESPIRA_ID).v_Value1,
                             Fiebre = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_FIEBRE_ESCALOFRIO_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_FIEBRE_ESCALOFRIO_ID).v_Value1,
                             Malestar = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_MALESTAR_GENERAL_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_MALESTAR_GENERAL_ID).v_Value1,
                             FechaSintomas = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_INICIO_SINTOMAS_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_INICIO_SINTOMAS_ID).v_Value1,
                             Muscular = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_MUSCULAR_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_MUSCULAR_ID).v_Value1,
                             Abdominal = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_ABDOMINAL_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_ABDOMINAL_ID).v_Value1,
                             Pecho = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_PECHO_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_PECHO_ID).v_Value1,
                             Articulaciones = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_ARTICULACIONES_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_ARTICULACIONES_ID).v_Value1,

                             TieneSintomas = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_TIENE_SINTOMAS_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_TIENE_SINTOMAS_ID).v_Value1,

                             ProcedenciaSolicitud = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_PROCEDENCIA_SOLICITUD_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_PROCEDENCIA_SOLICITUD_ID).v_Value1,
                            
                             ResultadoPrueba = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_RES_1_PRUEBA_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_RES_1_PRUEBA_ID).v_Value1,
                             PrimerResultadoCovid = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_RES_1_PRUEBA_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_RES_1_PRUEBA_ID).v_Value1Name,
                             
                             ResultadoSegundaPrueba = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_RES_2_PRUEBA_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_RES_2_PRUEBA_ID).v_Value1,
                             SegundoResultadoCovid = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_RES_2_PRUEBA_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_RES_2_PRUEBA_ID).v_Value1Name,
                             
                             Seveidad = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_CLASIFICACION_CLINICA_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_CLASIFICACION_CLINICA_ID).v_Value1,

                             Mayor60 = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_MAYOR_60_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_MAYOR_60_ID).v_Value1,
                             HipertencionArterial = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_HIPERTENCION_ARTERIAL_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_HIPERTENCION_ARTERIAL_ID).v_Value1,
                             EnfCardio = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_ENF_CARDIO_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_ENF_CARDIO_ID).v_Value1,

                             Diabetes = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_DIABETES_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_DIABETES_ID).v_Value1,
                             Obesidad = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_OBESIDAD_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_OBESIDAD_ID).v_Value1,
                             Asma = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_ASMA_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_ASMA_ID).v_Value1,

                             EnfPulmonarCronica = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_ENF_PULMONAR_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_ENF_PULMONAR_ID).v_Value1,
                             InsuficienciaRenal = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_INSUFICIENCIA_RENAL_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_INSUFICIENCIA_RENAL_ID).v_Value1,
                             EbfInmunosupresor = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_INMUNOSUPRESOR_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_INMUNOSUPRESOR_ID).v_Value1,

                             Cancer = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_CANCER_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_CANCER_ID).v_Value1,
                             Embarazo = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_EMBARAZO_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_EMBARAZO_ID).v_Value1,
                             PersonalSalud = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_PERSONAL_SALUD_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_PERSONAL_SALUD_ID).v_Value1,

                             Pcr = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.CONTINUIDAD_DE_LA_ATENCION_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.CONTINUIDAD_DE_LA_ATENCION_ID).v_Value1,

                             SeguimientoProcede = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_PROCEDENCIA_SOLICITUD_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_PROCEDENCIA_SOLICITUD_ID).v_Value1,

                             Diarrea = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_DIARREA_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_DIARREA_ID).v_Value1,
                             Nauseas = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_NAUSEAS_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_NAUSEAS_ID).v_Value1,
                             Cefalea = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_CEFALEA_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_CEFALEA_ID).v_Value1,
                             Irritabilidad = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_IRRITABILIDAD_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_IRRITABILIDAD_ID).v_Value1,
                             Dolor = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_DOLOR_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_DOLOR_ID).v_Value1,
                             Otros = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_OTROS_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_OTROS_ID).v_Value1,

                             Aptitud = a.AptitudId.ToString(),

                             Firma = a.Firma
                         }).ToList();


                pobjOperationResult.Success = 1;
                return q;
            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
                return null;
            }
        }

        public List<ReportCertificadoCovid> GetCovidForWin(ref OperationResult pobjOperationResult, string pstrServiceId)
        {
            //mon.IsActive = true;
            var isDeleted = 0;
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
                var groupUbigeo = 113;
                var query = (from ser in dbContext.service

                             join prot in dbContext.protocol on ser.v_ProtocolId equals prot.v_ProtocolId into prot_join
                             from prot in prot_join.DefaultIfEmpty()

                             join org in dbContext.organization on prot.v_CustomerOrganizationId equals org.v_OrganizationId into org_join
                             from org in org_join.DefaultIfEmpty()

                             join per in dbContext.person on ser.v_PersonId equals per.v_PersonId into per_join
                             from per in per_join.DefaultIfEmpty()

                             join orgEmp in dbContext.hcactualizado on per.v_DocNumber equals orgEmp.Dni into orgEmp_join
                             from orgEmp in orgEmp_join.DefaultIfEmpty()

                             join M in dbContext.systemparameter on new { a = per.i_SexTypeId.Value, b = 100 }
                                 equals new { a = M.i_ParameterId, b = M.i_GroupId } into M_join
                             from M in M_join.DefaultIfEmpty()

                             // Ubigeo de la persona *******************************************************
                             join dep in dbContext.datahierarchy on new { a = per.i_DepartmentId.Value, b = groupUbigeo }
                                                  equals new { a = dep.i_ItemId, b = dep.i_GroupId } into dep_join
                             from dep in dep_join.DefaultIfEmpty()

                             join prov in dbContext.datahierarchy on new { a = per.i_ProvinceId.Value, b = groupUbigeo }
                                                   equals new { a = prov.i_ItemId, b = prov.i_GroupId } into prov_join
                             from prov in prov_join.DefaultIfEmpty()

                             join distri in dbContext.datahierarchy on new { a = per.i_DistrictId.Value, b = groupUbigeo }
                                                   equals new { a = distri.i_ItemId, b = distri.i_GroupId } into distri_join
                             from distri in distri_join.DefaultIfEmpty()
                             //*********************************************************************************************

                             join su in dbContext.systemuser on 11 equals su.i_SystemUserId into su_join
                             from su in su_join.DefaultIfEmpty()

                             join pr in dbContext.professional on su.v_PersonId equals pr.v_PersonId into pr_join
                             from pr in pr_join.DefaultIfEmpty()

                             join E in dbContext.servicecomponent on new { a = pstrServiceId, b = Constants.COVID_ID }
                                                                  equals new { a = E.v_ServiceId, b = E.v_ComponentId }

                             // Usuario Medico Evaluador / Medico Aprobador ****************************
                             join me in dbContext.systemuser on E.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
                             from me in me_join.DefaultIfEmpty()

                             join per1 in dbContext.person on me.v_PersonId equals per1.v_PersonId into per1_join
                             from per1 in per1_join.DefaultIfEmpty()


                             let varDpto = dep.v_Value1 == null ? "" : dep.v_Value1
                             let varProv = prov.v_Value1 == null ? "" : prov.v_Value1
                             let varDistri = distri.v_Value1 == null ? "" : distri.v_Value1

                             where (ser.v_ServiceId == pstrServiceId) &&
                                   (ser.i_IsDeleted == isDeleted)

                             select new ReportCertificadoCovid
                             {
                                 FechaActual = ser.d_ServiceDate.Value,
                                 Empleador = ser.EmpresaEmpleadora,//orgEmp.EmpresaEmpleadora,
                                 EmpresaPrincipal = org.v_Name,
                                 Sede = ser.v_Sede,
                                 Area = "----",
                                 Puesto = per.v_CurrentOccupation,
                                 NroIdentificacionSalus = per1.v_DocNumber,
                                 ApellidoPaternoSalus = per1.v_FirstLastName,
                                 ApellidoMaternoSalus = per1.v_SecondLastName,
                                 NombresSalus = per1.v_FirstName,
                                 TipoDoc = "DNI",
                                 NroDoc = per.v_DocNumber,
                                 ApellidoPaterno = per.v_FirstLastName,
                                 ApellidoMaterno = per.v_SecondLastName,
                                 Nombres = per.v_FirstName,
                                 FechaNacimiento = per.d_Birthdate.Value,
                                 Sexo = M.v_Value1,
                                 Celular = per.v_TelephoneNumber,
                                 Direccion = per.v_AdressLocation,
                                 Departamento = varDistri + "-" + varProv + "-" + varDpto, // Santa Anita - Lima - Lima,
                                 Firma = pr.b_SignatureImage,
                                 AptitudId = ser.i_AptitudeStatusId.Value
                             });


                var covid = ValoresComponente(pstrServiceId, Constants.GRUPO_Y_FACTOR_SANGUINEO_ID);

                var celulares = query.FirstOrDefault().Celular;
                var celular1 = "";
                var celular2 = "";

                celular1 = celulares.Split(',')[0];
                if (celulares.Length > 12)
                {
                    celular2 = celulares.Split(',')[1];
                }

                var q = (from a in query.ToList()
                         select new ReportCertificadoCovid
                         {
                             FechaActual = a.FechaActual,
                             //Empleador = a.Empleador == null ? "TERCEROS" : a.Empleador,
                             Empleador = a.Empleador,
                             EmpresaPrincipal = a.EmpresaPrincipal,
                             Sede = a.Sede,
                             Area = a.Area,
                             Puesto = a.Puesto,
                             NroIdentificacionSalus = a.NroIdentificacionSalus,
                             ApellidoPaternoSalus = a.ApellidoPaternoSalus,
                             ApellidoMaternoSalus = a.ApellidoMaternoSalus,
                             NombresSalus = a.NombresSalus,
                             TipoDoc = a.TipoDoc,
                             NroDoc = a.NroDoc,
                             ApellidoPaterno = a.ApellidoPaterno,
                             ApellidoMaterno = a.ApellidoMaterno,
                             Nombres = a.Nombres,
                             Edad = GetAge(a.FechaNacimiento).ToString(),
                             Sexo = a.Sexo,
                             Celular = celular1,
                             OtroTelefono = celular2,
                             Domicilio = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_DOMICILIO_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_DOMICILIO_ID).v_Value1,
                             Direccion = a.Direccion,
                             Departamento = a.Departamento,
                             EspersonalSalud = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_ES_PERSONAL_SALUD_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_ES_PERSONAL_SALUD_ID).v_Value1,
                             Profesion = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_PROFESION_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_PROFESION_ID).v_Value1,
                             Tos = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_TOS_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_TOS_ID).v_Value1,
                             DolorGarganta = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_DOLOR_GARGANTA_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_DOLOR_GARGANTA_ID).v_Value1,
                             CongestionNasal = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_CONGESTION_NASAL_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_CONGESTION_NASAL_ID).v_Value1,
                             DificultadRespiratoria = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_DIFIC_RESPIRA_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_DIFIC_RESPIRA_ID).v_Value1,
                             Fiebre = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_FIEBRE_ESCALOFRIO_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_FIEBRE_ESCALOFRIO_ID).v_Value1,
                             Malestar = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_MALESTAR_GENERAL_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_MALESTAR_GENERAL_ID).v_Value1,
                             FechaSintomas = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_INICIO_SINTOMAS_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_INICIO_SINTOMAS_ID).v_Value1,
                             Muscular = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_MUSCULAR_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_MUSCULAR_ID).v_Value1,
                             Abdominal = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_ABDOMINAL_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_ABDOMINAL_ID).v_Value1,
                             Pecho = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_PECHO_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_PECHO_ID).v_Value1,
                             Articulaciones = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_ARTICULACIONES_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_ARTICULACIONES_ID).v_Value1,

                             TieneSintomas = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_TIENE_SINTOMAS_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_TIENE_SINTOMAS_ID).v_Value1,

                             ProcedenciaSolicitud = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_PROCEDENCIA_SOLICITUD_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_PROCEDENCIA_SOLICITUD_ID).v_Value1,

                             ResultadoPrueba = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_RES_1_PRUEBA_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_RES_1_PRUEBA_ID).v_Value1,
                             PrimerResultadoCovid = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_RES_1_PRUEBA_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_RES_1_PRUEBA_ID).v_Value1Name,

                             ResultadoSegundaPrueba = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_RES_2_PRUEBA_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_RES_2_PRUEBA_ID).v_Value1,
                             SegundoResultadoCovid = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_RES_2_PRUEBA_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_RES_2_PRUEBA_ID).v_Value1Name,

                             Seveidad = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_CLASIFICACION_CLINICA_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_CLASIFICACION_CLINICA_ID).v_Value1,

                             Mayor60 = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_MAYOR_60_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_MAYOR_60_ID).v_Value1,
                             HipertencionArterial = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_HIPERTENCION_ARTERIAL_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_HIPERTENCION_ARTERIAL_ID).v_Value1,
                             EnfCardio = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_ENF_CARDIO_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_ENF_CARDIO_ID).v_Value1,

                             Diabetes = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_DIABETES_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_DIABETES_ID).v_Value1,
                             Obesidad = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_OBESIDAD_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_OBESIDAD_ID).v_Value1,
                             Asma = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_ASMA_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_ASMA_ID).v_Value1,

                             EnfPulmonarCronica = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_ENF_PULMONAR_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_ENF_PULMONAR_ID).v_Value1,
                             InsuficienciaRenal = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_INSUFICIENCIA_RENAL_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_INSUFICIENCIA_RENAL_ID).v_Value1,
                             EbfInmunosupresor = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_INMUNOSUPRESOR_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_INMUNOSUPRESOR_ID).v_Value1,

                             Cancer = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_CANCER_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_CANCER_ID).v_Value1,
                             Embarazo = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_EMBARAZO_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_EMBARAZO_ID).v_Value1,
                             PersonalSalud = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_PERSONAL_SALUD_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_PERSONAL_SALUD_ID).v_Value1,

                             Pcr = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.CONTINUIDAD_DE_LA_ATENCION_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.CONTINUIDAD_DE_LA_ATENCION_ID).v_Value1,

                             SeguimientoProcede = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_PROCEDENCIA_SOLICITUD_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_PROCEDENCIA_SOLICITUD_ID).v_Value1,

                             Diarrea = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_DIARREA_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_DIARREA_ID).v_Value1,
                             Nauseas = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_NAUSEAS_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_NAUSEAS_ID).v_Value1,
                             Cefalea = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_CEFALEA_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_CEFALEA_ID).v_Value1,
                             Irritabilidad = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_IRRITABILIDAD_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_IRRITABILIDAD_ID).v_Value1,
                             Dolor = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_DOLOR_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_DOLOR_ID).v_Value1,
                             Otros = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_OTROS_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_OTROS_ID).v_Value1,

                             Aptitud = a.AptitudId.ToString(),

                             Firma = a.Firma
                         }).ToList();


                pobjOperationResult.Success = 1;
                return q;
            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
                return null;
            }
        }


        public List<ReportCertificadoCovid> GetCovidClinicaExterna(ref OperationResult pobjOperationResult, string pstrServiceId)
        {
            //mon.IsActive = true;
            var isDeleted = 0;
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
                var groupUbigeo = 113;
                var query = (from ser in dbContext.service

                             join prot in dbContext.protocol on ser.v_ProtocolId equals prot.v_ProtocolId into prot_join
                             from prot in prot_join.DefaultIfEmpty()

                             join org in dbContext.organization on prot.v_CustomerOrganizationId equals org.v_OrganizationId into org_join
                             from org in org_join.DefaultIfEmpty()

                             join per in dbContext.person on ser.v_PersonId equals per.v_PersonId into per_join
                             from per in per_join.DefaultIfEmpty()

                             join M in dbContext.systemparameter on new { a = per.i_SexTypeId.Value, b = 100 }
                                 equals new { a = M.i_ParameterId, b = M.i_GroupId } into M_join
                             from M in M_join.DefaultIfEmpty()

                             join CL in dbContext.systemparameter on new { a = ser.ClinicaExternad.Value, b = 280 }
                                equals new { a = CL.i_ParameterId, b = CL.i_GroupId } into CL_join
                             from CL in CL_join.DefaultIfEmpty()

                             // Ubigeo de la persona *******************************************************
                             join dep in dbContext.datahierarchy on new { a = per.i_DepartmentId.Value, b = groupUbigeo }
                                                  equals new { a = dep.i_ItemId, b = dep.i_GroupId } into dep_join
                             from dep in dep_join.DefaultIfEmpty()

                             join prov in dbContext.datahierarchy on new { a = per.i_ProvinceId.Value, b = groupUbigeo }
                                                   equals new { a = prov.i_ItemId, b = prov.i_GroupId } into prov_join
                             from prov in prov_join.DefaultIfEmpty()

                             join distri in dbContext.datahierarchy on new { a = per.i_DistrictId.Value, b = groupUbigeo }
                                                   equals new { a = distri.i_ItemId, b = distri.i_GroupId } into distri_join
                             from distri in distri_join.DefaultIfEmpty()
                             //*********************************************************************************************

                             join su in dbContext.systemuser on 11 equals su.i_SystemUserId into su_join
                             from su in su_join.DefaultIfEmpty()

                             join pr in dbContext.professional on su.v_PersonId equals pr.v_PersonId into pr_join
                             from pr in pr_join.DefaultIfEmpty()

                             join E in dbContext.servicecomponent on new { a = pstrServiceId, b = Constants.COVID_ID }
                                                                  equals new { a = E.v_ServiceId, b = E.v_ComponentId }

                             // Usuario Medico Evaluador / Medico Aprobador ****************************
                             join me in dbContext.systemuser on E.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
                             from me in me_join.DefaultIfEmpty()

                             join per1 in dbContext.person on me.v_PersonId equals per1.v_PersonId into per1_join
                             from per1 in per1_join.DefaultIfEmpty()


                             let varDpto = dep.v_Value1 == null ? "" : dep.v_Value1
                             let varProv = prov.v_Value1 == null ? "" : prov.v_Value1
                             let varDistri = distri.v_Value1 == null ? "" : distri.v_Value1

                             where (ser.v_ServiceId == pstrServiceId) &&
                                   (ser.i_IsDeleted == isDeleted)

                             select new ReportCertificadoCovid
                             {
                                 FechaActual = ser.d_ServiceDate.Value,
                                 Empleador = org.v_Name,
                                 EmpresaPrincipal = org.v_Name,
                                 Sede = ser.v_Sede,
                                 Area = CL.v_Value1,
                                 Puesto = per.v_CurrentOccupation,
                                 NroIdentificacionSalus = per1.v_DocNumber,
                                 ApellidoPaternoSalus = per1.v_FirstLastName,
                                 ApellidoMaternoSalus = per1.v_SecondLastName,
                                 NombresSalus = per1.v_FirstName,
                                 TipoDoc = "DNI",
                                 NroDoc = per.v_DocNumber,
                                 ApellidoPaterno = per.v_FirstLastName,
                                 ApellidoMaterno = per.v_SecondLastName,
                                 Nombres = per.v_FirstName,
                                 FechaNacimiento = per.d_Birthdate.Value,
                                 Sexo = M.v_Value1,
                                 Celular = per.v_TelephoneNumber,
                                 Direccion = per.v_AdressLocation,
                                 Departamento = varDistri + "-" + varProv + "-" + varDpto, // Santa Anita - Lima - Lima,
                                 Firma = pr.b_SignatureImage,
                                 AptitudId = ser.i_AptitudeStatusId.Value
                             });


                var covid = ValoresComponente(pstrServiceId, Constants.COVID_ID);

                var celulares = query.FirstOrDefault().Celular;
                var celular1 = "";
                var celular2 = "";

                celular1 = celulares.Split(',')[0];
                if (celulares.Length > 12)
                {
                    celular2 = celulares.Split(',')[1];
                }

                var q = (from a in query.ToList()
                         select new ReportCertificadoCovid
                         {
                             FechaActual = a.FechaActual,
                             Empleador = a.Empleador,
                             EmpresaPrincipal = a.EmpresaPrincipal,
                             Sede = a.Sede,
                             Area = a.Area,
                             Puesto = a.Puesto,
                             NroIdentificacionSalus = a.NroIdentificacionSalus,
                             ApellidoPaternoSalus = a.ApellidoPaternoSalus,
                             ApellidoMaternoSalus = a.ApellidoMaternoSalus,
                             NombresSalus = a.NombresSalus,
                             TipoDoc = a.TipoDoc,
                             NroDoc = a.NroDoc,
                             ApellidoPaterno = a.ApellidoPaterno,
                             ApellidoMaterno = a.ApellidoMaterno,
                             Nombres = a.Nombres,
                             Edad = GetAge(a.FechaNacimiento).ToString(),
                             Sexo = a.Sexo,
                             Celular = celular1,
                             OtroTelefono = celular2,
                             Domicilio = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_DOMICILIO_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_DOMICILIO_ID).v_Value1,
                             Direccion = a.Direccion,
                             Departamento = a.Departamento,
                             EspersonalSalud = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_ES_PERSONAL_SALUD_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_ES_PERSONAL_SALUD_ID).v_Value1,
                             Profesion = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_PROFESION_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_PROFESION_ID).v_Value1,
                             Tos = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_TOS_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_TOS_ID).v_Value1,
                             DolorGarganta = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_DOLOR_GARGANTA_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_DOLOR_GARGANTA_ID).v_Value1,
                             CongestionNasal = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_CONGESTION_NASAL_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_CONGESTION_NASAL_ID).v_Value1,
                             DificultadRespiratoria = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_DIFIC_RESPIRA_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_DIFIC_RESPIRA_ID).v_Value1,
                             Fiebre = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_FIEBRE_ESCALOFRIO_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_FIEBRE_ESCALOFRIO_ID).v_Value1,
                             Malestar = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_MALESTAR_GENERAL_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_MALESTAR_GENERAL_ID).v_Value1,
                             FechaSintomas = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_INICIO_SINTOMAS_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_INICIO_SINTOMAS_ID).v_Value1,
                             Muscular = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_MUSCULAR_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_MUSCULAR_ID).v_Value1,
                             Abdominal = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_ABDOMINAL_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_ABDOMINAL_ID).v_Value1,
                             Pecho = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_PECHO_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_PECHO_ID).v_Value1,
                             Articulaciones = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_ARTICULACIONES_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_ARTICULACIONES_ID).v_Value1,

                             TieneSintomas = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_TIENE_SINTOMAS_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_TIENE_SINTOMAS_ID).v_Value1,

                             ProcedenciaSolicitud = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_PROCEDENCIA_SOLICITUD_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_PROCEDENCIA_SOLICITUD_ID).v_Value1,
                             ResultadoPrueba = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_RES_1_PRUEBA_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_RES_1_PRUEBA_ID).v_Value1,
                             ResultadoSegundaPrueba = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_RES_2_PRUEBA_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_RES_2_PRUEBA_ID).v_Value1,
                             Seveidad = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_CLASIFICACION_CLINICA_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_CLASIFICACION_CLINICA_ID).v_Value1,

                             Mayor60 = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_MAYOR_60_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_MAYOR_60_ID).v_Value1,
                             HipertencionArterial = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_HIPERTENCION_ARTERIAL_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_HIPERTENCION_ARTERIAL_ID).v_Value1,
                             EnfCardio = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_ENF_CARDIO_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_ENF_CARDIO_ID).v_Value1,

                             Diabetes = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_DIABETES_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_DIABETES_ID).v_Value1,
                             Obesidad = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_OBESIDAD_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_OBESIDAD_ID).v_Value1,
                             Asma = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_ASMA_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_ASMA_ID).v_Value1,

                             EnfPulmonarCronica = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_ENF_PULMONAR_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_ENF_PULMONAR_ID).v_Value1,
                             InsuficienciaRenal = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_INSUFICIENCIA_RENAL_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_INSUFICIENCIA_RENAL_ID).v_Value1,
                             EbfInmunosupresor = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_INMUNOSUPRESOR_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_INMUNOSUPRESOR_ID).v_Value1,

                             Cancer = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_CANCER_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_CANCER_ID).v_Value1,
                             Embarazo = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_EMBARAZO_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_EMBARAZO_ID).v_Value1,
                             PersonalSalud = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_PERSONAL_SALUD_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_PERSONAL_SALUD_ID).v_Value1,

                             Pcr = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.CONTINUIDAD_DE_LA_ATENCION_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.CONTINUIDAD_DE_LA_ATENCION_ID).v_Value1,

                             SeguimientoProcede = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_PROCEDENCIA_SOLICITUD_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_PROCEDENCIA_SOLICITUD_ID).v_Value1,

                             Diarrea = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_DIARREA_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_DIARREA_ID).v_Value1,
                             Nauseas = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_NAUSEAS_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_NAUSEAS_ID).v_Value1,
                             Cefalea = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_CEFALEA_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_CEFALEA_ID).v_Value1,
                             Irritabilidad = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_IRRITABILIDAD_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_IRRITABILIDAD_ID).v_Value1,
                             Dolor = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_DOLOR_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_DOLOR_ID).v_Value1,
                             Otros = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_OTROS_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_OTROS_ID).v_Value1,

                             Aptitud = a.AptitudId.ToString(),

                             Firma = a.Firma
                         }).ToList();


                pobjOperationResult.Success = 1;
                return q;
            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
                return null;
            }
        }

        public List<ReportCertificadoCovid> GetCovidResumido(ref OperationResult pobjOperationResult, string pstrServiceId)
        {
            //mon.IsActive = true;
            var isDeleted = 0;
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
                var groupUbigeo = 113;
                var query = (from ser in dbContext.service

                             join prot in dbContext.protocol on ser.v_ProtocolId equals prot.v_ProtocolId into prot_join
                             from prot in prot_join.DefaultIfEmpty()

                             join org in dbContext.organization on prot.v_CustomerOrganizationId equals org.v_OrganizationId into org_join
                             from org in org_join.DefaultIfEmpty()



                             join per in dbContext.person on ser.v_PersonId equals per.v_PersonId into per_join
                             from per in per_join.DefaultIfEmpty()

                             join orgEmp in dbContext.hcactualizado on per.v_DocNumber equals orgEmp.Dni into orgEmp_join
                             from orgEmp in orgEmp_join.DefaultIfEmpty()

                             join M in dbContext.systemparameter on new { a = per.i_SexTypeId.Value, b = 100 }
                                 equals new { a = M.i_ParameterId, b = M.i_GroupId } into M_join
                             from M in M_join.DefaultIfEmpty()

                             // Ubigeo de la persona *******************************************************
                             join dep in dbContext.datahierarchy on new { a = per.i_DepartmentId.Value, b = groupUbigeo }
                                                  equals new { a = dep.i_ItemId, b = dep.i_GroupId } into dep_join
                             from dep in dep_join.DefaultIfEmpty()

                             join prov in dbContext.datahierarchy on new { a = per.i_ProvinceId.Value, b = groupUbigeo }
                                                   equals new { a = prov.i_ItemId, b = prov.i_GroupId } into prov_join
                             from prov in prov_join.DefaultIfEmpty()

                             join distri in dbContext.datahierarchy on new { a = per.i_DistrictId.Value, b = groupUbigeo }
                                                   equals new { a = distri.i_ItemId, b = distri.i_GroupId } into distri_join
                             from distri in distri_join.DefaultIfEmpty()
                             //*********************************************************************************************

                             join su in dbContext.systemuser on 11 equals su.i_SystemUserId into su_join
                             from su in su_join.DefaultIfEmpty()

                             join pr in dbContext.professional on su.v_PersonId equals pr.v_PersonId into pr_join
                             from pr in pr_join.DefaultIfEmpty()

                             join E in dbContext.servicecomponent on new { a = pstrServiceId, b = Constants.COVID_ID }
                                                                  equals new { a = E.v_ServiceId, b = E.v_ComponentId }

                             // Usuario Medico Evaluador / Medico Aprobador ****************************
                             join me in dbContext.systemuser on E.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
                             from me in me_join.DefaultIfEmpty()

                             join per1 in dbContext.person on me.v_PersonId equals per1.v_PersonId into per1_join
                             from per1 in per1_join.DefaultIfEmpty()


                             let varDpto = dep.v_Value1 == null ? "" : dep.v_Value1
                             let varProv = prov.v_Value1 == null ? "" : prov.v_Value1
                             let varDistri = distri.v_Value1 == null ? "" : distri.v_Value1

                             where (ser.v_ServiceId == pstrServiceId) &&
                                   (ser.i_IsDeleted == isDeleted)

                             select new ReportCertificadoCovid
                             {
                                 FechaActual = ser.d_ServiceDate.Value,
                                 Empleador = orgEmp.EmpresaEmpleadora,// org.v_Name,
                                 EmpresaPrincipal = org.v_Name,
                                 Sede = ser.v_Sede,
                                 Area = "----",
                                 Puesto = per.v_CurrentOccupation,
                                 NroIdentificacionSalus = per1.v_DocNumber,
                                 ApellidoPaternoSalus = per1.v_FirstLastName,
                                 ApellidoMaternoSalus = per1.v_SecondLastName,
                                 NombresSalus = per1.v_FirstName,
                                 TipoDoc = "DNI",
                                 NroDoc = per.v_DocNumber,
                                 ApellidoPaterno = per.v_FirstLastName,
                                 ApellidoMaterno = per.v_SecondLastName,
                                 Nombres = per.v_FirstName,
                                 FechaNacimiento = per.d_Birthdate.Value,
                                 Sexo = M.v_Value1,
                                 Celular = per.v_TelephoneNumber,
                                 Direccion = per.v_AdressLocation,
                                 Departamento = varDistri + "-" + varProv + "-" + varDpto, // Santa Anita - Lima - Lima,
                                 Firma = pr.b_SignatureImage,
                                 AptitudId = ser.i_AptitudeStatusId.Value,

                                 NombresCompletosTrabajador = per.v_FirstName + " " + per.v_FirstLastName + " " + per.v_SecondLastName,
                                 ServicioId = ser.v_ServiceId,
                                 Protocolo = prot.v_Name
                             });


                var covid = ValoresComponente(pstrServiceId, Constants.COVID_ID);

                var celulares = query.FirstOrDefault().Celular;
                var celular1 = "";
                var celular2 = "";
                var celularArr = celulares.Split(',');
                if (celularArr.Length > 0)
                {
                    celular1 = celulares.Split(',')[0];
                }

                if (celularArr.Length > 1)
                {
                    celular2 = celulares.Split(',')[1];
                }
                
                var q = (from a in query.ToList()
                         select new ReportCertificadoCovid
                         {
                             FechaActual = a.FechaActual,
                             Empleador = a.Empleador == null ? "TERCEROS" : a.Empleador,
                             EmpresaPrincipal = a.EmpresaPrincipal,
                             Sede = a.Sede,
                             Area = a.Area,
                             Puesto = a.Puesto,
                             NroIdentificacionSalus = a.NroIdentificacionSalus,
                             ApellidoPaternoSalus = a.ApellidoPaternoSalus,
                             ApellidoMaternoSalus = a.ApellidoMaternoSalus,
                             NombresSalus = a.NombresSalus,
                             TipoDoc = a.TipoDoc,
                             NroDoc = a.NroDoc,
                             ApellidoPaterno = a.ApellidoPaterno,
                             ApellidoMaterno = a.ApellidoMaterno,
                             Nombres = a.Nombres,
                             Edad = GetAge(a.FechaNacimiento).ToString(),
                             Sexo = a.Sexo,
                             Celular = celular1,
                             OtroTelefono = celular2,
                             Domicilio = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_DOMICILIO_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_DOMICILIO_ID).v_Value1,
                             Direccion = a.Direccion,
                             Departamento = a.Departamento,
                             EspersonalSalud = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_ES_PERSONAL_SALUD_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_ES_PERSONAL_SALUD_ID).v_Value1,
                             Profesion = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_PROFESION_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_PROFESION_ID).v_Value1,
                             Tos = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_TOS_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_TOS_ID).v_Value1,
                             DolorGarganta = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_DOLOR_GARGANTA_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_DOLOR_GARGANTA_ID).v_Value1,
                             CongestionNasal = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_CONGESTION_NASAL_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_CONGESTION_NASAL_ID).v_Value1,
                             DificultadRespiratoria = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_DIFIC_RESPIRA_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_DIFIC_RESPIRA_ID).v_Value1,
                             Fiebre = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_FIEBRE_ESCALOFRIO_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_FIEBRE_ESCALOFRIO_ID).v_Value1,
                             Malestar = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_MALESTAR_GENERAL_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_MALESTAR_GENERAL_ID).v_Value1,
                             FechaSintomas = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_INICIO_SINTOMAS_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_INICIO_SINTOMAS_ID).v_Value1,
                             Muscular = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_MUSCULAR_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_MUSCULAR_ID).v_Value1,
                             Abdominal = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_ABDOMINAL_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_ABDOMINAL_ID).v_Value1,
                             Pecho = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_PECHO_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_PECHO_ID).v_Value1,
                             Articulaciones = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_ARTICULACIONES_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_ARTICULACIONES_ID).v_Value1,

                             TieneSintomas = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_TIENE_SINTOMAS_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_TIENE_SINTOMAS_ID).v_Value1,

                             ProcedenciaSolicitud = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_PROCEDENCIA_SOLICITUD_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_PROCEDENCIA_SOLICITUD_ID).v_Value1,
                             
                             
                             ResultadoPrueba = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_RES_1_PRUEBA_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_RES_1_PRUEBA_ID).v_Value1,
                             PrimerResultadoCovid = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_RES_1_PRUEBA_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_RES_1_PRUEBA_ID).v_Value1Name,

                             ResultadoSegundaPrueba = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_RES_2_PRUEBA_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_RES_2_PRUEBA_ID).v_Value1,
                             SegundoResultadoCovid = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_RES_2_PRUEBA_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_RES_2_PRUEBA_ID).v_Value1Name,
                             

                             Seveidad = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_CLASIFICACION_CLINICA_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_CLASIFICACION_CLINICA_ID).v_Value1,

                             Mayor60 = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_MAYOR_60_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_MAYOR_60_ID).v_Value1,
                             HipertencionArterial = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_HIPERTENCION_ARTERIAL_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_HIPERTENCION_ARTERIAL_ID).v_Value1,
                             EnfCardio = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_ENF_CARDIO_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_ENF_CARDIO_ID).v_Value1,

                             Diabetes = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_DIABETES_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_DIABETES_ID).v_Value1,
                             Obesidad = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_OBESIDAD_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_OBESIDAD_ID).v_Value1,
                             Asma = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_ASMA_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_ASMA_ID).v_Value1,

                             EnfPulmonarCronica = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_ENF_PULMONAR_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_ENF_PULMONAR_ID).v_Value1,
                             InsuficienciaRenal = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_INSUFICIENCIA_RENAL_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_INSUFICIENCIA_RENAL_ID).v_Value1,
                             EbfInmunosupresor = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_INMUNOSUPRESOR_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_INMUNOSUPRESOR_ID).v_Value1,

                             Cancer = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_CANCER_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_CANCER_ID).v_Value1,
                             Embarazo = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_EMBARAZO_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_EMBARAZO_ID).v_Value1,
                             PersonalSalud = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_PERSONAL_SALUD_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_PERSONAL_SALUD_ID).v_Value1,

                             Pcr = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.CONTINUIDAD_DE_LA_ATENCION_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.CONTINUIDAD_DE_LA_ATENCION_ID).v_Value1,

                             SeguimientoProcede = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_PROCEDENCIA_SOLICITUD_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_PROCEDENCIA_SOLICITUD_ID).v_Value1,

                             Diarrea = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_DIARREA_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_DIARREA_ID).v_Value1,
                             Nauseas = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_NAUSEAS_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_NAUSEAS_ID).v_Value1,
                             Cefalea = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_CEFALEA_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_CEFALEA_ID).v_Value1,
                             Irritabilidad = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_IRRITABILIDAD_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_IRRITABILIDAD_ID).v_Value1,
                             Dolor = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_DOLOR_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_DOLOR_ID).v_Value1,
                             Otros = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_OTROS_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_OTROS_ID).v_Value1,

                             Aptitud = a.AptitudId.ToString(),

                             Firma = a.Firma,

                             NombresCompletosTrabajador = a.NombresCompletosTrabajador,
                             ServicioId = a.ServicioId,
                             Protocolo = a.Protocolo,
                             Origen = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_PROCEDENCIA_SOLICITUD_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_PROCEDENCIA_SOLICITUD_ID).v_Value1Name,
                             TomaMuestra = "LABORATORIO",
                             ValorIgM = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_RES_1_PRUEBA_ID) == null ? "" : obtenerValorIGM(covid.Find(p => p.v_ComponentFieldId == Constants.COVID_RES_1_PRUEBA_ID).v_Value1),
                             ValoIgG = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_RES_1_PRUEBA_ID) == null ? "" : obtenerValorIGg(covid.Find(p => p.v_ComponentFieldId == Constants.COVID_RES_1_PRUEBA_ID).v_Value1)
                         }).ToList();


                pobjOperationResult.Success = 1;
                return q;
            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
                return null;
            }
        }

        public List<ReportCertificadoCovid> GetAntigenoResumido(ref OperationResult pobjOperationResult, string pstrServiceId)
        {
            //mon.IsActive = true;
            var isDeleted = 0;
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
                var groupUbigeo = 113;
                var query = (from ser in dbContext.service

                             join prot in dbContext.protocol on ser.v_ProtocolId equals prot.v_ProtocolId into prot_join
                             from prot in prot_join.DefaultIfEmpty()

                             join org in dbContext.organization on prot.v_CustomerOrganizationId equals org.v_OrganizationId into org_join
                             from org in org_join.DefaultIfEmpty()



                             join per in dbContext.person on ser.v_PersonId equals per.v_PersonId into per_join
                             from per in per_join.DefaultIfEmpty()

                             join orgEmp in dbContext.hcactualizado on per.v_DocNumber equals orgEmp.Dni into orgEmp_join
                             from orgEmp in orgEmp_join.DefaultIfEmpty()

                             join M in dbContext.systemparameter on new { a = per.i_SexTypeId.Value, b = 100 }
                                 equals new { a = M.i_ParameterId, b = M.i_GroupId } into M_join
                             from M in M_join.DefaultIfEmpty()

                             // Ubigeo de la persona *******************************************************
                             join dep in dbContext.datahierarchy on new { a = per.i_DepartmentId.Value, b = groupUbigeo }
                                                  equals new { a = dep.i_ItemId, b = dep.i_GroupId } into dep_join
                             from dep in dep_join.DefaultIfEmpty()

                             join prov in dbContext.datahierarchy on new { a = per.i_ProvinceId.Value, b = groupUbigeo }
                                                   equals new { a = prov.i_ItemId, b = prov.i_GroupId } into prov_join
                             from prov in prov_join.DefaultIfEmpty()

                             join distri in dbContext.datahierarchy on new { a = per.i_DistrictId.Value, b = groupUbigeo }
                                                   equals new { a = distri.i_ItemId, b = distri.i_GroupId } into distri_join
                             from distri in distri_join.DefaultIfEmpty()
                             //*********************************************************************************************

                             join su in dbContext.systemuser on 11 equals su.i_SystemUserId into su_join
                             from su in su_join.DefaultIfEmpty()

                             join pr in dbContext.professional on su.v_PersonId equals pr.v_PersonId into pr_join
                             from pr in pr_join.DefaultIfEmpty()

                             join E in dbContext.servicecomponent on new { a = pstrServiceId, b = Constants.ANTIGENOS_ID }
                                                                  equals new { a = E.v_ServiceId, b = E.v_ComponentId }

                             // Usuario Medico Evaluador / Medico Aprobador ****************************
                             join me in dbContext.systemuser on E.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
                             from me in me_join.DefaultIfEmpty()

                             join per1 in dbContext.person on me.v_PersonId equals per1.v_PersonId into per1_join
                             from per1 in per1_join.DefaultIfEmpty()


                             let varDpto = dep.v_Value1 == null ? "" : dep.v_Value1
                             let varProv = prov.v_Value1 == null ? "" : prov.v_Value1
                             let varDistri = distri.v_Value1 == null ? "" : distri.v_Value1

                             where (ser.v_ServiceId == pstrServiceId) &&
                                   (ser.i_IsDeleted == isDeleted)

                             select new ReportCertificadoCovid
                             {
                                 FechaActual = ser.d_ServiceDate.Value,
                                 Empleador = ser.EmpresaEmpleadora,//orgEmp.EmpresaEmpleadora,// org.v_Name,
                                 EmpresaPrincipal = org.v_Name,
                                 Sede = ser.v_Sede,
                                 Area = "----",
                                 Puesto = per.v_CurrentOccupation,
                                 NroIdentificacionSalus = per1.v_DocNumber,
                                 ApellidoPaternoSalus = per1.v_FirstLastName,
                                 ApellidoMaternoSalus = per1.v_SecondLastName,
                                 NombresSalus = per1.v_FirstName,
                                 TipoDoc = "DNI",
                                 NroDoc = per.v_DocNumber,
                                 ApellidoPaterno = per.v_FirstLastName,
                                 ApellidoMaterno = per.v_SecondLastName,
                                 Nombres = per.v_FirstName,
                                 FechaNacimiento = per.d_Birthdate.Value,
                                 Sexo = M.v_Value1,
                                 Celular = per.v_TelephoneNumber,
                                 Direccion = per.v_AdressLocation,
                                 Departamento = varDistri + "-" + varProv + "-" + varDpto, // Santa Anita - Lima - Lima,
                                 Firma = pr.b_SignatureImage,
                                 AptitudId = ser.i_AptitudeStatusId.Value,

                                 NombresCompletosTrabajador = per.v_FirstName + " " + per.v_FirstLastName + " " + per.v_SecondLastName,
                                 ServicioId = ser.v_ServiceId,
                                 Protocolo = prot.v_Name
                             });


                var covid = ValoresComponente(pstrServiceId, Constants.ANTIGENOS_ID);

                var celulares = query.FirstOrDefault().Celular;
                var celular1 = "";
                var celular2 = "";
                var celularArr = celulares.Split(',');
                if (celularArr.Length > 0)
                {
                    celular1 = celulares.Split(',')[0];
                }

                if (celularArr.Length > 1)
                {
                    celular2 = celulares.Split(',')[1];
                }

                var q = (from a in query.ToList()
                         select new ReportCertificadoCovid
                         {
                             FechaActual = a.FechaActual,
                             Empleador = a.Empleador == null ? "TERCEROS" : a.Empleador,
                             EmpresaPrincipal = a.EmpresaPrincipal,
                             Sede = a.Sede,
                             Area = a.Area,
                             Puesto = a.Puesto,
                             NroIdentificacionSalus = a.NroIdentificacionSalus,
                             ApellidoPaternoSalus = a.ApellidoPaternoSalus,
                             ApellidoMaternoSalus = a.ApellidoMaternoSalus,
                             NombresSalus = a.NombresSalus,
                             TipoDoc = a.TipoDoc,
                             NroDoc = a.NroDoc,
                             ApellidoPaterno = a.ApellidoPaterno,
                             ApellidoMaterno = a.ApellidoMaterno,
                             Nombres = a.Nombres,
                             Edad = GetAge(a.FechaNacimiento).ToString(),
                             Sexo = a.Sexo,
                             Celular = celular1,
                             OtroTelefono = celular2,
                             Domicilio = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_DOMICILIO_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_DOMICILIO_ID).v_Value1,
                             Direccion = a.Direccion,
                             Departamento = a.Departamento,
                             EspersonalSalud = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_ES_PERSONAL_SALUD_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_ES_PERSONAL_SALUD_ID).v_Value1,
                             Profesion = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_PROFESION_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_PROFESION_ID).v_Value1,
                             Tos = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_TOS_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_TOS_ID).v_Value1,
                             DolorGarganta = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_DOLOR_GARGANTA_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_DOLOR_GARGANTA_ID).v_Value1,
                             CongestionNasal = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_CONGESTION_NASAL_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_CONGESTION_NASAL_ID).v_Value1,
                             DificultadRespiratoria = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_DIFIC_RESPIRA_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_DIFIC_RESPIRA_ID).v_Value1,
                             Fiebre = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_FIEBRE_ESCALOFRIO_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_FIEBRE_ESCALOFRIO_ID).v_Value1,
                             Malestar = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_MALESTAR_GENERAL_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_MALESTAR_GENERAL_ID).v_Value1,
                             FechaSintomas = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_INICIO_SINTOMAS_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_INICIO_SINTOMAS_ID).v_Value1,
                             Muscular = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_MUSCULAR_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_MUSCULAR_ID).v_Value1,
                             Abdominal = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_ABDOMINAL_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_ABDOMINAL_ID).v_Value1,
                             Pecho = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_PECHO_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_PECHO_ID).v_Value1,
                             Articulaciones = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_ARTICULACIONES_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_ARTICULACIONES_ID).v_Value1,

                             TieneSintomas = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_TIENE_SINTOMAS_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_TIENE_SINTOMAS_ID).v_Value1,

                             ProcedenciaSolicitud = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_PROCEDENCIA_SOLICITUD_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_PROCEDENCIA_SOLICITUD_ID).v_Value1,

                             ResultadoPrueba = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_RES_1_PRUEBA_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_RES_1_PRUEBA_ID).v_Value1Name,
                             PrimerResultadoCovid = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_RES_1_PRUEBA_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_RES_1_PRUEBA_ID).v_Value1Name,

                             ResultadoSegundaPrueba = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_RES_2_PRUEBA_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_RES_2_PRUEBA_ID).v_Value1,
                             SegundoResultadoCovid = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_RES_2_PRUEBA_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_RES_2_PRUEBA_ID).v_Value1Name,
                             
                             Seveidad = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_CLASIFICACION_CLINICA_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_CLASIFICACION_CLINICA_ID).v_Value1,

                             Mayor60 = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_MAYOR_60_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_MAYOR_60_ID).v_Value1,
                             HipertencionArterial = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_HIPERTENCION_ARTERIAL_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_HIPERTENCION_ARTERIAL_ID).v_Value1,
                             EnfCardio = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_ENF_CARDIO_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_ENF_CARDIO_ID).v_Value1,

                             Diabetes = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_DIABETES_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_DIABETES_ID).v_Value1,
                             Obesidad = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_OBESIDAD_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_OBESIDAD_ID).v_Value1,
                             Asma = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_ASMA_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_ASMA_ID).v_Value1,

                             EnfPulmonarCronica = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_ENF_PULMONAR_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_ENF_PULMONAR_ID).v_Value1,
                             InsuficienciaRenal = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_INSUFICIENCIA_RENAL_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_INSUFICIENCIA_RENAL_ID).v_Value1,
                             EbfInmunosupresor = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_INMUNOSUPRESOR_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_INMUNOSUPRESOR_ID).v_Value1,

                             Cancer = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_CANCER_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_CANCER_ID).v_Value1,
                             Embarazo = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_EMBARAZO_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_EMBARAZO_ID).v_Value1,
                             PersonalSalud = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_PERSONAL_SALUD_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_PERSONAL_SALUD_ID).v_Value1,

                             Pcr = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.CONTINUIDAD_DE_LA_ATENCION_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.CONTINUIDAD_DE_LA_ATENCION_ID).v_Value1,

                             SeguimientoProcede = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_PROCEDENCIA_SOLICITUD_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_PROCEDENCIA_SOLICITUD_ID).v_Value1,

                             Diarrea = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_DIARREA_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_DIARREA_ID).v_Value1,
                             Nauseas = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_NAUSEAS_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_NAUSEAS_ID).v_Value1,
                             Cefalea = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_CEFALEA_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_CEFALEA_ID).v_Value1,
                             Irritabilidad = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_IRRITABILIDAD_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_IRRITABILIDAD_ID).v_Value1,
                             Dolor = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_DOLOR_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_DOLOR_ID).v_Value1,                             

                             Aptitud = a.AptitudId.ToString(),

                             Firma = a.Firma,

                             NombresCompletosTrabajador = a.NombresCompletosTrabajador,
                             ServicioId = a.ServicioId,
                             Protocolo = a.Protocolo,
                             Origen = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_PROCEDENCIA_SOLICITUD_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_PROCEDENCIA_SOLICITUD_ID).v_Value1Name,
                             TomaMuestra = "LABORATORIO",
                             ValorIgM = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_RES_1_PRUEBA_ID) == null ? "" : obtenerValorIGM(covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_RES_1_PRUEBA_ID).v_Value1),
                             ValoIgG = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_RES_1_PRUEBA_ID) == null ? "" : obtenerValorIGg(covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_RES_1_PRUEBA_ID).v_Value1)
                         }).ToList();


                pobjOperationResult.Success = 1;
                return q;
            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
                return null;
            }
        }

        public List<ReportCertificadoCovid> GetAntigenoResumidoForWin(ref OperationResult pobjOperationResult, string pstrServiceId)
        {
            //mon.IsActive = true;
            var isDeleted = 0;
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
                var groupUbigeo = 113;
                var query = (from ser in dbContext.service

                             join prot in dbContext.protocol on ser.v_ProtocolId equals prot.v_ProtocolId into prot_join
                             from prot in prot_join.DefaultIfEmpty()

                             join org in dbContext.organization on prot.v_CustomerOrganizationId equals org.v_OrganizationId into org_join
                             from org in org_join.DefaultIfEmpty()



                             join per in dbContext.person on ser.v_PersonId equals per.v_PersonId into per_join
                             from per in per_join.DefaultIfEmpty()

                             join orgEmp in dbContext.hcactualizado on per.v_DocNumber equals orgEmp.Dni into orgEmp_join
                             from orgEmp in orgEmp_join.DefaultIfEmpty()

                             join M in dbContext.systemparameter on new { a = per.i_SexTypeId.Value, b = 100 }
                                 equals new { a = M.i_ParameterId, b = M.i_GroupId } into M_join
                             from M in M_join.DefaultIfEmpty()

                             // Ubigeo de la persona *******************************************************
                             join dep in dbContext.datahierarchy on new { a = per.i_DepartmentId.Value, b = groupUbigeo }
                                                  equals new { a = dep.i_ItemId, b = dep.i_GroupId } into dep_join
                             from dep in dep_join.DefaultIfEmpty()

                             join prov in dbContext.datahierarchy on new { a = per.i_ProvinceId.Value, b = groupUbigeo }
                                                   equals new { a = prov.i_ItemId, b = prov.i_GroupId } into prov_join
                             from prov in prov_join.DefaultIfEmpty()

                             join distri in dbContext.datahierarchy on new { a = per.i_DistrictId.Value, b = groupUbigeo }
                                                   equals new { a = distri.i_ItemId, b = distri.i_GroupId } into distri_join
                             from distri in distri_join.DefaultIfEmpty()
                             //*********************************************************************************************

                             join su in dbContext.systemuser on 11 equals su.i_SystemUserId into su_join
                             from su in su_join.DefaultIfEmpty()

                             join pr in dbContext.professional on su.v_PersonId equals pr.v_PersonId into pr_join
                             from pr in pr_join.DefaultIfEmpty()

                             join E in dbContext.servicecomponent on new { a = pstrServiceId, b = Constants.ANTIGENOS_ID }
                                                                  equals new { a = E.v_ServiceId, b = E.v_ComponentId }

                             // Usuario Medico Evaluador / Medico Aprobador ****************************
                             join me in dbContext.systemuser on E.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
                             from me in me_join.DefaultIfEmpty()

                             join per1 in dbContext.person on me.v_PersonId equals per1.v_PersonId into per1_join
                             from per1 in per1_join.DefaultIfEmpty()


                             let varDpto = dep.v_Value1 == null ? "" : dep.v_Value1
                             let varProv = prov.v_Value1 == null ? "" : prov.v_Value1
                             let varDistri = distri.v_Value1 == null ? "" : distri.v_Value1

                             where (ser.v_ServiceId == pstrServiceId) &&
                                   (ser.i_IsDeleted == isDeleted)

                             select new ReportCertificadoCovid
                             {
                                 FechaActual = ser.d_ServiceDate.Value,
                                 Empleador = ser.EmpresaEmpleadora,//orgEmp.EmpresaEmpleadora,// org.v_Name,
                                 EmpresaPrincipal = org.v_Name,
                                 Sede = ser.v_Sede,
                                 Area = "----",
                                 Puesto = per.v_CurrentOccupation,
                                 NroIdentificacionSalus = per1.v_DocNumber,
                                 ApellidoPaternoSalus = per1.v_FirstLastName,
                                 ApellidoMaternoSalus = per1.v_SecondLastName,
                                 NombresSalus = per1.v_FirstName,
                                 TipoDoc = "DNI",
                                 NroDoc = per.v_DocNumber,
                                 ApellidoPaterno = per.v_FirstLastName,
                                 ApellidoMaterno = per.v_SecondLastName,
                                 Nombres = per.v_FirstName,
                                 FechaNacimiento = per.d_Birthdate.Value,
                                 Sexo = M.v_Value1,
                                 Celular = per.v_TelephoneNumber,
                                 Direccion = per.v_AdressLocation,
                                 Departamento = varDistri + "-" + varProv + "-" + varDpto, // Santa Anita - Lima - Lima,
                                 Firma = pr.b_SignatureImage,
                                 AptitudId = ser.i_AptitudeStatusId.Value,

                                 NombresCompletosTrabajador = per.v_FirstName + " " + per.v_FirstLastName + " " + per.v_SecondLastName,
                                 ServicioId = ser.v_ServiceId,
                                 Protocolo = prot.v_Name
                             });


                var covid = ValoresComponente(pstrServiceId, Constants.GRUPO_Y_FACTOR_SANGUINEO_ID);

                var celulares = query.FirstOrDefault().Celular;
                var celular1 = "";
                var celular2 = "";
                var celularArr = celulares.Split(',');
                if (celularArr.Length > 0)
                {
                    celular1 = celulares.Split(',')[0];
                }

                if (celularArr.Length > 1)
                {
                    celular2 = celulares.Split(',')[1];
                }

                var q = (from a in query.ToList()
                         select new ReportCertificadoCovid
                         {
                             FechaActual = a.FechaActual,
                             Empleador = a.Empleador == null ? "TERCEROS" : a.Empleador,
                             EmpresaPrincipal = a.EmpresaPrincipal,
                             Sede = a.Sede,
                             Area = a.Area,
                             Puesto = a.Puesto,
                             NroIdentificacionSalus = a.NroIdentificacionSalus,
                             ApellidoPaternoSalus = a.ApellidoPaternoSalus,
                             ApellidoMaternoSalus = a.ApellidoMaternoSalus,
                             NombresSalus = a.NombresSalus,
                             TipoDoc = a.TipoDoc,
                             NroDoc = a.NroDoc,
                             ApellidoPaterno = a.ApellidoPaterno,
                             ApellidoMaterno = a.ApellidoMaterno,
                             Nombres = a.Nombres,
                             Edad = GetAge(a.FechaNacimiento).ToString(),
                             Sexo = a.Sexo,
                             Celular = celular1,
                             OtroTelefono = celular2,
                             Domicilio = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_DOMICILIO_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_DOMICILIO_ID).v_Value1,
                             Direccion = a.Direccion,
                             Departamento = a.Departamento,
                             EspersonalSalud = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_ES_PERSONAL_SALUD_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_ES_PERSONAL_SALUD_ID).v_Value1,
                             Profesion = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_PROFESION_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_PROFESION_ID).v_Value1,
                             Tos = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_TOS_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_TOS_ID).v_Value1,
                             DolorGarganta = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_DOLOR_GARGANTA_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_DOLOR_GARGANTA_ID).v_Value1,
                             CongestionNasal = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_CONGESTION_NASAL_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_CONGESTION_NASAL_ID).v_Value1,
                             DificultadRespiratoria = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_DIFIC_RESPIRA_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_DIFIC_RESPIRA_ID).v_Value1,
                             Fiebre = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_FIEBRE_ESCALOFRIO_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_FIEBRE_ESCALOFRIO_ID).v_Value1,
                             Malestar = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_MALESTAR_GENERAL_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_MALESTAR_GENERAL_ID).v_Value1,
                             FechaSintomas = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_INICIO_SINTOMAS_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_INICIO_SINTOMAS_ID).v_Value1,
                             Muscular = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_MUSCULAR_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_MUSCULAR_ID).v_Value1,
                             Abdominal = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_ABDOMINAL_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_ABDOMINAL_ID).v_Value1,
                             Pecho = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_PECHO_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_PECHO_ID).v_Value1,
                             Articulaciones = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_ARTICULACIONES_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_ARTICULACIONES_ID).v_Value1,

                             TieneSintomas = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_TIENE_SINTOMAS_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_TIENE_SINTOMAS_ID).v_Value1,

                             ProcedenciaSolicitud = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_PROCEDENCIA_SOLICITUD_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_PROCEDENCIA_SOLICITUD_ID).v_Value1,

                             ResultadoPrueba = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_RES_1_PRUEBA_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_RES_1_PRUEBA_ID).v_Value1Name,
                             PrimerResultadoCovid = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_RES_1_PRUEBA_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_RES_1_PRUEBA_ID).v_Value1Name,

                             ResultadoSegundaPrueba = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_RES_2_PRUEBA_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_RES_2_PRUEBA_ID).v_Value1,
                             SegundoResultadoCovid = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_RES_2_PRUEBA_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_RES_2_PRUEBA_ID).v_Value1Name,

                             Seveidad = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_CLASIFICACION_CLINICA_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_CLASIFICACION_CLINICA_ID).v_Value1,

                             Mayor60 = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_MAYOR_60_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_MAYOR_60_ID).v_Value1,
                             HipertencionArterial = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_HIPERTENCION_ARTERIAL_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_HIPERTENCION_ARTERIAL_ID).v_Value1,
                             EnfCardio = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_ENF_CARDIO_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_ENF_CARDIO_ID).v_Value1,

                             Diabetes = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_DIABETES_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_DIABETES_ID).v_Value1,
                             Obesidad = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_OBESIDAD_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_OBESIDAD_ID).v_Value1,
                             Asma = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_ASMA_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_ASMA_ID).v_Value1,

                             EnfPulmonarCronica = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_ENF_PULMONAR_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_ENF_PULMONAR_ID).v_Value1,
                             InsuficienciaRenal = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_INSUFICIENCIA_RENAL_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_INSUFICIENCIA_RENAL_ID).v_Value1,
                             EbfInmunosupresor = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_INMUNOSUPRESOR_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_INMUNOSUPRESOR_ID).v_Value1,

                             Cancer = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_CANCER_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_CANCER_ID).v_Value1,
                             Embarazo = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_EMBARAZO_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_EMBARAZO_ID).v_Value1,
                             PersonalSalud = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_PERSONAL_SALUD_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_PERSONAL_SALUD_ID).v_Value1,

                             Pcr = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.CONTINUIDAD_DE_LA_ATENCION_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.CONTINUIDAD_DE_LA_ATENCION_ID).v_Value1,

                             SeguimientoProcede = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_PROCEDENCIA_SOLICITUD_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_PROCEDENCIA_SOLICITUD_ID).v_Value1,

                             Diarrea = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_DIARREA_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_DIARREA_ID).v_Value1,
                             Nauseas = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_NAUSEAS_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_NAUSEAS_ID).v_Value1,
                             Cefalea = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_CEFALEA_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_CEFALEA_ID).v_Value1,
                             Irritabilidad = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_IRRITABILIDAD_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_IRRITABILIDAD_ID).v_Value1,
                             Dolor = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_DOLOR_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_DOLOR_ID).v_Value1,

                             Aptitud = a.AptitudId.ToString(),

                             Firma = a.Firma,

                             NombresCompletosTrabajador = a.NombresCompletosTrabajador,
                             ServicioId = a.ServicioId,
                             Protocolo = a.Protocolo,
                             Origen = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_PROCEDENCIA_SOLICITUD_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_PROCEDENCIA_SOLICITUD_ID).v_Value1Name,
                             TomaMuestra = "LABORATORIO",
                             ValorIgM = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_RES_1_PRUEBA_ID) == null ? "" : obtenerValorIGM(covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_RES_1_PRUEBA_ID).v_Value1),
                             ValoIgG = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_RES_1_PRUEBA_ID) == null ? "" : obtenerValorIGg(covid.Find(p => p.v_ComponentFieldId == Constants.ANTIGENO_RES_1_PRUEBA_ID).v_Value1)
                         }).ToList();


                pobjOperationResult.Success = 1;
                return q;
            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
                return null;
            }
        }

        private string obtenerValorIGM(string p)
        {
            if (p == "2")
            {
                return "POSITIVO";
            }
            else if (p == "4")
            {
                return "POSITIVO";
            }
            else
            {
                return "NEGATIVO";
            }
        }

        private string obtenerValorIGg(string p)
        {
            if (p == "3")
            {
                return "POSITIVO";
            }
            else if (p == "4")
            {
                return "POSITIVO";
            }
            else
            {
                return "NEGATIVO";
            }
        }

        //public List<ReportCertificadoCovid> GetCovid(ref OperationResult pobjOperationResult, string pstrServiceId, string pstrSede)
        //{
        //    //mon.IsActive = true;
        //    var isDeleted = 0;
        //    try
        //    {
        //        SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
        //        var groupUbigeo = 113;
        //        var query = (from ser in dbContext.service

        //                     join prot in dbContext.protocol on ser.v_ProtocolId equals prot.v_ProtocolId into prot_join
        //                     from prot in prot_join.DefaultIfEmpty()

        //                     join org in dbContext.organization on prot.v_CustomerOrganizationId equals org.v_OrganizationId into org_join
        //                     from org in org_join.DefaultIfEmpty()

        //                     join per in dbContext.person on ser.v_PersonId equals per.v_PersonId into per_join
        //                     from per in per_join.DefaultIfEmpty()

        //                     join M in dbContext.systemparameter on new { a = per.i_SexTypeId.Value, b = 100 }
        //                         equals new { a = M.i_ParameterId, b = M.i_GroupId } into M_join
        //                     from M in M_join.DefaultIfEmpty()

        //                     // Ubigeo de la persona *******************************************************
        //                     join dep in dbContext.datahierarchy on new { a = per.i_DepartmentId.Value, b = groupUbigeo }
        //                                          equals new { a = dep.i_ItemId, b = dep.i_GroupId } into dep_join
        //                     from dep in dep_join.DefaultIfEmpty()

        //                     join prov in dbContext.datahierarchy on new { a = per.i_ProvinceId.Value, b = groupUbigeo }
        //                                           equals new { a = prov.i_ItemId, b = prov.i_GroupId } into prov_join
        //                     from prov in prov_join.DefaultIfEmpty()

        //                     join distri in dbContext.datahierarchy on new { a = per.i_DistrictId.Value, b = groupUbigeo }
        //                                           equals new { a = distri.i_ItemId, b = distri.i_GroupId } into distri_join
        //                     from distri in distri_join.DefaultIfEmpty()
        //                     //*********************************************************************************************

        //                     join su in dbContext.systemuser on 11 equals su.i_SystemUserId into su_join
        //                     from su in su_join.DefaultIfEmpty()

        //                     join pr in dbContext.professional on su.v_PersonId equals pr.v_PersonId into pr_join
        //                     from pr in pr_join.DefaultIfEmpty()

        //                     join E in dbContext.servicecomponent on new { a = pstrServiceId, b = Constants.COVID_ID }
        //                                                          equals new { a = E.v_ServiceId, b = E.v_ComponentId }

        //                     // Usuario Medico Evaluador / Medico Aprobador ****************************
        //                     join me in dbContext.systemuser on E.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
        //                     from me in me_join.DefaultIfEmpty()

        //                     join per1 in dbContext.person on me.v_PersonId equals per1.v_PersonId into per1_join
        //                     from per1 in per1_join.DefaultIfEmpty()


        //                     let varDpto = dep.v_Value1 == null ? "" : dep.v_Value1
        //                     let varProv = prov.v_Value1 == null ? "" : prov.v_Value1
        //                     let varDistri = distri.v_Value1 == null ? "" : distri.v_Value1

        //                     where (ser.v_ServiceId == pstrServiceId) &&
        //                           (ser.i_IsDeleted == isDeleted)

        //                     select new ReportCertificadoCovid
        //                     {
        //                         FechaActual = ser.d_ServiceDate.Value,
        //                         Empleador = org.v_Name,
        //                         EmpresaPrincipal = org.v_Name,
        //                         Sede = pstrSede,
        //                         Area = "----",
        //                         Puesto = per.v_CurrentOccupation,
        //                         NroIdentificacionSalus = per1.v_DocNumber,
        //                         ApellidoPaternoSalus = per1.v_FirstLastName,
        //                         ApellidoMaternoSalus = per1.v_SecondLastName,
        //                         NombresSalus = per1.v_FirstName,
        //                         TipoDoc = "DNI",
        //                         NroDoc = per.v_DocNumber,
        //                         ApellidoPaterno = per.v_FirstLastName,
        //                         ApellidoMaterno = per.v_SecondLastName,
        //                         Nombres = per.v_FirstName,
        //                         FechaNacimiento = per.d_Birthdate.Value,
        //                         Sexo = M.v_Value1,
        //                         Celular = per.v_TelephoneNumber,
        //                         Direccion = per.v_AdressLocation,
        //                         Departamento = varDistri + "-" + varProv + "-" + varDpto, // Santa Anita - Lima - Lima,
        //                         Firma = pr.b_SignatureImage,
        //                         AptitudId = ser.i_AptitudeStatusId.Value
        //                     });


        //        var covid = ValoresComponente(pstrServiceId, Constants.COVID_ID);

        //        var celulares = query.FirstOrDefault().Celular;
        //        var celular1 = "";
        //        var celular2 = "";

        //        celular1 = celulares.Split(',')[0];
        //        if (celulares.Length > 12)
        //        {
        //            celular2 = celulares.Split(',')[1];
        //        }

        //        var q = (from a in query.ToList()
        //                 select new ReportCertificadoCovid
        //                 {
        //                     FechaActual = a.FechaActual,
        //                     Empleador = a.Empleador,
        //                     EmpresaPrincipal = a.EmpresaPrincipal,
        //                     Sede = a.Sede,
        //                     Area = a.Area,
        //                     Puesto = a.Puesto,
        //                     NroIdentificacionSalus = a.NroIdentificacionSalus,
        //                     ApellidoPaternoSalus = a.ApellidoPaternoSalus,
        //                     ApellidoMaternoSalus = a.ApellidoMaternoSalus,
        //                     NombresSalus = a.NombresSalus,
        //                     TipoDoc = a.TipoDoc,
        //                     NroDoc = a.NroDoc,
        //                     ApellidoPaterno = a.ApellidoPaterno,
        //                     ApellidoMaterno = a.ApellidoMaterno,
        //                     Nombres = a.Nombres,
        //                     Edad = GetAge(a.FechaNacimiento).ToString(),
        //                     Sexo = a.Sexo,
        //                     Celular = celular1,
        //                     OtroTelefono = celular2,
        //                     Domicilio = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_DOMICILIO_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_DOMICILIO_ID).v_Value1,
        //                     Direccion = a.Direccion,
        //                     Departamento = a.Departamento,
        //                     EspersonalSalud = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_ES_PERSONAL_SALUD_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_ES_PERSONAL_SALUD_ID).v_Value1,
        //                     Profesion = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_PROFESION_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_PROFESION_ID).v_Value1,
        //                     Tos = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_TOS_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_TOS_ID).v_Value1,
        //                     DolorGarganta = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_DOLOR_GARGANTA_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_DOLOR_GARGANTA_ID).v_Value1,
        //                     CongestionNasal = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_CONGESTION_NASAL_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_CONGESTION_NASAL_ID).v_Value1,
        //                     DificultadRespiratoria = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_DIFIC_RESPIRA_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_DIFIC_RESPIRA_ID).v_Value1,
        //                     Fiebre = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_FIEBRE_ESCALOFRIO_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_FIEBRE_ESCALOFRIO_ID).v_Value1,
        //                     Malestar = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_MALESTAR_GENERAL_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_MALESTAR_GENERAL_ID).v_Value1,
        //                     FechaSintomas = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_INICIO_SINTOMAS_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_INICIO_SINTOMAS_ID).v_Value1,
        //                     Muscular = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_MUSCULAR_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_MUSCULAR_ID).v_Value1,
        //                     Abdominal = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_ABDOMINAL_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_ABDOMINAL_ID).v_Value1,
        //                     Pecho = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_PECHO_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_PECHO_ID).v_Value1,
        //                     Articulaciones = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_ARTICULACIONES_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_ARTICULACIONES_ID).v_Value1,

        //                     TieneSintomas = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_TIENE_SINTOMAS_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_TIENE_SINTOMAS_ID).v_Value1,

        //                     ProcedenciaSolicitud = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_PROCEDENCIA_SOLICITUD_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_PROCEDENCIA_SOLICITUD_ID).v_Value1,
        //                     ResultadoPrueba = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_RES_1_PRUEBA_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_RES_1_PRUEBA_ID).v_Value1,
        //                     ResultadoSegundaPrueba = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_RES_2_PRUEBA_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_RES_2_PRUEBA_ID).v_Value1,
        //                     Seveidad = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_CLASIFICACION_CLINICA_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_CLASIFICACION_CLINICA_ID).v_Value1,

        //                     Mayor60 = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_MAYOR_60_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_MAYOR_60_ID).v_Value1,
        //                     HipertencionArterial = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_HIPERTENCION_ARTERIAL_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_HIPERTENCION_ARTERIAL_ID).v_Value1,
        //                     EnfCardio = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_ENF_CARDIO_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_ENF_CARDIO_ID).v_Value1,

        //                     Diabetes = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_DIABETES_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_DIABETES_ID).v_Value1,
        //                     Obesidad = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_OBESIDAD_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_OBESIDAD_ID).v_Value1,
        //                     Asma = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_ASMA_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_ASMA_ID).v_Value1,

        //                     EnfPulmonarCronica = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_ENF_PULMONAR_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_ENF_PULMONAR_ID).v_Value1,
        //                     InsuficienciaRenal = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_INSUFICIENCIA_RENAL_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_INSUFICIENCIA_RENAL_ID).v_Value1,
        //                     EbfInmunosupresor = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_INMUNOSUPRESOR_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_INMUNOSUPRESOR_ID).v_Value1,

        //                     Cancer = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_CANCER_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_CANCER_ID).v_Value1,
        //                     Embarazo = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_EMBARAZO_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_EMBARAZO_ID).v_Value1,
        //                     PersonalSalud = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_PERSONAL_SALUD_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_PERSONAL_SALUD_ID).v_Value1,

        //                     Pcr = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.CONTINUIDAD_DE_LA_ATENCION_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.CONTINUIDAD_DE_LA_ATENCION_ID).v_Value1,

        //                     SeguimientoProcede = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_PROCEDENCIA_SOLICITUD_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_PROCEDENCIA_SOLICITUD_ID).v_Value1,
        //                     OtrosSintomas = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_OTROS_SINTOMAS_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_OTROS_SINTOMAS_ID).v_Value1,

        //                     Diarrea = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_DIARREA_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_DIARREA_ID).v_Value1,
        //                     Nauseas = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_NAUSEAS_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_NAUSEAS_ID).v_Value1,
        //                     Cefalea = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_CEFALEA_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_CEFALEA_ID).v_Value1,
        //                     Irritabilidad = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_IRRITABILIDAD_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_IRRITABILIDAD_ID).v_Value1,
        //                     Dolor = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_DOLOR_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_DOLOR_ID).v_Value1,
        //                     Otros = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_OTROS_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_OTROS_ID).v_Value1,
        //                     Aptitud = a.AptitudId.ToString(),

        //                     Firma = a.Firma
        //                 }).ToList();


        //        pobjOperationResult.Success = 1;
        //        return q;
        //    }
        //    catch (Exception ex)
        //    {
        //        pobjOperationResult.Success = 0;
        //        pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
        //        return null;
        //    }
        //}

        //public List<ReportCertificadoCovid> GetCovid(ref OperationResult pobjOperationResult, string pstrServiceId, string pstrSede, byte[] FirmaFicha)
        //{
        //    //mon.IsActive = true;
        //    var isDeleted = 0;
        //    try
        //    {
        //        SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
        //        var groupUbigeo = 113;
        //        var query = (from ser in dbContext.service

        //                     join prot in dbContext.protocol on ser.v_ProtocolId equals prot.v_ProtocolId into prot_join
        //                     from prot in prot_join.DefaultIfEmpty()

        //                     join org in dbContext.organization on prot.v_CustomerOrganizationId equals org.v_OrganizationId into org_join
        //                     from org in org_join.DefaultIfEmpty()

        //                     join per in dbContext.person on ser.v_PersonId equals per.v_PersonId into per_join
        //                     from per in per_join.DefaultIfEmpty()

        //                     join M in dbContext.systemparameter on new { a = per.i_SexTypeId.Value, b = 100 }
        //                         equals new { a = M.i_ParameterId, b = M.i_GroupId } into M_join
        //                     from M in M_join.DefaultIfEmpty()

        //                     // Ubigeo de la persona *******************************************************
        //                     join dep in dbContext.datahierarchy on new { a = per.i_DepartmentId.Value, b = groupUbigeo }
        //                                          equals new { a = dep.i_ItemId, b = dep.i_GroupId } into dep_join
        //                     from dep in dep_join.DefaultIfEmpty()

        //                     join prov in dbContext.datahierarchy on new { a = per.i_ProvinceId.Value, b = groupUbigeo }
        //                                           equals new { a = prov.i_ItemId, b = prov.i_GroupId } into prov_join
        //                     from prov in prov_join.DefaultIfEmpty()

        //                     join distri in dbContext.datahierarchy on new { a = per.i_DistrictId.Value, b = groupUbigeo }
        //                                           equals new { a = distri.i_ItemId, b = distri.i_GroupId } into distri_join
        //                     from distri in distri_join.DefaultIfEmpty()
        //                     //*********************************************************************************************

        //                     join su in dbContext.systemuser on 11 equals su.i_SystemUserId into su_join
        //                     from su in su_join.DefaultIfEmpty()

        //                     join pr in dbContext.professional on su.v_PersonId equals pr.v_PersonId into pr_join
        //                     from pr in pr_join.DefaultIfEmpty()

        //                     join E in dbContext.servicecomponent on new { a = pstrServiceId, b = Constants.COVID_ID }
        //                                                          equals new { a = E.v_ServiceId, b = E.v_ComponentId }

        //                     // Usuario Medico Evaluador / Medico Aprobador ****************************
        //                     join me in dbContext.systemuser on E.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
        //                     from me in me_join.DefaultIfEmpty()

        //                     join per1 in dbContext.person on me.v_PersonId equals per1.v_PersonId into per1_join
        //                     from per1 in per1_join.DefaultIfEmpty()


        //                     let varDpto = dep.v_Value1 == null ? "" : dep.v_Value1
        //                     let varProv = prov.v_Value1 == null ? "" : prov.v_Value1
        //                     let varDistri = distri.v_Value1 == null ? "" : distri.v_Value1

        //                     where (ser.v_ServiceId == pstrServiceId) &&
        //                           (ser.i_IsDeleted == isDeleted)

        //                     select new ReportCertificadoCovid
        //                     {
        //                         FechaActual = ser.d_ServiceDate.Value,
        //                         Empleador = org.v_Name,
        //                         EmpresaPrincipal = org.v_Name,
        //                         Sede = pstrSede,
        //                         Area = "----",
        //                         Puesto = per.v_CurrentOccupation,
        //                         NroIdentificacionSalus = per1.v_DocNumber,
        //                         ApellidoPaternoSalus = per1.v_FirstLastName,
        //                         ApellidoMaternoSalus = per1.v_SecondLastName,
        //                         NombresSalus = per1.v_FirstName,
        //                         TipoDoc = "DNI",
        //                         NroDoc = per.v_DocNumber,
        //                         ApellidoPaterno = per.v_FirstLastName,
        //                         ApellidoMaterno = per.v_SecondLastName,
        //                         Nombres = per.v_FirstName,
        //                         FechaNacimiento = per.d_Birthdate.Value,
        //                         Sexo = M.v_Value1,
        //                         Celular = per.v_TelephoneNumber,
        //                         Direccion = per.v_AdressLocation,
        //                         Departamento = varDistri + "-" + varProv + "-" + varDpto, // Santa Anita - Lima - Lima,
        //                         Firma = pr.b_SignatureImage,
        //                         AptitudId = ser.i_AptitudeStatusId.Value
        //                     });


        //        var covid = ValoresComponente(pstrServiceId, Constants.COVID_ID);

        //        var celulares = query.FirstOrDefault().Celular;
        //        var celular1 = "";
        //        var celular2 = "";

        //        celular1 = celulares.Split(',')[0];
        //        if (celulares.Length > 12)
        //        {
        //            celular2 = celulares.Split(',')[1];
        //        }

        //        var q = (from a in query.ToList()
        //                 select new ReportCertificadoCovid
        //                 {
        //                     FechaActual = a.FechaActual,
        //                     Empleador = a.Empleador,
        //                     EmpresaPrincipal = a.EmpresaPrincipal,
        //                     Sede = a.Sede,
        //                     Area = a.Area,
        //                     Puesto = a.Puesto,
        //                     NroIdentificacionSalus = a.NroIdentificacionSalus,
        //                     ApellidoPaternoSalus = a.ApellidoPaternoSalus,
        //                     ApellidoMaternoSalus = a.ApellidoMaternoSalus,
        //                     NombresSalus = a.NombresSalus,
        //                     TipoDoc = a.TipoDoc,
        //                     NroDoc = a.NroDoc,
        //                     ApellidoPaterno = a.ApellidoPaterno,
        //                     ApellidoMaterno = a.ApellidoMaterno,
        //                     Nombres = a.Nombres,
        //                     Edad = GetAge(a.FechaNacimiento).ToString(),
        //                     Sexo = a.Sexo,
        //                     Celular = celular1,
        //                     OtroTelefono = celular2,
        //                     Domicilio = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_DOMICILIO_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_DOMICILIO_ID).v_Value1,
        //                     Direccion = a.Direccion,
        //                     Departamento = a.Departamento,
        //                     EspersonalSalud = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_ES_PERSONAL_SALUD_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_ES_PERSONAL_SALUD_ID).v_Value1,
        //                     Profesion = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_PROFESION_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_PROFESION_ID).v_Value1,
        //                     Tos = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_TOS_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_TOS_ID).v_Value1,
        //                     DolorGarganta = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_DOLOR_GARGANTA_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_DOLOR_GARGANTA_ID).v_Value1,
        //                     CongestionNasal = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_CONGESTION_NASAL_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_CONGESTION_NASAL_ID).v_Value1,
        //                     DificultadRespiratoria = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_DIFIC_RESPIRA_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_DIFIC_RESPIRA_ID).v_Value1,
        //                     Fiebre = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_FIEBRE_ESCALOFRIO_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_FIEBRE_ESCALOFRIO_ID).v_Value1,
        //                     Malestar = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_MALESTAR_GENERAL_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_MALESTAR_GENERAL_ID).v_Value1,
        //                     FechaSintomas = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_INICIO_SINTOMAS_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_INICIO_SINTOMAS_ID).v_Value1,
        //                     Muscular = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_MUSCULAR_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_MUSCULAR_ID).v_Value1,
        //                     Abdominal = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_ABDOMINAL_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_ABDOMINAL_ID).v_Value1,
        //                     Pecho = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_PECHO_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_PECHO_ID).v_Value1,
        //                     Articulaciones = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_ARTICULACIONES_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_ARTICULACIONES_ID).v_Value1,
        //                     TieneSintomas = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_TIENE_SINTOMAS_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_TIENE_SINTOMAS_ID).v_Value1,
        //                     ProcedenciaSolicitud = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_PROCEDENCIA_SOLICITUD_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_PROCEDENCIA_SOLICITUD_ID).v_Value1,
        //                     ResultadoPrueba = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_RES_1_PRUEBA_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_RES_1_PRUEBA_ID).v_Value1,
        //                     ResultadoSegundaPrueba = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_RES_2_PRUEBA_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_RES_2_PRUEBA_ID).v_Value1,
        //                     Seveidad = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_CLASIFICACION_CLINICA_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_CLASIFICACION_CLINICA_ID).v_Value1,
        //                     Mayor60 = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_MAYOR_60_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_MAYOR_60_ID).v_Value1,
        //                     HipertencionArterial = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_HIPERTENCION_ARTERIAL_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_HIPERTENCION_ARTERIAL_ID).v_Value1,
        //                     EnfCardio = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_ENF_CARDIO_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_ENF_CARDIO_ID).v_Value1,
        //                     Diabetes = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_DIABETES_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_DIABETES_ID).v_Value1,
        //                     Obesidad = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_OBESIDAD_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_OBESIDAD_ID).v_Value1,
        //                     Asma = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_ASMA_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_ASMA_ID).v_Value1,
        //                     EnfPulmonarCronica = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_ENF_PULMONAR_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_ENF_PULMONAR_ID).v_Value1,
        //                     InsuficienciaRenal = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_INSUFICIENCIA_RENAL_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_INSUFICIENCIA_RENAL_ID).v_Value1,
        //                     EbfInmunosupresor = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_INMUNOSUPRESOR_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_INMUNOSUPRESOR_ID).v_Value1,
        //                     Cancer = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_CANCER_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_CANCER_ID).v_Value1,
        //                     Embarazo = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_EMBARAZO_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_EMBARAZO_ID).v_Value1,
        //                     PersonalSalud = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_PERSONAL_SALUD_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_PERSONAL_SALUD_ID).v_Value1,
        //                     Pcr = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.CONTINUIDAD_DE_LA_ATENCION_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.CONTINUIDAD_DE_LA_ATENCION_ID).v_Value1,
        //                     SeguimientoProcede = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_PROCEDENCIA_SOLICITUD_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.COVID_PROCEDENCIA_SOLICITUD_ID).v_Value1,
        //                     Aptitud = a.AptitudId.ToString(),

        //                     Firma = FirmaFicha
        //                 }).ToList();


        //        pobjOperationResult.Success = 1;
        //        return q;
        //    }
        //    catch (Exception ex)
        //    {
        //        pobjOperationResult.Success = 0;
        //        pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
        //        return null;
        //    }
        //}   


        public List<ServiceList> GetServicesPagedAndFilteredReport(ref OperationResult pobjOperationResult, int? pintPageIndex, int? pintResultsPerPage, string pstrSortExpression, string pstrFilterExpression, DateTime? pdatBeginDate, DateTime? pdatEndDate)
        {
            //mon.IsActive = true;

            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
                var query = from A in dbContext.service
                            join B in dbContext.systemparameter on new { a = A.i_ServiceStatusId.Value, b = 125 } equals new { a = B.i_ParameterId, b = B.i_GroupId }
                            join C in dbContext.systemparameter on new { a = A.i_MasterServiceId.Value, b = 119 } equals new { a = C.i_ParameterId, b = C.i_GroupId }
                            join D in dbContext.calendar on A.v_ServiceId equals D.v_ServiceId
                            join E in dbContext.protocol on A.v_ProtocolId equals E.v_ProtocolId
                            //join F in dbContext.organization on E.v_EmployerOrganizationId equals F.v_OrganizationId
                            //join G in dbContext.location on E.v_EmployerLocationId equals G.v_LocationId
                            join H in dbContext.systemparameter on new { a = E.i_MasterServiceTypeId.Value, b = 119 } equals new { a = H.i_ParameterId, b = H.i_GroupId }
                            join I in dbContext.person on A.v_PersonId equals I.v_PersonId
                            join K in dbContext.systemparameter on new { a = A.i_AptitudeStatusId.Value, b = 124 } equals new { a = K.i_ParameterId, b = K.i_GroupId }
                            join L in dbContext.datahierarchy on new { a = I.i_DocTypeId.Value, b = 106 } equals new { a = L.i_ItemId, b = L.i_GroupId }
                            //join M in dbContext.protocolcomponent on A.v_ProtocolId equals M.v_ProtocolId

                            join et in dbContext.systemparameter on new { a = E.i_EsoTypeId.Value, b = 118 }
                                             equals new { a = et.i_ParameterId, b = et.i_GroupId } into et_join  // TIPO ESO [ESOA,ESOR,ETC]
                            from et in et_join.DefaultIfEmpty()

                            join of in dbContext.organization on new { a = A.v_EmpresaFacturacionId }
                                    equals new { a = of.v_OrganizationId } into of_join
                            from of in of_join.DefaultIfEmpty()

                            // Empresa / Sede Cliente ******************************************************
                            join oc in dbContext.organization on new { a = E.v_CustomerOrganizationId }
                                    equals new { a = oc.v_OrganizationId } into oc_join
                            from oc in oc_join.DefaultIfEmpty()

                            //join lc in dbContext.location on new { a = E.v_CustomerOrganizationId, b = E.v_CustomerLocationId }
                            //      equals new { a = lc.v_OrganizationId, b = lc.v_LocationId } into lc_join
                            //from lc in lc_join.DefaultIfEmpty()

                            //// Empresa / Sede Empleadora *******************************************
                            //join oe in dbContext.organization on new { a = E.v_EmployerOrganizationId }
                            //      equals new { a = oe.v_OrganizationId } into oe_join
                            //from oe in oe_join.DefaultIfEmpty()

                            //join le in dbContext.location on new { a = E.v_EmployerOrganizationId, b = E.v_EmployerLocationId }
                            //       equals new { a = le.v_OrganizationId, b = le.v_LocationId } into le_join
                            //from le in le_join.DefaultIfEmpty()

                            //// Empresa / Sede Trabajo *******************************************
                            //join ow in dbContext.organization on new { a = E.v_WorkingOrganizationId }
                            //      equals new { a = ow.v_OrganizationId } into ow_join
                            //from ow in ow_join.DefaultIfEmpty()

                            //join lw in dbContext.location on new { a = E.v_WorkingOrganizationId, b = E.v_WorkingLocationId }
                            //       equals new { a = lw.v_OrganizationId, b = lw.v_LocationId } into lw_join
                            //from lw in lw_join.DefaultIfEmpty()
                            //// *****************************************************************************

                            join J1 in dbContext.systemuser on new { i_InsertUserId = A.i_InsertUserId.Value }
                                                            equals new { i_InsertUserId = J1.i_SystemUserId } into J1_join
                            from J1 in J1_join.DefaultIfEmpty()

                            join J2 in dbContext.systemuser on new { i_UpdateUserId = A.i_UpdateUserId.Value }
                                                            equals new { i_UpdateUserId = J2.i_SystemUserId } into J2_join
                            from J2 in J2_join.DefaultIfEmpty()
                            where A.i_IsDeleted == 0
                            select new ServiceList
                            {
                                v_ServiceId = A.v_ServiceId,
                                v_CalendarId = D.v_CalendarId,
                                v_ProtocolId = A.v_ProtocolId,
                                v_PersonId = A.v_PersonId,
                                i_MasterServiceId = A.i_MasterServiceId.Value,
                                v_MasterServiceName = C.v_Value1,
                                i_ServiceStatusId = A.i_ServiceStatusId.Value,
                                v_ServiceStatusName = B.v_Value1,
                                i_AptitudeStatusId = A.i_AptitudeStatusId.Value,
                                d_ServiceDate = (DateTime)A.d_ServiceDate,
                                d_GlobalExpirationDate = (DateTime)A.d_GlobalExpirationDate,
                                d_ObsExpirationDate = (DateTime)A.d_ObsExpirationDate,
                                i_FlagAgentId = A.i_FlagAgentId.Value,
                                d_DateTimeCalendar = (DateTime)D.d_DateTimeCalendar,
                                v_OrganizationName = oc.v_Name,
                                //v_GenderName = G.v_Name,
                                v_ServiceTypeName = H.v_Value1,
                                i_ServiceTypeId = E.i_MasterServiceTypeId.Value,
                                i_EsoTypeId = E.i_EsoTypeId.Value,
                                v_LocationId = E.v_EmployerLocationId,
                                //v_LocationName = G.v_Name,
                                v_Pacient = I.v_FirstName + " " + I.v_FirstLastName + " " + I.v_SecondLastName,
                                v_PacientDocument = I.v_FirstName + " " + I.v_FirstLastName + " " + I.v_SecondLastName + " " + I.v_DocNumber,
                                v_ProtocolName = E.v_Name,
                                v_CreationUser = J1.v_UserName,
                                v_UpdateUser = J2.v_UserName,
                                d_CreationDate = A.d_InsertDate,
                                d_UpdateDate = A.d_UpdateDate,
                                v_AptitudeStatusName = K.v_Value1,
                                v_DocTypeName = L.v_Value1,
                                v_DocNumber = L.v_Value1 + " / " + I.v_DocNumber,
                                FechaNacimiento = I.d_Birthdate.Value,
                                Year = ((DateTime)A.d_ServiceDate).Year,

                                v_CustomerOrganizationId = E.v_CustomerOrganizationId,
                                v_CustomerLocationId = E.v_CustomerLocationId,
                                v_EmployerOrganizationId = E.v_EmployerOrganizationId,
                                v_EmployerLocationId = E.v_EmployerLocationId,
                                v_WorkingOrganizationId = E.v_WorkingOrganizationId,
                                v_WorkingLocationId = E.v_WorkingLocationId,

                                v_IdentificationNumber = oc.v_IdentificationNumber,
                                v_EsoTypeName = et.v_Value1,
                                EmpresaFacturacion = of.v_Name
                            };

                if (!string.IsNullOrEmpty(pstrFilterExpression))
                {
                    query = query.Where(pstrFilterExpression);
                }
                if (pdatBeginDate.HasValue && pdatEndDate.HasValue)
                {
                    query = query.Where("d_ServiceDate >= @0 && d_ServiceDate <= @1", pdatBeginDate.Value, pdatEndDate.Value);
                }
                if (!string.IsNullOrEmpty(pstrSortExpression))
                {
                    query = query.OrderBy(pstrSortExpression);
                }
                if (pintPageIndex.HasValue && pintResultsPerPage.HasValue)
                {
                    int intStartRowIndex = pintPageIndex.Value * pintResultsPerPage.Value;
                    query = query.Skip(intStartRowIndex);
                }
                if (pintResultsPerPage.HasValue)
                {
                    query = query.Take(pintResultsPerPage.Value);
                }

                var q = (from a in query.ToList()
                         select new ServiceList
                         {
                             v_ServiceId = a.v_ServiceId,
                             v_CalendarId = a.v_CalendarId,
                             v_ProtocolId = a.v_ProtocolId,
                             //v_PersonId = a.v_PersonId,
                             //i_MasterServiceId = a.i_MasterServiceId,
                             //v_MasterServiceName = a.v_MasterServiceName,
                             //i_ServiceStatusId = a.i_ServiceStatusId,
                             v_ServiceStatusName = a.v_ServiceStatusName,
                             //i_AptitudeStatusId = a.i_AptitudeStatusId.Value,
                             //d_ServiceDate = (DateTime)a.d_ServiceDate,
                             v_ServiceDate = a.d_ServiceDate == null ? string.Empty : a.d_ServiceDate.Value.ToShortDateString(),
                             //d_GlobalExpirationDate = (DateTime)a.d_GlobalExpirationDate,
                             //d_ObsExpirationDate = (DateTime)a.d_ObsExpirationDate,
                             //i_FlagAgentId = a.i_FlagAgentId,
                             //d_DateTimeCalendar = (DateTime)a.d_DateTimeCalendar,
                             v_OrganizationName = a.v_OrganizationName,
                             //v_GenderName = a.v_GenderName,
                             //v_ServiceTypeName = a.v_ServiceTypeName,
                             //i_ServiceTypeId = a.i_ServiceTypeId,
                             //i_EsoTypeId = a.i_EsoTypeId,
                             //v_LocationId = a.v_LocationId,
                             v_LocationName = a.v_LocationName,
                             v_Pacient = a.v_Pacient,
                             //v_PacientDocument = a.v_PacientDocument,
                             v_ProtocolName = a.v_ProtocolName,
                             //v_CreationUser = a.v_CreationUser,
                             //v_UpdateUser = a.v_UpdateUser,
                             //d_CreationDate = a.d_CreationDate,
                             //d_UpdateDate = a.d_UpdateDate,
                             v_AptitudeStatusName = a.v_AptitudeStatusName,
                             //v_CustomerOrganizationId = a.v_CustomerOrganizationId,
                             v_DocTypeName = a.v_DocTypeName,
                             v_DocNumber = a.v_DocNumber,
                             Year = a.Year,
                             FechaNacimiento = a.FechaNacimiento,
                             i_Age = (GetAge(a.FechaNacimiento)).ToString(),
                             //CostoProtocolo = GetServicesPagedAndFilteredReport(a.v_ProtocolId),

                             CostoProtocolo = GetServiceCost(a.v_ServiceId),

                             v_CustomerOrganizationId = a.v_CustomerOrganizationId,
                             v_CustomerLocationId = a.v_CustomerLocationId,
                             v_EmployerOrganizationId = a.v_EmployerOrganizationId,
                             v_EmployerLocationId = a.v_EmployerLocationId,

                             v_IdentificationNumber = a.v_IdentificationNumber,
                             v_EsoTypeName = a.v_EsoTypeName,
                             i_Cant = GetCantServiceComponent(a.v_ServiceId),
                             EmpresaFacturacion = a.EmpresaFacturacion
                         }).ToList();


                pobjOperationResult.Success = 1;
                return q;

            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
                return null;
            }
        }

        public List<ServiceList> GetServicesDetailPagedAndFilteredReport(ref OperationResult pobjOperationResult, int? pintPageIndex, int? pintResultsPerPage, string pstrSortExpression, string pstrFilterExpression, DateTime? pdatBeginDate, DateTime? pdatEndDate)
        {
            //mon.IsActive = true;

            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                var query = from A in dbContext.service
                            join B in dbContext.systemparameter on new { a = A.i_ServiceStatusId.Value, b = 125 } equals new { a = B.i_ParameterId, b = B.i_GroupId }
                            join C in dbContext.systemparameter on new { a = A.i_MasterServiceId.Value, b = 119 } equals new { a = C.i_ParameterId, b = C.i_GroupId }
                            join D in dbContext.calendar on A.v_ServiceId equals D.v_ServiceId
                            join E in dbContext.protocol on A.v_ProtocolId equals E.v_ProtocolId
                            join F in dbContext.organization on E.v_EmployerOrganizationId equals F.v_OrganizationId
                            join G in dbContext.location on E.v_EmployerLocationId equals G.v_LocationId
                            join H in dbContext.systemparameter on new { a = E.i_MasterServiceTypeId.Value, b = 119 } equals new { a = H.i_ParameterId, b = H.i_GroupId }
                            join I in dbContext.person on A.v_PersonId equals I.v_PersonId
                            join K in dbContext.systemparameter on new { a = A.i_AptitudeStatusId.Value, b = 124 } equals new { a = K.i_ParameterId, b = K.i_GroupId }
                            join L in dbContext.datahierarchy on new { a = I.i_DocTypeId.Value, b = 106 } equals new { a = L.i_ItemId, b = L.i_GroupId }
                            //join M in dbContext.protocolcomponent on A.v_ProtocolId equals M.v_ProtocolId

                            join et in dbContext.systemparameter on new { a = E.i_EsoTypeId.Value, b = 118 }
                                             equals new { a = et.i_ParameterId, b = et.i_GroupId } into et_join  // TIPO ESO [ESOA,ESOR,ETC]
                            from et in et_join.DefaultIfEmpty()

                            // Empresa / Sede Cliente ******************************************************
                            join oc in dbContext.organization on new { a = E.v_CustomerOrganizationId }
                                    equals new { a = oc.v_OrganizationId } into oc_join
                            from oc in oc_join.DefaultIfEmpty()

                            //join lc in dbContext.location on new { a = E.v_CustomerOrganizationId, b = E.v_CustomerLocationId }
                            //      equals new { a = lc.v_OrganizationId, b = lc.v_LocationId } into lc_join
                            //from lc in lc_join.DefaultIfEmpty()

                            //// Empresa / Sede Empleadora *******************************************
                            //join oe in dbContext.organization on new { a = E.v_EmployerOrganizationId }
                            //      equals new { a = oe.v_OrganizationId } into oe_join
                            //from oe in oe_join.DefaultIfEmpty()

                            //join le in dbContext.location on new { a = E.v_EmployerOrganizationId, b = E.v_EmployerLocationId }
                            //       equals new { a = le.v_OrganizationId, b = le.v_LocationId } into le_join
                            //from le in le_join.DefaultIfEmpty()

                            //// Empresa / Sede Trabajo *******************************************
                            //join ow in dbContext.organization on new { a = E.v_WorkingOrganizationId }
                            //      equals new { a = ow.v_OrganizationId } into ow_join
                            //from ow in ow_join.DefaultIfEmpty()

                            //join lw in dbContext.location on new { a = E.v_WorkingOrganizationId, b = E.v_WorkingLocationId }
                            //       equals new { a = lw.v_OrganizationId, b = lw.v_LocationId } into lw_join
                            //from lw in lw_join.DefaultIfEmpty()
                            //// *****************************************************************************                        


                            join of in dbContext.organization on new { a = A.v_EmpresaFacturacionId }
                                    equals new { a = of.v_OrganizationId } into of_join
                            from of in of_join.DefaultIfEmpty()


                            join sc in dbContext.servicecomponent on A.v_ServiceId equals sc.v_ServiceId
                            join c in dbContext.component on sc.v_ComponentId equals c.v_ComponentId

                            join fff in dbContext.systemparameter on new { a = c.i_CategoryId.Value, b = 116 } // CATEGORIA DEL EXAMEN
                                                                             equals new { a = fff.i_ParameterId, b = fff.i_GroupId } into J5_join
                            from fff in J5_join.DefaultIfEmpty()

                            join eex in dbContext.systemparameter on new { a = sc.i_ServiceComponentStatusId.Value, b = 127 }   // ESTADO DEL EXAMEN
                                                            equals new { a = eex.i_ParameterId, b = eex.i_GroupId }


                            where (sc.i_IsDeleted == 0) &&
                                  (sc.i_IsRequiredId == (int?)SiNo.SI) &&
                                  (sc.i_ServiceComponentStatusId != (int)ServiceComponentStatus.NoRealizado) &&
                                  (c.i_ComponentTypeId == (int)ComponentType.Examen) &&
                                  (A.i_IsDeleted == 0)

                            select new ServiceList
                            {
                                v_ServiceId = A.v_ServiceId,
                                v_CalendarId = D.v_CalendarId,
                                v_ProtocolId = A.v_ProtocolId,
                                v_PersonId = A.v_PersonId,
                                i_MasterServiceId = A.i_MasterServiceId.Value,
                                v_MasterServiceName = C.v_Value1,
                                i_ServiceStatusId = A.i_ServiceStatusId.Value,
                                v_ServiceStatusName = B.v_Value1,
                                i_AptitudeStatusId = A.i_AptitudeStatusId.Value,
                                d_ServiceDate = (DateTime)A.d_ServiceDate,
                                d_GlobalExpirationDate = (DateTime)A.d_GlobalExpirationDate,
                                d_ObsExpirationDate = (DateTime)A.d_ObsExpirationDate,
                                i_FlagAgentId = A.i_FlagAgentId.Value,
                                d_DateTimeCalendar = (DateTime)D.d_DateTimeCalendar,
                                v_OrganizationName = oc.v_Name,
                                v_GenderName = G.v_Name,
                                v_ServiceTypeName = H.v_Value1,
                                i_ServiceTypeId = E.i_MasterServiceTypeId.Value,
                                i_EsoTypeId = E.i_EsoTypeId.Value,
                                v_LocationId = E.v_EmployerLocationId,
                                v_LocationName = G.v_Name,
                                v_Pacient = I.v_FirstName + " " + I.v_FirstLastName + " " + I.v_SecondLastName,
                                v_PacientDocument = I.v_FirstName + " " + I.v_FirstLastName + " " + I.v_SecondLastName + " " + I.v_DocNumber,
                                v_ProtocolName = E.v_Name,

                                d_CreationDate = A.d_InsertDate,
                                d_UpdateDate = A.d_UpdateDate,
                                v_AptitudeStatusName = K.v_Value1,
                                v_DocTypeName = L.v_Value1,
                                v_DocNumber = L.v_Value1 + " / " + I.v_DocNumber,
                                FechaNacimiento = I.d_Birthdate.Value,
                                Year = ((DateTime)A.d_ServiceDate).Year,

                                v_CustomerOrganizationId = E.v_CustomerOrganizationId,
                                v_CustomerLocationId = E.v_CustomerLocationId,
                                v_EmployerOrganizationId = E.v_EmployerOrganizationId,
                                v_EmployerLocationId = E.v_EmployerLocationId,
                                v_WorkingOrganizationId = E.v_WorkingOrganizationId,
                                v_WorkingLocationId = E.v_WorkingLocationId,

                                v_IdentificationNumber = oc.v_IdentificationNumber,
                                v_EsoTypeName = et.v_Value1,

                                i_SexTypeId = I.i_SexTypeId,
                                v_CurrentOccupation = I.v_CurrentOccupation,
                                v_ComponentName = c.v_Name,
                                v_CategoryName = c.i_CategoryId == -1 ? c.v_Name : fff.v_Value1,
                                r_Price = sc.r_Price,
                                v_ServiceComponentStatusName = eex.v_Value1,
                                EmpresaFacturacion = of.v_Name
                            };

                if (!string.IsNullOrEmpty(pstrFilterExpression))
                {
                    query = query.Where(pstrFilterExpression);
                }
                if (pdatBeginDate.HasValue && pdatEndDate.HasValue)
                {
                    query = query.Where("d_ServiceDate >= @0 && d_ServiceDate <= @1", pdatBeginDate.Value, pdatEndDate.Value);
                }
                if (!string.IsNullOrEmpty(pstrSortExpression))
                {
                    query = query.OrderBy(pstrSortExpression);
                }
                if (pintPageIndex.HasValue && pintResultsPerPage.HasValue)
                {
                    int intStartRowIndex = pintPageIndex.Value * pintResultsPerPage.Value;
                    query = query.Skip(intStartRowIndex);
                }
                if (pintResultsPerPage.HasValue)
                {
                    query = query.Take(pintResultsPerPage.Value);
                }

                var q = (from a in query.ToList()
                         select new ServiceList
                         {
                             v_ServiceId = a.v_ServiceId,
                             v_CalendarId = a.v_CalendarId,
                             v_ProtocolId = a.v_ProtocolId,
                             //v_PersonId = a.v_PersonId,
                             //i_MasterServiceId = a.i_MasterServiceId,
                             //v_MasterServiceName = a.v_MasterServiceName,
                             //i_ServiceStatusId = a.i_ServiceStatusId,
                             v_ServiceStatusName = a.v_ServiceStatusName,
                             //i_AptitudeStatusId = a.i_AptitudeStatusId.Value,
                             //d_ServiceDate = (DateTime)a.d_ServiceDate,
                             v_ServiceDate = a.d_ServiceDate == null ? string.Empty : a.d_ServiceDate.Value.ToShortDateString(),
                             //d_GlobalExpirationDate = (DateTime)a.d_GlobalExpirationDate,
                             //d_ObsExpirationDate = (DateTime)a.d_ObsExpirationDate,
                             //i_FlagAgentId = a.i_FlagAgentId,
                             //d_DateTimeCalendar = (DateTime)a.d_DateTimeCalendar,
                             v_OrganizationName = a.v_OrganizationName,
                             //v_GenderName = a.v_GenderName,
                             //v_ServiceTypeName = a.v_ServiceTypeName,
                             //i_ServiceTypeId = a.i_ServiceTypeId,
                             //i_EsoTypeId = a.i_EsoTypeId,
                             //v_LocationId = a.v_LocationId,
                             v_LocationName = a.v_LocationName,
                             v_Pacient = a.v_Pacient,
                             //v_PacientDocument = a.v_PacientDocument,
                             v_ProtocolName = a.v_ProtocolName,

                             v_AptitudeStatusName = a.v_AptitudeStatusName,
                             //v_CustomerOrganizationId = a.v_CustomerOrganizationId,
                             v_DocTypeName = a.v_DocTypeName,
                             v_DocNumber = a.v_DocNumber,
                             Year = a.Year,
                             FechaNacimiento = a.FechaNacimiento,
                             i_Age = (GetAge(a.FechaNacimiento)).ToString(),


                             v_CustomerOrganizationId = a.v_CustomerOrganizationId,
                             v_CustomerLocationId = a.v_CustomerLocationId,
                             v_EmployerOrganizationId = a.v_EmployerOrganizationId,
                             v_EmployerLocationId = a.v_EmployerLocationId,

                             v_IdentificationNumber = a.v_IdentificationNumber,
                             v_EsoTypeName = a.v_EsoTypeName,

                             v_SexTypeId = a.i_SexTypeId == (int)Gender.MASCULINO ? "M" : "F",
                             v_CurrentOccupation = a.v_CurrentOccupation,
                             v_ComponentName = a.v_ComponentName,
                             v_CategoryName = a.v_CategoryName,
                             r_Price = a.r_Price,
                             v_ServiceComponentStatusName = a.v_ServiceComponentStatusName,
                             EmpresaFacturacion = a.EmpresaFacturacion
                         }).ToList();


                pobjOperationResult.Success = 1;
                return q;

            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
                return null;
            }
        }




        public List<ReportCertificadoDescensoCovid> GetCertificateDescensoCovid(ref OperationResult pobjOperationResult, string pstrServiceId)
        {
            //mon.IsActive = true;
            var isDeleted = 0;
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
                var groupUbigeo = 113;
                var query = (from ser in dbContext.service

                             join prot in dbContext.protocol on ser.v_ProtocolId equals prot.v_ProtocolId into prot_join
                             from prot in prot_join.DefaultIfEmpty()

                             join org in dbContext.organization on prot.v_CustomerOrganizationId equals org.v_OrganizationId into org_join
                             from org in org_join.DefaultIfEmpty()

                             join per in dbContext.person on ser.v_PersonId equals per.v_PersonId into per_join
                             from per in per_join.DefaultIfEmpty()

                             join M in dbContext.systemparameter on new { a = per.i_SexTypeId.Value, b = 100 }
                                 equals new { a = M.i_ParameterId, b = M.i_GroupId } into M_join
                             from M in M_join.DefaultIfEmpty()

                             // Ubigeo de la persona *******************************************************
                             join dep in dbContext.datahierarchy on new { a = per.i_DepartmentId.Value, b = groupUbigeo }
                                                  equals new { a = dep.i_ItemId, b = dep.i_GroupId } into dep_join
                             from dep in dep_join.DefaultIfEmpty()

                             join prov in dbContext.datahierarchy on new { a = per.i_ProvinceId.Value, b = groupUbigeo }
                                                   equals new { a = prov.i_ItemId, b = prov.i_GroupId } into prov_join
                             from prov in prov_join.DefaultIfEmpty()

                             join distri in dbContext.datahierarchy on new { a = per.i_DistrictId.Value, b = groupUbigeo }
                                                   equals new { a = distri.i_ItemId, b = distri.i_GroupId } into distri_join
                             from distri in distri_join.DefaultIfEmpty()
                             //*********************************************************************************************

                             join su in dbContext.systemuser on 11 equals su.i_SystemUserId into su_join
                             from su in su_join.DefaultIfEmpty()

                             join pr in dbContext.professional on su.v_PersonId equals pr.v_PersonId into pr_join
                             from pr in pr_join.DefaultIfEmpty()

                             join E in dbContext.servicecomponent on new { a = pstrServiceId, b = Constants.CERTIFICADO_DESCENSO_COVID_ID }
                                                                  equals new { a = E.v_ServiceId, b = E.v_ComponentId }

                             // Usuario Medico Evaluador / Medico Aprobador ****************************
                             join me in dbContext.systemuser on E.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
                             from me in me_join.DefaultIfEmpty()

                             join per1 in dbContext.person on me.v_PersonId equals per1.v_PersonId into per1_join
                             from per1 in per1_join.DefaultIfEmpty()


                             let varDpto = dep.v_Value1 == null ? "" : dep.v_Value1
                             let varProv = prov.v_Value1 == null ? "" : prov.v_Value1
                             let varDistri = distri.v_Value1 == null ? "" : distri.v_Value1

                             where (ser.v_ServiceId == pstrServiceId) &&
                                   (ser.i_IsDeleted == isDeleted)

                             select new ReportCertificadoDescensoCovid
                             {
                                 FechaActual = ser.d_ServiceDate.Value,
                                 Empleador = org.v_Name,
                                 EmpresaPrincipal = org.v_Name,
                                 Sede = "----",
                                 Area = "----",
                                 Puesto = per.v_CurrentOccupation,
                                 NroIdentificacionSalus = per1.v_DocNumber,
                                 ApellidoPaternoSalus = per1.v_FirstLastName,
                                 ApellidoMaternoSalus = per1.v_SecondLastName,
                                 NombresSalus = per1.v_FirstName,
                                 TipoDoc = "DNI",
                                 NroDoc = per.v_DocNumber,
                                 ApellidoPaterno = per.v_FirstLastName,
                                 ApellidoMaterno = per.v_SecondLastName,
                                 Nombres = per.v_FirstName,
                                 FechaNacimiento = per.d_Birthdate.Value,
                                 Sexo = M.v_Value1,
                                 Celular = per.v_TelephoneNumber,
                                 Direccion = per.v_AdressLocation,
                                 Departamento = varDistri + "-" + varProv + "-" + varDpto, // Santa Anita - Lima - Lima,
                                 Firma = pr.b_SignatureImage,
                                 AptitudId = ser.i_AptitudeStatusId.Value
                             });


                var covid = ValoresComponente(pstrServiceId, Constants.CERTIFICADO_DESCENSO_COVID_ID);
                var Antropometria = ValoresComponente(pstrServiceId, Constants.ANTROPOMETRIA_ID);
                var FV = ValoresComponente(pstrServiceId, Constants.FUNCIONES_VITALES_ID);
                var celulares = query.FirstOrDefault().Celular;
                var celular1 = "";
                var celular2 = "";

                celular1 = celulares.Split(',')[0];
                if (celulares.Length > 12)
                {
                    celular2 = celulares.Split(',')[1];
                }

                var q = (from a in query.ToList()
                         select new ReportCertificadoDescensoCovid
                         {
                             FechaActual = a.FechaActual,
                             Empleador = a.Empleador,
                             EmpresaPrincipal = a.EmpresaPrincipal,
                             Sede = a.Sede,
                             Area = a.Area,
                             Puesto = a.Puesto,
                             NroIdentificacionSalus = a.NroIdentificacionSalus,
                             ApellidoPaternoSalus = a.ApellidoPaternoSalus,
                             ApellidoMaternoSalus = a.ApellidoMaternoSalus,
                             NombresSalus = a.NombresSalus,
                             TipoDoc = a.TipoDoc,
                             NroDoc = a.NroDoc,
                             ApellidoPaterno = a.ApellidoPaterno,
                             ApellidoMaterno = a.ApellidoMaterno,
                             Nombres = a.Nombres,
                             Edad = GetAge(a.FechaNacimiento).ToString(),
                             Sexo = a.Sexo,
                             Celular = celular1,
                             OtroTelefono = celular2,
                             Direccion = a.Direccion,
                             Departamento = a.Departamento,
                             Domicilio = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_DESCENSO_COVID_DOMICILIO_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_DESCENSO_COVID_DOMICILIO_ID).v_Value1,
                             EstablecimientoSalud = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_DESCENSO_COVID_ESTABLECIMIENTO_SALUD_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_DESCENSO_COVID_ESTABLECIMIENTO_SALUD_ID).v_Value1,
                             TomaMedicacion = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_DESCENSO_COVID_TOMA_MEDICACION_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_DESCENSO_COVID_TOMA_MEDICACION_ID).v_Value1,

                             CheckEspersonalSalud = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_DESCENSO_COVID_CHECK_PERSONAL_SALUD_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_DESCENSO_COVID_CHECK_PERSONAL_SALUD_ID).v_Value1,
                             Profesion = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_DESCENSO_COVID_PROFESION_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_DESCENSO_COVID_PROFESION_ID).v_Value1,
                             TieneSintomas = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_DESCENSO_COVID_TIENE_SINTOMAS_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_DESCENSO_COVID_TIENE_SINTOMAS_ID).v_Value1,
                             FechaSintomas = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_DESCENSO_COVID_INICIO_SINTOMAS_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_DESCENSO_COVID_INICIO_SINTOMAS_ID).v_Value1,
                             Tos = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_DESCENSO_COVID_TOS_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_DESCENSO_COVID_TOS_ID).v_Value1,
                             DolorGarganta = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_DESCENSO_COVID_DOLOR_GARGANTA_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_DESCENSO_COVID_DOLOR_GARGANTA_ID).v_Value1,
                             CongestionNasal = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_DESCENSO_COVID_CONGESTION_NASAL_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_DESCENSO_COVID_CONGESTION_NASAL_ID).v_Value1,
                             DificultadRespiratoria = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_DESCENSO_COVID_DIFIC_RESPIRA_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_DESCENSO_COVID_DIFIC_RESPIRA_ID).v_Value1,
                             Fiebre = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_DESCENSO_COVID_FIEBRE_ESCALOFRIO_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_DESCENSO_COVID_FIEBRE_ESCALOFRIO_ID).v_Value1,
                             Malestar = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_DESCENSO_COVID_MALESTAR_GENERAL_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_DESCENSO_COVID_MALESTAR_GENERAL_ID).v_Value1,
                             Diarrea = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_DESCENSO_COVID_DIARREA_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_DESCENSO_COVID_DIARREA_ID).v_Value1,
                             Nauseas = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_DESCENSO_COVID_NAUSEAS_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_DESCENSO_COVID_NAUSEAS_ID).v_Value1,
                             Cefalea = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_DESCENSO_COVID_CEFALEA_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_DESCENSO_COVID_CEFALEA_ID).v_Value1,
                             Irritabilidad = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_DESCENSO_COVID_IRRITABILIDAD_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_DESCENSO_COVID_IRRITABILIDAD_ID).v_Value1,
                             Dolor = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_DESCENSO_COVID_DOLOR_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_DESCENSO_COVID_DOLOR_ID).v_Value1,

                             Muscular = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_DESCENSO_COVID_MUSCULAR_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_DESCENSO_COVID_MUSCULAR_ID).v_Value1,
                             Abdominal = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_DESCENSO_COVID_ABDOMINAL_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_DESCENSO_COVID_ABDOMINAL_ID).v_Value1,
                             Pecho = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_DESCENSO_COVID_PECHO_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_DESCENSO_COVID_PECHO_ID).v_Value1,
                             Articulaciones = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_DESCENSO_COVID_ARTICULACIONES_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_DESCENSO_COVID_ARTICULACIONES_ID).v_Value1,
                             OtrosSintomas = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_DESCENSO_COVID_OTROS_SINTOMAS_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_DESCENSO_COVID_OTROS_SINTOMAS_ID).v_Value1,
                             Seveidad = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_DESCENSO_COVID_CLASIFICACION_CLINICA_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_DESCENSO_COVID_CLASIFICACION_CLINICA_ID).v_Value1,
                             Mayor60 = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_DESCENSO_COVID_MAYOR_60_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_DESCENSO_COVID_MAYOR_60_ID).v_Value1,
                             HipertencionArterial = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_DESCENSO_COVID_HIPERTENCION_ARTERIAL_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_DESCENSO_COVID_HIPERTENCION_ARTERIAL_ID).v_Value1,
                             EnfCardio = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_DESCENSO_COVID_ENF_CARDIO_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_DESCENSO_COVID_ENF_CARDIO_ID).v_Value1,
                             Diabetes = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_DESCENSO_COVID_DIABETES_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_DESCENSO_COVID_DIABETES_ID).v_Value1,
                             Obesidad = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_DESCENSO_COVID_OBESIDAD_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_DESCENSO_COVID_OBESIDAD_ID).v_Value1,
                             Asma = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_DESCENSO_COVID_ASMA_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_DESCENSO_COVID_ASMA_ID).v_Value1,
                             EnfPulmonarCronica = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_DESCENSO_COVID_ENF_PULMONAR_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_DESCENSO_COVID_ENF_PULMONAR_ID).v_Value1,
                             InsuficienciaRenal = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_DESCENSO_COVID_INSUFICIENCIA_RENAL_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_DESCENSO_COVID_INSUFICIENCIA_RENAL_ID).v_Value1,
                             EbfInmunosupresor = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_DESCENSO_COVID_INMUNOSUPRESOR_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_DESCENSO_COVID_INMUNOSUPRESOR_ID).v_Value1,
                             Cancer = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_DESCENSO_COVID_CANCER_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_DESCENSO_COVID_CANCER_ID).v_Value1,
                             Embarazo = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_DESCENSO_COVID_EMBARAZO_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_DESCENSO_COVID_EMBARAZO_ID).v_Value1,
                             PreguntaPersonalSalud = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_DESCENSO_COVID_PREGUNTA_ES_PERSONAL_SALUD_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_DESCENSO_COVID_PREGUNTA_ES_PERSONAL_SALUD_ID).v_Value1,
                             Temperatura = FV.Count == 0 ? string.Empty : FV.Find(p => p.v_ComponentFieldId == Constants.FUNCIONES_VITALES_TEMPERATURA_ID).v_Value1,
                             FrecuenciaRespiratoria = FV.Count == 0 ? string.Empty : FV.Find(p => p.v_ComponentFieldId == Constants.FUNCIONES_VITALES_FREC_RESPIRATORIA_ID).v_Value1,
                             Expectoracion = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_DESCENSO_COVID_EXPECTORACION_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_DESCENSO_COVID_EXPECTORACION_ID).v_Value1,
                             ClasificacionClinica = covid.Count == 0 ? string.Empty : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_DESCENSO_COVID_CERTIFICACION_ID) == null ? "" : covid.Find(p => p.v_ComponentFieldId == Constants.CERTIFICADO_DESCENSO_COVID_CERTIFICACION_ID).v_Value1,

                             SatO2 = FV.Count == 0 ? string.Empty : FV.Find(p => p.v_ComponentFieldId == Constants.FUNCIONES_VITALES_SAT_O2_ID).v_Value1,
                             Aptitud = a.AptitudId.ToString(),
                             Firma = a.Firma
                         }).ToList();


                pobjOperationResult.Success = 1;
                return q;
            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
                return null;
            }
        }

        public string obtenerServiceComponentIdByServiceAndComponentId(string serviceId, string componentId)
        {

            SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

            var query = (from a in dbContext.servicecomponent
                         where a.v_ServiceId == serviceId && a.v_ComponentId == componentId
                         select a).FirstOrDefault();
            return query.v_ServiceComponentId;
        }

        public int GetAge(DateTime? FechaNacimiento)
        {
            return int.Parse((DateTime.Today.AddTicks(-FechaNacimiento.Value.Ticks).Year - 1).ToString());

        }

        public float GetServicesPagedAndFilteredReport(string ProtocoloId)
        {
            SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
            var query = (from A in dbContext.protocol
                         join M in dbContext.protocolcomponent on A.v_ProtocolId equals M.v_ProtocolId
                         where (A.i_IsDeleted == 0) && (A.v_ProtocolId == ProtocoloId)
                         select new
                         {
                             v_ProtocolId = A.v_ProtocolId,
                             CostoProtocolo = M.r_Price.Value
                         });

            //List<ServiceList> objAutorizationList = query.AsEnumerable()                                                                     
            //                                                           .GroupBy(x => x.v_ProtocolId)
            //                                                           .Select(group => group.First())
            //                                                           .ToList();


            return query.Sum(o => o.CostoProtocolo);

        }

        public string GetServiceCost(string serviceId)
        {
            SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
            var query = (from sc in dbContext.servicecomponent
                         join c in dbContext.component on sc.v_ComponentId equals c.v_ComponentId
                         where (sc.i_IsDeleted == 0) &&
                               (sc.v_ServiceId == serviceId) &&
                               (sc.i_IsRequiredId == (int?)SiNo.SI) &&
                               (sc.i_ServiceComponentStatusId != (int)ServiceComponentStatus.NoRealizado) &&
                               (c.i_ComponentTypeId == (int)ComponentType.Examen)
                         select new
                         {
                             v_ServiceId = sc.v_ServiceId,
                             CostoProtocolo = sc.r_Price.Value
                         });

            return string.Format("{0:0,0.00}", query.Sum(o => o.CostoProtocolo));

        }

        // new alejandro
        public int GetCantServiceComponent(string serviceId)
        {
            SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
            var query = (from sc in dbContext.servicecomponent
                         join c in dbContext.component on sc.v_ComponentId equals c.v_ComponentId
                         where (sc.i_IsDeleted == 0) &&
                               (sc.v_ServiceId == serviceId) &&
                               (sc.i_IsRequiredId == (int?)SiNo.SI) &&
                               (sc.i_ServiceComponentStatusId != (int)ServiceComponentStatus.NoRealizado) &&
                               (c.i_ComponentTypeId == (int)ComponentType.Examen)
                         select new
                         {
                             v_ServiceId = sc.v_ServiceId,
                             CostoProtocolo = sc.r_Price.Value
                         }).ToList().Count;

            return query;

        }

        // Alejandro
        public ServiceList GetAnamnesisReport(string pstrServiceId)
        {
            //mon.IsActive = true;

            var isDeleted = 0;

            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                var query = from A in dbContext.service

                            join K in dbContext.systemparameter on new { a = 135, b = A.i_HasSymptomId.Value }
                                                    equals new { a = K.i_GroupId, b = K.i_ParameterId } into K_join
                            from K in K_join.DefaultIfEmpty()

                            join L in dbContext.systemparameter on new { a = 135, b = A.i_UrineId.Value }
                                                    equals new { a = L.i_GroupId, b = L.i_ParameterId } into L_join
                            from L in L_join.DefaultIfEmpty()

                            join M in dbContext.systemparameter on new { a = 135, b = A.i_DepositionId.Value }
                                                  equals new { a = M.i_GroupId, b = M.i_ParameterId } into M_join
                            from M in M_join.DefaultIfEmpty()

                            join N in dbContext.systemparameter on new { a = 135, b = A.i_AppetiteId.Value }
                                        equals new { a = N.i_GroupId, b = N.i_ParameterId } into N_join
                            from N in N_join.DefaultIfEmpty()

                            join O in dbContext.systemparameter on new { a = 134, b = A.i_MacId.Value }
                                  equals new { a = O.i_GroupId, b = O.i_ParameterId } into O_join
                            from O in O_join.DefaultIfEmpty()

                            join P in dbContext.systemparameter on new { a = 135, b = A.i_AppetiteId.Value }
                                      equals new { a = P.i_GroupId, b = P.i_ParameterId } into P_join
                            from P in P_join.DefaultIfEmpty()

                            join su in dbContext.systemuser on A.i_UpdateUserMedicalAnalystId.Value equals su.i_SystemUserId into su_join
                            from su in su_join.DefaultIfEmpty()

                            join pr in dbContext.professional on su.v_PersonId equals pr.v_PersonId into pr_join
                            from pr in pr_join.DefaultIfEmpty()

                            where A.v_ServiceId == pstrServiceId && A.i_IsDeleted == isDeleted

                            select new ServiceList
                            {
                                v_ServiceId = A.v_ServiceId,
                                i_HasSymptomId = A.i_HasSymptomId,
                                v_MainSymptom = A.v_MainSymptom,
                                i_TimeOfDisease = A.i_TimeOfDisease,
                                i_TimeOfDiseaseTypeId = A.i_TimeOfDiseaseTypeId,
                                v_Story = A.v_Story,
                                v_PersonId = pr.v_PersonId,

                                i_DreamId = A.i_DreamId,
                                v_Dream = K.v_Value1,
                                i_UrineId = A.i_UrineId,
                                v_Urine = L.v_Value1,
                                i_DepositionId = A.i_DepositionId,
                                v_Deposition = M.v_Value1,
                                i_AppetiteId = A.i_AppetiteId,
                                v_Appetite = N.v_Value1,
                                i_ThirstId = A.i_ThirstId,
                                v_Thirst = P.v_Value1,
                                d_Fur = A.d_Fur.Value,
                                v_CatemenialRegime = A.v_CatemenialRegime,
                                i_MacId = A.i_MacId,
                                v_Mac = O.v_Value1,

                                // Antecedentes ginecologicos
                                d_PAP = A.d_PAP.Value,
                                d_Mamografia = A.d_Mamografia.Value,
                                v_CiruGine = A.v_CiruGine,
                                v_Gestapara = A.v_Gestapara,
                                v_Menarquia = A.v_Menarquia,
                                v_Findings = A.v_Findings,

                                // firma y sello del medico que analisa y califica los diagnosticos
                                FirmaDoctor = pr.b_SignatureImage

                            };

                ServiceList objData = query.FirstOrDefault();
                return objData;
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public List<ServiceComponentFieldValuesList> ValoresComponente(string pstrServiceId, string pstrComponentId)
        {
            SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
            int rpta = 0;

            try
            {
                var serviceComponentFieldValues = (from A in dbContext.service
                                                   join B in dbContext.servicecomponent on A.v_ServiceId equals B.v_ServiceId
                                                   join C in dbContext.servicecomponentfields on B.v_ServiceComponentId equals C.v_ServiceComponentId
                                                   join D in dbContext.servicecomponentfieldvalues on C.v_ServiceComponentFieldsId equals D.v_ServiceComponentFieldsId
                                                   join E in dbContext.component on B.v_ComponentId equals E.v_ComponentId
                                                   join F in dbContext.componentfields on C.v_ComponentFieldId equals F.v_ComponentFieldId
                                                   join G in dbContext.componentfield on C.v_ComponentFieldId equals G.v_ComponentFieldId
                                                   join H in dbContext.component on E.v_ComponentId equals H.v_ComponentId

                                                   where A.v_ServiceId == pstrServiceId
                                                           //&& H.v_ComponentId == pstrComponentId
                                                           && B.i_IsDeleted == 0
                                                           && C.i_IsDeleted == 0

                                                   select new ServiceComponentFieldValuesList
                                                   {
                                                       v_ComponentFieldId = G.v_ComponentFieldId,
                                                       v_ComponentFielName = G.v_TextLabel,
                                                       v_ServiceComponentFieldsId = C.v_ServiceComponentFieldsId,
                                                       v_Value1 = D.v_Value1,
                                                       i_GroupId = G.i_GroupId.Value
                                                   });

                var finalQuery = (from a in serviceComponentFieldValues.ToList()

                                  let value1 = int.TryParse(a.v_Value1, out rpta)
                                  join sp in dbContext.systemparameter on new { a = a.i_GroupId, b = rpta }
                                                  equals new { a = sp.i_GroupId, b = sp.i_ParameterId } into sp_join
                                  from sp in sp_join.DefaultIfEmpty()

                                  select new ServiceComponentFieldValuesList
                                  {
                                      v_ComponentFieldId = a.v_ComponentFieldId,
                                      v_ComponentFielName = a.v_ComponentFielName,
                                      v_ServiceComponentFieldsId = a.v_ServiceComponentFieldsId,
                                      v_Value1 = a.v_Value1,
                                      v_Value1Name = sp == null ? "" : sp.v_Value1
                                  }).ToList();


                return finalQuery;
            }
            catch (Exception)
            {

                throw;
            }

        }

        public List<ServiceComponentFieldValuesList> ValoresComponente(List<string> pstrServiceId, string pstrComponentId)
        {
            SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

            try
            {
                var serviceComponentFieldValues = (from A in dbContext.service
                                                   join B in dbContext.servicecomponent on A.v_ServiceId equals B.v_ServiceId
                                                   join C in dbContext.servicecomponentfields on B.v_ServiceComponentId equals C.v_ServiceComponentId
                                                   where pstrServiceId.Contains(A.v_ServiceId)
                                                           && B.v_ComponentId == pstrComponentId
                                                           && B.i_IsDeleted == 0
                                                   select new ServiceComponentFieldValuesList
                                                   {
                                                       v_ServiceId = A.v_ServiceId,
                                                       v_ServiceComponentId = B.v_ServiceComponentId,
                                                       v_ServiceComponentFieldsId = C.v_ServiceComponentFieldsId,
                                                       v_ComponentId = B.v_ComponentId,
                                                       v_ComponentFieldId = C.v_ComponentFieldId
                                                   }).ToList();
                return serviceComponentFieldValues;
            }
            catch (Exception)
            {
                throw;
            }

        }

        public List<ServiceComponentFieldValuesList> ValoresComponenteByListComponents(string pstrServiceId, List<string> pstrComponentId)
        {
            SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
            int rpta = 0;

            try
            {
                var serviceComponentFieldValues = (from A in dbContext.service
                                                   join B in dbContext.servicecomponent on A.v_ServiceId equals B.v_ServiceId
                                                   join C in dbContext.servicecomponentfields on B.v_ServiceComponentId equals C.v_ServiceComponentId
                                                   join D in dbContext.servicecomponentfieldvalues on C.v_ServiceComponentFieldsId equals D.v_ServiceComponentFieldsId
                                                   //join E in dbContext.component on B.v_ComponentId equals E.v_ComponentId
                                                   //join F in dbContext.componentfields on C.v_ComponentFieldId equals F.v_ComponentFieldId
                                                   //join G in dbContext.componentfield on C.v_ComponentFieldId equals G.v_ComponentFieldId
                                                   //join H in dbContext.component on F.v_ComponentId equals H.v_ComponentId

                                                   where A.v_ServiceId == pstrServiceId
                                                           && pstrComponentId.Contains(B.v_ComponentId)
                                                           && B.i_IsDeleted == 0
                                                           && C.i_IsDeleted == 0

                                                   select new ServiceComponentFieldValuesList
                                                   {
                                                       v_ComponentFieldId = C.v_ComponentFieldId,
                                                       v_ServiceComponentFieldsId = C.v_ServiceComponentFieldsId,
                                                       v_Value1 = D.v_Value1
                                                   }).ToList();


                return serviceComponentFieldValues;
            }
            catch (Exception)
            {

                throw;
            }

        }

        // Alejandro
        public string GetValueComponent(string pstrServiceId, string pstrComponentId, string componentFieldId)
        {
            SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

            int isDeleted = (int)SiNo.NO;

            try
            {
                var value = (from A in dbContext.service
                             join B in dbContext.servicecomponent on A.v_ServiceId equals B.v_ServiceId
                             join C in dbContext.servicecomponentfields on B.v_ServiceComponentId equals C.v_ServiceComponentId
                             join D in dbContext.servicecomponentfieldvalues on C.v_ServiceComponentFieldsId equals D.v_ServiceComponentFieldsId
                             join E in dbContext.component on B.v_ComponentId equals E.v_ComponentId
                             join F in dbContext.componentfields on C.v_ComponentFieldId equals F.v_ComponentFieldId
                             join G in dbContext.componentfield on C.v_ComponentFieldId equals G.v_ComponentFieldId
                             join H in dbContext.component on F.v_ComponentId equals H.v_ComponentId
                             where A.v_ServiceId == pstrServiceId
                                     && H.v_ComponentId == pstrComponentId
                                     && B.i_IsDeleted == isDeleted
                                     && C.i_IsDeleted == isDeleted
                                     && G.v_ComponentFieldId == componentFieldId

                             select D.v_Value1).SingleOrDefault<string>();

                return value;
            }
            catch (Exception)
            {

                throw;
            }

        }

        // Alejandro
        public bool ExistComponentInService(string pstrServiceId, string pstrComponentId)
        {
            int isDeleted = (int)SiNo.NO;

            try
            {

                using (SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel())
                {
                    var exist = dbContext.servicecomponent.Any(p => p.v_ServiceId == pstrServiceId && p.v_ComponentId == pstrComponentId && p.i_IsDeleted == isDeleted);
                    return exist;
                }
            }
            catch (Exception)
            {

                throw;
            }

        }

        // Alejandro
        public bool ExistPersonMedicalHistory(string personId, string diseasesId)
        {
            int isDeleted = (int)SiNo.NO;

            try
            {
                using (SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel())
                {
                    var exist = dbContext.personmedicalhistory.Any(p => p.v_PersonId == personId &&
                                                                    p.v_DiseasesId == diseasesId &&
                                                                    p.i_IsDeleted == isDeleted &&
                                                                    (p.i_AnswerId == (int)SiNo.SI ||
                                                                    p.i_AnswerId == (int)SiNo.NONE));
                    return exist;
                }
            }
            catch (Exception)
            {

                throw;
            }

        }

        public personmedicalhistoryDto GetPersonMedicalHistoryForESO(string personId, string diseasesId)
        {
            int isDeleted = (int)SiNo.NO;
            //mon.IsActive = true;
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                var query = (from A in dbContext.personmedicalhistory
                             where (A.v_PersonId == personId) && (A.v_DiseasesId == diseasesId) &&
                                   (A.i_AnswerId == (int)SiNo.SI) &&
                                   (A.i_IsDeleted == isDeleted)
                             select A).FirstOrDefault();


                personmedicalhistoryDto objData = query.ToDTO();
                return objData;
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public personmedicalhistoryDto GetPersonMedicalHistoryForESOBuildMenu(string personId, string diseasesId)
        {
            int isDeleted = (int)SiNo.NO;
            //mon.IsActive = true;
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                var query = (from A in dbContext.personmedicalhistory
                             where (A.v_PersonId == personId) && (A.v_DiseasesId == diseasesId) &&
                                   (A.i_IsDeleted == isDeleted)
                             select A).FirstOrDefault();


                personmedicalhistoryDto objData = query.ToDTO();
                return objData;
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public familymedicalantecedentsDto GetPersonaFamiliarForESOBuildMenu(string personId, string diseasesId)
        {
            int isDeleted = (int)SiNo.NO;
            //mon.IsActive = true;
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                var query = (from A in dbContext.familymedicalantecedents
                             where (A.v_PersonId == personId) && (A.v_DiseasesId == diseasesId) &&
                                   (A.i_IsDeleted == isDeleted)
                             select A).FirstOrDefault();


                familymedicalantecedentsDto objData = query.ToDTO();
                return objData;
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public noxioushabitsDto GetHabitosHistoryForESOBuildMenu(string personId, int TypeHabitsId)
        {
            int isDeleted = (int)SiNo.NO;
            //mon.IsActive = true;
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                var query = (from A in dbContext.noxioushabits
                             where (A.v_PersonId == personId) && (A.i_TypeHabitsId == TypeHabitsId) &&
                                   (A.i_IsDeleted == isDeleted)
                             select A).FirstOrDefault();


                noxioushabitsDto objData = query.ToDTO();
                return objData;
            }
            catch (Exception ex)
            {
                return null;
            }
        }


        //public List<ServiceComponentFieldValuesList> ValoresComponente(string pstrServiceId, string pstrComponentId)
        //{

        //    SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

        //    List<ServiceComponentFieldValuesList> serviceComponentFieldValues = (from A in dbContext.servicecomponent
        //                                                                         join B in dbContext.servicecomponentfields on A.v_ServiceComponentId equals B.v_ServiceComponentId
        //                                                                         join C in dbContext.servicecomponentfieldvalues on B.v_ServiceComponentFieldsId equals C.v_ServiceComponentFieldsId
        //                                                                         join D in dbContext.componentfield on B.v_ComponentFieldId equals D.v_ComponentFieldId
        //                                                                         where A.v_ServiceId == pstrServiceId && A.v_ComponentId == pstrComponentId && A.component.i_IsDeleted == 0 
        //                                                                         && B.i_IsDeleted == 0 && C.i_IsDeleted == 0

        //                                                                         select new ServiceComponentFieldValuesList
        //                                                                         {
        //                                                                             v_ComponentFieldId = B.v_ComponentFieldId,
        //                                                                             v_ComponentFielName = D.v_TextLabel,
        //                                                                             //v_ServiceComponentFieldValuesId = A.v_ServiceComponentFieldValuesId,
        //                                                                             //v_ComponentFieldValuesId = A.v_ComponentFieldValuesId,
        //                                                                             v_ServiceComponentFieldsId = B.v_ServiceComponentFieldsId,
        //                                                                             v_Value1 = C.v_Value1
        //                                                                             //v_Value2 = A.v_Value2,
        //                                                                             //i_Index = A.i_Index,
        //                                                                             //i_Value1 = A.i_Value1
        //                                                                         }).ToList();


        //    return serviceComponentFieldValues;
        //}

        public List<ServiceComponentFieldValuesList> ValoresComponente1(string pstrServiceId, string pstrComponentId)
        {

            SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

            List<ServiceComponentFieldValuesList> serviceComponentFieldValues = (from A in dbContext.servicecomponent
                                                                                 join B in dbContext.servicecomponentfields on A.v_ServiceComponentId equals B.v_ServiceComponentId
                                                                                 join C in dbContext.servicecomponentfieldvalues on B.v_ServiceComponentFieldsId equals C.v_ServiceComponentFieldsId
                                                                                 join D in dbContext.componentfield on B.v_ComponentFieldId equals D.v_ComponentFieldId
                                                                                 where A.v_ServiceId == pstrServiceId && A.v_ComponentId == pstrComponentId && A.component.i_IsDeleted == 0
                                                                                 && B.i_IsDeleted == 0 && C.i_IsDeleted == 0

                                                                                 select new ServiceComponentFieldValuesList
                                                                                 {
                                                                                     v_ComponentFieldId = B.v_ComponentFieldId,
                                                                                     v_ComponentFielName = D.v_TextLabel,
                                                                                     //v_ServiceComponentFieldValuesId = A.v_ServiceComponentFieldValuesId,
                                                                                     //v_ComponentFieldValuesId = A.v_ComponentFieldValuesId,
                                                                                     v_ServiceComponentFieldsId = B.v_ServiceComponentFieldsId,
                                                                                     v_Value1 = C.v_Value1
                                                                                     //v_Value2 = A.v_Value2,
                                                                                     //i_Index = A.i_Index,
                                                                                     //i_Value1 = A.i_Value1
                                                                                 }).ToList();


            return serviceComponentFieldValues;
        }

        public List<ServiceComponentFieldValuesList> ValoresExamenComponete(string pstrServiceId, string pstrComponentId, int pintParameter)
        {

            SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

            var systemParameters = (from a in dbContext.systemparameter
                                    where a.i_GroupId == pintParameter
                                    select a);


            List<ServiceComponentFieldValuesList> serviceComponentFieldValues = (from A in dbContext.service
                                                                                 join B in dbContext.servicecomponent on A.v_ServiceId equals B.v_ServiceId
                                                                                 join C in dbContext.servicecomponentfields on B.v_ServiceComponentId equals C.v_ServiceComponentId
                                                                                 join D in dbContext.servicecomponentfieldvalues on C.v_ServiceComponentFieldsId equals D.v_ServiceComponentFieldsId
                                                                                 join E in dbContext.component on B.v_ComponentId equals E.v_ComponentId
                                                                                 join F in dbContext.componentfields on C.v_ComponentFieldId equals F.v_ComponentFieldId
                                                                                 join G in dbContext.componentfield on C.v_ComponentFieldId equals G.v_ComponentFieldId
                                                                                 join H in dbContext.component on F.v_ComponentId equals H.v_ComponentId
                                                                                 where A.v_ServiceId == pstrServiceId
                                                                                         && H.v_ComponentId == pstrComponentId
                                                                                         && B.i_IsDeleted == 0
                                                                                         && C.i_IsDeleted == 0

                                                                                 select new ServiceComponentFieldValuesList
                                                                                 {
                                                                                     v_ComponentFieldId = G.v_ComponentFieldId,
                                                                                     v_ComponentFielName = G.v_TextLabel,
                                                                                     v_ServiceComponentFieldsId = C.v_ServiceComponentFieldsId,
                                                                                     v_Value1 = D.v_Value1

                                                                                 }).ToList();


            var sql = (from A in serviceComponentFieldValues
                       join F in systemParameters on A.v_Value1 equals F.i_ParameterId.ToString() into F_join
                       from F in F_join.DefaultIfEmpty()
                       select new ServiceComponentFieldValuesList
                       {
                           v_ComponentFieldId = A.v_ComponentFieldId,
                           v_ComponentFielName = A.v_ComponentFielName,
                           v_ServiceComponentFieldValuesId = A.v_ServiceComponentFieldValuesId,
                           v_ComponentFieldValuesId = A.v_ComponentFieldValuesId,
                           v_ServiceComponentFieldsId = A.v_ServiceComponentFieldsId,
                           v_Value1 = A.v_Value1,
                           v_Value2 = A.v_Value2,
                           i_Index = A.i_Index,
                           i_Value1 = A.i_Value1,
                           v_Value1Name = F == null ? "" : F.v_Value1
                       }).ToList();

            return sql;
        }

        public ServiceComponentList ComponenteExamenFisico(string pstrServiceId, string pstrComponentId)
        {

            //mon.IsActive = true;
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                var query = from A in dbContext.servicecomponent
                            where A.v_ServiceId == pstrServiceId && A.v_ComponentId == pstrComponentId
                            select new ServiceComponentList
                            {
                                v_Comment = A.v_Comment
                            };

                ServiceComponentList objData = query.FirstOrDefault();
                return objData;
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        // Beto
        public List<DiagnosticRepositoryList> GetServiceDisgnosticsReports(string pstrServiceId)
        {
            //mon.IsActive = true;
            var isDeleted = 0;

            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
                List<DiagnosticRepositoryList> query = (from ccc in dbContext.diagnosticrepository
                                                        //join bbb in dbContext.servicecomponent on ccc.v_ServiceId equals bbb.v_ServiceId

                                                        join ddd in dbContext.diseases on ccc.v_DiseasesId equals ddd.v_DiseasesId  // Diagnosticos

                                                        join eee in dbContext.systemparameter on new { a = ccc.i_AutoManualId.Value, b = 136 } // Auto / Manual
                                                                                                equals new { a = eee.i_ParameterId, b = eee.i_GroupId }

                                                        join fff in dbContext.systemparameter on new { a = ccc.i_PreQualificationId.Value, b = 137 } // PRE-CALIFICACION
                                                                                            equals new { a = fff.i_ParameterId, b = fff.i_GroupId } into J5_join
                                                        from fff in J5_join.DefaultIfEmpty()

                                                        join ggg in dbContext.systemparameter on new { a = ccc.i_FinalQualificationId.Value, b = 138 } //CALIFICACION FINAL
                                                                                            equals new { a = ggg.i_ParameterId, b = ggg.i_GroupId } into J4_join
                                                        from ggg in J4_join.DefaultIfEmpty()

                                                        join hhh in dbContext.systemparameter on new { a = ccc.i_DiagnosticTypeId.Value, b = 139 } // TIPO DE DX [Enfermedad comun, etc]
                                                                                                equals new { a = hhh.i_ParameterId, b = hhh.i_GroupId } into J3_join
                                                        from hhh in J3_join.DefaultIfEmpty()

                                                        join iii in dbContext.systemparameter on new { a = ccc.i_IsSentToAntecedent.Value, b = 111 } // RESPUESTA SI/NO
                                                                                             equals new { a = iii.i_ParameterId, b = iii.i_GroupId } into J6_join
                                                        from iii in J6_join.DefaultIfEmpty()

                                                        join J1 in dbContext.systemuser on new { i_InsertUserId = ccc.i_InsertUserId.Value }
                                                                        equals new { i_InsertUserId = J1.i_SystemUserId } into J1_join
                                                        from J1 in J1_join.DefaultIfEmpty()

                                                        join J2 in dbContext.systemuser on new { i_UpdateUserId = ccc.i_UpdateUserId.Value }
                                                                                        equals new { i_UpdateUserId = J2.i_SystemUserId } into J2_join
                                                        from J2 in J2_join.DefaultIfEmpty()

                                                        where (ccc.v_ServiceId == pstrServiceId) &&
                                                              (ccc.i_IsDeleted == isDeleted)
                                                        select new DiagnosticRepositoryList
                                                        {
                                                            v_DiagnosticRepositoryId = ccc.v_DiagnosticRepositoryId,
                                                            v_ServiceId = ccc.v_ServiceId,
                                                            v_ComponentId = ccc.v_ComponentId,
                                                            //v_ComponentName = bbb.v_Name,
                                                            v_DiseasesId = ccc.v_DiseasesId,
                                                            i_AutoManualId = ccc.i_AutoManualId,
                                                            i_PreQualificationId = ccc.i_PreQualificationId,
                                                            i_FinalQualificationId = ccc.i_FinalQualificationId, //sirve
                                                            i_DiagnosticTypeId = ccc.i_DiagnosticTypeId,//sirve
                                                            i_IsSentToAntecedent = ccc.i_IsSentToAntecedent,
                                                            d_ExpirationDateDiagnostic = ccc.d_ExpirationDateDiagnostic,
                                                            i_GenerateMedicalBreak = ccc.i_GenerateMedicalBreak,
                                                            v_ComponentFieldsId = ccc.v_ComponentFieldId,
                                                            v_DiseasesName = ddd.v_Name,
                                                            v_Cie10 = ddd.v_CIE10Id,
                                                            v_AutoManualName = eee.v_Value1,

                                                            v_PreQualificationName = fff.v_Value1,
                                                            v_FinalQualificationName = ggg.v_Value1,
                                                            v_DiagnosticTypeName = hhh.v_Value1,
                                                            v_IsSentToAntecedentName = iii.v_Value1,
                                                            i_RecordStatus = (int)RecordStatus.Grabado,
                                                            i_RecordType = (int)RecordType.NoTemporal,

                                                            v_CreationUser = J1.v_UserName,
                                                            v_UpdateUser = J2.v_UserName,
                                                            d_CreationDate = J1.d_InsertDate,
                                                            d_UpdateDate = J2.d_UpdateDate,
                                                            i_IsDeleted = ccc.i_IsDeleted.Value
                                                        }).ToList();


                var q = new List<DiagnosticRepositoryList>();
                q = query.Select((a, index) => new DiagnosticRepositoryList
                         {
                             i_Item = index + 1,
                             v_DiagnosticRepositoryId = a.v_DiagnosticRepositoryId,
                             v_ServiceId = a.v_ServiceId,
                             v_ComponentId = a.v_ComponentId,
                             v_ComponentName = a.v_ComponentName,
                             v_DiseasesId = a.v_DiseasesId,
                             i_AutoManualId = a.i_AutoManualId,
                             i_PreQualificationId = a.i_PreQualificationId,
                             i_FinalQualificationId = a.i_FinalQualificationId,
                             i_DiagnosticTypeId = a.i_DiagnosticTypeId,
                             i_IsSentToAntecedent = a.i_IsSentToAntecedent,
                             d_ExpirationDateDiagnostic = a.d_ExpirationDateDiagnostic,
                             i_GenerateMedicalBreak = a.i_GenerateMedicalBreak,
                             v_ComponentFieldsId = a.v_ComponentFieldsId,

                             v_RestrictionsName = ConcatenateRestriction(a.v_DiagnosticRepositoryId),
                             v_RecomendationsName = ConcatenateRecommendation(a.v_DiagnosticRepositoryId),
                             v_DiseasesName = a.v_DiseasesName,
                             v_Cie10 = a.v_Cie10,
                             v_AutoManualName = a.v_AutoManualName,

                             v_PreQualificationName = a.v_PreQualificationName,
                             v_FinalQualificationName = a.v_FinalQualificationName,
                             v_DiagnosticTypeName = a.v_DiagnosticTypeName,
                             v_IsSentToAntecedentName = a.v_IsSentToAntecedentName,
                             i_RecordStatus = a.i_RecordStatus,
                             i_RecordType = a.i_RecordType,

                             v_CreationUser = a.v_CreationUser,
                             v_UpdateUser = a.v_UpdateUser,
                             d_CreationDate = a.d_CreationDate,
                             d_UpdateDate = a.d_UpdateDate,
                             i_IsDeleted = a.i_IsDeleted

                         }).ToList();

                // Agregamos Restricciones / Recomendaciones
                OperationResult objOperationResult = new OperationResult();

                foreach (DiagnosticRepositoryList dr in q)
                {
                    dr.Restrictions = GetServiceRestrictionsByDiagnosticRepositoryId(ref objOperationResult, dr.v_DiagnosticRepositoryId);
                    dr.Recomendations = GetServiceRecommendationByDiagnosticRepositoryId(ref objOperationResult, dr.v_DiagnosticRepositoryId);
                }

                return q;
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        // Alejandro
        public List<ServiceComponentFieldsList> GetServiceComponentFieldsAndValuesReport(string pstrServiceId, string pstrComponentId)
        {


            int isDeleted = 0;
            SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

            var serviceComponentFields = (from A in dbContext.servicecomponent
                                          join B in dbContext.servicecomponentfields on A.v_ServiceComponentId equals B.v_ServiceComponentId
                                          join C in dbContext.servicecomponentfieldvalues on B.v_ServiceComponentFieldsId equals C.v_ServiceComponentFieldsId
                                          join cfs in dbContext.componentfields on B.v_ComponentFieldId equals cfs.v_ComponentFieldId
                                          join D in dbContext.componentfield on B.v_ComponentFieldId equals D.v_ComponentFieldId
                                          join cm in dbContext.component on cfs.v_ComponentId equals cm.v_ComponentId

                                          join dh in dbContext.datahierarchy on new { a = 105, b = D.i_MeasurementUnitId.Value }
                                                             equals new { a = dh.i_GroupId, b = dh.i_ItemId } into dh_join
                                          from dh in dh_join.DefaultIfEmpty()

                                          where (A.v_ServiceId == pstrServiceId) &&
                                                (cm.v_ComponentId == pstrComponentId) &&
                                                (A.i_IsDeleted == isDeleted) &&
                                                (B.i_IsDeleted == isDeleted) &&
                                                (C.i_IsDeleted == isDeleted)

                                          select new ServiceComponentFieldsList
                                          {
                                              v_ServiceComponentFieldsId = B.v_ServiceComponentFieldsId,
                                              v_ComponentFieldsId = B.v_ComponentFieldId,
                                              v_ComponentFielName = D.v_TextLabel,
                                              v_Value1 = C.v_Value1 == "" ? null : C.v_Value1,
                                              i_GroupId = D.i_GroupId.Value,
                                              v_MeasurementUnitName = dh.v_Value1
                                          }).ToList();

            int rpta = 0;

            var finalQuery = (from a in serviceComponentFields
                              let value1 = int.TryParse(a.v_Value1, out rpta)
                              join sp in dbContext.systemparameter on new { a = a.i_GroupId, b = rpta }
                                              equals new { a = sp.i_GroupId, b = sp.i_ParameterId } into sp_join
                              from sp in sp_join.DefaultIfEmpty()

                              select new ServiceComponentFieldsList
                              {
                                  v_ServiceComponentFieldsId = a.v_ServiceComponentFieldsId,
                                  v_ComponentFieldsId = a.v_ComponentFieldsId,
                                  v_ComponentFielName = a.v_ComponentFielName,
                                  i_GroupId = a.i_GroupId,
                                  v_Value1 = a.v_Value1,
                                  v_Value1Name = sp == null ? "" : sp.v_Value1,
                                  v_MeasurementUnitName = a.v_MeasurementUnitName,
                                  v_ConclusionAndDiagnostic = a.v_Value1 + " / " + GetServiceComponentDiagnosticsReport(pstrServiceId, pstrComponentId)
                              }).ToList();

            return finalQuery;
        }

        // Alejandro
        //public List<ServiceComponentList> GetServiceComponentsReport(string pstrServiceId)
        //{
        //    //mon.IsActive = true;        

        //    try
        //    {
        //        SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
        //        var components = (from aaa in dbContext.servicecomponent
        //                          join bbb in dbContext.component on aaa.v_ComponentId equals bbb.v_ComponentId
        //                          join J1 in dbContext.systemuser on new { i_InsertUserId = aaa.i_InsertUserId.Value }
        //                                          equals new { i_InsertUserId = J1.i_SystemUserId } into J1_join
        //                          from J1 in J1_join.DefaultIfEmpty()

        //                          join J2 in dbContext.systemuser on new { i_UpdateUserId = aaa.i_UpdateUserId.Value }
        //                                                          equals new { i_UpdateUserId = J2.i_SystemUserId } into J2_join
        //                          from J2 in J2_join.DefaultIfEmpty()

        //                          join fff in dbContext.systemparameter on new { a = bbb.i_CategoryId.Value, b = 116 } // CATEGORIA DEL EXAMEN
        //                                                                       equals new { a = fff.i_ParameterId, b = fff.i_GroupId } into J5_join
        //                          from fff in J5_join.DefaultIfEmpty()

        //                          // Usuario Medico Evaluador / Medico Aprobador ****************************
        //                          join me in dbContext.systemuser on aaa.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
        //                          from me in me_join.DefaultIfEmpty()

        //                          join pme in dbContext.professional on me.v_PersonId equals pme.v_PersonId into pme_join
        //                          from pme in pme_join.DefaultIfEmpty()

        //                          //*********************************************************************

        //                          where (aaa.v_ServiceId == pstrServiceId) &&
        //                                (bbb.i_ComponentTypeId == (int?)ComponentType.Examen) &&
        //                                (aaa.i_IsDeleted == 0) &&
        //                                (aaa.i_IsRequiredId == (int?)SiNo.SI)
        //                          orderby bbb.i_CategoryId, bbb.v_Name

        //                          select new
        //                          {
        //                              v_ComponentId = bbb.v_ComponentId,
        //                              v_ComponentName = bbb.v_Name,
        //                              v_ServiceComponentId = aaa.v_ServiceComponentId,
        //                              v_CreationUser = J1.v_UserName,
        //                              v_UpdateUser = J2.v_UserName,
        //                              d_CreationDate = aaa.d_InsertDate,
        //                              d_UpdateDate = aaa.d_UpdateDate,
        //                              i_IsDeleted = aaa.i_IsDeleted.Value,
        //                              i_CategoryId = bbb.i_CategoryId.Value,
        //                              v_CategoryName = fff.v_Value1,
        //                              DiagnosticRepository = (from dr in aaa.service.diagnosticrepository
        //                                                      where (dr.v_ServiceId == pstrServiceId) &&
        //                                                            (dr.v_ComponentId == aaa.v_ComponentId)
        //                                                      select new DiagnosticRepositoryList
        //                                                      {
        //                                                          v_DiseasesId = dr.diseases.v_DiseasesId,
        //                                                          v_DiseasesName = dr.diseases.v_Name
        //                                                      }),
        //                              FirmaMedico = pme.b_SignatureImage
        //                          }).AsEnumerable().Select(p => new ServiceComponentList
        //                          {
        //                              v_ComponentId = p.v_ComponentId,
        //                              v_ComponentName = p.v_ComponentName,
        //                              v_ServiceComponentId = p.v_ServiceComponentId,
        //                              v_CreationUser = p.v_CreationUser,
        //                              v_UpdateUser = p.v_UpdateUser,
        //                              d_CreationDate = p.d_CreationDate,
        //                              d_UpdateDate = p.d_UpdateDate,
        //                              i_IsDeleted = p.i_IsDeleted,
        //                              i_CategoryId = p.i_CategoryId,
        //                              v_CategoryName = p.v_CategoryName,
        //                              DiagnosticRepository = p.DiagnosticRepository.ToList(),
        //                              FirmaMedico = p.FirmaMedico
        //                          }).ToList();

        //        foreach (var comp in components)
        //        {
        //            comp.ServiceComponentFields = GetServiceComponentFieldsAndValuesReport(pstrServiceId, comp.v_ComponentId);
        //        }

        //        return components;
        //    }
        //    catch (Exception)
        //    {
        //        throw;
        //    }
        //}

        // Alejandro
        public List<ServiceComponentList> GetServiceComponentsReport(string pstrServiceId)
        {
            //mon.IsActive = true;        
            int isDeleted = 0;

            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                #region serviceComponentFields

                var serviceComponentFields = (from A in dbContext.servicecomponent
                                              join B in dbContext.servicecomponentfields on A.v_ServiceComponentId equals B.v_ServiceComponentId
                                              join C in dbContext.servicecomponentfieldvalues on B.v_ServiceComponentFieldsId equals C.v_ServiceComponentFieldsId
                                              join cfs in dbContext.componentfields on B.v_ComponentFieldId equals cfs.v_ComponentFieldId
                                              join D in dbContext.componentfield on B.v_ComponentFieldId equals D.v_ComponentFieldId
                                              join cm in dbContext.component on cfs.v_ComponentId equals cm.v_ComponentId

                                              join dh in dbContext.datahierarchy on new { a = 105, b = D.i_MeasurementUnitId.Value }
                                                                 equals new { a = dh.i_GroupId, b = dh.i_ItemId } into dh_join
                                              from dh in dh_join.DefaultIfEmpty()

                                              where (A.v_ServiceId == pstrServiceId) &&
                                                  //(cm.v_ComponentId == pstrComponentId) &&
                                                    (A.i_IsDeleted == isDeleted) &&
                                                    (B.i_IsDeleted == isDeleted) &&
                                                    (C.i_IsDeleted == isDeleted)

                                              select new ServiceComponentFieldsList
                                              {
                                                  v_ServiceComponentFieldsId = B.v_ServiceComponentFieldsId,
                                                  v_ComponentFieldsId = B.v_ComponentFieldId,
                                                  v_ComponentFielName = D.v_TextLabel,
                                                  v_Value1 = C.v_Value1 == "" ? null : C.v_Value1,
                                                  i_GroupId = D.i_GroupId.Value,
                                                  v_MeasurementUnitName = dh.v_Value1,
                                                  v_ComponentId = cm.v_ComponentId,
                                                  v_ServiceComponentId = A.v_ServiceComponentId
                                              }).ToList();

                int rpta = 0;

                var _finalQuery = (from a in serviceComponentFields
                                   let value1 = int.TryParse(a.v_Value1, out rpta)
                                   join sp in dbContext.systemparameter on new { a = a.i_GroupId, b = rpta }
                                                   equals new { a = sp.i_GroupId, b = sp.i_ParameterId } into sp_join
                                   from sp in sp_join.DefaultIfEmpty()

                                   select new ServiceComponentFieldsList
                                   {
                                       v_ServiceComponentFieldsId = a.v_ServiceComponentFieldsId,
                                       v_ComponentFieldsId = a.v_ComponentFieldsId,
                                       v_ComponentFielName = a.v_ComponentFielName,
                                       i_GroupId = a.i_GroupId,
                                       v_Value1 = a.v_Value1,
                                       v_Value1Name = sp == null ? "" : sp.v_Value1,
                                       v_MeasurementUnitName = a.v_MeasurementUnitName,
                                       v_ComponentId = a.v_ComponentId,
                                       v_ConclusionAndDiagnostic = a.v_Value1 + " / " + GetServiceComponentDiagnosticsReport(pstrServiceId, a.v_ComponentId),
                                       v_ServiceComponentId = a.v_ServiceComponentId
                                   }).ToList();


                #endregion

                var components = (from aaa in dbContext.servicecomponent
                                  join bbb in dbContext.component on aaa.v_ComponentId equals bbb.v_ComponentId
                                  join J1 in dbContext.systemuser on new { i_InsertUserId = aaa.i_InsertUserId.Value }
                                                  equals new { i_InsertUserId = J1.i_SystemUserId } into J1_join
                                  from J1 in J1_join.DefaultIfEmpty()

                                  join J2 in dbContext.systemuser on new { i_UpdateUserId = aaa.i_UpdateUserId.Value }
                                                                  equals new { i_UpdateUserId = J2.i_SystemUserId } into J2_join
                                  from J2 in J2_join.DefaultIfEmpty()

                                  join fff in dbContext.systemparameter on new { a = bbb.i_CategoryId.Value, b = 116 } // CATEGORIA DEL EXAMEN
                                                                               equals new { a = fff.i_ParameterId, b = fff.i_GroupId } into J5_join
                                  from fff in J5_join.DefaultIfEmpty()

                                  // Usuario Medico Evaluador / Medico Aprobador ****************************
                                  join me in dbContext.systemuser on aaa.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
                                  from me in me_join.DefaultIfEmpty()

                                  join pme in dbContext.professional on me.v_PersonId equals pme.v_PersonId into pme_join
                                  from pme in pme_join.DefaultIfEmpty()

                                  //*********************************************************************

                                  where (aaa.v_ServiceId == pstrServiceId) &&
                                        (bbb.i_ComponentTypeId == (int?)ComponentType.Examen) &&
                                        (aaa.i_IsDeleted == 0) &&
                                        (aaa.i_IsRequiredId == (int?)SiNo.SI)

                                  //orderby bbb.i_CategoryId, bbb.v_Name

                                  select new
                                  {
                                      v_ComponentId = bbb.v_ComponentId,
                                      v_ComponentName = bbb.v_Name,
                                      v_ServiceComponentId = aaa.v_ServiceComponentId,
                                      v_CreationUser = J1.v_UserName,
                                      v_UpdateUser = J2.v_UserName,
                                      d_CreationDate = aaa.d_InsertDate,
                                      d_UpdateDate = aaa.d_UpdateDate,
                                      i_IsDeleted = aaa.i_IsDeleted.Value,
                                      i_CategoryId = bbb.i_CategoryId.Value,
                                      v_CategoryName = fff.v_Value1,
                                      DiagnosticRepository = (from dr in aaa.service.diagnosticrepository
                                                              where (dr.v_ServiceId == pstrServiceId) &&
                                                                    (dr.v_ComponentId == aaa.v_ComponentId) &&
                                                                    (dr.i_IsDeleted == 0) &&
                                                                    ((dr.i_FinalQualificationId == (int)FinalQualification.Definitivo) || (dr.i_FinalQualificationId == (int)FinalQualification.Presuntivo))
                                                              select new DiagnosticRepositoryList
                                                              {
                                                                  v_DiseasesId = dr.diseases.v_DiseasesId,
                                                                  v_DiseasesName = dr.diseases.v_Name
                                                              }),
                                      FirmaMedico = pme.b_SignatureImage
                                  }).AsEnumerable().Select(p => new ServiceComponentList
                                  {
                                      v_ComponentId = p.v_ComponentId,
                                      v_ComponentName = p.v_ComponentName,
                                      v_ServiceComponentId = p.v_ServiceComponentId,
                                      v_CreationUser = p.v_CreationUser,
                                      v_UpdateUser = p.v_UpdateUser,
                                      d_CreationDate = p.d_CreationDate,
                                      d_UpdateDate = p.d_UpdateDate,
                                      i_IsDeleted = p.i_IsDeleted,
                                      i_CategoryId = p.i_CategoryId,
                                      v_CategoryName = p.v_CategoryName,
                                      DiagnosticRepository = p.DiagnosticRepository.ToList(),
                                      FirmaMedico = p.FirmaMedico
                                  }).ToList();

                //var ff = _finalQuery.FindAll(p => p.v_ComponentId == Constants.GLUCOSA_ID);
                //var ff_ = _finalQuery.FindAll(p => p.v_ComponentId == Constants.GRUPO_Y_FACTOR_SANGUINEO_ID);
                //var _ff_ = _finalQuery.FindAll(p => p.v_ComponentId == Constants.COLESTEROL_ID);

                components.Sort((x, y) => x.v_ComponentId.CompareTo(y.v_ComponentId));
                components.ForEach(a => a.ServiceComponentFields = _finalQuery.FindAll(p => p.v_ComponentId == a.v_ComponentId));

                return components;
            }

            catch (Exception)
            {
                throw;
            }
        }

        // Alejandro
        public List<ServiceComponentList> GetServiceComponentsForManagementReport(string pstrServiceId)
        {
            //mon.IsActive = true;        
            var isDeleted = 0;
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
                var components = (from aaa in dbContext.servicecomponent
                                  join bbb in dbContext.component on aaa.v_ComponentId equals bbb.v_ComponentId
                                  join J1 in dbContext.systemuser on new { i_InsertUserId = aaa.i_InsertUserId.Value }
                                                  equals new { i_InsertUserId = J1.i_SystemUserId } into J1_join
                                  from J1 in J1_join.DefaultIfEmpty()

                                  join J2 in dbContext.systemuser on new { i_UpdateUserId = aaa.i_UpdateUserId.Value }
                                                                  equals new { i_UpdateUserId = J2.i_SystemUserId } into J2_join
                                  from J2 in J2_join.DefaultIfEmpty()

                                  join fff in dbContext.systemparameter on new { a = bbb.i_CategoryId.Value, b = 116 } // CATEGORIA DEL EXAMEN
                                                                               equals new { a = fff.i_ParameterId, b = fff.i_GroupId } into J5_join
                                  from fff in J5_join.DefaultIfEmpty()

                                  where (aaa.v_ServiceId == pstrServiceId) &&
                                        (bbb.i_ComponentTypeId == (int?)ComponentType.Examen) &&
                                        (aaa.i_IsDeleted == isDeleted) &&
                                        (aaa.i_IsRequiredId == (int?)SiNo.SI)
                                  orderby bbb.i_CategoryId, bbb.v_Name

                                  select new ServiceComponentList
                                  {
                                      v_ComponentId = bbb.v_ComponentId,
                                      v_ComponentName = bbb.v_Name,
                                      v_ServiceComponentId = aaa.v_ServiceComponentId,
                                      i_CategoryId = bbb.i_CategoryId.Value,
                                      v_CategoryName = fff.v_Value1

                                  }).ToList();

                return components;
            }
            catch (Exception)
            {
                throw;
            }
        }

        // Alejandro
        public string GetServiceComponentDiagnosticsReport(string pstrServiceId, string pstrComponentId)
        {
            //mon.IsActive = true;

            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                var query = (from ccc in dbContext.diagnosticrepository
                             join bbb in dbContext.component on ccc.v_ComponentId equals bbb.v_ComponentId
                             join ddd in dbContext.diseases on ccc.v_DiseasesId equals ddd.v_DiseasesId  // Diagnosticos 
                             where (ccc.v_ServiceId == pstrServiceId) &&
                                   (ccc.v_ComponentId == pstrComponentId) &&
                                   (ccc.i_IsDeleted == 0)
                             select new DiagnosticRepositoryList
                             {
                                 v_DiagnosticRepositoryId = ccc.v_DiagnosticRepositoryId,
                                 v_ServiceId = ccc.v_ServiceId,
                                 v_ComponentId = ccc.v_ComponentId,
                                 v_DiseasesId = ccc.v_DiseasesId,
                                 v_DiseasesName = ddd.v_Name,

                             }).ToList();

                var concat = string.Join(", ", query.Select(p => p.v_DiseasesName));

                return concat;
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        // Alejandro
        public List<RecomendationList> GetServiceRecommendationByDiagnosticRepositoryIdReport(string pstrDiagnosticRepositoryId)
        {
            //mon.IsActive = true;
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                List<RecomendationList> query = (from ddd in dbContext.recommendation
                                                 join eee in dbContext.masterrecommendationrestricction on ddd.v_MasterRecommendationId
                                                                         equals eee.v_MasterRecommendationRestricctionId //                                                                                                                                                                              
                                                 where (ddd.v_DiagnosticRepositoryId == pstrDiagnosticRepositoryId) &&
                                                       (ddd.i_IsDeleted == 0)
                                                 select new RecomendationList
                                                 {
                                                     v_RecommendationId = ddd.v_RecommendationId,
                                                     v_DiagnosticRepositoryId = ddd.v_DiagnosticRepositoryId,
                                                     v_ServiceId = ddd.v_ServiceId,
                                                     v_ComponentId = ddd.v_ComponentId,
                                                     v_MasterRecommendationId = ddd.v_MasterRecommendationId,
                                                     v_RecommendationName = eee.v_Name,

                                                 }).ToList();

                // add the sequence number on the fly
                var finalQuery = query.Select((a, index) => new RecomendationList
                {
                    i_Item = index + 1,
                    v_RecommendationId = a.v_RecommendationId,
                    v_DiagnosticRepositoryId = a.v_DiagnosticRepositoryId,
                    v_ServiceId = a.v_ServiceId,
                    v_ComponentId = a.v_ComponentId,
                    v_MasterRecommendationId = a.v_MasterRecommendationId,
                    v_RecommendationName = a.v_RecommendationName,
                }).ToList();

                return finalQuery;
            }
            catch (Exception ex)
            {

                return null;
            }
        }

        // Beto
        public List<RestrictionList> GetServiceRestrictionByDiagnosticRepositoryIdReport(string pstrDiagnosticRepositoryId)
        {
            //mon.IsActive = true;

            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                List<RestrictionList> query = (from ddd in dbContext.restriction
                                               join eee in dbContext.masterrecommendationrestricction on ddd.v_MasterRestrictionId
                                                                       equals eee.v_MasterRecommendationRestricctionId //                                                                                                                                                                              
                                               where (ddd.v_DiagnosticRepositoryId == pstrDiagnosticRepositoryId) &&
                                                     (ddd.i_IsDeleted == 0)
                                               select new RestrictionList
                                               {
                                                   v_RestrictionId = ddd.v_RestrictionId,
                                                   v_DiagnosticRepositoryId = ddd.v_DiagnosticRepositoryId,
                                                   v_ServiceId = ddd.v_ServiceId,
                                                   v_ComponentId = ddd.v_ComponentId,
                                                   v_MasterRestrictionId = ddd.v_MasterRestrictionId,
                                                   v_RestrictionName = eee.v_Name,

                                               }).ToList();

                // add the sequence number on the fly
                var finalQuery = query.Select((a, index) => new RestrictionList
                {
                    i_Item = index + 1,
                    v_RestrictionId = a.v_RestrictionId,
                    v_DiagnosticRepositoryId = a.v_DiagnosticRepositoryId,
                    v_ServiceId = a.v_ServiceId,
                    v_ComponentId = a.v_ComponentId,
                    v_MasterRestrictionId = a.v_MasterRestrictionId,
                    v_RestrictionName = a.v_RestrictionName,
                }).ToList();

                return finalQuery;
            }
            catch (Exception ex)
            {

                return null;
            }
        }

        // Alejandro 
        public List<DiagnosticRepositoryList> GetServiceComponentConclusionesDxServiceIdReport(string pstrServiceId)
        {
            //mon.IsActive = true;

            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
                var query = (from ccc in dbContext.diagnosticrepository
                             join bbb in dbContext.component on ccc.v_ComponentId equals bbb.v_ComponentId into J7_join
                             from bbb in J7_join.DefaultIfEmpty()

                             join ddd in dbContext.diseases on ccc.v_DiseasesId equals ddd.v_DiseasesId  // Diagnosticos                       

                             join fff in dbContext.systemparameter on new { a = ccc.i_PreQualificationId.Value, b = 137 } // PRE-CALIFICACION
                                                                 equals new { a = fff.i_ParameterId, b = fff.i_GroupId } into J5_join
                             from fff in J5_join.DefaultIfEmpty()

                             join ggg in dbContext.systemparameter on new { a = ccc.i_FinalQualificationId.Value, b = 138 } //CALIFICACION FINAL
                                                                 equals new { a = ggg.i_ParameterId, b = ggg.i_GroupId } into J4_join
                             from ggg in J4_join.DefaultIfEmpty()

                             join hhh in dbContext.systemparameter on new { a = ccc.i_DiagnosticTypeId.Value, b = 139 } // TIPO DE DX [Enfermedad comun, etc]
                                                                     equals new { a = hhh.i_ParameterId, b = hhh.i_GroupId } into J3_join
                             from hhh in J3_join.DefaultIfEmpty()

                             where (ccc.v_ServiceId == pstrServiceId) &&
                             (ccc.i_IsDeleted == 0) &&
                             (ccc.i_FinalQualificationId == (int)FinalQualification.Definitivo ||
                             ccc.i_FinalQualificationId == (int)FinalQualification.Presuntivo)
                             orderby bbb.v_Name

                             select new DiagnosticRepositoryList
                             {
                                 v_DiagnosticRepositoryId = ccc.v_DiagnosticRepositoryId,
                                 v_ServiceId = ccc.v_ServiceId,
                                 v_ComponentId = ccc.v_ComponentId,
                                 v_DiseasesId = ccc.v_DiseasesId,
                                 v_DiseasesName = ddd.v_Name,
                                 v_ComponentName = bbb.v_Name,
                                 v_PreQualificationName = fff.v_Value1,
                                 v_FinalQualificationName = ggg.v_Value1,
                                 v_DiagnosticTypeName = hhh.v_Value1,
                                 v_ComponentFieldsId = ccc.v_ComponentFieldId
                             }).ToList();

                // add the sequence number on the fly
                var finalQuery = query.Select((a, index) => new DiagnosticRepositoryList
                {
                    i_Item = index + 1,
                    v_DiagnosticRepositoryId = a.v_DiagnosticRepositoryId,
                    v_ServiceId = a.v_ServiceId,
                    v_ComponentId = a.v_ComponentId,
                    v_DiseasesId = a.v_DiseasesId,
                    v_DiseasesName = a.v_DiseasesName,
                    v_ComponentName = a.v_ComponentName,
                    v_DiagnosticTypeName = a.v_DiagnosticTypeName,
                    Recomendations = GetServiceRecommendationByDiagnosticRepositoryIdReport(a.v_DiagnosticRepositoryId),
                    Restrictions = GetServiceRestrictionByDiagnosticRepositoryIdReport(a.v_DiagnosticRepositoryId),
                    v_ComponentFieldsId = a.v_ComponentFieldsId
                }).ToList();

                return finalQuery;
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        //AMC
        public List<DiagnosticRepositoryList> GetDxByServiceId(string pstrServiceId)
        {
            //mon.IsActive = true;

            int isDeleted = (int)SiNo.NO;
            int definitivo = (int)FinalQualification.Definitivo;
            int presuntivo = (int)FinalQualification.Presuntivo;

            try
            {
                using (SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel())
                {
                    var query = (from ccc in dbContext.diagnosticrepository
                                 join bbb in dbContext.component on ccc.v_ComponentId equals bbb.v_ComponentId into J7_join
                                 from bbb in J7_join.DefaultIfEmpty()
                                 join ddd in dbContext.diseases on ccc.v_DiseasesId equals ddd.v_DiseasesId  // Diagnosticos                       
                                 where (ccc.v_ServiceId == pstrServiceId) &&
                                     (ccc.i_IsDeleted == isDeleted) &&
                                     (ccc.i_FinalQualificationId == definitivo ||
                                     ccc.i_FinalQualificationId == presuntivo)
                                 //orderby bbb.v_Name

                                 select new DiagnosticRepositoryList
                                 {
                                     v_DiagnosticRepositoryId = ccc.v_DiagnosticRepositoryId,
                                     v_ServiceId = ccc.v_ServiceId,
                                     v_ComponentId = ccc.v_ComponentId,
                                     v_DiseasesId = ccc.v_DiseasesId,
                                     v_DiseasesName = ddd.v_Name,
                                     v_ComponentName = bbb.v_Name
                                 }).ToList();

                    return query;
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }



        // Alejandro
        public bool IsPsicoExamIntoServiceComponent(string pstrserviceId)
        {
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                var objEntity = (from A in dbContext.service

                                 join E in dbContext.servicecomponent on new { a = A.v_ServiceId, b = "N002-ME000000033" }
                                                                        equals new { a = E.v_ServiceId, b = E.v_ComponentId }
                                 where (A.v_ServiceId == pstrserviceId) &&
                                       (E.i_IsRequiredId == (int)SiNo.SI)

                                 select new ServiceList
                                 {
                                     v_ServiceComponentId = E.v_ServiceComponentId
                                 }).FirstOrDefault();

                if (objEntity != null)
                {
                    return true;
                }
            }
            catch (Exception)
            {

                throw;
            }

            return false;

        }



        //AMC

        public List<ServiceList> ReportAscensoGrandesAlturas(string pstrserviceId, string pstrComponentId)
        {
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();


                var objEntity = (from A in dbContext.service
                                 join B in dbContext.person on A.v_PersonId equals B.v_PersonId
                                 join E in dbContext.servicecomponent on new { a = pstrserviceId, b = pstrComponentId }
                                                                        equals new { a = E.v_ServiceId, b = E.v_ComponentId }

                                 //join F in dbContext.systemuser on E.i_UpdateUserId equals F.i_SystemUserId into F_join
                                 //from F in F_join.DefaultIfEmpty()


                                 // Usuario Medico Evaluador / Medico Aprobador ****************************
                                 join me in dbContext.systemuser on E.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
                                 from me in me_join.DefaultIfEmpty()

                                 join pme in dbContext.professional on me.v_PersonId equals pme.v_PersonId into pme_join
                                 from pme in pme_join.DefaultIfEmpty()

                                 join G in dbContext.professional on new { a = me.v_PersonId }
                                                                      equals new { a = G.v_PersonId } into G_join
                                 from G in G_join.DefaultIfEmpty()

                                 join H in dbContext.person on me.v_PersonId equals H.v_PersonId into H_join
                                 from H in H_join.DefaultIfEmpty()

                                 join I in dbContext.protocol on A.v_ProtocolId equals I.v_ProtocolId into I_join
                                 from I in I_join.DefaultIfEmpty()

                                 join J in dbContext.organization on I.v_CustomerOrganizationId equals J.v_OrganizationId into J_join
                                 from J in J_join.DefaultIfEmpty()

                                 join K in dbContext.organization on A.v_EmpresaFacturacionId equals K.v_OrganizationId into K_join
                                 from K in K_join.DefaultIfEmpty()

                                 where A.v_ServiceId == pstrserviceId
                                 select new ServiceList
                                 {
                                     v_PersonId = A.v_PersonId,
                                     v_NamePacient = B.v_FirstName,
                                     v_Surnames = B.v_FirstLastName + " " + B.v_SecondLastName,
                                     DireccionPaciente = B.v_AdressLocation,
                                     d_BirthDate = B.d_Birthdate,
                                     d_ServiceDate = A.d_ServiceDate,
                                     v_ServiceId = A.v_ServiceId,
                                     v_DocNumber = B.v_DocNumber,
                                     i_SexTypeId = B.i_SexTypeId.Value,
                                     FirmaMedico = pme.b_SignatureImage,
                                     ApellidosDoctor = H.v_FirstLastName + " " + H.v_SecondLastName,
                                     NombreDoctor = H.v_FirstName,
                                     CMP = pme.v_ProfessionalCode,
                                     DireccionDoctor = H.v_AdressLocation,
                                     EmpresaEmpleadora = K.v_Name,
                                     FirmaTrabajador = B.b_RubricImage,
                                     HuellaTrabajador = B.b_FingerPrintImage,
                                     v_ServiceComponentId = E.v_ServiceComponentId
                                 });

                var MedicalCenter = GetInfoMedicalCenter();

                var funcionesVitales = ReportFuncionesVitales(pstrserviceId, Constants.FUNCIONES_VITALES_ID);
                var antropometria = ReportAntropometria(pstrserviceId, Constants.ANTROPOMETRIA_ID);

                var sql = (from a in objEntity.ToList()
                           select new ServiceList
                           {
                               v_ServiceId = a.v_ServiceId,
                               v_ServiceComponentId = a.v_ServiceComponentId,
                               v_PersonId = a.v_PersonId,
                               v_NamePacient = a.v_NamePacient,
                               DireccionPaciente = a.DireccionPaciente,
                               v_Surnames = a.v_Surnames,
                               d_BirthDate = a.d_BirthDate,
                               i_AgePacient = GetAge(a.d_BirthDate.Value),
                               d_ServiceDate = a.d_ServiceDate,
                               v_DocNumber = a.v_DocNumber,
                               i_SexTypeId = a.i_SexTypeId,
                               FirmaMedico = a.FirmaMedico,
                               Anemia = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.ALTURA_7D_ANEMIA_ID, "NOCOMBO", 0, "SI"),
                               Cirugia = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.ASCENSO_GRANDES_ALTURAS_CIRUGIA_MAYOR_CRECIENTE_ID, "NOCOMBO", 0, "SI"),
                               Desordenes = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.ASCENSO_GRANDES_ALTURAS_DESORDENES_COAGULACION_ID, "NOCOMBO", 0, "SI"),
                               Diabetes = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.ASCENSO_GRANDES_ALTURAS_DIABETES_MELLITUS_ID, "NOCOMBO", 0, "SI"),
                               Hipertension = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.ASCENSO_GRANDES_ALTURAS_HIPERTENSION_ARTERIAL_ID, "NOCOMBO", 0, "SI"),
                               Embarazo = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.ASCENSO_GRANDES_ALTURAS_EMBARAZO_ID, "NOCOMBO", 0, "SI"),
                               ProbNeurologicos = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.ASCENSO_GRANDES_ALTURAS_PROBLEMAS_NEUROLOGICOS_ID, "NOCOMBO", 0, "SI"),
                               Infecciones = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.ASCENSO_GRANDES_ALTURAS_INFECCIONES_RECIENTES_ID, "NOCOMBO", 0, "SI"),
                               Obesidad = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.ASCENSO_GRANDES_ALTURAS_OBESIDAD_MORBIDA_ID, "NOCOMBO", 0, "SI"),
                               ProCardiacos = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.ASCENSO_GRANDES_ALTURAS_PROBLEMAS_CARDIACOS_ID, "NOCOMBO", 0, "SI"),
                               ProRespiratorios = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.ASCENSO_GRANDES_ALTURAS_PROBLEMAS_RESPIRATORIOS_ID, "NOCOMBO", 0, "SI"),
                               ProOftalmologico = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.ASCENSO_GRANDES_ALTURAS_PROBLEMAS_OFTALMOLOGICOS_ID, "NOCOMBO", 0, "SI"),
                               ProDigestivo = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.ASCENSO_GRANDES_ALTURAS_PROBLEMAS_DIGESTIVOS_ID, "NOCOMBO", 0, "SI"),
                               Apnea = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.ASCENSO_GRANDES_ALTURAS_APNEA_SUEÑO_ID, "NOCOMBO", 0, "SI"),
                               Otra = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.ASCENSO_GRANDES_ALTURAS_OTRA_CONDICON_ID, "NOCOMBO", 0, "SI"),
                               Alergia = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.ASCENSO_GRANDES_ALTURAS_ALERGIAS_ID, "NOCOMBO", 0, "SI"),
                               MedicacionActual = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.ASCENSO_GRANDES_ALTURAS_USO_MEDICACION_ACTUAL_ID, "NOCOMBO", 0, "SI"),
                               AptoAscenderAlturas = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.ASCENSO_GRANDES_ALTURAS_APTO_ASCENDER_GRANDES_ALTURAS_ID, "SICOMBO", 163, "NO"),
                               ActividadRealizar = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.ASCENSO_GRANDES_ALTURAS_ACTIVIDAD_REALIZAR_DESCRIPCION_ID, "NOCOMBO", 0, "SI"),
                               ApellidosDoctor = a.ApellidosDoctor,
                               NombreDoctor = a.NombreDoctor,
                               CMP = a.CMP,
                               DireccionDoctor = a.DireccionDoctor,
                               EmpresaEmpleadora = a.EmpresaEmpleadora,
                               FirmaTrabajador = a.FirmaTrabajador,
                               HuellaTrabajador = a.HuellaTrabajador,
                               Descripcion = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.ALTURA_7D_DESCRIPCION_ID, "NOCOMBO", 0, "SI"),

                               b_Logo = MedicalCenter.b_Image,
                               EmpresaPropietaria = MedicalCenter.v_Name,
                               EmpresaPropietariaDireccion = MedicalCenter.v_Address,
                               EmpresaPropietariaTelefono = MedicalCenter.v_PhoneNumber,
                               EmpresaPropietariaEmail = MedicalCenter.v_Mail,

                           }).ToList();

                return sql;
            }
            catch (Exception)
            {

                throw;
            }
        }

        public List<ServiceList> ReportFuncionesVitales(string pstrserviceId, string pstrComponentId)
        {
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();


                var objEntity = (from A in dbContext.service
                                 join B in dbContext.person on A.v_PersonId equals B.v_PersonId
                                 join E in dbContext.servicecomponent on new { a = pstrserviceId, b = pstrComponentId }
                                                                        equals new { a = E.v_ServiceId, b = E.v_ComponentId }

                                 //join F in dbContext.systemuser on E.i_UpdateUserId equals F.i_SystemUserId

                                 //join G in dbContext.professional on new { a = F.v_PersonId }
                                 //                                     equals new { a = G.v_PersonId } into G_join
                                 //from G in G_join.DefaultIfEmpty()

                                 //join H in dbContext.person on F.v_PersonId equals H.v_PersonId

                                 //join I in dbContext.protocol on A.v_ProtocolId equals I.v_ProtocolId

                                 //join J in dbContext.organization on I.v_EmployerOrganizationId equals J.v_OrganizationId


                                 where A.v_ServiceId == pstrserviceId
                                 select new ServiceList
                                 {
                                     v_PersonId = A.v_PersonId,
                                     v_NamePacient = B.v_FirstName,
                                     v_Surnames = B.v_FirstLastName + " " + B.v_SecondLastName,
                                     DireccionPaciente = B.v_AdressLocation,
                                     d_BirthDate = B.d_Birthdate,
                                     d_ServiceDate = A.d_ServiceDate,
                                     v_ServiceId = A.v_ServiceId,
                                     v_DocNumber = B.v_DocNumber


                                 });

                var sql = (from a in objEntity.ToList()
                           select new ServiceList
                           {

                               FC = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.FUNCIONES_VITALES_FREC_CARDIACA_ID, "NOCOMBO", 0, "SI"),
                               PA = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.FUNCIONES_VITALES_PAS_ID, "NOCOMBO", 0, "SI"),
                               FR = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.FUNCIONES_VITALES_FREC_RESPIRATORIA_ID, "NOCOMBO", 0, "SI"),
                               //IMC = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.FUNCIONES_VITALES_im_ID, "NOCOMBO", 0, "SI"),
                               Sat = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.FUNCIONES_VITALES_SAT_O2_ID, "NOCOMBO", 0, "SI"),
                               PAD = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.FUNCIONES_VITALES_PAD_ID, "NOCOMBO", 0, "SI")

                           }).ToList();

                return sql;
            }
            catch (Exception)
            {

                throw;
            }
        }

        public List<ServiceList> ReportAntropometria(string pstrserviceId, string pstrComponentId)
        {
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();


                var objEntity = (from A in dbContext.service
                                 join B in dbContext.person on A.v_PersonId equals B.v_PersonId
                                 join E in dbContext.servicecomponent on new { a = pstrserviceId, b = pstrComponentId }
                                                                        equals new { a = E.v_ServiceId, b = E.v_ComponentId }

                                 //join F in dbContext.systemuser on E.i_UpdateUserId equals F.i_SystemUserId

                                 //join G in dbContext.professional on new { a = F.v_PersonId }
                                 //                                     equals new { a = G.v_PersonId } into G_join
                                 //from G in G_join.DefaultIfEmpty()

                                 //join H in dbContext.person on F.v_PersonId equals H.v_PersonId

                                 //join I in dbContext.protocol on A.v_ProtocolId equals I.v_ProtocolId

                                 //join J in dbContext.organization on I.v_EmployerOrganizationId equals J.v_OrganizationId


                                 where A.v_ServiceId == pstrserviceId
                                 select new ServiceList
                                 {
                                     v_PersonId = A.v_PersonId,
                                     v_NamePacient = B.v_FirstName,
                                     v_Surnames = B.v_FirstLastName + " " + B.v_SecondLastName,
                                     DireccionPaciente = B.v_AdressLocation,
                                     d_BirthDate = B.d_Birthdate,
                                     d_ServiceDate = A.d_ServiceDate,
                                     v_ServiceId = A.v_ServiceId,
                                     v_DocNumber = B.v_DocNumber


                                 }).ToList();

                var sql = (from a in objEntity.ToList()
                           select new ServiceList
                           {
                               IMC = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.ANTROPOMETRIA_IMC_ID, "NOCOMBO", 0, "SI"),
                               Peso = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.ANTROPOMETRIA_PESO_ID, "NOCOMBO", 0, "SI"),
                               talla = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.ANTROPOMETRIA_TALLA_ID, "NOCOMBO", 0, "SI"),
                           }).ToList();

                return sql;
            }
            catch (Exception)
            {

                throw;
            }
        }

        public string GetServiceComponentFielValue(string pstrServiceId, string pstrComponentId, string pstrFieldId, string Type, int pintParameter, string pstrConX)
        {
            try
            {
                ServiceBL oServiceBL = new ServiceBL();
                List<ServiceComponentFieldValuesList> oServiceComponentFieldValuesList = new List<ServiceComponentFieldValuesList>();
                string xx = "";
                if (Type == "NOCOMBO")
                {
                    oServiceComponentFieldValuesList = oServiceBL.ValoresComponente(pstrServiceId, pstrComponentId);
                    xx = oServiceComponentFieldValuesList.Count() == 0 || ((ServiceComponentFieldValuesList)oServiceComponentFieldValuesList.Find(p => p.v_ComponentFieldId == pstrFieldId)) == null ? string.Empty : ((ServiceComponentFieldValuesList)oServiceComponentFieldValuesList.Find(p => p.v_ComponentFieldId == pstrFieldId)).v_Value1;
                }
                else
                {
                    oServiceComponentFieldValuesList = oServiceBL.ValoresExamenComponete(pstrServiceId, pstrComponentId, pintParameter);
                    if (pstrConX == "SI")
                    {
                        xx = oServiceComponentFieldValuesList.Count() == 0 ? string.Empty : ((ServiceComponentFieldValuesList)oServiceComponentFieldValuesList.Find(p => p.v_ComponentFieldId == pstrFieldId)).v_Value1;
                    }
                    else
                    {
                        xx = oServiceComponentFieldValuesList.Count() == 0 ? string.Empty : ((ServiceComponentFieldValuesList)oServiceComponentFieldValuesList.Find(p => p.v_ComponentFieldId == pstrFieldId)).v_Value1Name;
                    }

                }

                return xx;
            }
            catch (Exception)
            {

                throw;
            }
        }
        public class Data
        {
            public string _Key { get; set; }
            public string StringData { get; set; }
        }
        public List<ServiceComponentFieldValuesList> GetValueOdontograma(string pstrServiceId, string pstrComponentId, string pstrpath)
        {
            try
            {
                ServiceBL oServiceBL = new ServiceBL();
                List<ServiceComponentFieldValuesList> oServiceComponentFieldValuesList = new List<ServiceComponentFieldValuesList>();
                List<ServiceComponentFieldValuesList> oServiceComponentFieldValuesList1 = new List<ServiceComponentFieldValuesList>();


                oServiceComponentFieldValuesList = oServiceBL.ValoresComponenteOdontograma(pstrServiceId, pstrComponentId, pstrpath);
                //var xx = oServiceComponentFieldValuesList.Count() == 0 || ((ServiceComponentFieldValuesList)oServiceComponentFieldValuesList.Find(p => p.v_ComponentFieldId == pstrFieldId)) == null ? string.Empty : ((ServiceComponentFieldValuesList)oServiceComponentFieldValuesList.Find(p => p.v_ComponentFieldId == pstrFieldId)).v_Value1;

                #region Comentado

                oServiceComponentFieldValuesList1 = ValoresComponenteOdontogramaValue1(pstrServiceId, pstrComponentId);

                List<Data> x = new List<Data>();
                Data y = new Data();

                x.Add(new Data() { _Key = "", StringData = "" });
                x.Add(new Data() { _Key = Constants.D11_1, StringData = "11" });
                x.Add(new Data() { _Key = Constants.D11_2, StringData = "11" });
                x.Add(new Data() { _Key = Constants.D11_3, StringData = "11" });
                x.Add(new Data() { _Key = Constants.D11_4, StringData = "11" });
                x.Add(new Data() { _Key = Constants.D11_5, StringData = "11" });

                x.Add(new Data() { _Key = Constants.D12_1, StringData = "12" });
                x.Add(new Data() { _Key = Constants.D12_2, StringData = "12" });
                x.Add(new Data() { _Key = Constants.D12_3, StringData = "12" });
                x.Add(new Data() { _Key = Constants.D12_4, StringData = "12" });
                x.Add(new Data() { _Key = Constants.D12_5, StringData = "12" });

                x.Add(new Data() { _Key = Constants.D13_1, StringData = "13" });
                x.Add(new Data() { _Key = Constants.D13_2, StringData = "13" });
                x.Add(new Data() { _Key = Constants.D13_3, StringData = "13" });
                x.Add(new Data() { _Key = Constants.D13_4, StringData = "13" });
                x.Add(new Data() { _Key = Constants.D13_5, StringData = "13" });

                x.Add(new Data() { _Key = Constants.D14_1, StringData = "14" });
                x.Add(new Data() { _Key = Constants.D14_2, StringData = "14" });
                x.Add(new Data() { _Key = Constants.D14_3, StringData = "14" });
                x.Add(new Data() { _Key = Constants.D14_4, StringData = "14" });
                x.Add(new Data() { _Key = Constants.D14_5, StringData = "14" });

                x.Add(new Data() { _Key = Constants.D15_1, StringData = "15" });
                x.Add(new Data() { _Key = Constants.D15_2, StringData = "15" });
                x.Add(new Data() { _Key = Constants.D15_3, StringData = "15" });
                x.Add(new Data() { _Key = Constants.D15_4, StringData = "15" });
                x.Add(new Data() { _Key = Constants.D15_5, StringData = "15" });

                x.Add(new Data() { _Key = Constants.D16_1, StringData = "16" });
                x.Add(new Data() { _Key = Constants.D16_2, StringData = "16" });
                x.Add(new Data() { _Key = Constants.D16_3, StringData = "16" });
                x.Add(new Data() { _Key = Constants.D16_4, StringData = "16" });
                x.Add(new Data() { _Key = Constants.D16_5, StringData = "16" });

                x.Add(new Data() { _Key = Constants.D17_1, StringData = "17" });
                x.Add(new Data() { _Key = Constants.D17_2, StringData = "17" });
                x.Add(new Data() { _Key = Constants.D17_3, StringData = "17" });
                x.Add(new Data() { _Key = Constants.D17_4, StringData = "17" });
                x.Add(new Data() { _Key = Constants.D17_5, StringData = "17" });

                x.Add(new Data() { _Key = Constants.D18_1, StringData = "18" });
                x.Add(new Data() { _Key = Constants.D18_2, StringData = "18" });
                x.Add(new Data() { _Key = Constants.D18_3, StringData = "18" });
                x.Add(new Data() { _Key = Constants.D18_4, StringData = "18" });
                x.Add(new Data() { _Key = Constants.D18_5, StringData = "18" });

                //--------------
                x.Add(new Data() { _Key = Constants.D21_1, StringData = "21" });
                x.Add(new Data() { _Key = Constants.D21_2, StringData = "21" });
                x.Add(new Data() { _Key = Constants.D21_3, StringData = "21" });
                x.Add(new Data() { _Key = Constants.D21_4, StringData = "21" });
                x.Add(new Data() { _Key = Constants.D21_5, StringData = "21" });

                x.Add(new Data() { _Key = Constants.D22_1, StringData = "22" });
                x.Add(new Data() { _Key = Constants.D22_2, StringData = "22" });
                x.Add(new Data() { _Key = Constants.D22_3, StringData = "22" });
                x.Add(new Data() { _Key = Constants.D22_4, StringData = "22" });
                x.Add(new Data() { _Key = Constants.D22_5, StringData = "22" });

                x.Add(new Data() { _Key = Constants.D23_1, StringData = "23" });
                x.Add(new Data() { _Key = Constants.D23_2, StringData = "23" });
                x.Add(new Data() { _Key = Constants.D23_3, StringData = "23" });
                x.Add(new Data() { _Key = Constants.D23_4, StringData = "23" });
                x.Add(new Data() { _Key = Constants.D23_5, StringData = "23" });

                x.Add(new Data() { _Key = Constants.D24_1, StringData = "24" });
                x.Add(new Data() { _Key = Constants.D24_2, StringData = "24" });
                x.Add(new Data() { _Key = Constants.D24_3, StringData = "24" });
                x.Add(new Data() { _Key = Constants.D24_4, StringData = "24" });
                x.Add(new Data() { _Key = Constants.D24_5, StringData = "24" });

                x.Add(new Data() { _Key = Constants.D25_1, StringData = "25" });
                x.Add(new Data() { _Key = Constants.D25_2, StringData = "25" });
                x.Add(new Data() { _Key = Constants.D25_3, StringData = "25" });
                x.Add(new Data() { _Key = Constants.D25_4, StringData = "25" });
                x.Add(new Data() { _Key = Constants.D25_5, StringData = "25" });

                x.Add(new Data() { _Key = Constants.D26_1, StringData = "26" });
                x.Add(new Data() { _Key = Constants.D26_2, StringData = "26" });
                x.Add(new Data() { _Key = Constants.D26_3, StringData = "26" });
                x.Add(new Data() { _Key = Constants.D26_4, StringData = "26" });
                x.Add(new Data() { _Key = Constants.D26_5, StringData = "26" });

                x.Add(new Data() { _Key = Constants.D27_1, StringData = "27" });
                x.Add(new Data() { _Key = Constants.D27_2, StringData = "27" });
                x.Add(new Data() { _Key = Constants.D27_3, StringData = "27" });
                x.Add(new Data() { _Key = Constants.D27_4, StringData = "27" });
                x.Add(new Data() { _Key = Constants.D27_5, StringData = "27" });

                x.Add(new Data() { _Key = Constants.D28_1, StringData = "28" });
                x.Add(new Data() { _Key = Constants.D28_2, StringData = "28" });
                x.Add(new Data() { _Key = Constants.D28_3, StringData = "28" });
                x.Add(new Data() { _Key = Constants.D28_4, StringData = "28" });
                x.Add(new Data() { _Key = Constants.D28_5, StringData = "28" });
                //------------------------
                x.Add(new Data() { _Key = Constants.D31_1, StringData = "31" });
                x.Add(new Data() { _Key = Constants.D31_2, StringData = "31" });
                x.Add(new Data() { _Key = Constants.D31_3, StringData = "31" });
                x.Add(new Data() { _Key = Constants.D31_4, StringData = "31" });
                x.Add(new Data() { _Key = Constants.D31_5, StringData = "31" });

                x.Add(new Data() { _Key = Constants.D32_1, StringData = "32" });
                x.Add(new Data() { _Key = Constants.D32_2, StringData = "32" });
                x.Add(new Data() { _Key = Constants.D32_3, StringData = "32" });
                x.Add(new Data() { _Key = Constants.D32_4, StringData = "32" });
                x.Add(new Data() { _Key = Constants.D32_5, StringData = "32" });

                x.Add(new Data() { _Key = Constants.D33_1, StringData = "33" });
                x.Add(new Data() { _Key = Constants.D33_2, StringData = "33" });
                x.Add(new Data() { _Key = Constants.D33_3, StringData = "33" });
                x.Add(new Data() { _Key = Constants.D33_4, StringData = "33" });
                x.Add(new Data() { _Key = Constants.D33_5, StringData = "33" });

                x.Add(new Data() { _Key = Constants.D34_1, StringData = "34" });
                x.Add(new Data() { _Key = Constants.D34_2, StringData = "34" });
                x.Add(new Data() { _Key = Constants.D34_3, StringData = "34" });
                x.Add(new Data() { _Key = Constants.D34_4, StringData = "34" });
                x.Add(new Data() { _Key = Constants.D34_5, StringData = "34" });

                x.Add(new Data() { _Key = Constants.D35_1, StringData = "35" });
                x.Add(new Data() { _Key = Constants.D35_2, StringData = "35" });
                x.Add(new Data() { _Key = Constants.D35_3, StringData = "35" });
                x.Add(new Data() { _Key = Constants.D35_4, StringData = "35" });
                x.Add(new Data() { _Key = Constants.D35_5, StringData = "35" });

                x.Add(new Data() { _Key = Constants.D36_1, StringData = "36" });
                x.Add(new Data() { _Key = Constants.D36_2, StringData = "36" });
                x.Add(new Data() { _Key = Constants.D36_3, StringData = "36" });
                x.Add(new Data() { _Key = Constants.D36_4, StringData = "36" });
                x.Add(new Data() { _Key = Constants.D36_5, StringData = "36" });

                x.Add(new Data() { _Key = Constants.D37_1, StringData = "37" });
                x.Add(new Data() { _Key = Constants.D37_2, StringData = "37" });
                x.Add(new Data() { _Key = Constants.D37_3, StringData = "37" });
                x.Add(new Data() { _Key = Constants.D37_4, StringData = "37" });
                x.Add(new Data() { _Key = Constants.D37_5, StringData = "37" });

                x.Add(new Data() { _Key = Constants.D38_1, StringData = "38" });
                x.Add(new Data() { _Key = Constants.D38_2, StringData = "38" });
                x.Add(new Data() { _Key = Constants.D38_3, StringData = "38" });
                x.Add(new Data() { _Key = Constants.D38_4, StringData = "38" });
                x.Add(new Data() { _Key = Constants.D38_5, StringData = "38" });
                //---------------------
                x.Add(new Data() { _Key = Constants.D41_1, StringData = "41" });
                x.Add(new Data() { _Key = Constants.D41_2, StringData = "41" });
                x.Add(new Data() { _Key = Constants.D41_3, StringData = "41" });
                x.Add(new Data() { _Key = Constants.D41_4, StringData = "41" });
                x.Add(new Data() { _Key = Constants.D41_5, StringData = "41" });

                x.Add(new Data() { _Key = Constants.D42_1, StringData = "42" });
                x.Add(new Data() { _Key = Constants.D42_2, StringData = "42" });
                x.Add(new Data() { _Key = Constants.D42_3, StringData = "42" });
                x.Add(new Data() { _Key = Constants.D42_4, StringData = "42" });
                x.Add(new Data() { _Key = Constants.D42_5, StringData = "42" });

                x.Add(new Data() { _Key = Constants.D43_1, StringData = "43" });
                x.Add(new Data() { _Key = Constants.D43_2, StringData = "43" });
                x.Add(new Data() { _Key = Constants.D43_3, StringData = "43" });
                x.Add(new Data() { _Key = Constants.D43_4, StringData = "43" });
                x.Add(new Data() { _Key = Constants.D43_5, StringData = "43" });

                x.Add(new Data() { _Key = Constants.D44_1, StringData = "44" });
                x.Add(new Data() { _Key = Constants.D44_2, StringData = "44" });
                x.Add(new Data() { _Key = Constants.D44_3, StringData = "44" });
                x.Add(new Data() { _Key = Constants.D44_4, StringData = "44" });
                x.Add(new Data() { _Key = Constants.D44_5, StringData = "44" });

                x.Add(new Data() { _Key = Constants.D45_1, StringData = "45" });
                x.Add(new Data() { _Key = Constants.D45_2, StringData = "45" });
                x.Add(new Data() { _Key = Constants.D45_3, StringData = "45" });
                x.Add(new Data() { _Key = Constants.D45_4, StringData = "45" });
                x.Add(new Data() { _Key = Constants.D45_5, StringData = "45" });

                x.Add(new Data() { _Key = Constants.D46_1, StringData = "46" });
                x.Add(new Data() { _Key = Constants.D46_2, StringData = "46" });
                x.Add(new Data() { _Key = Constants.D46_3, StringData = "46" });
                x.Add(new Data() { _Key = Constants.D46_4, StringData = "46" });
                x.Add(new Data() { _Key = Constants.D46_5, StringData = "46" });

                x.Add(new Data() { _Key = Constants.D47_1, StringData = "47" });
                x.Add(new Data() { _Key = Constants.D47_2, StringData = "47" });
                x.Add(new Data() { _Key = Constants.D47_3, StringData = "47" });
                x.Add(new Data() { _Key = Constants.D47_4, StringData = "47" });
                x.Add(new Data() { _Key = Constants.D47_5, StringData = "47" });

                x.Add(new Data() { _Key = Constants.D48_1, StringData = "48" });
                x.Add(new Data() { _Key = Constants.D48_2, StringData = "48" });
                x.Add(new Data() { _Key = Constants.D48_3, StringData = "48" });
                x.Add(new Data() { _Key = Constants.D48_4, StringData = "48" });
                x.Add(new Data() { _Key = Constants.D48_5, StringData = "48" });

                var rangodientes = x.ToList();
                foreach (var item in oServiceComponentFieldValuesList1)
                {

                    var NroDiente = rangodientes.Find(p => p._Key == item.v_ComponentFieldId) == null ? "" : rangodientes.Find(p => p._Key == item.v_ComponentFieldId).StringData;//.f x[item.v_ComponentFieldId];
                    var valorDiente = oServiceComponentFieldValuesList1.Count() == 0 || ((ServiceComponentFieldValuesList)oServiceComponentFieldValuesList1.Find(p => p.v_ComponentFieldId == item.v_ComponentFieldId)) == null ? string.Empty : ((ServiceComponentFieldValuesList)oServiceComponentFieldValuesList1.Find(p => p.v_ComponentFieldId == item.v_ComponentFieldId)).v_Value1;
                    #region SWITCH
                    switch (NroDiente)
                    {
                        case "18":
                            if (valorDiente == "3")
                            {
                                //ContadorD18 = 1;
                                ListaDiente.Add(18);
                            }
                            break;
                        case "17":
                            if (valorDiente == "3")
                            {
                                ListaDiente.Add(17);
                            }
                            break;
                        case "16":
                            if (valorDiente == "3")
                            {
                                ListaDiente.Add(16);
                            }
                            break;
                        case "15":
                            if (valorDiente == "3")
                            {
                                ListaDiente.Add(15);
                            }
                            break;
                        case "14":
                            if (valorDiente == "3")
                            {
                                ListaDiente.Add(14);
                            }
                            break;
                        case "13":
                            if (valorDiente == "3")
                            {
                                ListaDiente.Add(13);
                            }
                            break;
                        case "12":
                            if (valorDiente == "3")
                            {
                                ListaDiente.Add(12);
                            }
                            break;
                        case "11":
                            if (valorDiente == "3")
                            {
                                ListaDiente.Add(11);
                            }
                            break;

                        //--------------------------------------

                        case "21":
                            if (valorDiente == "3")
                            {
                                //ContadorD18 = 1;
                                ListaDiente.Add(21);
                            }
                            break;
                        case "22":
                            if (valorDiente == "3")
                            {
                                ListaDiente.Add(22);
                            }
                            break;
                        case "23":
                            if (valorDiente == "3")
                            {
                                ListaDiente.Add(23);
                            }
                            break;
                        case "24":
                            if (valorDiente == "3")
                            {
                                ListaDiente.Add(24);
                            }
                            break;
                        case "25":
                            if (valorDiente == "3")
                            {
                                ListaDiente.Add(25);
                            }
                            break;
                        case "26":
                            if (valorDiente == "3")
                            {
                                ListaDiente.Add(26);
                            }
                            break;
                        case "27":
                            if (valorDiente == "3")
                            {
                                ListaDiente.Add(27);
                            }
                            break;
                        case "28":
                            if (valorDiente == "3")
                            {
                                ListaDiente.Add(28);
                            }
                            break;

                        //------------------------------

                        case "31":
                            if (valorDiente == "3")
                            {
                                //ContadorD18 = 1;
                                ListaDiente.Add(31);
                            }
                            break;
                        case "32":
                            if (valorDiente == "3")
                            {
                                ListaDiente.Add(32);
                            }
                            break;
                        case "33":
                            if (valorDiente == "3")
                            {
                                ListaDiente.Add(33);
                            }
                            break;
                        case "34":
                            if (valorDiente == "3")
                            {
                                ListaDiente.Add(34);
                            }
                            break;
                        case "35":
                            if (valorDiente == "3")
                            {
                                ListaDiente.Add(35);
                            }
                            break;
                        case "36":
                            if (valorDiente == "3")
                            {
                                ListaDiente.Add(36);
                            }
                            break;
                        case "37":
                            if (valorDiente == "3")
                            {
                                ListaDiente.Add(37);
                            }
                            break;
                        case "38":
                            if (valorDiente == "3")
                            {
                                ListaDiente.Add(38);
                            }
                            break;

                        //------------------------------

                        case "41":
                            if (valorDiente == "3")
                            {
                                //ContadorD18 = 1;
                                ListaDiente.Add(41);
                            }
                            break;
                        case "42":
                            if (valorDiente == "3")
                            {
                                ListaDiente.Add(42);
                            }
                            break;
                        case "43":
                            if (valorDiente == "3")
                            {
                                ListaDiente.Add(43);
                            }
                            break;
                        case "44":
                            if (valorDiente == "3")
                            {
                                ListaDiente.Add(44);
                            }
                            break;
                        case "45":
                            if (valorDiente == "3")
                            {
                                ListaDiente.Add(45);
                            }
                            break;
                        case "46":
                            if (valorDiente == "3")
                            {
                                ListaDiente.Add(46);
                            }
                            break;
                        case "47":
                            if (valorDiente == "3")
                            {
                                ListaDiente.Add(47);
                            }
                            break;
                        case "48":
                            if (valorDiente == "3")
                            {
                                ListaDiente.Add(48);
                            }
                            break;
                        default:
                            break;
                    }
                    #endregion

                }
                #endregion



                return oServiceComponentFieldValuesList;
            }
            catch (Exception)
            {

                throw;
            }

        }
        public List<ValorComponenteList> GetListValueComponent(string pstrServiceId, string pstrComponentId)
        {
            SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

            int isDeleted = (int)SiNo.NO;

            try
            {

                var PreQuery = (from A in dbContext.service
                                join B in dbContext.servicecomponent on A.v_ServiceId equals B.v_ServiceId
                                join C in dbContext.servicecomponentfields on B.v_ServiceComponentId equals C.v_ServiceComponentId
                                join D in dbContext.servicecomponentfieldvalues on C.v_ServiceComponentFieldsId equals D.v_ServiceComponentFieldsId
                                join F in dbContext.componentfields on C.v_ComponentFieldId equals F.v_ComponentFieldId
                                join G in dbContext.componentfield on C.v_ComponentFieldId equals G.v_ComponentFieldId
                                join H in dbContext.component on F.v_ComponentId equals H.v_ComponentId
                                where A.v_ServiceId == pstrServiceId && B.v_ComponentId == pstrComponentId
                                        && B.i_IsDeleted == isDeleted
                                        && C.i_IsDeleted == isDeleted
                                select new ValorComponenteList
                                {
                                    ServicioId = A.v_ServiceId,
                                    Valor = D.v_Value1,
                                    NombreComponente = H.v_Name,
                                    IdComponente = C.v_ComponentId,
                                    NombreCampo = G.v_TextLabel,
                                    IdCampo = C.v_ComponentFieldId
                                }

                           ).ToList();


                return PreQuery;
            }
            catch (Exception)
            {

                throw;
            }

        }

        public List<ServiceComponentFieldValuesList> GetValueOdontogramaAusente(string pstrServiceId, string pstrComponentId, string pstrPath)
        {
            try
            {
                ServiceBL oServiceBL = new ServiceBL();
                List<ServiceComponentFieldValuesList> oServiceComponentFieldValuesList = new List<ServiceComponentFieldValuesList>();

                oServiceComponentFieldValuesList = oServiceBL.ValoresComponenteOdontogramaAusente(pstrServiceId, pstrComponentId, pstrPath);
                //var xx = oServiceComponentFieldValuesList.Count() == 0 || ((ServiceComponentFieldValuesList)oServiceComponentFieldValuesList.Find(p => p.v_ComponentFieldId == pstrFieldId)) == null ? String.Empty : ((ServiceComponentFieldValuesList)oServiceComponentFieldValuesList.Find(p => p.v_ComponentFieldId == pstrFieldId)).v_Value1;

                return oServiceComponentFieldValuesList;

            }
            catch (Exception)
            {

                throw;
            }

        }
        public List<ReportOdontograma> ReportOdontograma(string pstrserviceId, string pstrComponentId, string Path)
        {
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                var objEntity = (from A in dbContext.service
                                 join B in dbContext.person on A.v_PersonId equals B.v_PersonId
                                 join E in dbContext.servicecomponent on new { a = pstrserviceId, b = pstrComponentId }
                                                                        equals new { a = E.v_ServiceId, b = E.v_ComponentId }

                                 join I in dbContext.protocol on A.v_ProtocolId equals I.v_ProtocolId

                                 join J in dbContext.organization on I.v_CustomerOrganizationId equals J.v_OrganizationId into J_join
                                 from J in J_join.DefaultIfEmpty()

                                 join K in dbContext.organization on A.v_EmpresaFacturacionId equals K.v_OrganizationId into K_join
                                 from K in K_join.DefaultIfEmpty()

                                 // Usuario Medico Evaluador / Medico Aprobador ****************************
                                 join me in dbContext.systemuser on E.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
                                 from me in me_join.DefaultIfEmpty()

                                 join pme in dbContext.professional on me.v_PersonId equals pme.v_PersonId into pme_join
                                 from pme in pme_join.DefaultIfEmpty()
                                 //**************************************************************************************


                                 // Empresa / Sede Cliente ******************************************************
                                 join oc in dbContext.organization on new { a = I.v_CustomerOrganizationId }
                                         equals new { a = oc.v_OrganizationId } into oc_join
                                 from oc in oc_join.DefaultIfEmpty()

                                 join lc in dbContext.location on new { a = I.v_CustomerOrganizationId, b = I.v_CustomerLocationId }
                                       equals new { a = lc.v_OrganizationId, b = lc.v_LocationId } into lc_join
                                 from lc in lc_join.DefaultIfEmpty()

                                 //**********************************************************************************

                                 where A.v_ServiceId == pstrserviceId
                                 select new ReportOdontograma
                                 {
                                     IdServicio = A.v_ServiceId,
                                     Trabajador = B.v_FirstLastName + " " + B.v_SecondLastName + " " + B.v_FirstName,
                                     Fecha = A.d_ServiceDate.Value,
                                     Puesto = B.v_CurrentOccupation,
                                     Ficha = E.v_ServiceComponentId,
                                     FirmaMedico = pme.b_SignatureImage,
                                     FechaNacimiento = B.d_Birthdate,
                                     i_Sexo = B.i_SexTypeId.Value,
                                     Dni = B.v_DocNumber,
                                     i_TipoEso = I.i_EsoTypeId.Value,
                                     //EmpresaCliente = oc.v_Name,
                                     EmpresaCliente = K.v_Name,
                                     RazonSocialEmpresaCliente = K.v_Name,
                                     LogoEmpresaCliente = J.b_Image
                                 });

                var MedicalCenter = GetInfoMedicalCenter();
                var ValorDiente = GetValueOdontograma(pstrserviceId, pstrComponentId, Path).ToList();
                var ValorCampos = GetListValueComponent(pstrserviceId, pstrComponentId);
                var ValorDienteAusente = GetValueOdontogramaAusente(pstrserviceId, pstrComponentId, Path);
                var ValorUSerControl = ValoresComponentesUserControl(pstrserviceId, pstrComponentId);
                var sql = (from a in objEntity.ToList()
                           select new ReportOdontograma
                           {
                               IdServicio = a.IdServicio,
                               Trabajador = a.Trabajador,
                               Fecha = a.Fecha,
                               Puesto = a.Puesto,
                               Ficha = a.Ficha,
                               FirmaMedico = a.FirmaMedico,
                               Empresa = a.Empresa,
                               FechaNacimiento = a.FechaNacimiento,
                               Edad = GetAge(a.FechaNacimiento.Value),
                               i_Sexo = a.i_Sexo,
                               Sexo = a.i_Sexo == 1 ? "M" : "F",
                               Dni = a.Dni,
                               EmpresaFacturacion = a.EmpresaCliente,
                               EmpresaCliente = a.EmpresaCliente,
                               TipoEso = a.i_TipoEso.ToString(),
                               Tabaco = ValorCampos.Count() == 0 || ValorCampos.Find(p => p.IdCampo == Constants.ODONTOGRAMA_TABACO_ID) == null ? string.Empty : ValorCampos.Find(p => p.IdCampo == Constants.ODONTOGRAMA_TABACO_ID).Valor,
                               Diabetes = ValorCampos.Count() == 0 || ValorCampos.Find(p => p.IdCampo == Constants.ODONTOGRAMA_DIABETES_ID) == null ? string.Empty : ValorCampos.Find(p => p.IdCampo == Constants.ODONTOGRAMA_DIABETES_ID).Valor,
                               Tbc = ValorCampos.Count() == 0 || ValorCampos.Find(p => p.IdCampo == Constants.ODONTOGRAMA_TBC_ID) == null ? string.Empty : ValorCampos.Find(p => p.IdCampo == Constants.ODONTOGRAMA_TBC_ID).Valor,
                               Ets = ValorCampos.Count() == 0 || ValorCampos.Find(p => p.IdCampo == Constants.ODONTOGRAMA_ETS_ID) == null ? string.Empty : ValorCampos.Find(p => p.IdCampo == Constants.ODONTOGRAMA_ETS_ID).Valor,
                               Hematopatias = ValorCampos.Count() == 0 || ValorCampos.Find(p => p.IdCampo == Constants.ODONTOGRAMA_HEMATOPATIAS_ID) == null ? string.Empty : ValorCampos.Find(p => p.IdCampo == Constants.ODONTOGRAMA_HEMATOPATIAS_ID).Valor,
                               Obesidad = ValorCampos.Count() == 0 || ValorCampos.Find(p => p.IdCampo == Constants.ODONTOGRAMA_OBESIDAD_ID) == null ? string.Empty : ValorCampos.Find(p => p.IdCampo == Constants.ODONTOGRAMA_OBESIDAD_ID).Valor,
                               Periodontitis = ValorCampos.Count() == 0 || ValorCampos.Find(p => p.IdCampo == Constants.ODONTOGRAMA_PERIODONTITIS_ID) == null ? string.Empty : ValorCampos.Find(p => p.IdCampo == Constants.ODONTOGRAMA_PERIODONTITIS_ID).Valor,
                               Movilidad = ValorCampos.Count() == 0 || ValorCampos.Find(p => p.IdCampo == Constants.ODONTOGRAMA_MOVILIDAD_ID) == null ? string.Empty : ValorCampos.Find(p => p.IdCampo == Constants.ODONTOGRAMA_MOVILIDAD_ID).Valor,
                               Recesion = ValorCampos.Count() == 0 || ValorCampos.Find(p => p.IdCampo == Constants.ODONTOGRAMA_RECESION_ID) == null ? string.Empty : ValorCampos.Find(p => p.IdCampo == Constants.ODONTOGRAMA_RECESION_ID).Valor,
                               Exudacion = ValorCampos.Count() == 0 || ValorCampos.Find(p => p.IdCampo == Constants.ODONTOGRAMA_EXUDACION_ID) == null ? string.Empty : ValorCampos.Find(p => p.IdCampo == Constants.ODONTOGRAMA_EXUDACION_ID).Valor,
                               Gingivitis = ValorCampos.Count() == 0 || ValorCampos.Find(p => p.IdCampo == Constants.ODONTOGRAMA_GINGIVITIS_ID) == null ? string.Empty : ValorCampos.Find(p => p.IdCampo == Constants.ODONTOGRAMA_GINGIVITIS_ID).Valor,
                               BolsaPeriodontales = ValorCampos.Count() == 0 || ValorCampos.Find(p => p.IdCampo == Constants.ODONTOGRAMA_BOLSA_PERIODONTALES_ID) == null ? string.Empty : ValorCampos.Find(p => p.IdCampo == Constants.ODONTOGRAMA_BOLSA_PERIODONTALES_ID).Valor,
                               SarroDental = ValorCampos.Count() == 0 || ValorCampos.Find(p => p.IdCampo == Constants.ODONTOGRAMA_SARRO_DENTAL_ID) == null ? string.Empty : ValorCampos.Find(p => p.IdCampo == Constants.ODONTOGRAMA_SARRO_DENTAL_ID).Valor,
                               NecrosisPulpar = ValorCampos.Count() == 0 || ValorCampos.Find(p => p.IdCampo == Constants.ODONTOGRAMA_NECROSIS_PULPAR_ID) == null ? string.Empty : ValorCampos.Find(p => p.IdCampo == Constants.ODONTOGRAMA_NECROSIS_PULPAR_ID).Valor,
                               RazonSocialEmpresaCliente = a.LogoEmpresaCliente == null ? a.RazonSocialEmpresaCliente : "",
                               LogoEmpresaCliente = a.LogoEmpresaCliente,
                               //Tabaco = GetServiceComponentFielValue(a.IdServicio, pstrComponentId, Constants.ODONTOGRAMA_TABACO_ID, "NOCOMBO", 0, "SI"),
                               //Diabetes = GetServiceComponentFielValue(a.IdServicio, pstrComponentId, Constants.ODONTOGRAMA_DIABETES_ID, "NOCOMBO", 0, "SI"),
                               //Tbc = GetServiceComponentFielValue(a.IdServicio, pstrComponentId, Constants.ODONTOGRAMA_TBC_ID, "NOCOMBO", 0, "SI"),
                               //Ets = GetServiceComponentFielValue(a.IdServicio, pstrComponentId, Constants.ODONTOGRAMA_ETS_ID, "NOCOMBO", 0, "SI"),
                               //Hematopatias = GetServiceComponentFielValue(a.IdServicio, pstrComponentId, Constants.ODONTOGRAMA_HEMATOPATIAS_ID, "NOCOMBO", 0, "SI"),
                               //Obesidad = GetServiceComponentFielValue(a.IdServicio, pstrComponentId, Constants.ODONTOGRAMA_OBESIDAD_ID, "NOCOMBO", 0, "SI"),
                               //Periodontitis = GetServiceComponentFielValue(a.IdServicio, pstrComponentId, Constants.ODONTOGRAMA_PERIODONTITIS_ID, "NOCOMBO", 0, "SI"),
                               //Movilidad = GetServiceComponentFielValue(a.IdServicio, pstrComponentId, Constants.ODONTOGRAMA_MOVILIDAD_ID, "NOCOMBO", 0, "SI"),
                               //Recesion = GetServiceComponentFielValue(a.IdServicio, pstrComponentId, Constants.ODONTOGRAMA_RECESION_ID, "NOCOMBO", 0, "SI"),
                               //Exudacion = GetServiceComponentFielValue(a.IdServicio, pstrComponentId, Constants.ODONTOGRAMA_EXUDACION_ID, "NOCOMBO", 0, "SI"),
                               //Gingivitis = GetServiceComponentFielValue(a.IdServicio, pstrComponentId, Constants.ODONTOGRAMA_GINGIVITIS_ID, "NOCOMBO", 0, "SI"),
                               //BolsaPeriodontales = GetServiceComponentFielValue(a.IdServicio, pstrComponentId, Constants.ODONTOGRAMA_BOLSA_PERIODONTALES_ID, "NOCOMBO", 0, "SI"),
                               Diagnosticos = GetDiagnosticByServiceIdAndComponent(a.IdServicio, pstrComponentId),
                               //PiezasCaries = GetCantidadCaries(a.IdServicio, pstrComponentId, Constants.ODONTOGRAMA_PIEZAS_CARIES_ID),
                               //PiezasAusentes = GetCantidadAusentes(a.IdServicio, pstrComponentId, Constants.ODONTOGRAMA_PIEZAS_AUSENTES_ID),

                               //PiezasCuracion = GetCantidad(a.IdServicio,pstrComponentId),
                               Corona = GetCantidad(a.IdServicio, pstrComponentId)[0].ToString(),
                               Exodoncia = GetCantidad(a.IdServicio, pstrComponentId)[1].ToString(),
                               Implante = GetCantidad(a.IdServicio, pstrComponentId)[2].ToString(),
                               Ppr = GetCantidad(a.IdServicio, pstrComponentId)[3].ToString(),

                               ProtesisTotal = GetCantidad(a.IdServicio, pstrComponentId)[4].ToString(),

                               PlacaBacteriana = GetValueOdontograma1(a.IdServicio, pstrComponentId, Constants.ODONTOGRAMA_PLACA_BACTERIANA_ID),
                               RemanentesReticulares = GetValueOdontograma1(a.IdServicio, pstrComponentId, Constants.ODONTOGRAMA_REMANENTES_RETICULARES_ID),
                               OtrosExamen = GetValueOdontograma1(a.IdServicio, pstrComponentId, Constants.ODONTOGRAMA_OTROS_EXAMEN_ID),

                               Aptitud = ValorCampos.Count() == 0 || ValorCampos.Find(p => p.IdCampo == "N009-MF000001592") == null ? string.Empty : ValorCampos.Find(p => p.IdCampo == "N009-MF000001592").Valor,
                               //GetValueOdontograma1(a.IdServicio, pstrComponentId, Constants.ODONTOGRAMA_APTITUD_ID),

                               Diente181 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D18_1) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D18_1).v_Value1,
                               Diente182 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D18_2) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D18_2).v_Value1,
                               Diente183 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D18_3) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D18_3).v_Value1,
                               Diente184 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D18_4) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D18_4).v_Value1,
                               Diente185 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D18_5) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D18_5).v_Value1,
                               Diente186 = ValorDienteAusente.Count() == 0 || ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D18_6) == null ? string.Empty : ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D18_6).v_Value1,
                               Diente186_ = ValorUSerControl.Count() == 0 || ValorUSerControl.Find(p => p.v_ComponentFieldId == Constants.D18_6) == null ? string.Empty : ValorUSerControl.Find(p => p.v_ComponentFieldId == Constants.D18_6).v_Value1,

                               Diente171 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D17_1) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D17_1).v_Value1,
                               Diente172 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D17_2) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D17_2).v_Value1,
                               Diente173 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D17_3) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D17_3).v_Value1,
                               Diente174 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D17_4) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D17_4).v_Value1,
                               Diente175 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D17_5) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D17_5).v_Value1,
                               Diente176 = ValorDienteAusente.Count() == 0 || ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D17_6) == null ? string.Empty : ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D17_6).v_Value1,
                               Diente176_ = ValorUSerControl.Count() == 0 || ValorUSerControl.Find(p => p.v_ComponentFieldId == Constants.D17_6) == null ? string.Empty : ValorUSerControl.Find(p => p.v_ComponentFieldId == Constants.D17_6).v_Value1,

                               Diente161 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D16_1) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D16_1).v_Value1,
                               Diente162 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D16_2) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D16_2).v_Value1,
                               Diente163 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D16_3) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D16_3).v_Value1,
                               Diente164 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D16_4) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D16_4).v_Value1,
                               Diente165 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D16_5) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D16_5).v_Value1,
                               Diente166 = ValorDienteAusente.Count() == 0 || ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D16_6) == null ? string.Empty : ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D16_6).v_Value1,
                               Diente166_ = ValorUSerControl.Count() == 0 || ValorUSerControl.Find(p => p.v_ComponentFieldId == Constants.D16_6) == null ? string.Empty : ValorUSerControl.Find(p => p.v_ComponentFieldId == Constants.D16_6).v_Value1,

                               Diente151 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D15_1) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D15_1).v_Value1,
                               Diente152 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D15_2) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D15_2).v_Value1,
                               Diente153 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D15_3) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D15_3).v_Value1,
                               Diente154 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D15_4) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D15_4).v_Value1,
                               Diente155 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D15_5) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D15_5).v_Value1,
                               Diente156 = ValorDienteAusente.Count() == 0 || ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D15_6) == null ? string.Empty : ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D15_6).v_Value1,
                               Diente156_ = ValorUSerControl.Count() == 0 || ValorUSerControl.Find(p => p.v_ComponentFieldId == Constants.D15_6) == null ? string.Empty : ValorUSerControl.Find(p => p.v_ComponentFieldId == Constants.D15_6).v_Value1,

                               Diente141 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D14_1) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D14_1).v_Value1,
                               Diente142 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D14_2) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D14_2).v_Value1,
                               Diente143 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D14_3) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D14_3).v_Value1,
                               Diente144 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D14_4) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D14_4).v_Value1,
                               Diente145 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D14_5) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D14_5).v_Value1,
                               Diente146 = ValorDienteAusente.Count() == 0 || ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D14_6) == null ? string.Empty : ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D14_6).v_Value1,
                               Diente146_ = ValorUSerControl.Count() == 0 || ValorUSerControl.Find(p => p.v_ComponentFieldId == Constants.D14_6) == null ? string.Empty : ValorUSerControl.Find(p => p.v_ComponentFieldId == Constants.D14_6).v_Value1,

                               Diente131 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D13_1) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D13_1).v_Value1,
                               Diente132 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D13_2) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D13_2).v_Value1,
                               Diente133 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D13_3) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D13_3).v_Value1,
                               Diente134 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D13_4) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D13_4).v_Value1,
                               Diente135 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D13_5) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D13_5).v_Value1,
                               Diente136 = ValorDienteAusente.Count() == 0 || ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D13_6) == null ? string.Empty : ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D13_6).v_Value1,
                               Diente136_ = ValorUSerControl.Count() == 0 || ValorUSerControl.Find(p => p.v_ComponentFieldId == Constants.D13_6) == null ? string.Empty : ValorUSerControl.Find(p => p.v_ComponentFieldId == Constants.D13_6).v_Value1,

                               Diente121 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D12_1) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D12_1).v_Value1,
                               Diente122 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D12_2) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D12_2).v_Value1,
                               Diente123 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D12_3) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D12_3).v_Value1,
                               Diente124 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D12_4) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D12_4).v_Value1,
                               Diente125 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D12_5) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D12_5).v_Value1,
                               Diente126 = ValorDienteAusente.Count() == 0 || ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D12_6) == null ? string.Empty : ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D12_6).v_Value1,
                               Diente126_ = ValorUSerControl.Count() == 0 || ValorUSerControl.Find(p => p.v_ComponentFieldId == Constants.D12_6) == null ? string.Empty : ValorUSerControl.Find(p => p.v_ComponentFieldId == Constants.D12_6).v_Value1,

                               Diente111 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D11_1) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D11_1).v_Value1,
                               Diente112 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D11_2) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D11_2).v_Value1,
                               Diente113 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D11_3) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D11_3).v_Value1,
                               Diente114 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D11_4) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D11_4).v_Value1,
                               Diente115 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D11_5) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D11_5).v_Value1,
                               Diente116 = ValorDienteAusente.Count() == 0 || ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D11_6) == null ? string.Empty : ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D11_6).v_Value1,
                               Diente116_ = ValorUSerControl.Count() == 0 || ValorUSerControl.Find(p => p.v_ComponentFieldId == Constants.D11_6) == null ? string.Empty : ValorUSerControl.Find(p => p.v_ComponentFieldId == Constants.D11_6).v_Value1,

                               //-------------------------------------------------------------------------------

                               Diente211 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D21_1) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D21_1).v_Value1,
                               Diente212 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D21_2) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D21_2).v_Value1,
                               Diente213 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D21_3) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D21_3).v_Value1,
                               Diente214 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D21_4) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D21_4).v_Value1,
                               Diente215 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D21_5) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D21_5).v_Value1,
                               Diente216 = ValorDienteAusente.Count() == 0 || ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D21_6) == null ? string.Empty : ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D21_6).v_Value1,
                               Diente216_ = ValorUSerControl.Count() == 0 || ValorUSerControl.Find(p => p.v_ComponentFieldId == Constants.D21_6) == null ? string.Empty : ValorUSerControl.Find(p => p.v_ComponentFieldId == Constants.D21_6).v_Value1,

                               Diente221 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D22_1) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D22_1).v_Value1,
                               Diente222 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D22_2) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D22_2).v_Value1,
                               Diente223 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D22_3) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D22_3).v_Value1,
                               Diente224 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D22_4) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D22_4).v_Value1,
                               Diente225 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D22_5) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D22_5).v_Value1,
                               Diente226 = ValorDienteAusente.Count() == 0 || ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D22_6) == null ? string.Empty : ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D22_6).v_Value1,
                               Diente226_ = ValorUSerControl.Count() == 0 || ValorUSerControl.Find(p => p.v_ComponentFieldId == Constants.D22_6) == null ? string.Empty : ValorUSerControl.Find(p => p.v_ComponentFieldId == Constants.D22_6).v_Value1,

                               Diente231 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D23_1) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D23_1).v_Value1,
                               Diente232 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D23_2) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D23_2).v_Value1,
                               Diente233 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D23_3) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D23_3).v_Value1,
                               Diente234 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D23_4) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D23_4).v_Value1,
                               Diente235 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D23_5) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D23_5).v_Value1,
                               Diente236 = ValorDienteAusente.Count() == 0 || ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D23_6) == null ? string.Empty : ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D23_6).v_Value1,
                               Diente236_ = ValorUSerControl.Count() == 0 || ValorUSerControl.Find(p => p.v_ComponentFieldId == Constants.D23_6) == null ? string.Empty : ValorUSerControl.Find(p => p.v_ComponentFieldId == Constants.D23_6).v_Value1,

                               Diente241 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D24_1) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D24_1).v_Value1,
                               Diente242 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D24_2) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D24_2).v_Value1,
                               Diente243 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D24_3) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D24_3).v_Value1,
                               Diente244 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D24_4) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D24_4).v_Value1,
                               Diente245 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D24_5) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D24_5).v_Value1,
                               Diente246 = ValorDienteAusente.Count() == 0 || ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D24_6) == null ? string.Empty : ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D24_6).v_Value1,
                               Diente246_ = ValorUSerControl.Count() == 0 || ValorUSerControl.Find(p => p.v_ComponentFieldId == Constants.D24_6) == null ? string.Empty : ValorUSerControl.Find(p => p.v_ComponentFieldId == Constants.D24_6).v_Value1,

                               Diente251 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D25_1) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D25_1).v_Value1,
                               Diente252 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D25_2) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D25_2).v_Value1,
                               Diente253 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D25_3) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D25_3).v_Value1,
                               Diente254 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D25_4) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D25_4).v_Value1,
                               Diente255 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D25_5) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D25_5).v_Value1,
                               Diente256 = ValorDienteAusente.Count() == 0 || ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D25_6) == null ? string.Empty : ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D25_6).v_Value1,
                               Diente256_ = ValorUSerControl.Count() == 0 || ValorUSerControl.Find(p => p.v_ComponentFieldId == Constants.D25_6) == null ? string.Empty : ValorUSerControl.Find(p => p.v_ComponentFieldId == Constants.D25_6).v_Value1,

                               Diente261 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D26_1) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D26_1).v_Value1,
                               Diente262 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D26_2) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D26_2).v_Value1,
                               Diente263 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D26_3) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D26_3).v_Value1,
                               Diente264 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D26_4) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D26_4).v_Value1,
                               Diente265 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D26_5) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D26_5).v_Value1,
                               Diente266 = ValorDienteAusente.Count() == 0 || ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D26_6) == null ? string.Empty : ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D26_6).v_Value1,
                               Diente266_ = ValorUSerControl.Count() == 0 || ValorUSerControl.Find(p => p.v_ComponentFieldId == Constants.D26_6) == null ? string.Empty : ValorUSerControl.Find(p => p.v_ComponentFieldId == Constants.D26_6).v_Value1,

                               Diente271 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D27_1) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D27_1).v_Value1,
                               Diente272 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D27_2) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D27_2).v_Value1,
                               Diente273 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D27_3) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D27_3).v_Value1,
                               Diente274 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D27_4) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D27_4).v_Value1,
                               Diente275 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D27_5) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D27_5).v_Value1,
                               Diente276 = ValorDienteAusente.Count() == 0 || ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D27_6) == null ? string.Empty : ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D27_6).v_Value1,
                               Diente276_ = ValorUSerControl.Count() == 0 || ValorUSerControl.Find(p => p.v_ComponentFieldId == Constants.D27_6) == null ? string.Empty : ValorUSerControl.Find(p => p.v_ComponentFieldId == Constants.D27_6).v_Value1,

                               Diente281 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D28_1) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D28_1).v_Value1,
                               Diente282 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D28_2) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D28_2).v_Value1,
                               Diente283 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D28_3) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D28_3).v_Value1,
                               Diente284 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D28_4) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D28_4).v_Value1,
                               Diente285 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D28_5) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D28_5).v_Value1,
                               Diente286 = ValorDienteAusente.Count() == 0 || ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D28_6) == null ? string.Empty : ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D28_6).v_Value1,
                               Diente286_ = ValorUSerControl.Count() == 0 || ValorUSerControl.Find(p => p.v_ComponentFieldId == Constants.D28_6) == null ? string.Empty : ValorUSerControl.Find(p => p.v_ComponentFieldId == Constants.D28_6).v_Value1,

                               //-------------------------------------------------------------------------------

                               Diente311 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D31_1) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D31_1).v_Value1,
                               Diente312 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D31_2) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D31_2).v_Value1,
                               Diente313 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D31_3) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D31_3).v_Value1,
                               Diente314 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D31_4) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D31_4).v_Value1,
                               Diente315 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D31_5) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D31_5).v_Value1,
                               Diente316 = ValorDienteAusente.Count() == 0 || ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D31_6) == null ? string.Empty : ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D31_6).v_Value1,
                               Diente316_ = ValorUSerControl.Count() == 0 || ValorUSerControl.Find(p => p.v_ComponentFieldId == Constants.D31_6) == null ? string.Empty : ValorUSerControl.Find(p => p.v_ComponentFieldId == Constants.D31_6).v_Value1,

                               Diente321 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D32_1) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D32_1).v_Value1,
                               Diente322 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D32_2) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D32_2).v_Value1,
                               Diente323 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D32_3) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D32_3).v_Value1,
                               Diente324 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D32_4) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D32_4).v_Value1,
                               Diente325 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D32_5) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D32_5).v_Value1,
                               Diente326 = ValorDienteAusente.Count() == 0 || ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D32_6) == null ? string.Empty : ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D32_6).v_Value1,
                               Diente326_ = ValorUSerControl.Count() == 0 || ValorUSerControl.Find(p => p.v_ComponentFieldId == Constants.D32_6) == null ? string.Empty : ValorUSerControl.Find(p => p.v_ComponentFieldId == Constants.D32_6).v_Value1,

                               Diente331 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D33_1) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D33_1).v_Value1,
                               Diente332 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D33_2) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D33_2).v_Value1,
                               Diente333 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D33_3) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D33_3).v_Value1,
                               Diente334 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D33_4) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D33_4).v_Value1,
                               Diente335 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D33_5) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D33_5).v_Value1,
                               Diente336 = ValorDienteAusente.Count() == 0 || ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D33_6) == null ? string.Empty : ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D33_6).v_Value1,
                               Diente336_ = ValorUSerControl.Count() == 0 || ValorUSerControl.Find(p => p.v_ComponentFieldId == Constants.D33_6) == null ? string.Empty : ValorUSerControl.Find(p => p.v_ComponentFieldId == Constants.D33_6).v_Value1,

                               Diente341 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D34_1) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D34_1).v_Value1,
                               Diente342 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D34_2) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D34_2).v_Value1,
                               Diente343 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D34_3) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D34_3).v_Value1,
                               Diente344 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D34_4) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D34_4).v_Value1,
                               Diente345 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D34_5) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D34_5).v_Value1,
                               Diente346 = ValorDienteAusente.Count() == 0 || ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D34_6) == null ? string.Empty : ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D34_6).v_Value1,
                               Diente346_ = ValorUSerControl.Count() == 0 || ValorUSerControl.Find(p => p.v_ComponentFieldId == Constants.D34_6) == null ? string.Empty : ValorUSerControl.Find(p => p.v_ComponentFieldId == Constants.D34_6).v_Value1,

                               Diente351 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D35_1) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D35_1).v_Value1,
                               Diente352 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D35_2) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D35_2).v_Value1,
                               Diente353 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D35_3) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D35_3).v_Value1,
                               Diente354 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D35_4) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D35_4).v_Value1,
                               Diente355 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D35_5) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D35_5).v_Value1,
                               Diente356 = ValorDienteAusente.Count() == 0 || ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D35_6) == null ? string.Empty : ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D35_6).v_Value1,
                               Diente356_ = ValorUSerControl.Count() == 0 || ValorUSerControl.Find(p => p.v_ComponentFieldId == Constants.D35_6) == null ? string.Empty : ValorUSerControl.Find(p => p.v_ComponentFieldId == Constants.D35_6).v_Value1,

                               Diente361 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D36_1) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D36_1).v_Value1,
                               Diente362 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D36_2) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D36_2).v_Value1,
                               Diente363 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D36_3) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D36_3).v_Value1,
                               Diente364 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D36_4) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D36_4).v_Value1,
                               Diente365 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D36_5) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D36_5).v_Value1,
                               Diente366 = ValorDienteAusente.Count() == 0 || ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D36_6) == null ? string.Empty : ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D36_6).v_Value1,
                               Diente366_ = ValorUSerControl.Count() == 0 || ValorUSerControl.Find(p => p.v_ComponentFieldId == Constants.D36_6) == null ? string.Empty : ValorUSerControl.Find(p => p.v_ComponentFieldId == Constants.D36_6).v_Value1,

                               Diente371 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D37_1) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D37_1).v_Value1,
                               Diente372 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D37_2) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D37_2).v_Value1,
                               Diente373 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D37_3) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D37_3).v_Value1,
                               Diente374 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D37_4) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D37_4).v_Value1,
                               Diente375 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D37_5) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D37_5).v_Value1,
                               Diente376 = ValorDienteAusente.Count() == 0 || ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D37_6) == null ? string.Empty : ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D37_6).v_Value1,
                               Diente376_ = ValorUSerControl.Count() == 0 || ValorUSerControl.Find(p => p.v_ComponentFieldId == Constants.D37_6) == null ? string.Empty : ValorUSerControl.Find(p => p.v_ComponentFieldId == Constants.D37_6).v_Value1,

                               Diente381 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D38_1) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D38_1).v_Value1,
                               Diente382 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D38_2) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D38_2).v_Value1,
                               Diente383 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D38_3) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D38_3).v_Value1,
                               Diente384 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D38_4) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D38_4).v_Value1,
                               Diente385 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D38_5) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D38_5).v_Value1,
                               Diente386 = ValorDienteAusente.Count() == 0 || ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D38_6) == null ? string.Empty : ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D38_6).v_Value1,
                               Diente386_ = ValorUSerControl.Count() == 0 || ValorUSerControl.Find(p => p.v_ComponentFieldId == Constants.D38_6) == null ? string.Empty : ValorUSerControl.Find(p => p.v_ComponentFieldId == Constants.D38_6).v_Value1,
                               //-------------------------------------------------------------------------------

                               Diente411 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D41_1) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D41_1).v_Value1,
                               Diente412 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D41_2) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D41_2).v_Value1,
                               Diente413 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D41_3) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D41_3).v_Value1,
                               Diente414 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D41_4) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D41_4).v_Value1,
                               Diente415 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D41_5) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D41_5).v_Value1,
                               Diente416 = ValorDienteAusente.Count() == 0 || ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D41_6) == null ? string.Empty : ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D41_6).v_Value1,
                               Diente416_ = ValorUSerControl.Count() == 0 || ValorUSerControl.Find(p => p.v_ComponentFieldId == Constants.D41_6) == null ? string.Empty : ValorUSerControl.Find(p => p.v_ComponentFieldId == Constants.D41_6).v_Value1,

                               Diente421 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D42_1) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D42_1).v_Value1,
                               Diente422 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D42_2) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D42_2).v_Value1,
                               Diente423 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D42_3) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D42_3).v_Value1,
                               Diente424 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D42_4) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D42_4).v_Value1,
                               Diente425 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D42_5) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D42_5).v_Value1,
                               Diente426 = ValorDienteAusente.Count() == 0 || ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D42_6) == null ? string.Empty : ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D42_6).v_Value1,
                               Diente426_ = ValorUSerControl.Count() == 0 || ValorUSerControl.Find(p => p.v_ComponentFieldId == Constants.D42_6) == null ? string.Empty : ValorUSerControl.Find(p => p.v_ComponentFieldId == Constants.D42_6).v_Value1,

                               Diente431 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D43_1) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D43_1).v_Value1,
                               Diente432 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D43_2) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D43_2).v_Value1,
                               Diente433 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D43_3) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D43_3).v_Value1,
                               Diente434 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D43_4) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D43_4).v_Value1,
                               Diente435 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D43_5) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D43_5).v_Value1,
                               Diente436 = ValorDienteAusente.Count() == 0 || ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D43_6) == null ? string.Empty : ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D43_6).v_Value1,
                               Diente436_ = ValorUSerControl.Count() == 0 || ValorUSerControl.Find(p => p.v_ComponentFieldId == Constants.D43_6) == null ? string.Empty : ValorUSerControl.Find(p => p.v_ComponentFieldId == Constants.D43_6).v_Value1,

                               Diente441 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D44_1) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D44_1).v_Value1,
                               Diente442 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D44_2) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D44_2).v_Value1,
                               Diente443 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D44_3) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D44_3).v_Value1,
                               Diente444 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D44_4) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D44_4).v_Value1,
                               Diente445 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D44_5) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D44_5).v_Value1,
                               Diente446 = ValorDienteAusente.Count() == 0 || ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D44_6) == null ? string.Empty : ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D44_6).v_Value1,
                               Diente446_ = ValorUSerControl.Count() == 0 || ValorUSerControl.Find(p => p.v_ComponentFieldId == Constants.D44_6) == null ? string.Empty : ValorUSerControl.Find(p => p.v_ComponentFieldId == Constants.D44_6).v_Value1,

                               Diente451 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D45_1) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D45_1).v_Value1,
                               Diente452 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D45_2) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D45_2).v_Value1,
                               Diente453 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D45_3) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D45_3).v_Value1,
                               Diente454 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D45_4) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D45_4).v_Value1,
                               Diente455 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D45_5) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D45_5).v_Value1,
                               Diente456 = ValorDienteAusente.Count() == 0 || ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D45_6) == null ? string.Empty : ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D45_6).v_Value1,
                               Diente456_ = ValorUSerControl.Count() == 0 || ValorUSerControl.Find(p => p.v_ComponentFieldId == Constants.D45_6) == null ? string.Empty : ValorUSerControl.Find(p => p.v_ComponentFieldId == Constants.D45_6).v_Value1,

                               Diente461 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D46_1) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D46_1).v_Value1,
                               Diente462 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D46_2) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D46_2).v_Value1,
                               Diente463 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D46_3) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D46_3).v_Value1,
                               Diente464 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D46_4) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D46_4).v_Value1,
                               Diente465 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D46_5) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D46_5).v_Value1,
                               Diente466 = ValorDienteAusente.Count() == 0 || ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D46_6) == null ? string.Empty : ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D46_6).v_Value1,
                               Diente466_ = ValorUSerControl.Count() == 0 || ValorUSerControl.Find(p => p.v_ComponentFieldId == Constants.D46_6) == null ? string.Empty : ValorUSerControl.Find(p => p.v_ComponentFieldId == Constants.D46_6).v_Value1,

                               Diente471 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D47_1) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D47_1).v_Value1,
                               Diente472 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D47_2) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D47_2).v_Value1,
                               Diente473 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D47_3) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D47_3).v_Value1,
                               Diente474 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D47_4) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D47_4).v_Value1,
                               Diente475 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D47_5) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D47_5).v_Value1,
                               Diente476 = ValorDienteAusente.Count() == 0 || ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D47_6) == null ? string.Empty : ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D47_6).v_Value1,
                               Diente476_ = ValorUSerControl.Count() == 0 || ValorUSerControl.Find(p => p.v_ComponentFieldId == Constants.D47_6) == null ? string.Empty : ValorUSerControl.Find(p => p.v_ComponentFieldId == Constants.D47_6).v_Value1,

                               Diente481 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D48_1) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D48_1).v_Value1,
                               Diente482 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D48_2) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D48_2).v_Value1,
                               Diente483 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D48_3) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D48_3).v_Value1,
                               Diente484 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D48_4) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D48_4).v_Value1,
                               Diente485 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D48_5) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D48_5).v_Value1,
                               Diente486 = ValorDienteAusente.Count() == 0 || ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D48_6) == null ? string.Empty : ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D48_6).v_Value1,
                               Diente486_ = ValorUSerControl.Count() == 0 || ValorUSerControl.Find(p => p.v_ComponentFieldId == Constants.D48_6) == null ? string.Empty : ValorUSerControl.Find(p => p.v_ComponentFieldId == Constants.D48_6).v_Value1,

                               //PiezasCuracion = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D48_5) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D48_5).v_Value1,
                               //NroDientesCurados(ListaDiente),
                               PiezasCaries = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.PiezaCaries) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.PiezaCaries).v_Value2,
                               PiezasAusentes = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.PiezaAusentes) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.PiezaAusentes).v_Value2,

                               PiezasCariesAdd = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.PiezaCariesAdd) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.PiezaCariesAdd).v_Value2,
                               PiezasAusentesAdd = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.PiezaAusentesAdd) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.PiezaAusentesAdd).v_Value2,

                               b_Logo = MedicalCenter.b_Image,
                               EmpresaPropietaria = MedicalCenter.v_Name,
                               EmpresaPropietariaDireccion = MedicalCenter.v_Address,
                               EmpresaPropietariaTelefono = MedicalCenter.v_PhoneNumber,
                               EmpresaPropietariaEmail = MedicalCenter.v_Mail,

                           }).ToList();

                return sql;
            }
            catch (Exception)
            {

                throw;
            }
        }

        private int NroDientesCurados(List<int> ListaD)
        {
            var x = ListaD.Distinct();

            return x.Count();
        }

        public string GetValueOdontograma(string pstrServiceId, string pstrComponentId, string pstrFieldId, string pstrpath, string NroDiente)
        {
            try
            {
                ServiceBL oServiceBL = new ServiceBL();
                List<ServiceComponentFieldValuesList> oServiceComponentFieldValuesList = new List<ServiceComponentFieldValuesList>();
                List<ServiceComponentFieldValuesList> oServiceComponentFieldValuesList1 = new List<ServiceComponentFieldValuesList>();
                oServiceComponentFieldValuesList1 = ValoresComponenteOdontogramaValue1(pstrServiceId, pstrComponentId);
                oServiceComponentFieldValuesList = oServiceBL.ValoresComponenteOdontograma(pstrServiceId, pstrComponentId, pstrpath);
                var xx = oServiceComponentFieldValuesList.Count() == 0 || ((ServiceComponentFieldValuesList)oServiceComponentFieldValuesList.Find(p => p.v_ComponentFieldId == pstrFieldId)) == null ? string.Empty : ((ServiceComponentFieldValuesList)oServiceComponentFieldValuesList.Find(p => p.v_ComponentFieldId == pstrFieldId)).v_Value1;
                var valorDiente = oServiceComponentFieldValuesList1.Count() == 0 || ((ServiceComponentFieldValuesList)oServiceComponentFieldValuesList1.Find(p => p.v_ComponentFieldId == pstrFieldId)) == null ? string.Empty : ((ServiceComponentFieldValuesList)oServiceComponentFieldValuesList1.Find(p => p.v_ComponentFieldId == pstrFieldId)).v_Value1;


                switch (NroDiente)
                {
                    case "18":
                        if (valorDiente == "3")
                        {
                            //ContadorD18 = 1;
                            ListaDiente.Add(18);
                        }
                        break;
                    case "17":
                        if (valorDiente == "3")
                        {
                            ListaDiente.Add(17);
                        }
                        break;
                    case "16":
                        if (valorDiente == "3")
                        {
                            ListaDiente.Add(16);
                        }
                        break;
                    case "15":
                        if (valorDiente == "3")
                        {
                            ListaDiente.Add(15);
                        }
                        break;
                    case "14":
                        if (valorDiente == "3")
                        {
                            ListaDiente.Add(14);
                        }
                        break;
                    case "13":
                        if (valorDiente == "3")
                        {
                            ListaDiente.Add(13);
                        }
                        break;
                    case "12":
                        if (valorDiente == "3")
                        {
                            ListaDiente.Add(12);
                        }
                        break;
                    case "11":
                        if (valorDiente == "3")
                        {
                            ListaDiente.Add(11);
                        }
                        break;

                    //--------------------------------------

                    case "21":
                        if (valorDiente == "3")
                        {
                            //ContadorD18 = 1;
                            ListaDiente.Add(21);
                        }
                        break;
                    case "22":
                        if (valorDiente == "3")
                        {
                            ListaDiente.Add(22);
                        }
                        break;
                    case "23":
                        if (valorDiente == "3")
                        {
                            ListaDiente.Add(23);
                        }
                        break;
                    case "24":
                        if (valorDiente == "3")
                        {
                            ListaDiente.Add(24);
                        }
                        break;
                    case "25":
                        if (valorDiente == "3")
                        {
                            ListaDiente.Add(25);
                        }
                        break;
                    case "26":
                        if (valorDiente == "3")
                        {
                            ListaDiente.Add(26);
                        }
                        break;
                    case "27":
                        if (valorDiente == "3")
                        {
                            ListaDiente.Add(27);
                        }
                        break;
                    case "28":
                        if (valorDiente == "3")
                        {
                            ListaDiente.Add(28);
                        }
                        break;

                    //------------------------------

                    case "31":
                        if (valorDiente == "3")
                        {
                            //ContadorD18 = 1;
                            ListaDiente.Add(31);
                        }
                        break;
                    case "32":
                        if (valorDiente == "3")
                        {
                            ListaDiente.Add(32);
                        }
                        break;
                    case "33":
                        if (valorDiente == "3")
                        {
                            ListaDiente.Add(33);
                        }
                        break;
                    case "34":
                        if (valorDiente == "3")
                        {
                            ListaDiente.Add(34);
                        }
                        break;
                    case "35":
                        if (valorDiente == "3")
                        {
                            ListaDiente.Add(35);
                        }
                        break;
                    case "36":
                        if (valorDiente == "3")
                        {
                            ListaDiente.Add(36);
                        }
                        break;
                    case "37":
                        if (valorDiente == "3")
                        {
                            ListaDiente.Add(37);
                        }
                        break;
                    case "38":
                        if (valorDiente == "3")
                        {
                            ListaDiente.Add(38);
                        }
                        break;

                    //------------------------------

                    case "41":
                        if (valorDiente == "3")
                        {
                            //ContadorD18 = 1;
                            ListaDiente.Add(41);
                        }
                        break;
                    case "42":
                        if (valorDiente == "3")
                        {
                            ListaDiente.Add(42);
                        }
                        break;
                    case "43":
                        if (valorDiente == "3")
                        {
                            ListaDiente.Add(43);
                        }
                        break;
                    case "44":
                        if (valorDiente == "3")
                        {
                            ListaDiente.Add(44);
                        }
                        break;
                    case "45":
                        if (valorDiente == "3")
                        {
                            ListaDiente.Add(45);
                        }
                        break;
                    case "46":
                        if (valorDiente == "3")
                        {
                            ListaDiente.Add(46);
                        }
                        break;
                    case "47":
                        if (valorDiente == "3")
                        {
                            ListaDiente.Add(47);
                        }
                        break;
                    case "48":
                        if (valorDiente == "3")
                        {
                            ListaDiente.Add(48);
                        }
                        break;
                    default:
                        break;
                }

                return xx;
            }
            catch (Exception)
            {

                throw;
            }

        }

        public List<ServiceComponentFieldValuesList> ValoresComponenteOdontogramaValue1(string pstrServiceId, string pstrComponentId)
        {
            SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
            try
            {
                List<ServiceComponentFieldValuesList> serviceComponentFieldValues = (from A in dbContext.service
                                                                                     join B in dbContext.servicecomponent on A.v_ServiceId equals B.v_ServiceId
                                                                                     join C in dbContext.servicecomponentfields on B.v_ServiceComponentId equals C.v_ServiceComponentId
                                                                                     join D in dbContext.servicecomponentfieldvalues on C.v_ServiceComponentFieldsId equals D.v_ServiceComponentFieldsId

                                                                                     where (A.v_ServiceId == pstrServiceId)
                                                                                           && (B.v_ComponentId == pstrComponentId)
                                                                                           && (B.i_IsDeleted == 0)
                                                                                           && (C.i_IsDeleted == 0)

                                                                                     select new ServiceComponentFieldValuesList
                                                                                     {
                                                                                         //v_ComponentId = B.v_ComponentId,
                                                                                         v_ComponentFieldId = C.v_ComponentFieldId,
                                                                                         //v_ComponentFieldId = G.v_ComponentFieldId,
                                                                                         //v_ComponentFielName = G.v_TextLabel,
                                                                                         v_ServiceComponentFieldsId = C.v_ServiceComponentFieldsId,
                                                                                         v_Value1 = D.v_Value1
                                                                                     }).ToList();


                return serviceComponentFieldValues;
            }
            catch (Exception)
            {

                throw;
            }

        }


        public string GetValueOdontograma1(string pstrServiceId, string pstrComponentId, string pstrFieldId)
        {
            try
            {
                ServiceBL oServiceBL = new ServiceBL();
                List<ServiceComponentFieldValuesList> oServiceComponentFieldValuesList = new List<ServiceComponentFieldValuesList>();

                oServiceComponentFieldValuesList = oServiceBL.ValoresComponenteOdontograma1(pstrServiceId, pstrComponentId);
                var xx = oServiceComponentFieldValuesList.Count() == 0 || ((ServiceComponentFieldValuesList)oServiceComponentFieldValuesList.Find(p => p.v_ComponentFieldId == pstrFieldId)) == null ? string.Empty : ((ServiceComponentFieldValuesList)oServiceComponentFieldValuesList.Find(p => p.v_ComponentFieldId == pstrFieldId)).v_Value1;

                return xx;
            }
            catch (Exception)
            {

                throw;
            }

        }

        public string GetCantidadCaries(string pstrServiceId, string pstrComponentId, string pstrFieldId)
        {
            try
            {
                string Retornar = "0";
                string[] componentId = null;
                ServiceBL oServiceBL = new ServiceBL();
                List<ServiceComponentFieldValuesList> oServiceComponentFieldValuesList = new List<ServiceComponentFieldValuesList>();

                oServiceComponentFieldValuesList = oServiceBL.ValoresComponenteOdontograma1(pstrServiceId, pstrComponentId);
                var xx = oServiceComponentFieldValuesList.Count() == 0 || ((ServiceComponentFieldValuesList)oServiceComponentFieldValuesList.Find(p => p.v_ComponentFieldId == pstrFieldId)) == null ? string.Empty : ((ServiceComponentFieldValuesList)oServiceComponentFieldValuesList.Find(p => p.v_ComponentFieldId == pstrFieldId)).v_Value1;

                componentId = xx.Split(';');
                if (componentId[0] == "")
                {
                    Retornar = "0";
                }
                else
                {
                    Retornar = componentId.Count().ToString();
                }
                return Retornar;
            }
            catch (Exception)
            {

                throw;
            }

        }

        public int[] GetCantidad(string pstrServiceId, string pstrComponentId)
        {
            try
            {
                int ContadorCorona = 0;
                int ContadorExodoncia = 0;
                int ContadorImplante = 0;
                int ContadorPPR = 0;
                int ContadorProtesisTotal = 0;

                int[] xxx = new int[5];

                ServiceBL oServiceBL = new ServiceBL();
                List<ServiceComponentFieldValuesList> oServiceComponentFieldValuesList = new List<ServiceComponentFieldValuesList>();

                oServiceComponentFieldValuesList = oServiceBL.ValoresComponenteOdontograma1(pstrServiceId, pstrComponentId);

                for (int i = 0; i < oServiceComponentFieldValuesList.Count(); i++)
                {

                    #region Region 1

                    if (oServiceComponentFieldValuesList[i].v_ComponentFieldId == Constants.D11_6)
                    {
                        if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Corona).ToString())
                        {
                            ContadorCorona = ContadorCorona + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Exodoncia).ToString())
                        {
                            ContadorExodoncia = ContadorExodoncia + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Implante).ToString())
                        {
                            ContadorImplante = ContadorImplante + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.PPR).ToString())
                        {
                            ContadorPPR = ContadorPPR + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.ProtesisTotal).ToString())
                        {
                            ContadorProtesisTotal = ContadorProtesisTotal + 1;
                        }
                    }

                    if (oServiceComponentFieldValuesList[i].v_ComponentFieldId == Constants.D12_6)
                    {
                        if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Corona).ToString())
                        {
                            ContadorCorona = ContadorCorona + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Exodoncia).ToString())
                        {
                            ContadorExodoncia = ContadorExodoncia + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Implante).ToString())
                        {
                            ContadorImplante = ContadorImplante + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.PPR).ToString())
                        {
                            ContadorPPR = ContadorPPR + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.ProtesisTotal).ToString())
                        {
                            ContadorProtesisTotal = ContadorProtesisTotal + 1;
                        }
                    }

                    if (oServiceComponentFieldValuesList[i].v_ComponentFieldId == Constants.D13_6)
                    {
                        if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Corona).ToString())
                        {
                            ContadorCorona = ContadorCorona + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Exodoncia).ToString())
                        {
                            ContadorExodoncia = ContadorExodoncia + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Implante).ToString())
                        {
                            ContadorImplante = ContadorImplante + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.PPR).ToString())
                        {
                            ContadorPPR = ContadorPPR + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.ProtesisTotal).ToString())
                        {
                            ContadorProtesisTotal = ContadorProtesisTotal + 1;
                        }
                    }

                    if (oServiceComponentFieldValuesList[i].v_ComponentFieldId == Constants.D14_6)
                    {
                        if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Corona).ToString())
                        {
                            ContadorCorona = ContadorCorona + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Exodoncia).ToString())
                        {
                            ContadorExodoncia = ContadorExodoncia + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Implante).ToString())
                        {
                            ContadorImplante = ContadorImplante + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.PPR).ToString())
                        {
                            ContadorPPR = ContadorPPR + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.ProtesisTotal).ToString())
                        {
                            ContadorProtesisTotal = ContadorProtesisTotal + 1;
                        }
                    }

                    if (oServiceComponentFieldValuesList[i].v_ComponentFieldId == Constants.D15_6)
                    {
                        if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Corona).ToString())
                        {
                            ContadorCorona = ContadorCorona + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Exodoncia).ToString())
                        {
                            ContadorExodoncia = ContadorExodoncia + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Implante).ToString())
                        {
                            ContadorImplante = ContadorImplante + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.PPR).ToString())
                        {
                            ContadorPPR = ContadorPPR + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.ProtesisTotal).ToString())
                        {
                            ContadorProtesisTotal = ContadorProtesisTotal + 1;
                        }
                    }

                    if (oServiceComponentFieldValuesList[i].v_ComponentFieldId == Constants.D16_6)
                    {
                        if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Corona).ToString())
                        {
                            ContadorCorona = ContadorCorona + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Exodoncia).ToString())
                        {
                            ContadorExodoncia = ContadorExodoncia + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Implante).ToString())
                        {
                            ContadorImplante = ContadorImplante + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.PPR).ToString())
                        {
                            ContadorPPR = ContadorPPR + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.ProtesisTotal).ToString())
                        {
                            ContadorProtesisTotal = ContadorProtesisTotal + 1;
                        }
                    }

                    if (oServiceComponentFieldValuesList[i].v_ComponentFieldId == Constants.D17_6)
                    {
                        if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Corona).ToString())
                        {
                            ContadorCorona = ContadorCorona + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Exodoncia).ToString())
                        {
                            ContadorExodoncia = ContadorExodoncia + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Implante).ToString())
                        {
                            ContadorImplante = ContadorImplante + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.PPR).ToString())
                        {
                            ContadorPPR = ContadorPPR + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.ProtesisTotal).ToString())
                        {
                            ContadorProtesisTotal = ContadorProtesisTotal + 1;
                        }
                    }

                    if (oServiceComponentFieldValuesList[i].v_ComponentFieldId == Constants.D18_6)
                    {
                        if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Corona).ToString())
                        {
                            ContadorCorona = ContadorCorona + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Exodoncia).ToString())
                        {
                            ContadorExodoncia = ContadorExodoncia + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Implante).ToString())
                        {
                            ContadorImplante = ContadorImplante + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.PPR).ToString())
                        {
                            ContadorPPR = ContadorPPR + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.ProtesisTotal).ToString())
                        {
                            ContadorProtesisTotal = ContadorProtesisTotal + 1;
                        }
                    }

                    #endregion

                    #region Region 2

                    if (oServiceComponentFieldValuesList[i].v_ComponentFieldId == Constants.D21_6)
                    {
                        if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Corona).ToString())
                        {
                            ContadorCorona = ContadorCorona + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Exodoncia).ToString())
                        {
                            ContadorExodoncia = ContadorExodoncia + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Implante).ToString())
                        {
                            ContadorImplante = ContadorImplante + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.PPR).ToString())
                        {
                            ContadorPPR = ContadorPPR + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.ProtesisTotal).ToString())
                        {
                            ContadorProtesisTotal = ContadorProtesisTotal + 1;
                        }
                    }

                    if (oServiceComponentFieldValuesList[i].v_ComponentFieldId == Constants.D22_6)
                    {
                        if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Corona).ToString())
                        {
                            ContadorCorona = ContadorCorona + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Exodoncia).ToString())
                        {
                            ContadorExodoncia = ContadorExodoncia + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Implante).ToString())
                        {
                            ContadorImplante = ContadorImplante + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.PPR).ToString())
                        {
                            ContadorPPR = ContadorPPR + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.ProtesisTotal).ToString())
                        {
                            ContadorProtesisTotal = ContadorProtesisTotal + 1;
                        }
                    }

                    if (oServiceComponentFieldValuesList[i].v_ComponentFieldId == Constants.D23_6)
                    {
                        if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Corona).ToString())
                        {
                            ContadorCorona = ContadorCorona + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Exodoncia).ToString())
                        {
                            ContadorExodoncia = ContadorExodoncia + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Implante).ToString())
                        {
                            ContadorImplante = ContadorImplante + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.PPR).ToString())
                        {
                            ContadorPPR = ContadorPPR + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.ProtesisTotal).ToString())
                        {
                            ContadorProtesisTotal = ContadorProtesisTotal + 1;
                        }
                    }

                    if (oServiceComponentFieldValuesList[i].v_ComponentFieldId == Constants.D24_6)
                    {
                        if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Corona).ToString())
                        {
                            ContadorCorona = ContadorCorona + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Exodoncia).ToString())
                        {
                            ContadorExodoncia = ContadorExodoncia + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Implante).ToString())
                        {
                            ContadorImplante = ContadorImplante + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.PPR).ToString())
                        {
                            ContadorPPR = ContadorPPR + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.ProtesisTotal).ToString())
                        {
                            ContadorProtesisTotal = ContadorProtesisTotal + 1;
                        }
                    }

                    if (oServiceComponentFieldValuesList[i].v_ComponentFieldId == Constants.D25_6)
                    {
                        if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Corona).ToString())
                        {
                            ContadorCorona = ContadorCorona + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Exodoncia).ToString())
                        {
                            ContadorExodoncia = ContadorExodoncia + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Implante).ToString())
                        {
                            ContadorImplante = ContadorImplante + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.PPR).ToString())
                        {
                            ContadorPPR = ContadorPPR + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.ProtesisTotal).ToString())
                        {
                            ContadorProtesisTotal = ContadorProtesisTotal + 1;
                        }
                    }

                    if (oServiceComponentFieldValuesList[i].v_ComponentFieldId == Constants.D26_6)
                    {
                        if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Corona).ToString())
                        {
                            ContadorCorona = ContadorCorona + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Exodoncia).ToString())
                        {
                            ContadorExodoncia = ContadorExodoncia + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Implante).ToString())
                        {
                            ContadorImplante = ContadorImplante + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.PPR).ToString())
                        {
                            ContadorPPR = ContadorPPR + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.ProtesisTotal).ToString())
                        {
                            ContadorProtesisTotal = ContadorProtesisTotal + 1;
                        }
                    }

                    if (oServiceComponentFieldValuesList[i].v_ComponentFieldId == Constants.D27_6)
                    {
                        if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Corona).ToString())
                        {
                            ContadorCorona = ContadorCorona + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Exodoncia).ToString())
                        {
                            ContadorExodoncia = ContadorExodoncia + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Implante).ToString())
                        {
                            ContadorImplante = ContadorImplante + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.PPR).ToString())
                        {
                            ContadorPPR = ContadorPPR + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.ProtesisTotal).ToString())
                        {
                            ContadorProtesisTotal = ContadorProtesisTotal + 1;
                        }
                    }

                    if (oServiceComponentFieldValuesList[i].v_ComponentFieldId == Constants.D28_6)
                    {
                        if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Corona).ToString())
                        {
                            ContadorCorona = ContadorCorona + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Exodoncia).ToString())
                        {
                            ContadorExodoncia = ContadorExodoncia + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Implante).ToString())
                        {
                            ContadorImplante = ContadorImplante + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.PPR).ToString())
                        {
                            ContadorPPR = ContadorPPR + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.ProtesisTotal).ToString())
                        {
                            ContadorProtesisTotal = ContadorProtesisTotal + 1;
                        }
                    }

                    #endregion

                    #region Region 3

                    if (oServiceComponentFieldValuesList[i].v_ComponentFieldId == Constants.D31_6)
                    {
                        if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Corona).ToString())
                        {
                            ContadorCorona = ContadorCorona + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Exodoncia).ToString())
                        {
                            ContadorExodoncia = ContadorExodoncia + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Implante).ToString())
                        {
                            ContadorImplante = ContadorImplante + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.PPR).ToString())
                        {
                            ContadorPPR = ContadorPPR + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.ProtesisTotal).ToString())
                        {
                            ContadorProtesisTotal = ContadorProtesisTotal + 1;
                        }
                    }

                    if (oServiceComponentFieldValuesList[i].v_ComponentFieldId == Constants.D32_6)
                    {
                        if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Corona).ToString())
                        {
                            ContadorCorona = ContadorCorona + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Exodoncia).ToString())
                        {
                            ContadorExodoncia = ContadorExodoncia + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Implante).ToString())
                        {
                            ContadorImplante = ContadorImplante + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.PPR).ToString())
                        {
                            ContadorPPR = ContadorPPR + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.ProtesisTotal).ToString())
                        {
                            ContadorProtesisTotal = ContadorProtesisTotal + 1;
                        }
                    }

                    if (oServiceComponentFieldValuesList[i].v_ComponentFieldId == Constants.D33_6)
                    {
                        if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Corona).ToString())
                        {
                            ContadorCorona = ContadorCorona + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Exodoncia).ToString())
                        {
                            ContadorExodoncia = ContadorExodoncia + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Implante).ToString())
                        {
                            ContadorImplante = ContadorImplante + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.PPR).ToString())
                        {
                            ContadorPPR = ContadorPPR + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.ProtesisTotal).ToString())
                        {
                            ContadorProtesisTotal = ContadorProtesisTotal + 1;
                        }
                    }

                    if (oServiceComponentFieldValuesList[i].v_ComponentFieldId == Constants.D34_6)
                    {
                        if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Corona).ToString())
                        {
                            ContadorCorona = ContadorCorona + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Exodoncia).ToString())
                        {
                            ContadorExodoncia = ContadorExodoncia + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Implante).ToString())
                        {
                            ContadorImplante = ContadorImplante + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.PPR).ToString())
                        {
                            ContadorPPR = ContadorPPR + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.ProtesisTotal).ToString())
                        {
                            ContadorProtesisTotal = ContadorProtesisTotal + 1;
                        }
                    }

                    if (oServiceComponentFieldValuesList[i].v_ComponentFieldId == Constants.D35_6)
                    {
                        if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Corona).ToString())
                        {
                            ContadorCorona = ContadorCorona + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Exodoncia).ToString())
                        {
                            ContadorExodoncia = ContadorExodoncia + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Implante).ToString())
                        {
                            ContadorImplante = ContadorImplante + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.PPR).ToString())
                        {
                            ContadorPPR = ContadorPPR + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.ProtesisTotal).ToString())
                        {
                            ContadorProtesisTotal = ContadorProtesisTotal + 1;
                        }
                    }

                    if (oServiceComponentFieldValuesList[i].v_ComponentFieldId == Constants.D36_6)
                    {
                        if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Corona).ToString())
                        {
                            ContadorCorona = ContadorCorona + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Exodoncia).ToString())
                        {
                            ContadorExodoncia = ContadorExodoncia + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Implante).ToString())
                        {
                            ContadorImplante = ContadorImplante + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.PPR).ToString())
                        {
                            ContadorPPR = ContadorPPR + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.ProtesisTotal).ToString())
                        {
                            ContadorProtesisTotal = ContadorProtesisTotal + 1;
                        }
                    }

                    if (oServiceComponentFieldValuesList[i].v_ComponentFieldId == Constants.D37_6)
                    {
                        if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Corona).ToString())
                        {
                            ContadorCorona = ContadorCorona + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Exodoncia).ToString())
                        {
                            ContadorExodoncia = ContadorExodoncia + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Implante).ToString())
                        {
                            ContadorImplante = ContadorImplante + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.PPR).ToString())
                        {
                            ContadorPPR = ContadorPPR + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.ProtesisTotal).ToString())
                        {
                            ContadorProtesisTotal = ContadorProtesisTotal + 1;
                        }
                    }

                    if (oServiceComponentFieldValuesList[i].v_ComponentFieldId == Constants.D38_6)
                    {
                        if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Corona).ToString())
                        {
                            ContadorCorona = ContadorCorona + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Exodoncia).ToString())
                        {
                            ContadorExodoncia = ContadorExodoncia + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Implante).ToString())
                        {
                            ContadorImplante = ContadorImplante + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.PPR).ToString())
                        {
                            ContadorPPR = ContadorPPR + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.ProtesisTotal).ToString())
                        {
                            ContadorProtesisTotal = ContadorProtesisTotal + 1;
                        }
                    }

                    #endregion

                    #region Region 4

                    if (oServiceComponentFieldValuesList[i].v_ComponentFieldId == Constants.D41_6)
                    {
                        if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Corona).ToString())
                        {
                            ContadorCorona = ContadorCorona + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Exodoncia).ToString())
                        {
                            ContadorExodoncia = ContadorExodoncia + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Implante).ToString())
                        {
                            ContadorImplante = ContadorImplante + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.PPR).ToString())
                        {
                            ContadorPPR = ContadorPPR + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.ProtesisTotal).ToString())
                        {
                            ContadorProtesisTotal = ContadorProtesisTotal + 1;
                        }
                    }

                    if (oServiceComponentFieldValuesList[i].v_ComponentFieldId == Constants.D42_6)
                    {
                        if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Corona).ToString())
                        {
                            ContadorCorona = ContadorCorona + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Exodoncia).ToString())
                        {
                            ContadorExodoncia = ContadorExodoncia + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Implante).ToString())
                        {
                            ContadorImplante = ContadorImplante + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.PPR).ToString())
                        {
                            ContadorPPR = ContadorPPR + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.ProtesisTotal).ToString())
                        {
                            ContadorProtesisTotal = ContadorProtesisTotal + 1;
                        }
                    }

                    if (oServiceComponentFieldValuesList[i].v_ComponentFieldId == Constants.D43_6)
                    {
                        if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Corona).ToString())
                        {
                            ContadorCorona = ContadorCorona + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Exodoncia).ToString())
                        {
                            ContadorExodoncia = ContadorExodoncia + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Implante).ToString())
                        {
                            ContadorImplante = ContadorImplante + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.PPR).ToString())
                        {
                            ContadorPPR = ContadorPPR + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.ProtesisTotal).ToString())
                        {
                            ContadorProtesisTotal = ContadorProtesisTotal + 1;
                        }
                    }

                    if (oServiceComponentFieldValuesList[i].v_ComponentFieldId == Constants.D44_6)
                    {
                        if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Corona).ToString())
                        {
                            ContadorCorona = ContadorCorona + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Exodoncia).ToString())
                        {
                            ContadorExodoncia = ContadorExodoncia + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Implante).ToString())
                        {
                            ContadorImplante = ContadorImplante + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.PPR).ToString())
                        {
                            ContadorPPR = ContadorPPR + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.ProtesisTotal).ToString())
                        {
                            ContadorProtesisTotal = ContadorProtesisTotal + 1;
                        }
                    }

                    if (oServiceComponentFieldValuesList[i].v_ComponentFieldId == Constants.D45_6)
                    {
                        if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Corona).ToString())
                        {
                            ContadorCorona = ContadorCorona + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Exodoncia).ToString())
                        {
                            ContadorExodoncia = ContadorExodoncia + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Implante).ToString())
                        {
                            ContadorImplante = ContadorImplante + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.PPR).ToString())
                        {
                            ContadorPPR = ContadorPPR + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.ProtesisTotal).ToString())
                        {
                            ContadorProtesisTotal = ContadorProtesisTotal + 1;
                        }
                    }

                    if (oServiceComponentFieldValuesList[i].v_ComponentFieldId == Constants.D46_6)
                    {
                        if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Corona).ToString())
                        {
                            ContadorCorona = ContadorCorona + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Exodoncia).ToString())
                        {
                            ContadorExodoncia = ContadorExodoncia + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Implante).ToString())
                        {
                            ContadorImplante = ContadorImplante + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.PPR).ToString())
                        {
                            ContadorPPR = ContadorPPR + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.ProtesisTotal).ToString())
                        {
                            ContadorProtesisTotal = ContadorProtesisTotal + 1;
                        }
                    }

                    if (oServiceComponentFieldValuesList[i].v_ComponentFieldId == Constants.D47_6)
                    {
                        if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Corona).ToString())
                        {
                            ContadorCorona = ContadorCorona + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Exodoncia).ToString())
                        {
                            ContadorExodoncia = ContadorExodoncia + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Implante).ToString())
                        {
                            ContadorImplante = ContadorImplante + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.PPR).ToString())
                        {
                            ContadorPPR = ContadorPPR + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.ProtesisTotal).ToString())
                        {
                            ContadorProtesisTotal = ContadorProtesisTotal + 1;
                        }
                    }

                    if (oServiceComponentFieldValuesList[i].v_ComponentFieldId == Constants.D48_6)
                    {
                        if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Corona).ToString())
                        {
                            ContadorCorona = ContadorCorona + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Exodoncia).ToString())
                        {
                            ContadorExodoncia = ContadorExodoncia + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Implante).ToString())
                        {
                            ContadorImplante = ContadorImplante + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.PPR).ToString())
                        {
                            ContadorPPR = ContadorPPR + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.ProtesisTotal).ToString())
                        {
                            ContadorProtesisTotal = ContadorProtesisTotal + 1;
                        }
                    }

                    #endregion
                }

                xxx[0] = ContadorCorona;
                xxx[1] = ContadorExodoncia;
                xxx[2] = ContadorImplante;
                xxx[3] = ContadorPPR;
                xxx[4] = ContadorProtesisTotal;


                return xxx;
            }
            catch (Exception)
            {

                throw;
            }

        }

        public string GetCantidadAusentes(string pstrServiceId, string pstrComponentId, string pstrFieldId)
        {
            try
            {
                string retornar = "0";
                string[] componentId = null;
                ServiceBL oServiceBL = new ServiceBL();
                List<ServiceComponentFieldValuesList> oServiceComponentFieldValuesList = new List<ServiceComponentFieldValuesList>();

                oServiceComponentFieldValuesList = oServiceBL.ValoresComponenteOdontograma1(pstrServiceId, pstrComponentId);
                var xx = oServiceComponentFieldValuesList.Count() == 0 || ((ServiceComponentFieldValuesList)oServiceComponentFieldValuesList.Find(p => p.v_ComponentFieldId == pstrFieldId)) == null ? string.Empty : ((ServiceComponentFieldValuesList)oServiceComponentFieldValuesList.Find(p => p.v_ComponentFieldId == pstrFieldId)).v_Value1;

                componentId = xx.Split(';');

                if (componentId[0] == "")
                {
                    retornar = "0";
                }
                else
                {
                    retornar = componentId.Count().ToString();
                }
                return retornar;
            }
            catch (Exception)
            {

                throw;
            }

        }

        public List<ServiceComponentFieldValuesList> ValoresComponenteOdontograma1(string pstrServiceId, string pstrComponentId)
        {
            SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
            try
            {
                List<ServiceComponentFieldValuesList> serviceComponentFieldValues = (from A in dbContext.service
                                                                                     join B in dbContext.servicecomponent on A.v_ServiceId equals B.v_ServiceId
                                                                                     join C in dbContext.servicecomponentfields on B.v_ServiceComponentId equals C.v_ServiceComponentId
                                                                                     join D in dbContext.servicecomponentfieldvalues on C.v_ServiceComponentFieldsId equals D.v_ServiceComponentFieldsId

                                                                                     where (A.v_ServiceId == pstrServiceId)
                                                                                           && (B.v_ComponentId == pstrComponentId)
                                                                                           && (B.i_IsDeleted == 0)
                                                                                           && (C.i_IsDeleted == 0)

                                                                                     select new ServiceComponentFieldValuesList
                                                                                     {
                                                                                         //v_ComponentId = B.v_ComponentId,
                                                                                         v_ComponentFieldId = C.v_ComponentFieldId,
                                                                                         //v_ComponentFieldId = G.v_ComponentFieldId,
                                                                                         //v_ComponentFielName = G.v_TextLabel,
                                                                                         v_ServiceComponentFieldsId = C.v_ServiceComponentFieldsId,
                                                                                         v_Value1 = D.v_Value1
                                                                                     }).ToList();


                return serviceComponentFieldValues;
            }
            catch (Exception)
            {

                throw;
            }

        }

        public List<ServiceComponentFieldValuesList> ValoresComponenteOdontograma(string pstrServiceId, string pstrComponentId, string pstrPath)
        {
            SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
            try
            {
                List<ServiceComponentFieldValuesList> serviceComponentFieldValues = (from A in dbContext.service
                                                                                     join B in dbContext.servicecomponent on A.v_ServiceId equals B.v_ServiceId
                                                                                     join C in dbContext.servicecomponentfields on B.v_ServiceComponentId equals C.v_ServiceComponentId
                                                                                     join D in dbContext.servicecomponentfieldvalues on C.v_ServiceComponentFieldsId equals D.v_ServiceComponentFieldsId

                                                                                     where (A.v_ServiceId == pstrServiceId)
                                                                                           && (B.v_ComponentId == pstrComponentId)
                                                                                           && (B.i_IsDeleted == 0)
                                                                                           && (C.i_IsDeleted == 0)
                                                                                     let range = (
                                                                                                     D.v_Value1 == "2" ? pstrPath + "\\Resources\\caries.png" :
                                                                                                      D.v_Value1 == "3" ? pstrPath + "\\Resources\\curacion.png" :
                                                                                                      string.Empty
                                                                                          )
                                                                                     select new ServiceComponentFieldValuesList
                                                                                     {
                                                                                         //v_ComponentId = B.v_ComponentId,
                                                                                         v_ComponentFieldId = C.v_ComponentFieldId,
                                                                                         //v_ComponentFieldId = G.v_ComponentFieldId,
                                                                                         //v_ComponentFielName = G.v_TextLabel,
                                                                                         v_ServiceComponentFieldsId = C.v_ServiceComponentFieldsId,
                                                                                         v_Value1 = range,
                                                                                         v_Value2 = D.v_Value1
                                                                                     }).ToList();


                return serviceComponentFieldValues;
            }
            catch (Exception)
            {

                throw;
            }

        }

        public List<ReportHistoriaOcupacionalList> ReportHistoriaOcupacional(string pstrserviceId)
        {
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                var groupUbigeo = 113;
                var isDeleted = 0;
                var exFisicoId = Constants.EXAMEN_FISICO_ID;
                var exFisico7C = Constants.EXAMEN_FISICO_7C_ID;

                var objEntity = (from A in dbContext.service
                                 join B in dbContext.person on A.v_PersonId equals B.v_PersonId

                                 join D in dbContext.history on B.v_PersonId equals D.v_PersonId into D_join
                                 from D in D_join.DefaultIfEmpty()

                                 join sc in dbContext.servicecomponent on new { a = pstrserviceId, b = exFisicoId }
                                                                      equals new { a = sc.v_ServiceId, b = sc.v_ComponentId } into sc_join
                                 from sc in sc_join.DefaultIfEmpty()

                                 join E in dbContext.systemuser on sc.i_ApprovedUpdateUserId equals E.i_SystemUserId into E_join
                                 from E in E_join.DefaultIfEmpty()

                                 join F in dbContext.professional on E.v_PersonId equals F.v_PersonId into F_join
                                 from F in F_join.DefaultIfEmpty()

                                 // Examen fisico 7C *******************************************************************
                                 join sc1 in dbContext.servicecomponent on new { a = pstrserviceId, b = exFisico7C }
                                                                    equals new { a = sc1.v_ServiceId, b = sc1.v_ComponentId } into sc1_join
                                 from sc1 in sc1_join.DefaultIfEmpty()

                                 join su7c in dbContext.systemuser on sc1.i_ApprovedUpdateUserId equals su7c.i_SystemUserId into su7c_join
                                 from su7c in su7c_join.DefaultIfEmpty()

                                 join p7c in dbContext.professional on su7c.v_PersonId equals p7c.v_PersonId into p7c_join
                                 from p7c in p7c_join.DefaultIfEmpty()

                                 //******************************************************************************

                                 // Ubigeo de la persona *******************************************************
                                 join dep in dbContext.datahierarchy on new { a = B.i_DepartmentId.Value, b = groupUbigeo }
                                                      equals new { a = dep.i_ItemId, b = dep.i_GroupId } into dep_join
                                 from dep in dep_join.DefaultIfEmpty()

                                 join prov in dbContext.datahierarchy on new { a = B.i_ProvinceId.Value, b = groupUbigeo }
                                                       equals new { a = prov.i_ItemId, b = prov.i_GroupId } into prov_join
                                 from prov in prov_join.DefaultIfEmpty()

                                 join distri in dbContext.datahierarchy on new { a = B.i_DistrictId.Value, b = groupUbigeo }
                                                       equals new { a = distri.i_ItemId, b = distri.i_GroupId } into distri_join
                                 from distri in distri_join.DefaultIfEmpty()
                                 //*********************************************************************************************

                                 let varDpto = dep.v_Value1 == null ? "" : dep.v_Value1
                                 let varProv = prov.v_Value1 == null ? "" : prov.v_Value1
                                 let varDistri = distri.v_Value1 == null ? "" : distri.v_Value1
                                 let del = D.i_IsDeleted == null ? 0 : D.i_IsDeleted

                                 where (A.v_ServiceId == pstrserviceId) &&
                                       (del == isDeleted)

                                 select new ReportHistoriaOcupacionalList
                                 {
                                     IdHistory = D.v_HistoryId,
                                     Trabajador = B.v_FirstLastName + " " + B.v_SecondLastName + " " + B.v_FirstName,
                                     IdServicio = A.v_ServiceId,
                                     FNacimiento = B.d_Birthdate,
                                     Genero = B.i_SexTypeId,
                                     LugarNacimiento = B.v_BirthPlace,
                                     LugarProcedencia = varDistri + "-" + varProv + "-" + varDpto, // Santa Anita - Lima - Lima
                                     Puesto = B.v_CurrentOccupation,
                                     FechaInicio = D.d_StartDate,
                                     FechaFin = D.d_EndDate,
                                     Empresa = D.v_Organization,
                                     Altitud = D.i_GeografixcaHeight,
                                     AreaTrabajo = D.v_TypeActivity,
                                     PuestoTrabajo = D.v_workstation,
                                     IdTipoOperacion = D.i_TypeOperationId,
                                     Dia = A.d_ServiceDate.Value.Day,
                                     Mes = A.d_ServiceDate.Value.Month,
                                     Anio = A.d_ServiceDate.Value.Year,
                                     FirmaMedico = F.b_SignatureImage == null ? p7c.b_SignatureImage : F.b_SignatureImage,
                                     FirmaTrabajador = B.b_RubricImage,
                                     HuellaTrabajador = B.b_FingerPrintImage,

                                 });

                var MedicalCenter = GetInfoMedicalCenter();

                var sql = (from a in objEntity.ToList()
                           let date1 = a.FechaInicio == null ? "" : a.FechaInicio.Value.ToString("MMMM / yyyy")
                           let date2 = a.FechaFin == null ? "" : a.FechaFin.Value.ToString("MMMM / yyyy")
                           let xxx = GetYearsAndMonth(a.FechaFin, a.FechaInicio)
                           select new ReportHistoriaOcupacionalList
                           {
                               IdHistory = a.IdHistory,
                               Trabajador = a.Trabajador,
                               IdServicio = a.IdServicio,
                               FechaNacimiento = a.FNacimiento == null ? "" : a.FNacimiento.Value.ToString("dd/MM/yyyy"),
                               Genero = a.Genero,
                               LugarNacimiento = a.LugarNacimiento,
                               LugarProcedencia = a.LugarProcedencia,
                               Puesto = a.Puesto,
                               FechaInicio = a.FechaInicio,
                               FechaFin = a.FechaFin,
                               Fechas = "Fecha Ini. \n" + date1 + "\n" + "Fecha Fin. \n" + date2,
                               Empresa = a.Empresa,
                               Altitud = a.Altitud,
                               AreaTrabajo = a.AreaTrabajo,
                               PuestoTrabajo = a.PuestoTrabajo,
                               IdTipoOperacion = a.IdTipoOperacion,
                               TiempoLabor = xxx,
                               Dia = a.Dia,
                               Mes = a.Mes,
                               Anio = a.Anio,
                               FirmaMedico = a.FirmaMedico,
                               FirmaTrabajador = a.FirmaTrabajador,
                               HuellaTrabajador = a.HuellaTrabajador,
                               Peligros = ConcatenateExposiciones(a.IdHistory),
                               Epp = ConcatenateEppsAndPercentage(a.IdHistory),

                               b_Logo = MedicalCenter.b_Image,
                               EmpresaPropietaria = MedicalCenter.v_Name,
                               EmpresaPropietariaDireccion = MedicalCenter.v_Address,
                               EmpresaPropietariaTelefono = MedicalCenter.v_PhoneNumber,
                               EmpresaPropietariaEmail = MedicalCenter.v_Mail,

                           }).ToList();

                return sql;
            }
            catch (Exception)
            {

                throw;
            }
        }

        public string GetYearsAndMonth(DateTime? EndDate, DateTime? StartDate)
        {
            if (EndDate == null || StartDate == null)
            {
                return "0 años y 0 meses";
            }

            var Clase = Sigesoft.Common.Utils.YearMonthDiff(StartDate.Value, EndDate.Value);

            var totalYears = Clase.Years;
            var totalMonths = Clase.Months;

            if (totalYears == 0)
            {
                return string.Format("{0} mes(es)", totalMonths);
            }
            else if (totalMonths == 0)
            {
                return string.Format("{0} año(s)", totalYears);
            }
            else
            {
                return string.Format("{0} año(s), {1} mes(es)", totalYears, totalMonths);
            }
        }

        private string ConcatenateExposiciones(string pstrHistoryId)
        {
            SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

            var qry = (from a in dbContext.workstationdangers
                       join B1 in dbContext.systemparameter on new { a = a.i_DangerId.Value, b = 145 } equals new { a = B1.i_ParameterId, b = B1.i_GroupId }
                       where a.v_HistoryId == pstrHistoryId &&
                       a.i_IsDeleted == 0
                       select new
                       {
                           v_Exposicion = B1.v_Value1
                       }).ToList();

            return string.Join(", ", qry.Select(p => p.v_Exposicion));
        }

        private string ConcatenateEpps(string pstrHistoryId)
        {
            SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

            var qry = (from a in dbContext.typeofeep
                       join C1 in dbContext.systemparameter on new { a = a.i_TypeofEEPId.Value, b = 146 } equals new { a = C1.i_ParameterId, b = C1.i_GroupId }
                       where a.v_HistoryId == pstrHistoryId &&
                       a.i_IsDeleted == 0
                       select new
                       {
                           v_Epps = C1.v_Value1
                       }).ToList();

            return string.Join(", ", qry.Select(p => p.v_Epps));
        }

        public string GetValueOdontogramaAusente(string pstrServiceId, string pstrComponentId, string pstrFieldId, string pstrPath)
        {
            try
            {
                ServiceBL oServiceBL = new ServiceBL();
                List<ServiceComponentFieldValuesList> oServiceComponentFieldValuesList = new List<ServiceComponentFieldValuesList>();

                oServiceComponentFieldValuesList = oServiceBL.ValoresComponenteOdontogramaAusente(pstrServiceId, pstrComponentId, pstrPath);
                var xx = oServiceComponentFieldValuesList.Count() == 0 || ((ServiceComponentFieldValuesList)oServiceComponentFieldValuesList.Find(p => p.v_ComponentFieldId == pstrFieldId)) == null ? String.Empty : ((ServiceComponentFieldValuesList)oServiceComponentFieldValuesList.Find(p => p.v_ComponentFieldId == pstrFieldId)).v_Value1;

                return xx;

            }
            catch (Exception)
            {

                throw;
            }

        }

        public List<ServiceComponentFieldValuesList> ValoresComponenteOdontogramaAusente(string pstrServiceId, string pstrComponentId, string pstrPath)
        {
            SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();


            try
            {
                List<ServiceComponentFieldValuesList> serviceComponentFieldValues = (from A in dbContext.service
                                                                                     join B in dbContext.servicecomponent on A.v_ServiceId equals B.v_ServiceId
                                                                                     join C in dbContext.servicecomponentfields on B.v_ServiceComponentId equals C.v_ServiceComponentId
                                                                                     join D in dbContext.servicecomponentfieldvalues on C.v_ServiceComponentFieldsId equals D.v_ServiceComponentFieldsId

                                                                                     where (A.v_ServiceId == pstrServiceId)
                                                                                           && (B.v_ComponentId == pstrComponentId)
                                                                                           && (B.i_IsDeleted == 0)
                                                                                           && (C.i_IsDeleted == 0)
                                                                                     let range = (D.v_Value1 == "1" ? pstrPath + "\\Resources\\ausent.jpg" : D.v_Value1 == "2" ? pstrPath + "\\Resources\\Exodoncia.jpg" :
                                                                                                 string.Empty
                                                                                                 )
                                                                                     select new ServiceComponentFieldValuesList
                                                                                     {
                                                                                         v_ComponentFieldId = C.v_ComponentFieldId,
                                                                                         //v_ComponentFieldId = G.v_ComponentFieldId,
                                                                                         //v_ComponentFielName = G.v_TextLabel,
                                                                                         v_ServiceComponentFieldsId = C.v_ServiceComponentFieldsId,
                                                                                         //v_Value1 =  D.v_Value1 == "1" ? pstrPath + "\\caries.png" ? D.v_Value1 == "2" ? pstrPath + "\\curacion.png" ?D.v_Value1 == "3" ? pstrPath + "\\ausent.png" : D.v_Value1, 
                                                                                         //v_Value1 = D.v_Value1
                                                                                         v_Value1 = range
                                                                                     }).ToList();


                return serviceComponentFieldValues;
            }
            catch (Exception)
            {

                throw;
            }

        }

        public List<ReportRadiologico> ReportRadiologico(string pstrserviceId, string pstrComponentId)
        {
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();


                var objEntity = (from A in dbContext.service
                                 join B in dbContext.person on A.v_PersonId equals B.v_PersonId
                                 join E in dbContext.servicecomponent on new { a = pstrserviceId, b = pstrComponentId }
                                                                        equals new { a = E.v_ServiceId, b = E.v_ComponentId }
                                 // Usuario Medico Evaluador / Medico Aprobador ****************************
                                 join me in dbContext.systemuser on E.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
                                 from me in me_join.DefaultIfEmpty()

                                 join pme in dbContext.professional on me.v_PersonId equals pme.v_PersonId into pme_join
                                 from pme in pme_join.DefaultIfEmpty()

                                 // Usuario Tecnologo *************************************
                                 join tec in dbContext.systemuser on E.i_UpdateUserTechnicalDataRegisterId equals tec.i_SystemUserId into tec_join
                                 from tec in tec_join.DefaultIfEmpty()

                                 join ptec in dbContext.professional on tec.v_PersonId equals ptec.v_PersonId into ptec_join
                                 from ptec in ptec_join.DefaultIfEmpty()
                                 // *******************************************************                            

                                 join I in dbContext.protocol on A.v_ProtocolId equals I.v_ProtocolId

                                 join J in dbContext.organization on A.v_EmpresaFacturacionId equals J.v_OrganizationId into J_join
                                 from J in J_join.DefaultIfEmpty()


                                 where A.v_ServiceId == pstrserviceId

                                 select new ReportRadiologico
                                 {
                                     v_ServiceId = A.v_ServiceId,
                                     Paciente = B.v_FirstName + " " + B.v_FirstLastName + " " + B.v_SecondLastName,
                                     ExamenSolicitado = "Radiografia de Torax (P-A)",
                                     Empresa = J.v_Name,
                                     Fecha = A.d_ServiceDate.Value,
                                     FirmaTecnologo = ptec.b_SignatureImage,
                                     FirmaMedicoEva = pme.b_SignatureImage,
                                     d_BirthDate = B.d_Birthdate.Value,
                                     RazonSocialEmpresaCliente = J.v_Name,
                                     LogoEmpresaCliente = J.b_Image

                                 });

                var MedicalCenter = GetInfoMedicalCenter();
                var Dx = GetDiagnosticByServiceIdAndComponentWithseparator(pstrserviceId, pstrComponentId, "|");
                var Rx = ValoresComponente(pstrserviceId, pstrComponentId);

                #region Valores

                var Vertices = Rx.Find(p => p.v_ComponentFieldId == Constants.RX_VERTICES_ID);
                var CamposPulmonares = Rx.Find(p => p.v_ComponentFieldId == Constants.RX_CAMPOS_PULMONARES_ID);
                var SenosCosto = Rx.Find(p => p.v_ComponentFieldId == Constants.RX_COSTO_ODIAFRAGMATICO_ID);
                var SenosCardio = Rx.Find(p => p.v_ComponentFieldId == Constants.RX_SILUETA_CARDIACA_DESCRIPCION_ID);
                var Mediastinos = Rx.Find(p => p.v_ComponentFieldId == Constants.RX_MEDIASTINOS_DESCRIPCION_ID);
                var Silueta = Rx.Find(p => p.v_ComponentFieldId == Constants.RX_SILUETA_CARDIACA_DESCRIPCION_ID);
                var Indice = Rx.Find(p => p.v_ComponentFieldId == Constants.RX_INDICE_CARDIACO_DESCRIPCION_ID);
                var PartesBlandas = Rx.Find(p => p.v_ComponentFieldId == Constants.RX_PARTES_BLANDAS_OSEAS_ID);
                var Conclusiones = Rx.Find(p => p.v_ComponentFieldId == Constants.RX_CONCLUSIONES_RADIOGRAFICAS_DESCRIPCION_ID);
                var Hilos = Rx.Find(p => p.v_ComponentFieldId == Constants.RX_HILOS_ID);

                #endregion

                var sql = (from a in objEntity.ToList()
                           select new ReportRadiologico
                           {
                               v_ServiceId = a.v_ServiceId,
                               Paciente = a.Paciente,
                               ExamenSolicitado = a.ExamenSolicitado,
                               Empresa = a.Empresa,
                               Fecha = a.Fecha,
                               FirmaTecnologo = a.FirmaTecnologo,
                               FirmaMedicoEva = a.FirmaMedicoEva,
                               d_BirthDate = a.d_BirthDate,
                               Edad = GetAge(a.d_BirthDate.Value),
                               Vertices = Vertices == null ? string.Empty : Vertices.v_Value1,
                               CamposPulmonares = CamposPulmonares == null ? string.Empty : CamposPulmonares.v_Value1,
                               SenosCosto = SenosCosto == null ? string.Empty : SenosCosto.v_Value1,
                               SenosCardio = SenosCardio == null ? string.Empty : SenosCardio.v_Value1,
                               Mediastinos = Mediastinos == null ? string.Empty : Mediastinos.v_Value1,
                               Silueta = Silueta == null ? string.Empty : Silueta.v_Value1,
                               Indice = Indice == null ? string.Empty : Indice.v_Value1,
                               PartesBlandas = PartesBlandas == null ? string.Empty : PartesBlandas.v_Value1,
                               Conclusiones = Conclusiones == null ? string.Empty : Conclusiones.v_Value1,
                               Hilos = Hilos == null ? string.Empty : Hilos.v_Value1,
                               b_Logo = MedicalCenter.b_Image,
                               EmpresaPropietaria = MedicalCenter.v_Name,
                               EmpresaPropietariaDireccion = MedicalCenter.v_Address,
                               EmpresaPropietariaTelefono = MedicalCenter.v_PhoneNumber,
                               EmpresaPropietariaEmail = MedicalCenter.v_Mail,
                               Dx = Dx,
                               RazonSocialEmpresaCliente = a.LogoEmpresaCliente == null ? a.RazonSocialEmpresaCliente : "",
                               LogoEmpresaCliente = a.LogoEmpresaCliente,
                           }).ToList();

                return sql;
            }
            catch (Exception)
            {

                throw;
            }
        }

        // Alejandro new -> 02/07/15 
        public List<ReportMusculoEsqueletico1> ReportMusculoEsqueletico1(string pstrserviceId, string pstrComponentId)
        {
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                var objEntity = (from A in dbContext.service
                                 join B in dbContext.person on A.v_PersonId equals B.v_PersonId
                                 join E in dbContext.servicecomponent on new { a = pstrserviceId, b = pstrComponentId }
                                                                        equals new { a = E.v_ServiceId, b = E.v_ComponentId }

                                 // Usuario Medico Evaluador / Medico Aprobador ****************************
                                 join me in dbContext.systemuser on E.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
                                 from me in me_join.DefaultIfEmpty()

                                 join pme in dbContext.professional on me.v_PersonId equals pme.v_PersonId into pme_join
                                 from pme in pme_join.DefaultIfEmpty()
                                 //**********************************************************************************************

                                 join I in dbContext.protocol on A.v_ProtocolId equals I.v_ProtocolId into I_join
                                 from I in I_join.DefaultIfEmpty()

                                 join J in dbContext.organization on I.v_CustomerOrganizationId equals J.v_OrganizationId into J_join
                                 from J in J_join.DefaultIfEmpty()

                                 join K in dbContext.organization on A.v_EmpresaFacturacionId equals K.v_OrganizationId into K_join
                                 from K in K_join.DefaultIfEmpty()

                                 join L in dbContext.systemparameter on new { a = I.i_EsoTypeId.Value, b = 118 }
                                                 equals new { a = L.i_ParameterId, b = L.i_GroupId } into L_join
                                 from L in L_join.DefaultIfEmpty()

                                 where A.v_ServiceId == pstrserviceId

                                 select new ReportMusculoEsqueletico1
                                 {
                                     v_ServiceId = A.v_ServiceId,
                                     v_ServiceComponentId = E.v_ServiceComponentId,
                                     v_FullPersonName = B.v_FirstName + " " + B.v_FirstLastName + " " + B.v_SecondLastName,
                                     Puesto = B.v_CurrentOccupation,
                                     Protocolo = I.v_Name,
                                     v_WorkingOrganizationName = K.v_Name,
                                     v_EsoTypeName = L.v_Value1,
                                     FirmaTrabajador = B.b_RubricImage,
                                     FirmaMedico = pme.b_SignatureImage,
                                     d_BirthDate = B.d_Birthdate.Value,
                                     HuellaTrabajador = B.b_FingerPrintImage
                                 });

                var MedicalCenter = GetInfoMedicalCenter();
                var muscuEsque1 = ValoresComponente(pstrserviceId, pstrComponentId);

                var sql = (from a in objEntity.ToList()

                           select new ReportMusculoEsqueletico1
                           {
                               v_ServiceId = a.v_ServiceId,
                               v_ServiceComponentId = a.v_ServiceComponentId,
                               v_FullPersonName = a.v_FullPersonName,
                               Puesto = a.Puesto,
                               Protocolo = a.Protocolo,
                               v_WorkingOrganizationName = a.v_WorkingOrganizationName,
                               v_EsoTypeName = a.v_EsoTypeName,
                               FirmaTrabajador = a.FirmaTrabajador,
                               FirmaMedico = a.FirmaMedico,
                               d_BirthDate = a.d_BirthDate,
                               i_AgePacient = GetAge(a.d_BirthDate.Value),

                               NucaDolorUltimo12Meses = muscuEsque1.Count == 0 ? string.Empty : muscuEsque1.Find(p => p.v_ComponentFieldId == Constants.MUSCULO_ESQUELETICO_NUCA_DOLOR_ULTIMO_12MESES).v_Value1 == "1" ? "Si" : "No",
                               NucaIncapacitadoUltimo12Meses = muscuEsque1.Count == 0 ? string.Empty : muscuEsque1.Find(p => p.v_ComponentFieldId == Constants.MUSCULO_ESQUELETICO_NUCA_INCAPACITADO_ULTIMO_12MESES).v_Value1 == "1" ? "Si" : "No",
                               NucaDolorUltimo7Dias = muscuEsque1.Count == 0 ? string.Empty : muscuEsque1.Find(p => p.v_ComponentFieldId == Constants.MUSCULO_ESQUELETICO_NUCA_DOLOR_ULTIMO_7DIAS).v_Value1 == "1" ? "Si" : "No",

                               HombroDerechoDolorUltimo12Meses = muscuEsque1.Count == 0 ? string.Empty : muscuEsque1.Find(p => p.v_ComponentFieldId == Constants.MUSCULO_ESQUELETICO_HOMBRO_DERECHO_DOLOR_ULTIMO_12MESES).v_Value1 == "1" ? "Si" : "No",
                               HombroDerechoIncapacitadoUltimo12Meses = muscuEsque1.Count == 0 ? string.Empty : muscuEsque1.Find(p => p.v_ComponentFieldId == Constants.MUSCULO_ESQUELETICO_HOMBRO_DERECHO_INCAPACITADO_ULTIMO_12MESES).v_Value1 == "1" ? "Si" : "No",
                               HombroDerechoDolorUltimo7Dias = muscuEsque1.Count == 0 ? string.Empty : muscuEsque1.Find(p => p.v_ComponentFieldId == Constants.MUSCULO_ESQUELETICO_HOMBRO_DERECHO_DOLOR_ULTIMO_7DIAS).v_Value1 == "1" ? "Si" : "No",

                               HombroIzquierdoDolorUltimo12Meses = muscuEsque1.Count == 0 ? string.Empty : muscuEsque1.Find(p => p.v_ComponentFieldId == Constants.MUSCULO_ESQUELETICO_HOMBRO_IZQUIERDO_DOLOR_ULTIMO_12MESES).v_Value1 == "1" ? "Si" : "No",
                               HombroIzquierdoIncapacitadoUltimo12Meses = muscuEsque1.Count == 0 ? string.Empty : muscuEsque1.Find(p => p.v_ComponentFieldId == Constants.MUSCULO_ESQUELETICO_HOMBRO_IZQUIERDO_INCAPACITADO_ULTIMO_12MESES).v_Value1 == "1" ? "Si" : "No",
                               HombroIzquierdoDolorUltimo7Dias = muscuEsque1.Count == 0 ? string.Empty : muscuEsque1.Find(p => p.v_ComponentFieldId == Constants.MUSCULO_ESQUELETICO_HOMBRO_IZQUIERDO_DOLOR_ULTIMO_7DIAS).v_Value1 == "1" ? "Si" : "No",

                               HombroAmbosUltimo12Meses = muscuEsque1.Count == 0 ? string.Empty : muscuEsque1.Find(p => p.v_ComponentFieldId == Constants.MUSCULO_ESQUELETICO_HOMBRO_AMBOS_ULTIMO_12MESES).v_Value1 == "1" ? "Si" : "No",
                               HombroAmbosIncapacitadoUltimo12Meses = muscuEsque1.Count == 0 ? string.Empty : muscuEsque1.Find(p => p.v_ComponentFieldId == Constants.MUSCULO_ESQUELETICO_HOMBRO_AMBOS_INCAPACITADO_ULTIMO_12MESES).v_Value1 == "1" ? "Si" : "No",
                               HombroAmbosDolorUltimo7Dias = muscuEsque1.Count == 0 ? string.Empty : muscuEsque1.Find(p => p.v_ComponentFieldId == Constants.MUSCULO_ESQUELETICO_HOMBRO_AMBOS_DOLOR_ULTIMO_7DIAS).v_Value1 == "1" ? "Si" : "No",

                               CodoDerechoDolorUltimo12Meses = muscuEsque1.Count == 0 ? string.Empty : muscuEsque1.Find(p => p.v_ComponentFieldId == Constants.MUSCULO_ESQUELETICO_CODO_DERECHO_DOLOR_ULTIMO_12MESES).v_Value1 == "1" ? "Si" : "No",
                               CodoDerechoIncapacitadoUltimo12Meses = muscuEsque1.Count == 0 ? string.Empty : muscuEsque1.Find(p => p.v_ComponentFieldId == Constants.MUSCULO_ESQUELETICO_CODO_DERECHO_INCAPACITADO_ULTIMO_12MESES).v_Value1 == "1" ? "Si" : "No",
                               CodoDerechoDolorUltimo7Dias = muscuEsque1.Count == 0 ? string.Empty : muscuEsque1.Find(p => p.v_ComponentFieldId == Constants.MUSCULO_ESQUELETICO_CODO_DERECHO_DOLOR_ULTIMO_7DIAS).v_Value1 == "1" ? "Si" : "No",

                               CodoIzquierdoDolorUltimo12Meses = muscuEsque1.Count == 0 ? string.Empty : muscuEsque1.Find(p => p.v_ComponentFieldId == Constants.MUSCULO_ESQUELETICO_CODO_IZQUIERDO_DOLOR_ULTIMO_12MESES).v_Value1 == "1" ? "Si" : "No",
                               CodoIzquierdoIncapacitadoUltimo12Meses = muscuEsque1.Count == 0 ? string.Empty : muscuEsque1.Find(p => p.v_ComponentFieldId == Constants.MUSCULO_ESQUELETICO_CODO_IZQUIERDO_INCAPACITADO_ULTIMO_12MESES).v_Value1 == "1" ? "Si" : "No",
                               CodoIzquierdoDolorUltimo7Dias = muscuEsque1.Count == 0 ? string.Empty : muscuEsque1.Find(p => p.v_ComponentFieldId == Constants.MUSCULO_ESQUELETICO_CODO_IZQUIERDO_DOLOR_ULTIMO_7DIAS).v_Value1 == "1" ? "Si" : "No",

                               CodoAmbosUltimo12Meses = muscuEsque1.Count == 0 ? string.Empty : muscuEsque1.Find(p => p.v_ComponentFieldId == Constants.MUSCULO_ESQUELETICO_CODO_AMBOS_ULTIMO_12MESES).v_Value1 == "1" ? "Si" : "No",
                               CodoAmbosIncapacitadoUltimo12Meses = muscuEsque1.Count == 0 ? string.Empty : muscuEsque1.Find(p => p.v_ComponentFieldId == Constants.MUSCULO_ESQUELETICO_CODO_AMBOS_INCAPACITADO_ULTIMO_12MESES).v_Value1 == "1" ? "Si" : "No",
                               CodoAmbosDolorUltimo7Dias = muscuEsque1.Count == 0 ? string.Empty : muscuEsque1.Find(p => p.v_ComponentFieldId == Constants.MUSCULO_ESQUELETICO_CODO_AMBOS_DOLOR_ULTIMO_7DIAS).v_Value1 == "1" ? "Si" : "No",

                               PuñosManosDerechoDolorUltimo12Meses = muscuEsque1.Count == 0 ? string.Empty : muscuEsque1.Find(p => p.v_ComponentFieldId == Constants.MUSCULO_ESQUELETICO_PUÑOSMANOS_DERECHO_DOLOR_ULTIMO_12MESES).v_Value1 == "1" ? "Si" : "No",
                               PuñosManosDerechoIncapacitadoUltimo12Meses = muscuEsque1.Count == 0 ? string.Empty : muscuEsque1.Find(p => p.v_ComponentFieldId == Constants.MUSCULO_ESQUELETICO_PUÑOSMANOS_DERECHO_INCAPACITADO_ULTIMO_12MESES).v_Value1 == "1" ? "Si" : "No",
                               PuñosManosDerechoDolorUltimo7Dias = muscuEsque1.Count == 0 ? string.Empty : muscuEsque1.Find(p => p.v_ComponentFieldId == Constants.MUSCULO_ESQUELETICO_PUÑOSMANOS_DERECHO_DOLOR_ULTIMO_7DIAS).v_Value1 == "1" ? "Si" : "No",

                               PuñosManosIzquierdoDolorUltimo12Meses = muscuEsque1.Count == 0 ? string.Empty : muscuEsque1.Find(p => p.v_ComponentFieldId == Constants.MUSCULO_ESQUELETICO_PUÑOSMANOS_IZQUIERDO_DOLOR_ULTIMO_12MESES).v_Value1 == "1" ? "Si" : "No",
                               PuñosManosIzquierdoIncapacitadoUltimo12Meses = muscuEsque1.Count == 0 ? string.Empty : muscuEsque1.Find(p => p.v_ComponentFieldId == Constants.MUSCULO_ESQUELETICO_PUÑOSMANOS_IZQUIERDO_INCAPACITADO_ULTIMO_12MESES).v_Value1 == "1" ? "Si" : "No",
                               PuñosManosIzquierdoDolorUltimo7Dias = muscuEsque1.Count == 0 ? string.Empty : muscuEsque1.Find(p => p.v_ComponentFieldId == Constants.MUSCULO_ESQUELETICO_PUÑOSMANOS_IZQUIERDO_DOLOR_ULTIMO_7DIAS).v_Value1 == "1" ? "Si" : "No",

                               PuñosManosAmbosDolorUltimo12Meses = muscuEsque1.Count == 0 ? string.Empty : muscuEsque1.Find(p => p.v_ComponentFieldId == Constants.MUSCULO_ESQUELETICO_PUÑOSMANOS_AMBOS_DOLOR_ULTIMO_12MESES).v_Value1 == "1" ? "Si" : "No",
                               PuñosManosAmbosIncapacitadoUltimo12Meses = muscuEsque1.Count == 0 ? string.Empty : muscuEsque1.Find(p => p.v_ComponentFieldId == Constants.MUSCULO_ESQUELETICO_PUÑOSMANOS_AMBOS_INCAPACITADO_ULTIMO_12MESES).v_Value1 == "1" ? "Si" : "No",
                               PuñosManosAmbosDolorUltimo7Dias = muscuEsque1.Count == 0 ? string.Empty : muscuEsque1.Find(p => p.v_ComponentFieldId == Constants.MUSCULO_ESQUELETICO_PUÑOSMANOS_AMBOS_DOLOR_ULTIMO_7DIAS).v_Value1 == "1" ? "Si" : "No",

                               ColumnaAltaDolorUltimo12Meses = muscuEsque1.Count == 0 ? string.Empty : muscuEsque1.Find(p => p.v_ComponentFieldId == Constants.MUSCULO_ESQUELETICO_COLUMNA_ALTA_DOLOR_ULTIMO_12MESES).v_Value1 == "1" ? "Si" : "No",
                               ColumnaAltaIncapacitadoUltimo12Meses = muscuEsque1.Count == 0 ? string.Empty : muscuEsque1.Find(p => p.v_ComponentFieldId == Constants.MUSCULO_ESQUELETICO_COLUMNA_ALTA_INCAPACITADO_ULTIMO_12MESES).v_Value1 == "1" ? "Si" : "No",
                               ColumnaAltaDolorUltimo7Dias = muscuEsque1.Count == 0 ? string.Empty : muscuEsque1.Find(p => p.v_ComponentFieldId == Constants.MUSCULO_ESQUELETICO_COLUMNA_ALTA_DOLOR_ULTIMO_7DIAS).v_Value1 == "1" ? "Si" : "No",

                               ColumnaBajaDolorUltimo12Meses = muscuEsque1.Count == 0 ? string.Empty : muscuEsque1.Find(p => p.v_ComponentFieldId == Constants.MUSCULO_ESQUELETICO_COLUMNA_BAJA_DOLOR_ULTIMO_12MESES).v_Value1 == "1" ? "Si" : "No",
                               ColumnaBajaIncapacitadoUltimo12Meses = muscuEsque1.Count == 0 ? string.Empty : muscuEsque1.Find(p => p.v_ComponentFieldId == Constants.MUSCULO_ESQUELETICO_COLUMNA_BAJA_INCAPACITADO_ULTIMO_12MESES).v_Value1 == "1" ? "Si" : "No",
                               ColumnaBajaDolorUltimo7Dias = muscuEsque1.Count == 0 ? string.Empty : muscuEsque1.Find(p => p.v_ComponentFieldId == Constants.MUSCULO_ESQUELETICO_COLUMNA_BAJA_DOLOR_ULTIMO_7DIAS).v_Value1 == "1" ? "Si" : "No",

                               CaderasDerechoDolorUltimo12Meses = muscuEsque1.Count == 0 ? string.Empty : muscuEsque1.Find(p => p.v_ComponentFieldId == Constants.MUSCULO_ESQUELETICO_CADERAS_DERECHO_DOLOR_ULTIMO_12MESES).v_Value1 == "1" ? "Si" : "No",
                               CaderasDerechoIncapacitadoUltimo12Meses = muscuEsque1.Count == 0 ? string.Empty : muscuEsque1.Find(p => p.v_ComponentFieldId == Constants.MUSCULO_ESQUELETICO_CADERAS_DERECHO_INCAPACITADO_ULTIMO_12MESES).v_Value1 == "1" ? "Si" : "No",
                               CaderasDerechoDolorUltimo7Dias = muscuEsque1.Count == 0 ? string.Empty : muscuEsque1.Find(p => p.v_ComponentFieldId == Constants.MUSCULO_ESQUELETICO_CADERAS_DERECHO_DOLOR_ULTIMO_7DIAS).v_Value1 == "1" ? "Si" : "No",

                               CaderasIzquierdoDolorUltimo12Meses = muscuEsque1.Count == 0 ? string.Empty : muscuEsque1.Find(p => p.v_ComponentFieldId == Constants.MUSCULO_ESQUELETICO_CADERAS_IZQUIERDO_DOLOR_ULTIMO_12MESES).v_Value1 == "1" ? "Si" : "No",
                               CaderasIzquierdoIncapacitadoUltimo12Meses = muscuEsque1.Count == 0 ? string.Empty : muscuEsque1.Find(p => p.v_ComponentFieldId == Constants.MUSCULO_ESQUELETICO_CADERAS_IZQUIERDO_INCAPACITADO_ULTIMO_12MESES).v_Value1 == "1" ? "Si" : "No",
                               CaderasIzquierdoDolorUltimo7Dias = muscuEsque1.Count == 0 ? string.Empty : muscuEsque1.Find(p => p.v_ComponentFieldId == Constants.MUSCULO_ESQUELETICO_CADERAS_IZQUIERDO_DOLOR_ULTIMO_7DIAS).v_Value1 == "1" ? "Si" : "No",

                               RodillasDerechoDolorUltimo12Meses = muscuEsque1.Count == 0 ? string.Empty : muscuEsque1.Find(p => p.v_ComponentFieldId == Constants.MUSCULO_ESQUELETICO_RODILLAS_DERECHO_DOLOR_ULTIMO_12MESES).v_Value1 == "1" ? "Si" : "No",
                               RodillasDerechoIncapacitadoUltimo12Meses = muscuEsque1.Count == 0 ? string.Empty : muscuEsque1.Find(p => p.v_ComponentFieldId == Constants.MUSCULO_ESQUELETICO_RODILLAS_DERECHO_INCAPACITADO_ULTIMO_12MESES).v_Value1 == "1" ? "Si" : "No",
                               RodillasDerechoDolorUltimo7Dias = muscuEsque1.Count == 0 ? string.Empty : muscuEsque1.Find(p => p.v_ComponentFieldId == Constants.MUSCULO_ESQUELETICO_RODILLAS_DERECHO_DOLOR_ULTIMO_7DIAS).v_Value1 == "1" ? "Si" : "No",

                               RodillasIzquierdoDolorUltimo12Meses = muscuEsque1.Count == 0 ? string.Empty : muscuEsque1.Find(p => p.v_ComponentFieldId == Constants.MUSCULO_ESQUELETICO_RODILLAS_IZQUIERDO_DOLOR_ULTIMO_12MESES).v_Value1 == "1" ? "Si" : "No",
                               RodillasIzquierdoIncapacitadoUltimo12Meses = muscuEsque1.Count == 0 ? string.Empty : muscuEsque1.Find(p => p.v_ComponentFieldId == Constants.MUSCULO_ESQUELETICO_RODILLAS_IZQUIERDO_INCAPACITADO_ULTIMO_12MESES).v_Value1 == "1" ? "Si" : "No",
                               RodillasIzquierdoDolorUltimo7Dias = muscuEsque1.Count == 0 ? string.Empty : muscuEsque1.Find(p => p.v_ComponentFieldId == Constants.MUSCULO_ESQUELETICO_RODILLAS_IZQUIERDO_DOLOR_ULTIMO_7DIAS).v_Value1 == "1" ? "Si" : "No",

                               TobillosPiesDerechoDolorUltimo12Meses = muscuEsque1.Count == 0 ? string.Empty : muscuEsque1.Find(p => p.v_ComponentFieldId == Constants.MUSCULO_ESQUELETICO_TOBILLOSPIES_DERECHO_DOLOR_ULTIMO_12MESES).v_Value1 == "1" ? "Si" : "No",
                               TobillosPiesDerechoIncapacitadoUltimo12Meses = muscuEsque1.Count == 0 ? string.Empty : muscuEsque1.Find(p => p.v_ComponentFieldId == Constants.MUSCULO_ESQUELETICO_TOBILLOSPIES_DERECHO_INCAPACITADO_ULTIMO_12MESES).v_Value1 == "1" ? "Si" : "No",
                               TobillosPiesDerechoDolorUltimo7Dias = muscuEsque1.Count == 0 ? string.Empty : muscuEsque1.Find(p => p.v_ComponentFieldId == Constants.MUSCULO_ESQUELETICO_TOBILLOSPIES_DERECHO_DOLOR_ULTIMO_7DIAS).v_Value1 == "1" ? "Si" : "No",

                               TobillosPiesIzquierdoDolorUltimo12Meses = muscuEsque1.Count == 0 ? string.Empty : muscuEsque1.Find(p => p.v_ComponentFieldId == Constants.MUSCULO_ESQUELETICO_TOBILLOSPIES_IZQUIERDO_DOLOR_ULTIMO_12MESES).v_Value1 == "1" ? "Si" : "No",
                               TobillosPiesIzquierdoIncapacitadoUltimo12Meses = muscuEsque1.Count == 0 ? string.Empty : muscuEsque1.Find(p => p.v_ComponentFieldId == Constants.MUSCULO_ESQUELETICO_TOBILLOSPIES_IZQUIERDO_INCAPACITADO_ULTIMO_12MESES).v_Value1 == "1" ? "Si" : "No",
                               TobillosPiesIzquierdoDolorUltimo7Dias = muscuEsque1.Count == 0 ? string.Empty : muscuEsque1.Find(p => p.v_ComponentFieldId == Constants.MUSCULO_ESQUELETICO_TOBILLOSPIES_IZQUIERDO_DOLOR_ULTIMO_7DIAS).v_Value1 == "1" ? "Si" : "No",

                               DetalleAntecEncontrados = muscuEsque1.Count == 0 ? string.Empty : muscuEsque1.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_1_DETALLE_DE_ANTECEDENTES_ENCONTRADOS).v_Value1,

                               HuellaTrabajador = a.HuellaTrabajador,

                               b_Logo = MedicalCenter.b_Image,
                               EmpresaPropietaria = MedicalCenter.v_Name,
                               EmpresaPropietariaDireccion = MedicalCenter.v_Address,
                               EmpresaPropietariaTelefono = MedicalCenter.v_PhoneNumber,
                               EmpresaPropietariaEmail = MedicalCenter.v_Mail,

                           }).ToList();

                return sql;
            }
            catch (Exception)
            {

                throw;
            }
        }

        // Alejandro new -> 10/07/15 
        public List<ReportMusculoEsqueletico2> ReportMusculoEsqueletico2(string pstrserviceId, string pstrComponentId)
        {
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                var objEntity = (from A in dbContext.service
                                 join B in dbContext.person on A.v_PersonId equals B.v_PersonId
                                 join E in dbContext.servicecomponent on new { a = pstrserviceId, b = pstrComponentId }
                                                                        equals new { a = E.v_ServiceId, b = E.v_ComponentId }

                                 // Usuario Medico Evaluador / Medico Aprobador ****************************
                                 join me in dbContext.systemuser on E.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
                                 from me in me_join.DefaultIfEmpty()

                                 join pme in dbContext.professional on me.v_PersonId equals pme.v_PersonId into pme_join
                                 from pme in pme_join.DefaultIfEmpty()
                                 //**********************************************************************************************

                                 join I in dbContext.protocol on A.v_ProtocolId equals I.v_ProtocolId into I_join
                                 from I in I_join.DefaultIfEmpty()

                                 join J in dbContext.organization on I.v_CustomerOrganizationId equals J.v_OrganizationId into J_join
                                 from J in J_join.DefaultIfEmpty()

                                 join K in dbContext.organization on A.v_EmpresaFacturacionId equals K.v_OrganizationId into K_join
                                 from K in K_join.DefaultIfEmpty()

                                 join L in dbContext.systemparameter on new { a = I.i_EsoTypeId.Value, b = 118 }
                                                 equals new { a = L.i_ParameterId, b = L.i_GroupId } into L_join
                                 from L in L_join.DefaultIfEmpty()

                                 where A.v_ServiceId == pstrserviceId

                                 select new ReportMusculoEsqueletico1
                                 {
                                     v_ServiceId = A.v_ServiceId,
                                     v_ServiceComponentId = E.v_ServiceComponentId,
                                     v_FullPersonName = B.v_FirstName + " " + B.v_FirstLastName + " " + B.v_SecondLastName,
                                     Puesto = B.v_CurrentOccupation,
                                     Protocolo = I.v_Name,
                                     v_WorkingOrganizationName = K.v_Name,
                                     v_EsoTypeName = L.v_Value1,
                                     FirmaTrabajador = B.b_RubricImage,
                                     FirmaMedico = pme.b_SignatureImage,
                                     d_BirthDate = B.d_Birthdate.Value,
                                     HuellaTrabajador = B.b_FingerPrintImage
                                 });

                var MedicalCenter = GetInfoMedicalCenter();
                var muscuEsque2 = ValoresComponente(pstrserviceId, pstrComponentId);

                var Dx = GetDiagnosticByServiceIdAndComponentWithseparator(pstrserviceId, pstrComponentId, "|");
                var res = GetRestrictionByServiceIdAndComponentWithSeparator(pstrserviceId, pstrComponentId, "|");
                var rec = GetRecommendationByServiceIdAndComponent(pstrserviceId, pstrComponentId, "|");


                var sql = (from a in objEntity.ToList()

                           select new ReportMusculoEsqueletico2
                           {
                               v_ServiceId = a.v_ServiceId,
                               v_ServiceComponentId = a.v_ServiceComponentId,
                               v_FullPersonName = a.v_FullPersonName,
                               Puesto = a.Puesto,
                               Protocolo = a.Protocolo,
                               v_WorkingOrganizationName = a.v_WorkingOrganizationName,
                               v_EsoTypeName = a.v_EsoTypeName,
                               FirmaTrabajador = a.FirmaTrabajador,
                               FirmaMedico = a.FirmaMedico,
                               d_BirthDate = a.d_BirthDate,
                               i_AgePacient = GetAge(a.d_BirthDate.Value),

                               // Columna cervical
                               MÚSCULO_ESQUELÉTICO_2_A_COLUMNA_CERVICAL_REPOSO = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_A_COLUMNA_CERVICAL_REPOSO).v_Value1Name,
                               MÚSCULO_ESQUELÉTICO_2_A_COLUMNA_CERVICAL_DOLOR_PALPACION = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_A_COLUMNA_CERVICAL_DOLOR_PALPACION).v_Value1,
                               MÚSCULO_ESQUELÉTICO_2_A_COLUMNA_CERVICAL_FLEXION_40 = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_A_COLUMNA_CERVICAL_FLEXION_40).v_Value1Name,
                               MÚSCULO_ESQUELÉTICO_2_A_COLUMNA_CERVICAL_EXTENSION_75 = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_A_COLUMNA_CERVICAL_EXTENSION_75).v_Value1Name,
                               MÚSCULO_ESQUELÉTICO_2_A_COLUMNA_CERVICAL_ROTACION_D_75 = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_A_COLUMNA_CERVICAL_ROTACION_D_75).v_Value1Name,
                               MÚSCULO_ESQUELÉTICO_2_A_COLUMNA_CERVICAL_ROTACION_I_75 = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_A_COLUMNA_CERVICAL_ROTACION_I_75).v_Value1Name,
                               MÚSCULO_ESQUELÉTICO_2_A_COLUMNA_CERVICAL_LATER_D_30_45 = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_A_COLUMNA_CERVICAL_LATER_D_30_45).v_Value1Name,
                               MÚSCULO_ESQUELÉTICO_2_A_COLUMNA_CERVICAL_LATER_I_30_45 = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_A_COLUMNA_CERVICAL_LATER_I_30_45).v_Value1Name,
                               // dolor Columna cervical
                               MÚSCULO_ESQUELÉTICO_2_A_COLUMNA_CERVICAL_DOLOR_MOVIMIENTO_FLEX = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_A_COLUMNA_CERVICAL_DOLOR_MOVIMIENTO_FLEX).v_Value1,
                               MÚSCULO_ESQUELÉTICO_2_A_COLUMNA_CERVICAL_DOLOR_MOVIMIENTO_EXT = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_A_COLUMNA_CERVICAL_DOLOR_MOVIMIENTO_EXT).v_Value1,
                               MÚSCULO_ESQUELÉTICO_2_A_COLUMNA_CERVICAL_DOLOR_MOVIMIENTO_RD = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_A_COLUMNA_CERVICAL_DOLOR_MOVIMIENTO_RD).v_Value1,
                               MÚSCULO_ESQUELÉTICO_2_A_COLUMNA_CERVICAL_DOLOR_MOVIMIENTO_RI = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_A_COLUMNA_CERVICAL_DOLOR_MOVIMIENTO_RI).v_Value1,
                               MÚSCULO_ESQUELÉTICO_2_A_COLUMNA_CERVICAL_DOLOR_MOVIMIENTO_LD = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_A_COLUMNA_CERVICAL_DOLOR_MOVIMIENTO_LD).v_Value1,
                               MÚSCULO_ESQUELÉTICO_2_A_COLUMNA_CERVICAL_DOLOR_MOVIMIENTO_LI = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_A_COLUMNA_CERVICAL_DOLOR_MOVIMIENTO_LI).v_Value1,
                               //columna dorso lumbar
                               MÚSCULO_ESQUELÉTICO_2_B_COLUMNA_DORSO_LUMBAR_REPOSO = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_B_COLUMNA_DORSO_LUMBAR_REPOSO).v_Value1Name,
                               MÚSCULO_ESQUELÉTICO_2_B_COLUMNA_DORSO_LUMBAR_FLEXION_40 = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_B_COLUMNA_DORSO_LUMBAR_FLEXION_40).v_Value1Name,
                               MÚSCULO_ESQUELÉTICO_2_B_COLUMNA_DORSO_LUMBAR_EXTENSION = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_B_COLUMNA_DORSO_LUMBAR_EXTENSION).v_Value1Name,
                               MÚSCULO_ESQUELÉTICO_2_B_COLUMNA_DORSO_LUMBAR_ROTACION_D = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_B_COLUMNA_DORSO_LUMBAR_ROTACION_D).v_Value1Name,
                               MÚSCULO_ESQUELÉTICO_2_B_COLUMNA_DORSO_LUMBAR_ROTACION_I = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_B_COLUMNA_DORSO_LUMBAR_ROTACION_I).v_Value1Name,
                               MÚSCULO_ESQUELÉTICO_2_B_COLUMNA_DORSO_LUMBAR_LATER_D = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_B_COLUMNA_DORSO_LUMBAR_LATER_D).v_Value1Name,
                               MÚSCULO_ESQUELÉTICO_2_B_COLUMNA_DORSO_LUMBAR_LATER_I = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_B_COLUMNA_DORSO_LUMBAR_LATER_I).v_Value1Name,
                               // dolor dorso lumbar
                               MÚSCULO_ESQUELÉTICO_2_B_COLUMNA_DORSO_LUMBAR_DOLOR_MOVIMIENTO_FLEX = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_B_COLUMNA_DORSO_LUMBAR_DOLOR_MOVIMIENTO_FLEX).v_Value1,
                               MÚSCULO_ESQUELÉTICO_2_B_COLUMNA_DORSO_LUMBAR_DOLOR_MOVIMIENTO_EXT = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_B_COLUMNA_DORSO_LUMBAR_DOLOR_MOVIMIENTO_EXT).v_Value1,
                               MÚSCULO_ESQUELÉTICO_2_B_COLUMNA_DORSO_LUMBAR_DOLOR_MOVIMIENTO_RD = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_B_COLUMNA_DORSO_LUMBAR_DOLOR_MOVIMIENTO_RD).v_Value1,
                               MÚSCULO_ESQUELÉTICO_2_B_COLUMNA_DORSO_LUMBAR_DOLOR_MOVIMIENTO_RI = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_B_COLUMNA_DORSO_LUMBAR_DOLOR_MOVIMIENTO_RI).v_Value1,
                               MÚSCULO_ESQUELÉTICO_2_B_COLUMNA_DORSO_LUMBAR_DOLOR_MOVIMIENTO_LD = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_B_COLUMNA_DORSO_LUMBAR_DOLOR_MOVIMIENTO_LD).v_Value1,
                               MÚSCULO_ESQUELÉTICO_2_B_COLUMNA_DORSO_LUMBAR_DOLOR_MOVIMIENTO_LI = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_B_COLUMNA_DORSO_LUMBAR_DOLOR_MOVIMIENTO_LI).v_Value1,
                               MÚSCULO_ESQUELÉTICO_2_B_COLUMNA_DORSO_LUMBAR_DOLOR_PALPACION = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_B_COLUMNA_DORSO_LUMBAR_DOLOR_PALPACION).v_Value1,

                               // Hombro derecho
                               MÚSCULO_ESQUELÉTICO_2_C_HOMBRO_EXTENSION_50_HD = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_C_HOMBRO_EXTENSION_50_HD).v_Value1Name,
                               MÚSCULO_ESQUELÉTICO_2_C_HOMBRO_FLEXION_180_HD = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_C_HOMBRO_FLEXION_180_HD).v_Value1Name,
                               MÚSCULO_ESQUELÉTICO_2_C_HOMBRO_REPOSO_HD = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_C_HOMBRO_REPOSO_HD).v_Value1Name,
                               MÚSCULO_ESQUELÉTICO_2_C_HOMBRO_ABDUCCION_180_HD = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_C_HOMBRO_ABDUCCION_180_HD).v_Value1Name,
                               MÚSCULO_ESQUELÉTICO_2_C_HOMBRO_ADUCCION_50_HD = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_C_HOMBRO_ADUCCION_50_HD).v_Value1Name,
                               MÚSCULO_ESQUELÉTICO_2_C_HOMBRO_ROTACION_INTERNA_HD = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_C_HOMBRO_ROTACION_INTERNA_HD).v_Value1Name,
                               MÚSCULO_ESQUELÉTICO_2_C_HOMBRO_ROTACION_EXTERNA_HD = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_C_HOMBRO_ROTACION_EXTERNA_HD).v_Value1Name,
                               // dolor
                               MÚSCULO_ESQUELÉTICO_2_C_HOMBRO_DOLOR_PALPACION_HD = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_C_HOMBRO_DOLOR_PALPACION_HD).v_Value1,
                               MÚSCULO_ESQUELÉTICO_2_C_HOMBRO_DOLOR_MOVIMIENTO_HD_EXT = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_C_HOMBRO_DOLOR_MOVIMIENTO_HD_EXT).v_Value1,
                               MÚSCULO_ESQUELÉTICO_2_C_HOMBRO_DOLOR_MOVIMIENTO_HD_FLEX = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_C_HOMBRO_DOLOR_MOVIMIENTO_HD_FLEX).v_Value1,
                               MÚSCULO_ESQUELÉTICO_2_C_HOMBRO_DOLOR_MOVIMIENTO_HD_ABD = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_C_HOMBRO_DOLOR_MOVIMIENTO_HD_ABD).v_Value1,
                               MÚSCULO_ESQUELÉTICO_2_C_HOMBRO_DOLOR_MOVIMIENTO_HD_AD = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_C_HOMBRO_DOLOR_MOVIMIENTO_HD_AD).v_Value1,
                               MÚSCULO_ESQUELÉTICO_2_C_HOMBRO_DOLOR_MOVIMIENTO_HD_ROT_INT = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_C_HOMBRO_DOLOR_MOVIMIENTO_HD_ROT_INT).v_Value1,
                               MÚSCULO_ESQUELÉTICO_2_C_HOMBRO_DOLOR_MOVIMIENTO_HD_ROT_EXT = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_C_HOMBRO_DOLOR_MOVIMIENTO_HD_ROT_EXT).v_Value1,

                               // Hombre Izquierdo
                               MÚSCULO_ESQUELÉTICO_2_C_HOMBRO_FLEXION_180_HI = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_C_HOMBRO_FLEXION_180_HI).v_Value1Name,
                               MÚSCULO_ESQUELÉTICO_2_C_HOMBRO_EXTENSION_50_HI = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_C_HOMBRO_EXTENSION_50_HI).v_Value1Name,
                               MÚSCULO_ESQUELÉTICO_2_C_HOMBRO_REPOSO_HI = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_C_HOMBRO_REPOSO_HI).v_Value1Name,
                               MÚSCULO_ESQUELÉTICO_2_C_HOMBRO_ABDUCCION_180_HI = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_C_HOMBRO_ABDUCCION_180_HI).v_Value1Name,
                               MÚSCULO_ESQUELÉTICO_2_C_HOMBRO_ADUCCION_50_HI = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_C_HOMBRO_ADUCCION_50_HI).v_Value1Name,
                               MÚSCULO_ESQUELÉTICO_2_C_HOMBRO_ROTACION_INTERNA_HI = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_C_HOMBRO_ROTACION_INTERNA_HI).v_Value1Name,
                               MÚSCULO_ESQUELÉTICO_2_C_HOMBRO_ROTACION_EXTERNA_HI = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_C_HOMBRO_ROTACION_EXTERNA_HI).v_Value1Name,

                               // dolor                           
                               MÚSCULO_ESQUELÉTICO_2_C_HOMBRO_DOLOR_PALPACION_HI = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_C_HOMBRO_DOLOR_PALPACION_HI).v_Value1,
                               MÚSCULO_ESQUELÉTICO_2_C_HOMBRO_DOLOR_MOVIMIENTO_HI_EXT = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_C_HOMBRO_DOLOR_MOVIMIENTO_HI_EXT).v_Value1,
                               MÚSCULO_ESQUELÉTICO_2_C_HOMBRO_DOLOR_MOVIMIENTO_HI_FLEX = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_C_HOMBRO_DOLOR_MOVIMIENTO_HI_FLEX).v_Value1,
                               MÚSCULO_ESQUELÉTICO_2_C_HOMBRO_DOLOR_MOVIMIENTO_HI_ABD = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_C_HOMBRO_DOLOR_MOVIMIENTO_HI_ABD).v_Value1,
                               MÚSCULO_ESQUELÉTICO_2_C_HOMBRO_DOLOR_MOVIMIENTO_HI_AD = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_C_HOMBRO_DOLOR_MOVIMIENTO_HI_AD).v_Value1,
                               MÚSCULO_ESQUELÉTICO_2_C_HOMBRO_DOLOR_MOVIMIENTO_HI_ROT_INT = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_C_HOMBRO_DOLOR_MOVIMIENTO_HI_ROT_INT).v_Value1,
                               MÚSCULO_ESQUELÉTICO_2_C_HOMBRO_DOLOR_MOVIMIENTO_HI_ROT_EXT = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_C_HOMBRO_DOLOR_MOVIMIENTO_HI_ROT_EXT).v_Value1,

                               // Codo derecho
                               MÚSCULO_ESQUELÉTICO_2_D_CODO_REPOSO_CD = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_D_CODO_REPOSO_CD).v_Value1Name,
                               MÚSCULO_ESQUELÉTICO_2_D_CODO_FLEXION_CD = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_D_CODO_FLEXION_CD).v_Value1Name,
                               MÚSCULO_ESQUELÉTICO_2_D_CODO_EXTENSION_CD = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_D_CODO_EXTENSION_CD).v_Value1Name,
                               MÚSCULO_ESQUELÉTICO_2_D_CODO_PRONACION_CD = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_D_CODO_PRONACION_CD).v_Value1Name,
                               MÚSCULO_ESQUELÉTICO_2_D_CODO_SUPINACION_CD = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_D_CODO_SUPINACION_CD).v_Value1Name,
                               // dolor
                               MÚSCULO_ESQUELÉTICO_2_D_CODO_DOLOR_MOVIMIENTO_CD_EXT = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_D_CODO_DOLOR_MOVIMIENTO_CD_EXT).v_Value1,
                               MÚSCULO_ESQUELÉTICO_2_D_CODO_DOLOR_PALPACION_CD = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_D_CODO_DOLOR_PALPACION_CD).v_Value1,
                               MÚSCULO_ESQUELÉTICO_2_D_CODO_DOLOR_MOVIMIENTO_CD_FLEX = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_D_CODO_DOLOR_MOVIMIENTO_CD_FLEX).v_Value1,
                               MÚSCULO_ESQUELÉTICO_2_D_CODO_DOLOR_MOVIMIENTO_CD_PRO = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_D_CODO_DOLOR_MOVIMIENTO_CD_PRO).v_Value1,
                               MÚSCULO_ESQUELÉTICO_2_D_CODO_DOLOR_MOVIMIENTO_CD_SUP = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_D_CODO_DOLOR_MOVIMIENTO_CD_SUP).v_Value1,

                               // Codo Izquierdo
                               MÚSCULO_ESQUELÉTICO_2_D_CODO_SUPINACION_CI = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_D_CODO_SUPINACION_CI).v_Value1Name,
                               MÚSCULO_ESQUELÉTICO_2_D_CODO_PRONACION_CI = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_D_CODO_PRONACION_CI).v_Value1Name,
                               MÚSCULO_ESQUELÉTICO_2_D_CODO_EXTENSION_CI = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_D_CODO_EXTENSION_CI).v_Value1Name,
                               MÚSCULO_ESQUELÉTICO_2_D_CODO_FLEXION_CI = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_D_CODO_FLEXION_CI).v_Value1Name,
                               MÚSCULO_ESQUELÉTICO_2_D_CODO_REPOSO_CI = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_D_CODO_REPOSO_CI).v_Value1Name,
                               // dolor
                               MÚSCULO_ESQUELÉTICO_2_D_CODO_DOLOR_PALPACION_CI = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_D_CODO_DOLOR_PALPACION_CI).v_Value1,
                               MÚSCULO_ESQUELÉTICO_2_D_CODO_DOLOR_MOVIMIENTO_CI_PRO = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_D_CODO_DOLOR_MOVIMIENTO_CI_PRO).v_Value1,
                               MÚSCULO_ESQUELÉTICO_2_D_CODO_DOLOR_MOVIMIENTO_CI_FLEX = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_D_CODO_DOLOR_MOVIMIENTO_CI_FLEX).v_Value1,
                               MÚSCULO_ESQUELÉTICO_2_D_CODO_DOLOR_MOVIMIENTO_CI_SUP = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_D_CODO_DOLOR_MOVIMIENTO_CI_SUP).v_Value1,
                               MÚSCULO_ESQUELÉTICO_2_D_CODO_DOLOR_MOVIMIENTO_CI_EXT = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_D_CODO_DOLOR_MOVIMIENTO_CI_EXT).v_Value1,

                               // Muñeca derecha
                               MÚSCULO_ESQUELÉTICO_2_E_MUÑECA_REPOSO_MD = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_E_MUÑECA_REPOSO_MD).v_Value1Name,
                               MÚSCULO_ESQUELÉTICO_2_E_MUÑECA_FLEXION_MD = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_E_MUÑECA_FLEXION_MD).v_Value1Name,
                               MÚSCULO_ESQUELÉTICO_2_E_MUÑECA_EXTENSION_MD = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_E_MUÑECA_EXTENSION_MD).v_Value1Name,
                               MÚSCULO_ESQUELÉTICO_2_E_MUÑECA_ABDUCCION_MD = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_E_MUÑECA_ABDUCCION_MD).v_Value1Name,
                               MÚSCULO_ESQUELÉTICO_2_E_MUÑECA_ADUCCION_MD = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_E_MUÑECA_ADUCCION_MD).v_Value1Name,
                               // dolor
                               MÚSCULO_ESQUELÉTICO_2_E_MUÑECA_DOLOR_PALPACION_MD = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_E_MUÑECA_DOLOR_PALPACION_MD).v_Value1,
                               MÚSCULO_ESQUELÉTICO_2_E_MUÑECA_DOLOR_MOVIMIENTO_MD_FLEX = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_E_MUÑECA_DOLOR_MOVIMIENTO_MD_FLEX).v_Value1,
                               MÚSCULO_ESQUELÉTICO_2_E_MUÑECA_DOLOR_MOVIMIENTO_MD_EXT = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_E_MUÑECA_DOLOR_MOVIMIENTO_MD_EXT).v_Value1,
                               MÚSCULO_ESQUELÉTICO_2_E_MUÑECA_DOLOR_MOVIMIENTO_MD_ABD = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_E_MUÑECA_DOLOR_MOVIMIENTO_MD_ABD).v_Value1Name,
                               MÚSCULO_ESQUELÉTICO_2_E_MUÑECA_DOLOR_MOVIMIENTO_MD_AD = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_E_MUÑECA_DOLOR_MOVIMIENTO_MD_AD).v_Value1Name,
                               // Muñeca Izquierda
                               MÚSCULO_ESQUELÉTICO_2_E_MUÑECA_REPOSO_MI = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_E_MUÑECA_REPOSO_MI).v_Value1Name,
                               MÚSCULO_ESQUELÉTICO_2_E_MUÑECA_FLEXION_MI = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_E_MUÑECA_FLEXION_MI).v_Value1Name,
                               MÚSCULO_ESQUELÉTICO_2_E_MUÑECA_EXTENSION_MI = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_E_MUÑECA_EXTENSION_MI).v_Value1Name,
                               MÚSCULO_ESQUELÉTICO_2_E_MUÑECA_ABDUCCION_MI = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_E_MUÑECA_ABDUCCION_MI).v_Value1Name,
                               MÚSCULO_ESQUELÉTICO_2_E_MUÑECA_ADUCCION_MI = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_A_COLUMNA_CERVICAL_REPOSO).v_Value1Name,
                               //dolor
                               MÚSCULO_ESQUELÉTICO_2_E_MUÑECA_DOLOR_PALPACION_MI = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_E_MUÑECA_DOLOR_PALPACION_MI).v_Value1,
                               MÚSCULO_ESQUELÉTICO_2_E_MUÑECA_DOLOR_MOVIMIENTO_MI_FLEX = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_E_MUÑECA_DOLOR_MOVIMIENTO_MI_FLEX).v_Value1,
                               MÚSCULO_ESQUELÉTICO_2_E_MUÑECA_DOLOR_MOVIMIENTO_MI_EXT = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_E_MUÑECA_DOLOR_MOVIMIENTO_MI_EXT).v_Value1,
                               MÚSCULO_ESQUELÉTICO_2_E_MUÑECA_DOLOR_MOVIMIENTO_MI_ABD = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_E_MUÑECA_DOLOR_MOVIMIENTO_MI_ABD).v_Value1Name,
                               MÚSCULO_ESQUELÉTICO_2_E_MUÑECA_DOLOR_MOVIMIENTO_MI_AD = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_E_MUÑECA_DOLOR_MOVIMIENTO_MI_AD).v_Value1Name,
                               // Articulacion Metacarpo falangica primer dedo DERECHO
                               MÚSCULO_ESQUELÉTICO_2_F_ARTICULACION_METACARPO_FALANGICA_PRIMER_DEDO_REPOSO_MD = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_F_ARTICULACION_METACARPO_FALANGICA_PRIMER_DEDO_REPOSO_MD).v_Value1Name,
                               MÚSCULO_ESQUELÉTICO_2_F_ARTICULACION_METACARPO_FALANGICA_PRIMER_DEDO_FLEXION_MD = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_F_ARTICULACION_METACARPO_FALANGICA_PRIMER_DEDO_FLEXION_MD).v_Value1Name,
                               MÚSCULO_ESQUELÉTICO_2_F_ARTICULACION_METACARPO_FALANGICA_PRIMER_DEDO_EXTENSION_MD = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_F_ARTICULACION_METACARPO_FALANGICA_PRIMER_DEDO_EXTENSION_MD).v_Value1Name,
                               MÚSCULO_ESQUELÉTICO_2_F_ARTICULACION_METACARPO_FALANGICA_PRIMER_DEDO_ABDUCCION_MD = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_A_COLUMNA_CERVICAL_REPOSO).v_Value1Name,
                               MÚSCULO_ESQUELÉTICO_2_F_ARTICULACION_METACARPO_FALANGICA_PRIMER_DEDO_ADUCCION_MD = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_F_ARTICULACION_METACARPO_FALANGICA_PRIMER_DEDO_ADUCCION_MD).v_Value1Name,
                               // dolor
                               MÚSCULO_ESQUELÉTICO_2_F_ARTICULACION_METACARPO_FALANGICA_PRIMER_DEDO_DOLOR_PALPACION_MD = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_A_COLUMNA_CERVICAL_REPOSO).v_Value1,
                               MÚSCULO_ESQUELÉTICO_2_F_ARTICULACION_METACARPO_FALANGICA_PRIMER_DEDO_DOLOR_MOVIMIENTO_MD_FLEX = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_F_ARTICULACION_METACARPO_FALANGICA_PRIMER_DEDO_DOLOR_MOVIMIENTO_MD_FLEX).v_Value1,
                               MÚSCULO_ESQUELÉTICO_2_F_ARTICULACION_METACARPO_FALANGICA_PRIMER_DEDO_DOLOR_MOVIMIENTO_MD_EXT = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_F_ARTICULACION_METACARPO_FALANGICA_PRIMER_DEDO_DOLOR_MOVIMIENTO_MD_EXT).v_Value1,
                               MÚSCULO_ESQUELÉTICO_2_F_ARTICULACION_METACARPO_FALANGICA_PRIMER_DEDO_DOLOR_MOVIMIENTO_MD_ABD = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_F_ARTICULACION_METACARPO_FALANGICA_PRIMER_DEDO_DOLOR_MOVIMIENTO_MD_ABD).v_Value1,
                               MÚSCULO_ESQUELÉTICO_2_F_ARTICULACION_METACARPO_FALANGICA_PRIMER_DEDO_DOLOR_MOVIMIENTO_MD_AD = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_F_ARTICULACION_METACARPO_FALANGICA_PRIMER_DEDO_DOLOR_MOVIMIENTO_MD_AD).v_Value1,
                               // Articulacion Metacarpo falangica primer dedo IZQUIERDO
                               MÚSCULO_ESQUELÉTICO_2_F_ARTICULACION_METACARPO_FALANGICA_PRIMER_DEDO_REPOSO_MI = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_F_ARTICULACION_METACARPO_FALANGICA_PRIMER_DEDO_REPOSO_MI).v_Value1Name,
                               MÚSCULO_ESQUELÉTICO_2_F_ARTICULACION_METACARPO_FALANGICA_PRIMER_DEDO_FLEXION_MI = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_F_ARTICULACION_METACARPO_FALANGICA_PRIMER_DEDO_FLEXION_MI).v_Value1Name,
                               MÚSCULO_ESQUELÉTICO_2_F_ARTICULACION_METACARPO_FALANGICA_PRIMER_DEDO_EXTENSION_MI = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_F_ARTICULACION_METACARPO_FALANGICA_PRIMER_DEDO_EXTENSION_MI).v_Value1Name,
                               MÚSCULO_ESQUELÉTICO_2_F_ARTICULACION_METACARPO_FALANGICA_PRIMER_DEDO_ABDUCCION_MI = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_F_ARTICULACION_METACARPO_FALANGICA_PRIMER_DEDO_ABDUCCION_MI).v_Value1Name,
                               MÚSCULO_ESQUELÉTICO_2_F_ARTICULACION_METACARPO_FALANGICA_PRIMER_DEDO_ADUCCION_MI = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_F_ARTICULACION_METACARPO_FALANGICA_PRIMER_DEDO_ADUCCION_MI).v_Value1Name,
                               // dolor
                               MÚSCULO_ESQUELÉTICO_2_F_ARTICULACION_METACARPO_FALANGICA_PRIMER_DEDO_DOLOR_PALPACION_MI = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_F_ARTICULACION_METACARPO_FALANGICA_PRIMER_DEDO_DOLOR_PALPACION_MI).v_Value1,
                               MÚSCULO_ESQUELÉTICO_2_F_ARTICULACION_METACARPO_FALANGICA_PRIMER_DEDO_DOLOR_MOVIMIENTO_MI_FLEX = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_A_COLUMNA_CERVICAL_REPOSO).v_Value1,
                               MÚSCULO_ESQUELÉTICO_2_F_ARTICULACION_METACARPO_FALANGICA_PRIMER_DEDO_DOLOR_MOVIMIENTO_MI_EXT = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_F_ARTICULACION_METACARPO_FALANGICA_PRIMER_DEDO_DOLOR_MOVIMIENTO_MI_EXT).v_Value1,
                               MÚSCULO_ESQUELÉTICO_2_F_ARTICULACION_METACARPO_FALANGICA_PRIMER_DEDO_DOLOR_MOVIMIENTO_MI_ABD = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_F_ARTICULACION_METACARPO_FALANGICA_PRIMER_DEDO_DOLOR_MOVIMIENTO_MI_ABD).v_Value1,
                               MÚSCULO_ESQUELÉTICO_2_F_ARTICULACION_METACARPO_FALANGICA_PRIMER_DEDO_DOLOR_MOVIMIENTO_MI_AD = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_F_ARTICULACION_METACARPO_FALANGICA_PRIMER_DEDO_DOLOR_MOVIMIENTO_MI_AD).v_Value1,

                               // Articulacion Metacarpo falangica 1° - 4° dedo  DERECHO
                               MÚSCULO_ESQUELÉTICO_2_G_ARTICULACION_METACARPO_FALANGICA_1_4_DEDO_REPOSO_MD = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_G_ARTICULACION_METACARPO_FALANGICA_1_4_DEDO_REPOSO_MD).v_Value1Name,
                               MÚSCULO_ESQUELÉTICO_2_G_ARTICULACION_METACARPO_FALANGICA_1_4_DEDO_FLEXION_MD = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_G_ARTICULACION_METACARPO_FALANGICA_1_4_DEDO_FLEXION_MD).v_Value1Name,
                               MÚSCULO_ESQUELÉTICO_2_G_ARTICULACION_METACARPO_FALANGICA_1_4_DEDO_EXTENSION_MD = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_G_ARTICULACION_METACARPO_FALANGICA_1_4_DEDO_EXTENSION_MD).v_Value1Name,
                               // dolor
                               MÚSCULO_ESQUELÉTICO_2_G_ARTICULACION_METACARPO_FALANGICA_1_4_DEDO_DOLOR_PALPACION_MD = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_G_ARTICULACION_METACARPO_FALANGICA_1_4_DEDO_DOLOR_PALPACION_MD).v_Value1,
                               MÚSCULO_ESQUELÉTICO_2_G_ARTICULACION_METACARPO_FALANGICA_1_4_DEDO_DOLOR_MOVIMIENTO_MD_FLEX = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_G_ARTICULACION_METACARPO_FALANGICA_1_4_DEDO_DOLOR_MOVIMIENTO_MD_FLEX).v_Value1,
                               MÚSCULO_ESQUELÉTICO_2_G_ARTICULACION_METACARPO_FALANGICA_1_4_DEDO_DOLOR_MOVIMIENTO_MD_EXT = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_G_ARTICULACION_METACARPO_FALANGICA_1_4_DEDO_DOLOR_MOVIMIENTO_MD_EXT).v_Value1,
                               // Articulacion Metacarpo falangica 1° - 4° dedo  IZQUIERDO
                               MÚSCULO_ESQUELÉTICO_2_G_ARTICULACION_METACARPO_FALANGICA_1_4_DEDO_FLEXION_MI = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_G_ARTICULACION_METACARPO_FALANGICA_1_4_DEDO_FLEXION_MI).v_Value1Name,
                               MÚSCULO_ESQUELÉTICO_2_G_ARTICULACION_METACARPO_FALANGICA_1_4_DEDO_EXTENSION_MI = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_G_ARTICULACION_METACARPO_FALANGICA_1_4_DEDO_EXTENSION_MI).v_Value1Name,
                               MÚSCULO_ESQUELÉTICO_2_G_ARTICULACION_METACARPO_FALANGICA_1_4_DEDO_REPOSO_MI = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_G_ARTICULACION_METACARPO_FALANGICA_1_4_DEDO_REPOSO_MI).v_Value1Name,
                               // dolor
                               MÚSCULO_ESQUELÉTICO_2_G_ARTICULACION_METACARPO_FALANGICA_1_4_DEDO_DOLOR_MOVIMIENTO_MI_FLEX = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_G_ARTICULACION_METACARPO_FALANGICA_1_4_DEDO_DOLOR_MOVIMIENTO_MI_FLEX).v_Value1,
                               MÚSCULO_ESQUELÉTICO_2_G_ARTICULACION_METACARPO_FALANGICA_1_4_DEDO_DOLOR_MOVIMIENTO_MI_EXT = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_G_ARTICULACION_METACARPO_FALANGICA_1_4_DEDO_DOLOR_MOVIMIENTO_MI_EXT).v_Value1,
                               MÚSCULO_ESQUELÉTICO_2_G_ARTICULACION_METACARPO_FALANGICA_1_4_DEDO_DOLOR_PALPACION_MI = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_G_ARTICULACION_METACARPO_FALANGICA_1_4_DEDO_DOLOR_PALPACION_MI).v_Value1,

                               // Articulacion interfalangica proximal Mano DERECHA
                               MÚSCULO_ESQUELÉTICO_2_H_ARTICULACION_INTERFALANGICA_PROXIMAL_REPOSO_MD = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_H_ARTICULACION_INTERFALANGICA_PROXIMAL_REPOSO_MD).v_Value1Name,
                               MÚSCULO_ESQUELÉTICO_2_H_ARTICULACION_INTERFALANGICA_PROXIMAL_FLEXION_MD = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_H_ARTICULACION_INTERFALANGICA_PROXIMAL_FLEXION_MD).v_Value1Name,
                               MÚSCULO_ESQUELÉTICO_2_H_ARTICULACION_INTERFALANGICA_PROXIMAL_EXTENSION_MD = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_H_ARTICULACION_INTERFALANGICA_PROXIMAL_EXTENSION_MD).v_Value1Name,
                               // DOLOR
                               MÚSCULO_ESQUELÉTICO_2_H_ARTICULACION_INTERFALANGICA_PROXIMAL_DOLOR_PALPACION_MD = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_H_ARTICULACION_INTERFALANGICA_PROXIMAL_DOLOR_PALPACION_MD).v_Value1,
                               MÚSCULO_ESQUELÉTICO_2_H_ARTICULACION_INTERFALANGICA_PROXIMAL_DOLOR_MOVIMIENTO_MD_FLEX = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_H_ARTICULACION_INTERFALANGICA_PROXIMAL_DOLOR_MOVIMIENTO_MD_FLEX).v_Value1,
                               MÚSCULO_ESQUELÉTICO_2_H_ARTICULACION_INTERFALANGICA_PROXIMAL_DOLOR_MOVIMIENTO_MD_EXT = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_H_ARTICULACION_INTERFALANGICA_PROXIMAL_DOLOR_MOVIMIENTO_MD_EXT).v_Value1,
                               // Articulacion interfalangica proximal Mano IZQUIERDO
                               MÚSCULO_ESQUELÉTICO_2_H_ARTICULACION_INTERFALANGICA_PROXIMAL_REPOSO_MI = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_H_ARTICULACION_INTERFALANGICA_PROXIMAL_REPOSO_MI).v_Value1Name,
                               MÚSCULO_ESQUELÉTICO_2_H_ARTICULACION_INTERFALANGICA_PROXIMAL_FLEXION_MI = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_A_COLUMNA_CERVICAL_REPOSO).v_Value1Name,
                               MÚSCULO_ESQUELÉTICO_2_H_ARTICULACION_INTERFALANGICA_PROXIMAL_EXTENSION_MI = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_H_ARTICULACION_INTERFALANGICA_PROXIMAL_EXTENSION_MI).v_Value1Name,
                               // DOLOR
                               MÚSCULO_ESQUELÉTICO_2_H_ARTICULACION_INTERFALANGICA_PROXIMAL_DOLOR_PALPACION_MI = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_H_ARTICULACION_INTERFALANGICA_PROXIMAL_DOLOR_PALPACION_MI).v_Value1,
                               MÚSCULO_ESQUELÉTICO_2_H_ARTICULACION_INTERFALANGICA_PROXIMAL_DOLOR_MOVIMIENTO_MI_FLEX = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_H_ARTICULACION_INTERFALANGICA_PROXIMAL_DOLOR_MOVIMIENTO_MI_FLEX).v_Value1,
                               MÚSCULO_ESQUELÉTICO_2_H_ARTICULACION_INTERFALANGICA_PROXIMAL_DOLOR_MOVIMIENTO_MI_EXT = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_H_ARTICULACION_INTERFALANGICA_PROXIMAL_DOLOR_MOVIMIENTO_MI_EXT).v_Value1,

                               // Articulacion interfalangica DISTAL Mano DERECHA
                               MÚSCULO_ESQUELÉTICO_2_I_ARTICULACION_INTERFALANGICA_DISTAL_REPOSO_MD = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_I_ARTICULACION_INTERFALANGICA_DISTAL_REPOSO_MD).v_Value1Name,
                               MÚSCULO_ESQUELÉTICO_2_I_ARTICULACION_INTERFALANGICA_DISTAL_FLEXION_MD = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_I_ARTICULACION_INTERFALANGICA_DISTAL_FLEXION_MD).v_Value1Name,
                               MÚSCULO_ESQUELÉTICO_2_I_ARTICULACION_INTERFALANGICA_DISTAL_EXTENSION_MD = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_I_ARTICULACION_INTERFALANGICA_DISTAL_EXTENSION_MD).v_Value1Name,
                               // DOLOR
                               MÚSCULO_ESQUELÉTICO_2_I_ARTICULACION_INTERFALANGICA_DISTAL_DOLOR_PALPACION_MD = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_I_ARTICULACION_INTERFALANGICA_DISTAL_DOLOR_PALPACION_MD).v_Value1,
                               MÚSCULO_ESQUELÉTICO_2_I_ARTICULACION_INTERFALANGICA_DISTAL_DOLOR_MOVIMIENTO_MD_FLEX = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_I_ARTICULACION_INTERFALANGICA_DISTAL_DOLOR_MOVIMIENTO_MD_FLEX).v_Value1,
                               MÚSCULO_ESQUELÉTICO_2_I_ARTICULACION_INTERFALANGICA_DISTAL_DOLOR_MOVIMIENTO_MD_EXT = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_I_ARTICULACION_INTERFALANGICA_DISTAL_DOLOR_MOVIMIENTO_MD_EXT).v_Value1Name,
                               // Articulacion interfalangica DISTAL Mano IZQUIERDO
                               MÚSCULO_ESQUELÉTICO_2_I_ARTICULACION_INTERFALANGICA_DISTAL_REPOSO_MI = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_I_ARTICULACION_INTERFALANGICA_DISTAL_REPOSO_MI).v_Value1Name,
                               MÚSCULO_ESQUELÉTICO_2_I_ARTICULACION_INTERFALANGICA_DISTAL_FLEXION_MI = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_I_ARTICULACION_INTERFALANGICA_DISTAL_FLEXION_MI).v_Value1Name,
                               MÚSCULO_ESQUELÉTICO_2_I_ARTICULACION_INTERFALANGICA_DISTAL_EXTENSION_MI = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_I_ARTICULACION_INTERFALANGICA_DISTAL_EXTENSION_MI).v_Value1Name,
                               // DOLOR
                               MÚSCULO_ESQUELÉTICO_2_I_ARTICULACION_INTERFALANGICA_DISTAL_DOLOR_PALPACION_MI = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_I_ARTICULACION_INTERFALANGICA_DISTAL_DOLOR_PALPACION_MI).v_Value1,
                               MÚSCULO_ESQUELÉTICO_2_I_ARTICULACION_INTERFALANGICA_DISTAL_DOLOR_MOVIMIENTO_MI_FLEX = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_I_ARTICULACION_INTERFALANGICA_DISTAL_DOLOR_MOVIMIENTO_MI_FLEX).v_Value1,
                               MÚSCULO_ESQUELÉTICO_2_I_ARTICULACION_INTERFALANGICA_DISTAL_DOLOR_MOVIMIENTO_MI_EXT = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_I_ARTICULACION_INTERFALANGICA_DISTAL_DOLOR_MOVIMIENTO_MI_EXT).v_Value1,

                               // CADERA DERECHA                              
                               MÚSCULO_ESQUELÉTICO_2_J_CADERA_REPOSO_CD = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_J_CADERA_REPOSO_CD).v_Value1Name,
                               MÚSCULO_ESQUELÉTICO_2_J_CADERA_FLEXION_CON_ROD_EXT_CD = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_J_CADERA_FLEXION_CON_ROD_EXT_CD).v_Value1Name,
                               MÚSCULO_ESQUELÉTICO_2_J_CADERA_FLEXION_CON_ROD_FLEX_CD = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_J_CADERA_FLEXION_CON_ROD_FLEX_CD).v_Value1Name,
                               MÚSCULO_ESQUELÉTICO_2_J_CADERA_EXTENSION_CD = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_J_CADERA_EXTENSION_CD).v_Value1Name,
                               MÚSCULO_ESQUELÉTICO_2_J_CADERA_ABDUCCION_CD = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_J_CADERA_ABDUCCION_CD).v_Value1Name,
                               MÚSCULO_ESQUELÉTICO_2_J_CADERA_ADUCCION_CD = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_J_CADERA_ADUCCION_CD).v_Value1Name,
                               MÚSCULO_ESQUELÉTICO_2_J_CADERA_ROTACION_EXTERNA_CD = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_J_CADERA_ROTACION_EXTERNA_CD).v_Value1Name,
                               MÚSCULO_ESQUELÉTICO_2_J_CADERA_ROTACION_INTERNA_CD = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_J_CADERA_ROTACION_INTERNA_CD).v_Value1Name,
                               // DOLOR
                               MÚSCULO_ESQUELÉTICO_2_J_CADERA_DOLOR_PALPACION_CD = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_J_CADERA_DOLOR_PALPACION_CD).v_Value1,
                               MÚSCULO_ESQUELÉTICO_2_J_CADERA_DOLOR_MOVIMIENTO_CD_FLEX_ROD_EXT = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_J_CADERA_DOLOR_MOVIMIENTO_CD_FLEX_ROD_EXT).v_Value1,
                               MÚSCULO_ESQUELÉTICO_2_J_CADERA_DOLOR_MOVIMIENTO_CD_FLEX_ROD_FLEX = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_J_CADERA_DOLOR_MOVIMIENTO_CD_FLEX_ROD_FLEX).v_Value1,
                               MÚSCULO_ESQUELÉTICO_2_J_CADERA_DOLOR_MOVIMIENTO_CD_EXT = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_J_CADERA_DOLOR_MOVIMIENTO_CD_EXT).v_Value1,
                               MÚSCULO_ESQUELÉTICO_2_J_CADERA_DOLOR_MOVIMIENTO_CD_ABD = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_J_CADERA_DOLOR_MOVIMIENTO_CD_ABD).v_Value1,
                               MÚSCULO_ESQUELÉTICO_2_J_CADERA_DOLOR_MOVIMIENTO_CD_AD = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_J_CADERA_DOLOR_MOVIMIENTO_CD_AD).v_Value1,
                               MÚSCULO_ESQUELÉTICO_2_J_CADERA_DOLOR_MOVIMIENTO_CD_ROT_EXT = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_J_CADERA_DOLOR_MOVIMIENTO_CD_ROT_EXT).v_Value1,
                               MÚSCULO_ESQUELÉTICO_2_J_CADERA_DOLOR_MOVIMIENTO_CD_ROT_INT = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_J_CADERA_DOLOR_MOVIMIENTO_CD_ROT_INT).v_Value1,
                               // CADERA IZQUIERDO
                               MÚSCULO_ESQUELÉTICO_2_J_CADERA_REPOSO_CI = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_J_CADERA_REPOSO_CI).v_Value1Name,
                               MÚSCULO_ESQUELÉTICO_2_J_CADERA_FLEXION_CON_ROD_EXT_CI = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_J_CADERA_FLEXION_CON_ROD_EXT_CI).v_Value1Name,
                               MÚSCULO_ESQUELÉTICO_2_J_CADERA_FLEXION_CON_ROD_FLEX_CI = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_J_CADERA_FLEXION_CON_ROD_FLEX_CI).v_Value1Name,
                               MÚSCULO_ESQUELÉTICO_2_J_CADERA_EXTENSION_CI = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_J_CADERA_EXTENSION_CI).v_Value1Name,
                               MÚSCULO_ESQUELÉTICO_2_J_CADERA_ABDUCCION_CI = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_J_CADERA_ABDUCCION_CI).v_Value1Name,
                               MÚSCULO_ESQUELÉTICO_2_J_CADERA_ADUCCION_CI = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_J_CADERA_ADUCCION_CI).v_Value1Name,
                               MÚSCULO_ESQUELÉTICO_2_J_CADERA_ROTACION_EXTERNA_CI = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_J_CADERA_ROTACION_EXTERNA_CI).v_Value1Name,
                               MÚSCULO_ESQUELÉTICO_2_J_CADERA_ROTACION_INTERNA_CI = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_J_CADERA_ROTACION_INTERNA_CI).v_Value1Name,
                               // DOLOR
                               MÚSCULO_ESQUELÉTICO_2_J_CADERA_DOLOR_PALPACION_CI = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_J_CADERA_DOLOR_PALPACION_CI).v_Value1,
                               MÚSCULO_ESQUELÉTICO_2_J_CADERA_DOLOR_MOVIMIENTO_CI_FLEX_ROD_EXT = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_J_CADERA_DOLOR_MOVIMIENTO_CI_FLEX_ROD_EXT).v_Value1,
                               MÚSCULO_ESQUELÉTICO_2_J_CADERA_DOLOR_MOVIMIENTO_CI_FLEX_ROD_FLEX = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_J_CADERA_DOLOR_MOVIMIENTO_CI_FLEX_ROD_FLEX).v_Value1,
                               MÚSCULO_ESQUELÉTICO_2_J_CADERA_DOLOR_MOVIMIENTO_CI_EXT = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_J_CADERA_DOLOR_MOVIMIENTO_CI_EXT).v_Value1,
                               MÚSCULO_ESQUELÉTICO_2_J_CADERA_DOLOR_MOVIMIENTO_CI_ABD = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_J_CADERA_DOLOR_MOVIMIENTO_CI_ABD).v_Value1,
                               MÚSCULO_ESQUELÉTICO_2_J_CADERA_DOLOR_MOVIMIENTO_CI_AD = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_J_CADERA_DOLOR_MOVIMIENTO_CI_AD).v_Value1,
                               MÚSCULO_ESQUELÉTICO_2_J_CADERA_DOLOR_MOVIMIENTO_CI_ROT_EXT = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_J_CADERA_DOLOR_MOVIMIENTO_CI_ROT_EXT).v_Value1,
                               MÚSCULO_ESQUELÉTICO_2_J_CADERA_DOLOR_MOVIMIENTO_CI_ROT_INT = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_J_CADERA_DOLOR_MOVIMIENTO_CI_ROT_INT).v_Value1,

                               // RODILLA DERECHA
                               MÚSCULO_ESQUELÉTICO_2_K_RODILLA_REPOSO_RD = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_K_RODILLA_REPOSO_RD).v_Value1Name,
                               MÚSCULO_ESQUELÉTICO_2_K_RODILLA_FLEXION_RD = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_K_RODILLA_FLEXION_RD).v_Value1Name,
                               MÚSCULO_ESQUELÉTICO_2_K_RODILLA_EXTENSION_RD = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_K_RODILLA_EXTENSION_RD).v_Value1Name,
                               // DOLOR
                               MÚSCULO_ESQUELÉTICO_2_K_RODILLA_DOLOR_PALPACION_RD = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_K_RODILLA_DOLOR_PALPACION_RD).v_Value1,
                               MÚSCULO_ESQUELÉTICO_2_K_RODILLA_DOLOR_MOVIMIENTO_RD_FLEX = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_K_RODILLA_DOLOR_MOVIMIENTO_RD_FLEX).v_Value1,
                               MÚSCULO_ESQUELÉTICO_2_K_RODILLA_DOLOR_MOVIMIENTO_RD_EXT = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_K_RODILLA_DOLOR_MOVIMIENTO_RD_EXT).v_Value1,
                               // RODILLA  IZQUIERDA
                               MÚSCULO_ESQUELÉTICO_2_K_RODILLA_REPOSO_RI = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_K_RODILLA_REPOSO_RI).v_Value1Name,
                               MÚSCULO_ESQUELÉTICO_2_K_RODILLA_FLEXION_RI = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_K_RODILLA_FLEXION_RI).v_Value1Name,
                               MÚSCULO_ESQUELÉTICO_2_K_RODILLA_EXTENSION_RI = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_K_RODILLA_EXTENSION_RI).v_Value1Name,
                               // DOLOR
                               MÚSCULO_ESQUELÉTICO_2_K_RODILLA_DOLOR_PALPACION_RI = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_K_RODILLA_DOLOR_PALPACION_RI).v_Value1,
                               MÚSCULO_ESQUELÉTICO_2_K_RODILLA_DOLOR_MOVIMIENTO_RI_FLEX = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_K_RODILLA_DOLOR_MOVIMIENTO_RI_FLEX).v_Value1,
                               MÚSCULO_ESQUELÉTICO_2_K_RODILLA_DOLOR_MOVIMIENTO_RI_EXT = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_K_RODILLA_DOLOR_MOVIMIENTO_RI_EXT).v_Value1,

                               // TOBILLO DERECHO                  
                               MÚSCULO_ESQUELÉTICO_2_L_TOBILLO_REPOSO_TD = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_L_TOBILLO_REPOSO_TD).v_Value1Name,
                               MÚSCULO_ESQUELÉTICO_2_L_TOBILLO_FLEXION_TD = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_L_TOBILLO_FLEXION_TD).v_Value1Name,
                               MÚSCULO_ESQUELÉTICO_2_L_TOBILLO_EXTENSION_TD = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_L_TOBILLO_EXTENSION_TD).v_Value1Name,
                               MÚSCULO_ESQUELÉTICO_2_L_TOBILLO_INVERSION_SUBTALAR_TD = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_L_TOBILLO_INVERSION_SUBTALAR_TD).v_Value1Name,
                               MÚSCULO_ESQUELÉTICO_2_L_TOBILLO_EVERSION_SUBTALAR_TD = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_L_TOBILLO_EVERSION_SUBTALAR_TD).v_Value1Name,
                               // DOLOR
                               MÚSCULO_ESQUELÉTICO_2_L_TOBILLO_DOLOR_PALPACION_TD = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_L_TOBILLO_DOLOR_PALPACION_TD).v_Value1,
                               MÚSCULO_ESQUELÉTICO_2_L_TOBILLO_DOLOR_MOVIMIENTO_TD_FLEX = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_L_TOBILLO_DOLOR_MOVIMIENTO_TD_FLEX).v_Value1,
                               MÚSCULO_ESQUELÉTICO_2_L_TOBILLO_DOLOR_MOVIMIENTO_TD_EXT = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_L_TOBILLO_DOLOR_MOVIMIENTO_TD_EXT).v_Value1,
                               MÚSCULO_ESQUELÉTICO_2_L_TOBILLO_DOLOR_MOVIMIENTO_TD_IST = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_L_TOBILLO_DOLOR_MOVIMIENTO_TD_IST).v_Value1,
                               MÚSCULO_ESQUELÉTICO_2_L_TOBILLO_DOLOR_MOVIMIENTO_TD_EST = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_L_TOBILLO_DOLOR_MOVIMIENTO_TD_EST).v_Value1,
                               // TOBILLO IZQUIERDO
                               MÚSCULO_ESQUELÉTICO_2_L_TOBILLO_REPOSO_TI = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_L_TOBILLO_REPOSO_TI).v_Value1Name,
                               MÚSCULO_ESQUELÉTICO_2_L_TOBILLO_FLEXION_TI = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_L_TOBILLO_FLEXION_TI).v_Value1Name,
                               MÚSCULO_ESQUELÉTICO_2_L_TOBILLO_EXTENSION_TI = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_L_TOBILLO_EXTENSION_TI).v_Value1Name,
                               MÚSCULO_ESQUELÉTICO_2_L_TOBILLO_INVERSION_SUBTALAR_TI = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_L_TOBILLO_INVERSION_SUBTALAR_TI).v_Value1Name,
                               MÚSCULO_ESQUELÉTICO_2_L_TOBILLO_EVERSION_SUBTALAR_TI = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_L_TOBILLO_EVERSION_SUBTALAR_TI).v_Value1Name,
                               // DOLOR
                               MÚSCULO_ESQUELÉTICO_2_L_TOBILLO_DOLOR_PALPACION_TI = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_L_TOBILLO_DOLOR_PALPACION_TI).v_Value1,
                               MÚSCULO_ESQUELÉTICO_2_L_TOBILLO_DOLOR_MOVIMIENTO_TI_FLEX = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_L_TOBILLO_DOLOR_MOVIMIENTO_TI_FLEX).v_Value1,
                               MÚSCULO_ESQUELÉTICO_2_L_TOBILLO_DOLOR_MOVIMIENTO_TI_EXT = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_L_TOBILLO_DOLOR_MOVIMIENTO_TI_EXT).v_Value1,
                               MÚSCULO_ESQUELÉTICO_2_L_TOBILLO_DOLOR_MOVIMIENTO_TI_IST = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_L_TOBILLO_DOLOR_MOVIMIENTO_TI_IST).v_Value1,
                               MÚSCULO_ESQUELÉTICO_2_L_TOBILLO_DOLOR_MOVIMIENTO_TI_EST = muscuEsque2.Count == 0 ? string.Empty : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_L_TOBILLO_DOLOR_MOVIMIENTO_TI_EST).v_Value1,
                               // DESCRIPCION DE HALLAZGOS
                               MÚSCULO_ESQUELÉTICO_2_M_DES_HALLAZGOS = muscuEsque2.Count == 0 ? "No Requerido" : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_M_DES_HALLAZGOS).v_Value1 == "" ? "Sin Hallazgos" : muscuEsque2.Find(p => p.v_ComponentFieldId == Constants.MÚSCULO_ESQUELÉTICO_2_M_DES_HALLAZGOS).v_Value1,


                               Dx = Dx,
                               Recomendation = rec,
                               Restriction = res,
                               HuellaTrabajador = a.HuellaTrabajador,

                               b_Logo = MedicalCenter.b_Image,
                               EmpresaPropietaria = MedicalCenter.v_Name,
                               EmpresaPropietariaDireccion = MedicalCenter.v_Address,
                               EmpresaPropietariaTelefono = MedicalCenter.v_PhoneNumber,
                               EmpresaPropietariaEmail = MedicalCenter.v_Mail,

                           }).ToList();

                return sql;
            }
            catch (Exception)
            {

                throw;
            }
        }

        // Alejandro new -> 13/07/15 
        public List<ReportInformePsicologicoOcupacional> ReportInformePsicologicoOcupacional(string pstrserviceId, string pstrComponentId, int esoTypeId)
        {
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                var objEntity = (from A in dbContext.service
                                 join B in dbContext.person on A.v_PersonId equals B.v_PersonId
                                 join E in dbContext.servicecomponent on new { a = pstrserviceId, b = pstrComponentId }
                                                                        equals new { a = E.v_ServiceId, b = E.v_ComponentId }

                                 // Usuario Medico Evaluador / Medico Aprobador ****************************
                                 join me in dbContext.systemuser on E.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
                                 from me in me_join.DefaultIfEmpty()

                                 join pme in dbContext.professional on me.v_PersonId equals pme.v_PersonId into pme_join
                                 from pme in pme_join.DefaultIfEmpty()
                                 //**********************************************************************************************

                                 join I in dbContext.protocol on A.v_ProtocolId equals I.v_ProtocolId into I_join
                                 from I in I_join.DefaultIfEmpty()

                                 join J in dbContext.organization on I.v_EmployerOrganizationId equals J.v_OrganizationId

                                 join L in dbContext.systemparameter on new { a = I.i_EsoTypeId.Value, b = 118 }
                                                 equals new { a = L.i_ParameterId, b = L.i_GroupId } into L_join
                                 from L in L_join.DefaultIfEmpty()

                                 where A.v_ServiceId == pstrserviceId

                                 select new ReportInformePsicologicoOcupacional
                                 {
                                     v_ServiceId = A.v_ServiceId,
                                     v_ServiceComponentId = E.v_ServiceComponentId,
                                     v_FullPersonName = B.v_FirstName + " " + B.v_FirstLastName + " " + B.v_SecondLastName,
                                     Puesto = B.v_CurrentOccupation,
                                     Protocolo = I.v_Name,
                                     v_WorkingOrganizationName = J.v_Name,
                                     v_EsoTypeName = L.v_Value1,
                                     FirmaTrabajador = B.b_RubricImage,
                                     FirmaMedico = pme.b_SignatureImage,
                                     d_BirthDate = B.d_Birthdate.Value,
                                     HuellaTrabajador = B.b_FingerPrintImage,
                                     i_EsoTypeId = I.i_EsoTypeId,
                                 });

                var MedicalCenter = GetInfoMedicalCenter();

                var psicoAll = ValoresComponentesUserControl(pstrserviceId, pstrComponentId);

                // pSICOLOGIA 

                #region Campos de las Pruebas internas del UC Examen Psicologico

                string[] fieldsPsicoOnlyInterpretations = new string[] 
                { 
                    Constants.txt_Razonamiento_Interpretacion,
                    Constants.txt_BETAIII_RClaves_Interpretacion,
                    Constants.txt_BETTAIII_RRazonamientoNoVerbal_Interpretacion,               
                    Constants.txt_FACTORV_ComprensionVerbal_Interpretacion,
                    Constants.txt_FACTORN_CalculoNumerico_Interpretacion,
                    Constants.txt_FACTORE_ConceptualizacionEspacial_Interpretacion,
                    Constants.txt_BC_Discriminacion_Interpretacion,
                    Constants.txt_WAIS_LABERINTOS_Interpretacion,
                    Constants.txt_DISC_Interpretacion,
                    Constants.txt_TEST_DIBUJO_HOMBRE_BAJO_LLUVIA_Interpretacion,
                    
                };

                #endregion

                var filterPsico = psicoAll.FindAll(p => fieldsPsicoOnlyInterpretations.Contains(p.v_ComponentFieldId));

                var hallazgosConcat = string.Join("", filterPsico.Select(p => p.v_Value1));


                List<ServiceComponentFieldValuesList> UC_Psico = new List<ServiceComponentFieldValuesList>();

                List<ServiceComponentFieldValuesList> estaEmo = new List<ServiceComponentFieldValuesList>();
                List<ServiceComponentFieldValuesList> grupoOcupa = new List<ServiceComponentFieldValuesList>();
                List<ServiceComponentFieldValuesList> personalidad = new List<ServiceComponentFieldValuesList>();
                List<ServiceComponentFieldValuesList> afectividad = new List<ServiceComponentFieldValuesList>();
                List<ServiceComponentFieldValuesList> motivacion = new List<ServiceComponentFieldValuesList>();
                List<ServiceComponentFieldValuesList> nivelEstres = new List<ServiceComponentFieldValuesList>();

                List<ServiceComponentFieldValuesList> UC_NivelEMPO = new List<ServiceComponentFieldValuesList>();

                int goPsico_EMPO = (int)SystemParameterGroups.GrupoOcupacional_EMPO_PSICOLOGIA;
                int goPsico_EMOA = (int)SystemParameterGroups.GrupoOcupacional_EMOA_PSICOLOGIA;
                int goPsico_EMOR = (int)SystemParameterGroups.GrupoOcupacional_EMOR_PSICOLOGIA;
                int estemo = (int)SystemParameterGroups.ResultadoEvaluacion_EstabilidadEmocional;
                int per = (int)SystemParameterGroups.ResultadoEvaluacion_Personalidad;
                int afe = (int)SystemParameterGroups.ResultadoEvaluacion_Afectividad;
                int mot = (int)SystemParameterGroups.ResultadoEvaluacion_Motivacion;
                int nvlEs = (int)SystemParameterGroups.ResultadoEvaluacion_NivelEstres;

                int nvlEMPO = (int)SystemParameterGroups.ResultadoEvaluacion_NIVEL_EMPO;

                if (esoTypeId == (int)TypeESO.PreOcupacional)
                {
                    UC_Psico = ValoresPrefixComponentesUserControlByGroupParameterId(pstrserviceId, "PSI", goPsico_EMPO);

                    grupoOcupa = ValoresPrefixComponentesUserControlByGroupParameterId(pstrserviceId, Constants.cb_GrupoOcupacional, goPsico_EMPO);
                    estaEmo = ValoresPrefixComponentesUserControlByGroupParameterId(pstrserviceId, Constants.cb_RESULTADO_EVAL_EstabildadEmocional, estemo);
                    personalidad = ValoresPrefixComponentesUserControlByGroupParameterId(pstrserviceId, Constants.cb_RESULTADO_EVAL_Personalidad, per);
                    afectividad = ValoresPrefixComponentesUserControlByGroupParameterId(pstrserviceId, Constants.cb_RESULTADO_EVAL_Afectividad, afe);
                    motivacion = ValoresPrefixComponentesUserControlByGroupParameterId(pstrserviceId, Constants.cb_RESULTADO_EVAL_Motivacion, mot);
                    nivelEstres = ValoresPrefixComponentesUserControlByGroupParameterId(pstrserviceId, Constants.cb_RESULTADO_EVAL_NivelStres, nvlEs);

                    // comp para psicologia - EMPO
                    UC_NivelEMPO = ValoresPrefixComponentesUserControlByGroupParameterId(pstrserviceId, "PSI", nvlEMPO);
                }
                else if (esoTypeId == (int)TypeESO.PeriodicoAnual)
                {
                    UC_Psico = ValoresPrefixComponentesUserControlByGroupParameterId(pstrserviceId, "PSI", goPsico_EMOA);
                    grupoOcupa = ValoresPrefixComponentesUserControlByGroupParameterId(pstrserviceId, Constants.cb_GrupoOcupacional, goPsico_EMOA);
                    estaEmo = ValoresPrefixComponentesUserControlByGroupParameterId(pstrserviceId, Constants.cb_RESULTADO_EVAL_EstabildadEmocional, estemo);
                    personalidad = ValoresPrefixComponentesUserControlByGroupParameterId(pstrserviceId, Constants.cb_RESULTADO_EVAL_Personalidad, per);
                    afectividad = ValoresPrefixComponentesUserControlByGroupParameterId(pstrserviceId, Constants.cb_RESULTADO_EVAL_Afectividad, afe);
                    motivacion = ValoresPrefixComponentesUserControlByGroupParameterId(pstrserviceId, Constants.cb_RESULTADO_EVAL_Motivacion, mot);
                    nivelEstres = ValoresPrefixComponentesUserControlByGroupParameterId(pstrserviceId, Constants.cb_RESULTADO_EVAL_NivelStres, nvlEs);
                }
                else if (esoTypeId == (int)TypeESO.Retiro)
                {
                    UC_Psico = ValoresPrefixComponentesUserControlByGroupParameterId(pstrserviceId, "PSI", goPsico_EMOR);
                    grupoOcupa = ValoresPrefixComponentesUserControlByGroupParameterId(pstrserviceId, Constants.cb_GrupoOcupacional, goPsico_EMOR);
                    estaEmo = ValoresPrefixComponentesUserControlByGroupParameterId(pstrserviceId, Constants.cb_RESULTADO_EVAL_EstabildadEmocional, estemo);
                    personalidad = ValoresPrefixComponentesUserControlByGroupParameterId(pstrserviceId, Constants.cb_RESULTADO_EVAL_Personalidad, per);
                    afectividad = ValoresPrefixComponentesUserControlByGroupParameterId(pstrserviceId, Constants.cb_RESULTADO_EVAL_Afectividad, afe);
                    motivacion = ValoresPrefixComponentesUserControlByGroupParameterId(pstrserviceId, Constants.cb_RESULTADO_EVAL_Motivacion, mot);
                    nivelEstres = ValoresPrefixComponentesUserControlByGroupParameterId(pstrserviceId, Constants.cb_RESULTADO_EVAL_NivelStres, nvlEs);
                }

                #region Validate and prepared fields

                // Resultado de la evaluacion EMOA
                var xcb_GrupoOcupacional = string.Empty;
                var xcb_GrupoOcupacionalName = string.Empty;
                var xcb_RESULTADO_EVAL_EstabilidadEmocional_EMOA = string.Empty;
                var xtxt_RESULTADO_EVAL_IndicadoresFobia = string.Empty;
                var xtxt_RESULTADO_EVAL_IndicadoresFatigaySomnolencia = string.Empty;
                var xcb_RESULTADO_EVAL_Personalidad = string.Empty;
                var xcb_RESULTADO_EVAL_Afectividad = string.Empty;
                var xcb_RESULTADO_EVAL_Motivacion = string.Empty;
                var xcb_RESULTADO_EVAL_NivelStres = string.Empty;
                var xtxt_RESULTADO_EVAL_IndicadoresPsicosomaticosStres = string.Empty;
                var xtxt_RESULTADO_EVAL_IndicadoresFatigaLaboral = string.Empty;

                // Resultado de la evaluacion EMPO
                var xcb_RESULTADO_EVAL_Capacidad = string.Empty;
                var xcb_RESULTADO_EVAL_JuicioSentidoComun = string.Empty;
                var xcb_RESULTADO_EVAL_CoordinacionVisoMotriz = string.Empty;
                var xcb_RESULTADO_EVAL_PlanificacionyOrganizacion = string.Empty;
                var xcb_RESULTADO_EVAL_PercepcionFrenteSeguridad = string.Empty;
                var xcb_RESULTADO_EVAL_MotivacionHaciaTrabajo = string.Empty;
                var xcb_RESULTADO_EVAL_EstabilidadEmocional_EMPO = string.Empty;
                var xcb_RESULTADO_EVAL_ControlImpulsos = string.Empty;
                var xcb_RESULTADO_EVAL_RelacionesInterpersonales = string.Empty;
                var xcb_RESULTADO_EVAL_ManejoPresionyEstres = string.Empty;

                if (UC_NivelEMPO.Count > 0)
                {
                    var cb_RESULTADO_EVAL_Capacidad = UC_NivelEMPO.Find(p => p.v_ComponentFieldId == Constants.cb_RESULTADO_EVAL_Capacidad);
                    var cb_RESULTADO_EVAL_JuicioSentidoComun = UC_NivelEMPO.Find(p => p.v_ComponentFieldId == Constants.cb_RESULTADO_EVAL_JuicioSentidoComun);
                    var cb_RESULTADO_EVAL_CoordinacionVisoMotriz = UC_NivelEMPO.Find(p => p.v_ComponentFieldId == Constants.cb_RESULTADO_EVAL_CoordinacionVisoMotriz);
                    var cb_RESULTADO_EVAL_PlanificacionyOrganizacion = UC_NivelEMPO.Find(p => p.v_ComponentFieldId == Constants.cb_RESULTADO_EVAL_PlanificacionyOrganizacion);
                    var cb_RESULTADO_EVAL_PercepcionFrenteSeguridad = UC_NivelEMPO.Find(p => p.v_ComponentFieldId == Constants.cb_RESULTADO_EVAL_PercepcionFrenteSeguridad);
                    var cb_RESULTADO_EVAL_MotivacionHaciaTrabajo = UC_NivelEMPO.Find(p => p.v_ComponentFieldId == Constants.cb_RESULTADO_EVAL_MotivacionHaciaTrabajo);
                    var cb_RESULTADO_EVAL_EstabildadEmocional = UC_NivelEMPO.Find(p => p.v_ComponentFieldId == Constants.cb_RESULTADO_EVAL_EstabildadEmocional);
                    var cb_RESULTADO_EVAL_ControlImpulsos = UC_NivelEMPO.Find(p => p.v_ComponentFieldId == Constants.cb_RESULTADO_EVAL_ControlImpulsos);
                    var cb_RESULTADO_EVAL_RelacionesInterpersonales = UC_NivelEMPO.Find(p => p.v_ComponentFieldId == Constants.cb_RESULTADO_EVAL_RelacionesInterpersonales);
                    var cb_RESULTADO_EVAL_ManejoPresionyEstres = UC_NivelEMPO.Find(p => p.v_ComponentFieldId == Constants.cb_RESULTADO_EVAL_ManejoPresionyEstres);

                    if (cb_RESULTADO_EVAL_Capacidad != null)
                        xcb_RESULTADO_EVAL_Capacidad = cb_RESULTADO_EVAL_Capacidad.v_Value1;

                    if (cb_RESULTADO_EVAL_JuicioSentidoComun != null)
                        xcb_RESULTADO_EVAL_JuicioSentidoComun = cb_RESULTADO_EVAL_JuicioSentidoComun.v_Value1;

                    if (cb_RESULTADO_EVAL_CoordinacionVisoMotriz != null)
                        xcb_RESULTADO_EVAL_CoordinacionVisoMotriz = cb_RESULTADO_EVAL_CoordinacionVisoMotriz.v_Value1;

                    if (cb_RESULTADO_EVAL_PlanificacionyOrganizacion != null)
                        xcb_RESULTADO_EVAL_PlanificacionyOrganizacion = cb_RESULTADO_EVAL_PlanificacionyOrganizacion.v_Value1;

                    if (cb_RESULTADO_EVAL_PercepcionFrenteSeguridad != null)
                        xcb_RESULTADO_EVAL_PercepcionFrenteSeguridad = cb_RESULTADO_EVAL_PercepcionFrenteSeguridad.v_Value1;

                    if (cb_RESULTADO_EVAL_MotivacionHaciaTrabajo != null)
                        xcb_RESULTADO_EVAL_MotivacionHaciaTrabajo = cb_RESULTADO_EVAL_MotivacionHaciaTrabajo.v_Value1;

                    if (cb_RESULTADO_EVAL_EstabildadEmocional != null)
                        xcb_RESULTADO_EVAL_EstabilidadEmocional_EMPO = cb_RESULTADO_EVAL_EstabildadEmocional.v_Value1;

                    if (cb_RESULTADO_EVAL_ControlImpulsos != null)
                        xcb_RESULTADO_EVAL_ControlImpulsos = cb_RESULTADO_EVAL_ControlImpulsos.v_Value1;

                    if (cb_RESULTADO_EVAL_RelacionesInterpersonales != null)
                        xcb_RESULTADO_EVAL_RelacionesInterpersonales = cb_RESULTADO_EVAL_RelacionesInterpersonales.v_Value1;

                    if (cb_RESULTADO_EVAL_ManejoPresionyEstres != null)
                        xcb_RESULTADO_EVAL_ManejoPresionyEstres = cb_RESULTADO_EVAL_ManejoPresionyEstres.v_Value1;
                }


                if (grupoOcupa.Count > 0)
                {
                    xcb_GrupoOcupacional = grupoOcupa[0].v_Value1;
                    xcb_GrupoOcupacionalName = grupoOcupa[0].v_Value1Name;
                }

                if (estaEmo.Count > 0)
                {
                    xcb_RESULTADO_EVAL_EstabilidadEmocional_EMOA = estaEmo[0].v_Value1Name;
                }

                if (personalidad.Count > 0)
                {
                    xcb_RESULTADO_EVAL_Personalidad = personalidad[0].v_Value1Name;
                }

                if (afectividad.Count > 0)
                {
                    xcb_RESULTADO_EVAL_Afectividad = afectividad[0].v_Value1Name;
                }

                if (motivacion.Count > 0)
                {
                    xcb_RESULTADO_EVAL_Motivacion = motivacion[0].v_Value1Name;
                }

                if (nivelEstres.Count > 0)
                {
                    xcb_RESULTADO_EVAL_NivelStres = nivelEstres[0].v_Value1;

                }

                if (UC_Psico.Count > 0)
                {

                    var txt_RESULTADO_EVAL_IndicadoresFobia = UC_Psico.Find(p => p.v_ComponentFieldId == Constants.txt_RESULTADO_EVAL_IndicadoresFobia);
                    var txt_RESULTADO_EVAL_IndicadoresFatigaySomnolencia = UC_Psico.Find(p => p.v_ComponentFieldId == Constants.txt_RESULTADO_EVAL_IndicadoresFatigaySomnolencia);
                    var txt_RESULTADO_EVAL_IndicadoresPsicosomaticosStres = UC_Psico.Find(p => p.v_ComponentFieldId == Constants.txt_RESULTADO_EVAL_IndicadoresPsicosomaticosStres);
                    var txt_RESULTADO_EVAL_IndicadoresFatigaLaboral = UC_Psico.Find(p => p.v_ComponentFieldId == Constants.txt_RESULTADO_EVAL_IndicadoresFatigaLaboral);

                    if (txt_RESULTADO_EVAL_IndicadoresFobia != null)
                        xtxt_RESULTADO_EVAL_IndicadoresFobia = txt_RESULTADO_EVAL_IndicadoresFobia.v_Value1;

                    if (txt_RESULTADO_EVAL_IndicadoresFatigaySomnolencia != null)
                        xtxt_RESULTADO_EVAL_IndicadoresFatigaySomnolencia = txt_RESULTADO_EVAL_IndicadoresFatigaySomnolencia.v_Value1;

                    if (txt_RESULTADO_EVAL_IndicadoresPsicosomaticosStres != null)
                        xtxt_RESULTADO_EVAL_IndicadoresPsicosomaticosStres = txt_RESULTADO_EVAL_IndicadoresPsicosomaticosStres.v_Value1;

                    if (txt_RESULTADO_EVAL_IndicadoresFatigaLaboral != null)
                        xtxt_RESULTADO_EVAL_IndicadoresFatigaLaboral = txt_RESULTADO_EVAL_IndicadoresFatigaLaboral.v_Value1;

                }


                #endregion

                // Campos dinamicos
                var exPsico = ValoresComponente(pstrserviceId, pstrComponentId);



                var sql = (from a in objEntity.ToList()

                           select new ReportInformePsicologicoOcupacional
                           {
                               v_ServiceId = a.v_ServiceId,
                               v_ServiceComponentId = a.v_ServiceComponentId,
                               v_FullPersonName = a.v_FullPersonName,
                               Puesto = a.Puesto,
                               Protocolo = a.Protocolo,
                               v_WorkingOrganizationName = a.v_WorkingOrganizationName,
                               v_EsoTypeName = a.v_EsoTypeName,
                               FirmaTrabajador = a.FirmaTrabajador,
                               FirmaMedico = a.FirmaMedico,
                               d_BirthDate = a.d_BirthDate,
                               i_AgePacient = GetAge(a.d_BirthDate.Value),

                               // Campos dinamicos

                               EXAMEN_PSICOLOGICO_Obs_conductas_Articulación = exPsico.Count == 0 ? string.Empty : exPsico.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_PSICOLOGICO_Obs_conductas_Articulación) == null ? string.Empty : exPsico.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_PSICOLOGICO_Obs_conductas_Articulación).v_Value1Name,
                               EXAMEN_PSICOLOGICO_Obs_conductas_Espacio = exPsico.Count == 0 ? string.Empty : exPsico.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_PSICOLOGICO_Obs_conductas_Espacio) == null ? string.Empty : exPsico.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_PSICOLOGICO_Obs_conductas_Espacio).v_Value1Name,
                               EXAMEN_PSICOLOGICO_Obs_conductas_Persona = exPsico.Count == 0 ? string.Empty : exPsico.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_PSICOLOGICO_Obs_conductas_Persona) == null ? string.Empty : exPsico.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_PSICOLOGICO_Obs_conductas_Persona).v_Value1Name,
                               EXAMEN_PSICOLOGICO_Obs_conductas_Postura = exPsico.Count == 0 ? string.Empty : exPsico.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_PSICOLOGICO_Obs_conductas_Postura) == null ? string.Empty : exPsico.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_PSICOLOGICO_Obs_conductas_Postura).v_Value1Name,
                               EXAMEN_PSICOLOGICO_Obs_conductas_Presentacion = exPsico.Count == 0 ? string.Empty : exPsico.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_PSICOLOGICO_Obs_conductas_Presentacion) == null ? string.Empty : exPsico.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_PSICOLOGICO_Obs_conductas_Presentacion).v_Value1Name,
                               EXAMEN_PSICOLOGICO_Obs_conductas_Ritmo = exPsico.Count == 0 ? string.Empty : exPsico.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_PSICOLOGICO_Obs_conductas_Ritmo) == null ? string.Empty : exPsico.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_PSICOLOGICO_Obs_conductas_Ritmo).v_Value1Name,
                               EXAMEN_PSICOLOGICO_Obs_conductas_Tiempo = exPsico.Count == 0 ? string.Empty : exPsico.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_PSICOLOGICO_Obs_conductas_Tiempo) == null ? string.Empty : exPsico.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_PSICOLOGICO_Obs_conductas_Tiempo).v_Value1Name,
                               EXAMEN_PSICOLOGICO_Obs_conductas_Tono = exPsico.Count == 0 ? string.Empty : exPsico.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_PSICOLOGICO_Obs_conductas_Tono) == null ? string.Empty : exPsico.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_PSICOLOGICO_Obs_conductas_Tono).v_Value1Name,

                               EXAMEN_PSICOLOGICO_Enfe_psicoso_Apetito_Bulimia_anorexia_otros = exPsico.Count == 0 ? string.Empty : exPsico.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_PSICOLOGICO_Enfe_psicoso_Apetito_Bulimia_anorexia_otros) == null ? string.Empty : exPsico.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_PSICOLOGICO_Enfe_psicoso_Apetito_Bulimia_anorexia_otros).v_Value1Name,
                               EXAMEN_PSICOLOGICO_Enfe_psicoso_Cardiovasculares_palpitaciones_cefale_otros = exPsico.Count == 0 ? string.Empty : exPsico.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_PSICOLOGICO_Enfe_psicoso_Cardiovasculares_palpitaciones_cefale_otros) == null ? string.Empty : exPsico.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_PSICOLOGICO_Enfe_psicoso_Cardiovasculares_palpitaciones_cefale_otros).v_Value1Name,
                               EXAMEN_PSICOLOGICO_Enfe_psicoso_Gastrointestinales_Sequedad_de_boca_gastritis_ulcera_otros = exPsico.Count == 0 ? string.Empty : exPsico.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_PSICOLOGICO_Enfe_psicoso_Gastrointestinales_Sequedad_de_boca_gastritis_ulcera_otros) == null ? string.Empty : exPsico.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_PSICOLOGICO_Enfe_psicoso_Gastrointestinales_Sequedad_de_boca_gastritis_ulcera_otros).v_Value1Name,
                               EXAMEN_PSICOLOGICO_Enfe_psicoso_Observaciones = exPsico.Count == 0 ? string.Empty : exPsico.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_PSICOLOGICO_Enfe_psicoso_Observaciones) == null ? string.Empty : exPsico.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_PSICOLOGICO_Enfe_psicoso_Observaciones).v_Value1Name,
                               EXAMEN_PSICOLOGICO_Enfe_psicoso_Respiratorios_Asma_hiperventilación_suspiros_otros = exPsico.Count == 0 ? string.Empty : exPsico.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_PSICOLOGICO_Enfe_psicoso_Respiratorios_Asma_hiperventilación_suspiros_otros) == null ? string.Empty : exPsico.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_PSICOLOGICO_Enfe_psicoso_Respiratorios_Asma_hiperventilación_suspiros_otros).v_Value1Name,
                               EXAMEN_PSICOLOGICO_Enfe_psicoso_Sudoracion = exPsico.Count == 0 ? string.Empty : exPsico.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_PSICOLOGICO_Enfe_psicoso_Sudoracion) == null ? string.Empty : exPsico.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_PSICOLOGICO_Enfe_psicoso_Sudoracion).v_Value1Name,
                               EXAMEN_PSICOLOGICO_Enfe_psicoso_Sueño_insomnio = exPsico.Count == 0 ? string.Empty : exPsico.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_PSICOLOGICO_Enfe_psicoso_Sueño_insomnio) == null ? string.Empty : exPsico.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_PSICOLOGICO_Enfe_psicoso_Sueño_insomnio).v_Value1Name,
                               EXAMEN_PSICOLOGICO_Enfe_psicoso_Tics_nerviosos = exPsico.Count == 0 ? string.Empty : exPsico.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_PSICOLOGICO_Enfe_psicoso_Tics_nerviosos) == null ? string.Empty : exPsico.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_PSICOLOGICO_Enfe_psicoso_Tics_nerviosos).v_Value1Name,

                               EXAMEN_PSICOLOGICO_His_fami_Esposo = exPsico.Count == 0 ? string.Empty : exPsico.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_PSICOLOGICO_His_fami_Esposo) == null ? "No refiere" : exPsico.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_PSICOLOGICO_His_fami_Esposo).v_Value1,
                               EXAMEN_PSICOLOGICO_His_fami_Hermanos = exPsico.Count == 0 ? string.Empty : exPsico.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_PSICOLOGICO_His_fami_Hermanos) == null ? "No refiere" : exPsico.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_PSICOLOGICO_His_fami_Hermanos).v_Value1,
                               EXAMEN_PSICOLOGICO_His_fami_Hijo = exPsico.Count == 0 ? string.Empty : exPsico.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_PSICOLOGICO_His_fami_Hijo) == null ? "No refiere" : exPsico.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_PSICOLOGICO_His_fami_Hijo).v_Value1,
                               EXAMEN_PSICOLOGICO_His_fami_Otros = exPsico.Count == 0 ? string.Empty : exPsico.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_PSICOLOGICO_His_fami_Otros) == null ? "No refiere" : exPsico.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_PSICOLOGICO_His_fami_Otros).v_Value1,
                               EXAMEN_PSICOLOGICO_His_fami_Padres = exPsico.Count == 0 ? string.Empty : exPsico.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_PSICOLOGICO_His_fami_Padres) == null ? "No refiere" : exPsico.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_PSICOLOGICO_His_fami_Padres).v_Value1,

                               EXAMEN_PSICOLOGICO_Habitos_Alcohol = exPsico.Count == 0 ? string.Empty : exPsico.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_PSICOLOGICO_Habitos_Alcohol) == null ? string.Empty : exPsico.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_PSICOLOGICO_Habitos_Alcohol).v_Value1Name,
                               EXAMEN_PSICOLOGICO_Habitos_Pasatiempo = exPsico.Count == 0 ? string.Empty : exPsico.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_PSICOLOGICO_Habitos_Pasatiempo) == null ? "No refiere" : exPsico.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_PSICOLOGICO_Habitos_Pasatiempo).v_Value1,
                               EXAMEN_PSICOLOGICO_Habitos_Tabaco = exPsico.Count == 0 ? string.Empty : exPsico.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_PSICOLOGICO_Habitos_Tabaco) == null ? string.Empty : exPsico.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_PSICOLOGICO_Habitos_Tabaco).v_Value1Name,

                               EXAMEN_PSICOLOGICO_Conclu_final_Aptitud = exPsico.Count == 0 ? string.Empty : exPsico.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_PSICOLOGICO_Conclu_final_Aptitud) == null ? string.Empty : exPsico.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_PSICOLOGICO_Conclu_final_Aptitud).v_Value1Name,
                               EXAMEN_PSICOLOGICO_Conclu_final_Riesgo = exPsico.Count == 0 ? string.Empty : exPsico.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_PSICOLOGICO_Conclu_final_Riesgo) == null ? string.Empty : exPsico.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_PSICOLOGICO_Conclu_final_Riesgo).v_Value1Name,

                               //***********************************
                               // Resultado de la evaluacion EMOA
                               cb_GrupoOcupacional = xcb_GrupoOcupacional,
                               cb_GrupoOcupacionalName = xcb_GrupoOcupacionalName,
                               cb_RESULTADO_EVAL_EstabilidadEmocional_EMOA = xcb_RESULTADO_EVAL_EstabilidadEmocional_EMOA,

                               txt_RESULTADO_EVAL_IndicadoresFobia = xtxt_RESULTADO_EVAL_IndicadoresFobia,
                               txt_RESULTADO_EVAL_IndicadoresFatigaySomnolencia = xtxt_RESULTADO_EVAL_IndicadoresFatigaySomnolencia,
                               cb_RESULTADO_EVAL_Personalidad = xcb_RESULTADO_EVAL_Personalidad,
                               cb_RESULTADO_EVAL_Afectividad = xcb_RESULTADO_EVAL_Afectividad,
                               cb_RESULTADO_EVAL_Motivacion = xcb_RESULTADO_EVAL_Motivacion,
                               cb_RESULTADO_EVAL_NivelStres = xcb_RESULTADO_EVAL_NivelStres,
                               txt_RESULTADO_EVAL_IndicadoresPsicosomaticosStres = xtxt_RESULTADO_EVAL_IndicadoresPsicosomaticosStres,
                               txt_RESULTADO_EVAL_IndicadoresFatigaLaboral = xtxt_RESULTADO_EVAL_IndicadoresFatigaLaboral,

                               //// Resultado de la evaluacion EMPO
                               cb_RESULTADO_EVAL_Capacidad = xcb_RESULTADO_EVAL_Capacidad,
                               cb_RESULTADO_EVAL_JuicioSentidoComun = xcb_RESULTADO_EVAL_JuicioSentidoComun,
                               cb_RESULTADO_EVAL_CoordinacionVisoMotriz = xcb_RESULTADO_EVAL_CoordinacionVisoMotriz,
                               cb_RESULTADO_EVAL_PlanificacionyOrganizacion = xcb_RESULTADO_EVAL_PlanificacionyOrganizacion,
                               cb_RESULTADO_EVAL_PercepcionFrenteSeguridad = xcb_RESULTADO_EVAL_PercepcionFrenteSeguridad,
                               cb_RESULTADO_EVAL_MotivacionHaciaTrabajo = xcb_RESULTADO_EVAL_MotivacionHaciaTrabajo,
                               cb_RESULTADO_EVAL_EstabilidadEmocional_EMPO = xcb_RESULTADO_EVAL_EstabilidadEmocional_EMPO,
                               cb_RESULTADO_EVAL_ControlImpulsos = xcb_RESULTADO_EVAL_ControlImpulsos,
                               cb_RESULTADO_EVAL_RelacionesInterpersonales = xcb_RESULTADO_EVAL_RelacionesInterpersonales,
                               cb_RESULTADO_EVAL_ManejoPresionyEstres = xcb_RESULTADO_EVAL_ManejoPresionyEstres,
                               //********************

                               Hallazgos = hallazgosConcat,
                               HuellaTrabajador = a.HuellaTrabajador,

                               b_Logo = MedicalCenter.b_Image,
                               EmpresaPropietaria = MedicalCenter.v_Name,
                               EmpresaPropietariaDireccion = MedicalCenter.v_Address,
                               EmpresaPropietariaTelefono = MedicalCenter.v_PhoneNumber,
                               EmpresaPropietariaEmail = MedicalCenter.v_Mail,

                           }).ToList();

                return sql;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public List<ReportOsteoMuscular> ReportOsteoMuscular(string pstrserviceId, string pstrComponentId)
        {
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                var objEntity = (from A in dbContext.service
                                 join B in dbContext.person on A.v_PersonId equals B.v_PersonId
                                 join E in dbContext.servicecomponent on new { a = pstrserviceId, b = pstrComponentId }
                                                                        equals new { a = E.v_ServiceId, b = E.v_ComponentId }

                                 // Usuario Medico Evaluador / Medico Aprobador ****************************
                                 join me in dbContext.systemuser on E.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
                                 from me in me_join.DefaultIfEmpty()

                                 join pme in dbContext.professional on me.v_PersonId equals pme.v_PersonId into pme_join
                                 from pme in pme_join.DefaultIfEmpty()
                                 //**********************************************************************************************

                                 join I in dbContext.protocol on A.v_ProtocolId equals I.v_ProtocolId into I_join
                                 from I in I_join.DefaultIfEmpty()

                                 join J in dbContext.organization on I.v_EmployerOrganizationId equals J.v_OrganizationId

                                 join L in dbContext.systemparameter on new { a = I.i_EsoTypeId.Value, b = 118 }
                                                 equals new { a = L.i_ParameterId, b = L.i_GroupId } into L_join
                                 from L in L_join.DefaultIfEmpty()

                                 where A.v_ServiceId == pstrserviceId

                                 select new ReportOsteoMuscular
                                 {
                                     IdServicio = A.v_ServiceId,
                                     IdSericioComponente = E.v_ServiceComponentId,
                                     Paciente = B.v_FirstName + " " + B.v_FirstLastName + " " + B.v_SecondLastName,
                                     Puesto = B.v_CurrentOccupation,
                                     Protocolo = I.v_Name,
                                     Empresa = J.v_Name,
                                     TipoExamen = L.v_Value1,
                                     FirmaTrabajador = B.b_RubricImage,
                                     FirmaMedico = pme.b_SignatureImage,
                                     d_BirthDate = B.d_Birthdate.Value,
                                     HuellaTrabajador = B.b_FingerPrintImage
                                 });

                var MedicalCenter = GetInfoMedicalCenter();

                var sql = (from a in objEntity.ToList()
                           let OsteoMuscular = new ServiceBL().ValoresComponente(pstrserviceId, pstrComponentId)
                           select new ReportOsteoMuscular
                           {
                               IdServicio = a.IdServicio,
                               IdSericioComponente = a.IdSericioComponente,
                               Paciente = a.Paciente,
                               Puesto = a.Puesto,
                               Protocolo = a.Protocolo,
                               Empresa = a.Empresa,
                               TipoExamen = a.TipoExamen,
                               FirmaTrabajador = a.FirmaTrabajador,
                               FirmaMedico = a.FirmaMedico,
                               d_BirthDate = a.d_BirthDate,
                               Edad = GetAge(a.d_BirthDate.Value),

                               MetodoCarga = OsteoMuscular.Count == 0 ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_METODO_CARGA).v_Value1Name,
                               AntecedentesSiNo = OsteoMuscular.Count == 0 ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_PRESENTA_ANTECEDENTES).v_Value1,
                               AntecedentesDescripcion = OsteoMuscular.Count == 0 ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_DESCRIPCION).v_Value1,
                               PosturaSentado = OsteoMuscular.Count == 0 ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_POSTURA_SENTADO).v_Value1,
                               PosturaPie = OsteoMuscular.Count == 0 ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_POSTURA_PIE).v_Value1,
                               PosturaForzadaSiNo = OsteoMuscular.Count == 0 ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_POSTURA_FORZADA).v_Value1,
                               MovCargaManualSiNo = OsteoMuscular.Count == 0 ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_MOVIMIENTO_MANUAL_CARGA).v_Value1,
                               PesoCarga = OsteoMuscular.Count == 0 ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_PESO_CARGA).v_Value1,
                               MovRepetitivosSiNo = OsteoMuscular.Count == 0 ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_MOVIMIENTOS_REPETITIVOS).v_Value1,
                               UsuPantallaPVDSiNo = OsteoMuscular.Count == 0 ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_USUARIO_PANTALLA_PVD).v_Value1,
                               HorasDia = OsteoMuscular.Count == 0 ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_HORAS_DIA).v_Value1,
                               LordisisCervical = OsteoMuscular.Count == 0 ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_LORDOSIS_CERVICAL).v_Value1Name,
                               CifosisDorsal = OsteoMuscular.Count == 0 ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_CIFOSIS_DORSAL).v_Value1Name,
                               LordosisLumbar = OsteoMuscular.Count == 0 ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_LORDOSIS_LUMBAR).v_Value1Name,
                               EscoliosisLumbar = OsteoMuscular.Count == 0 ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_ESCOLIOSIS_LUMBAR).v_Value1Name,
                               EscofiosisDorsal = OsteoMuscular.Count == 0 ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_ESCOLIOSIS_DORSAL).v_Value1Name,
                               DolorEspalda = OsteoMuscular.Count == 0 ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_DOLOR_ESPALDA).v_Value1Name,
                               ContracturaMuscular = OsteoMuscular.Count == 0 ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_CONTRACTURA_MUSCULAR).v_Value1Name,
                               Observaciones = OsteoMuscular.Count == 0 ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_OBSERVACIONES).v_Value1,
                               RodillaDerechaVaroSiNo = OsteoMuscular.Count == 0 ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_RODILLA_DERECHA_VARO).v_Value1,
                               RodillaDerechaValgoSiNo = OsteoMuscular.Count == 0 ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_RODILLA_DERECHA_VALGO).v_Value1,
                               RodillaIzquierdaVaroSiNo = OsteoMuscular.Count == 0 ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_RODILLA_IZQUIERDA_VARO).v_Value1,
                               RodillaIzquierdaValgoSiNo = OsteoMuscular.Count == 0 ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_RODILLA_IZQUIERDA_VALGO).v_Value1,
                               PieDerechoCavoSiNo = OsteoMuscular.Count == 0 ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_PIE_DERECHO_CAVO).v_Value1,
                               PieDerechoPlanoSiNo = OsteoMuscular.Count == 0 ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_PIE_DERECHO_PLANO).v_Value1,
                               PieIzquierdoCavoSiNo = OsteoMuscular.Count == 0 ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_PIE_IZQUIERDO_CAVO).v_Value1,
                               PieIzquierdoPlanoSiNo = OsteoMuscular.Count == 0 ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_PIE_IZQUIERDO_PLANO).v_Value1,
                               ReflejoTotulianoDerechoSiNo = OsteoMuscular.Count == 0 ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_REFLEJO_TOTULIANO_DERECHO).v_Value1Name,
                               ReflejoTotulianoIzquierdoSiNo = OsteoMuscular.Count == 0 ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_REFLEJO_TOTULIANO_IZQUIERDO).v_Value1Name,
                               ReflejoAquileoDerechoSiNo = OsteoMuscular.Count == 0 ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_REFLEJO_AQUILEO_DERECHO).v_Value1Name,
                               ReflejoAquileoIzquierdoSiNo = OsteoMuscular.Count == 0 ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_REFLEJO_AQUILEO_IZQUIERDO).v_Value1Name,
                               TestPhalenDerechoSiNo = OsteoMuscular.Count == 0 ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_TEST_PHALEN_DERECHO).v_Value1,
                               TestPhalenIzquierdoSiNo = OsteoMuscular.Count == 0 ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_TEST_PHALEN_IZQUIERDA).v_Value1,
                               TestTinelDerechoSiNo = OsteoMuscular.Count == 0 ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_TEST_TINEL_DERECHO).v_Value1,
                               TestTinelIzquierdoSiNo = OsteoMuscular.Count == 0 ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_TEST_TINEL_IZQUIERDO).v_Value1,
                               SignoLasagueIzquierdoSiNo = OsteoMuscular.Count == 0 ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_SIGNO_LASAGUE_IZQUIERDO).v_Value1,
                               SignoLasagueDerechoSiNo = OsteoMuscular.Count == 0 ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_SIGNO_LASAGUE_DERECHO).v_Value1,
                               SignoBragardIzquierdoSiNo = OsteoMuscular.Count == 0 ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_SIGNO_BRAGARD_IZQUIERDO).v_Value1,
                               SignoBragardDerechoSiNo = OsteoMuscular.Count == 0 ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_SIGNO_BRAGARD_DERECHO).v_Value1,

                               TemporoMadibularNID = OsteoMuscular.Count == 0 ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_TEMPERO_MANDIBULAR).v_Value1,
                               TemporoMadibularObs = OsteoMuscular.Count == 0 ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_TEMPERO_MANDIBULAR_DESCRIPCION).v_Value1,
                               HombroNID = OsteoMuscular.Count == 0 ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_HOMBRO).v_Value1,
                               HombroObs = OsteoMuscular.Count == 0 ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_HOMBRO_DESCRIPCION).v_Value1,
                               CodoNID = OsteoMuscular.Count == 0 ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_CODO).v_Value1,
                               CodoObs = OsteoMuscular.Count == 0 ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_CODO_DESCRIPCION).v_Value1,
                               MunecaNID = OsteoMuscular.Count == 0 ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_MUNECA).v_Value1,
                               MunecaObs = OsteoMuscular.Count == 0 ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_MUNECA_DESCRIPCION).v_Value1,
                               InterfalangicaNID = OsteoMuscular.Count == 0 ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_INTERFALANGICAS).v_Value1,
                               InterfalangicaObs = OsteoMuscular.Count == 0 ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_INTERFALANGICAS_DESCRIPCION).v_Value1,
                               CoxoFermoralNID = OsteoMuscular.Count == 0 ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_COXOFEMORAL).v_Value1,
                               CoxoFermoralObs = OsteoMuscular.Count == 0 ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_COXOFEMORAL_DESCRIPCION).v_Value1,
                               RodillaNID = OsteoMuscular.Count == 0 ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_RODILLA).v_Value1,
                               RodillaObs = OsteoMuscular.Count == 0 ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_RODILLA_DESCRIPCION).v_Value1,
                               TobilloPieNID = OsteoMuscular.Count == 0 ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_TOBILLO_PIE).v_Value1,
                               TobilloPieObs = OsteoMuscular.Count == 0 ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_TOBILLO_PIE_DESCRIPCION).v_Value1,

                               ColumnaCervicalSiNo = OsteoMuscular.Count == 0 ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_COLUMNA_CERVICAL).v_Value1,
                               ColumnaCervicalObs = OsteoMuscular.Count == 0 ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_COLUMNA_CERVICAL_DESCRIPCION).v_Value1,
                               ColumnaDorsalSiNo = OsteoMuscular.Count == 0 ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_COLUMNA_DORSAL).v_Value1,
                               ColumnaDorsalObs = OsteoMuscular.Count == 0 ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_COLUMNA_DORSAL_DESCRIPCION).v_Value1,
                               DorsoLumbarSiNo = OsteoMuscular.Count == 0 ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_COLUMNA_DORSO_LUMBAR).v_Value1,
                               DorsoLumbarObs = OsteoMuscular.Count == 0 ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_COLUMNA_DORSO_LUMBAR_DESCRIPCION).v_Value1,
                               LumbroSacraSiNo = OsteoMuscular.Count == 0 ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_COLUMNA_LUMBOSACRA).v_Value1,
                               LumbroSacraObs = OsteoMuscular.Count == 0 ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_COLUMNA_LUMBOSACRA_DESCRIPCION).v_Value1,
                               CondralesSiNo = OsteoMuscular.Count == 0 ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_COSTO_CONDRALES).v_Value1,
                               CondralesObs = OsteoMuscular.Count == 0 ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_COSTO_CONDRALES_DESCRIPCION).v_Value1,
                               CostoEsternalesSiNo = OsteoMuscular.Count == 0 ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_COSTO_ESTERNALES).v_Value1,
                               CostoEsternalesObs = OsteoMuscular.Count == 0 ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_COSTO_ESTERNALES_DESCRIPCION).v_Value1,

                               Descripcion = OsteoMuscular.Count == 0 ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_DESCRIPCION_ID).v_Value1,
                               Aptitud = OsteoMuscular.Count == 0 ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_APTITUD_ID).v_Value1Name,

                               //MetodoCarga = GetServiceComponentFielValue(a.IdServicio, pstrComponentId, Constants.OSTEO_MUSCULAR_METODO_CARGA, "SICOMBO", 186, "NO"),
                               //AntecedentesSiNo = GetServiceComponentFielValue(a.IdServicio, pstrComponentId, Constants.OSTEO_MUSCULAR_PRESENTA_ANTECEDENTES, "NOCOMBO", 0, "SI"),
                               //AntecedentesDescripcion = GetServiceComponentFielValue(a.IdServicio, pstrComponentId, Constants.OSTEO_MUSCULAR_DESCRIPCION, "NOCOMBO", 0, "SI"),
                               //PosturaSentado = GetServiceComponentFielValue(a.IdServicio, pstrComponentId, Constants.OSTEO_MUSCULAR_POSTURA_SENTADO, "NOCOMBO", 0, "SI"),
                               //PosturaPie = GetServiceComponentFielValue(a.IdServicio, pstrComponentId, Constants.OSTEO_MUSCULAR_POSTURA_PIE, "NOCOMBO", 0, "SI"),
                               //PosturaForzadaSiNo = GetServiceComponentFielValue(a.IdServicio, pstrComponentId, Constants.OSTEO_MUSCULAR_POSTURA_FORZADA, "NOCOMBO", 0, "SI"),
                               //MovCargaManualSiNo = GetServiceComponentFielValue(a.IdServicio, pstrComponentId, Constants.OSTEO_MUSCULAR_MOVIMIENTO_MANUAL_CARGA, "NOCOMBO", 0, "SI"),
                               //PesoCarga = GetServiceComponentFielValue(a.IdServicio, pstrComponentId, Constants.OSTEO_MUSCULAR_PESO_CARGA, "NOCOMBO", 0, "SI"),
                               //MovRepetitivosSiNo = GetServiceComponentFielValue(a.IdServicio, pstrComponentId, Constants.OSTEO_MUSCULAR_MOVIMIENTOS_REPETITIVOS, "NOCOMBO", 0, "SI"),
                               //UsuPantallaPVDSiNo = GetServiceComponentFielValue(a.IdServicio, pstrComponentId, Constants.OSTEO_MUSCULAR_USUARIO_PANTALLA_PVD, "NOCOMBO", 0, "SI"),
                               //HorasDia = GetServiceComponentFielValue(a.IdServicio, pstrComponentId, Constants.OSTEO_MUSCULAR_HORAS_DIA, "NOCOMBO", 0, "SI"),
                               //LordisisCervical = GetServiceComponentFielValue(a.IdServicio, pstrComponentId, Constants.OSTEO_MUSCULAR_LORDOSIS_CERVICAL, "SICOMBO", 183, "NO"),
                               //CifosisDorsal = GetServiceComponentFielValue(a.IdServicio, pstrComponentId, Constants.OSTEO_MUSCULAR_CIFOSIS_DORSAL, "SICOMBO", 183, "NO"),
                               //LordosisLumbar = GetServiceComponentFielValue(a.IdServicio, pstrComponentId, Constants.OSTEO_MUSCULAR_LORDOSIS_LUMBAR, "SICOMBO", 183, "NO"),
                               //EscoliosisLumbar = GetServiceComponentFielValue(a.IdServicio, pstrComponentId, Constants.OSTEO_MUSCULAR_ESCOLIOSIS_LUMBAR, "SICOMBO", 111, "NO"),
                               //EscofiosisDorsal = GetServiceComponentFielValue(a.IdServicio, pstrComponentId, Constants.OSTEO_MUSCULAR_ESCOLIOSIS_DORSAL, "SICOMBO", 111, "NO"),
                               //DolorEspalda = GetServiceComponentFielValue(a.IdServicio, pstrComponentId, Constants.OSTEO_MUSCULAR_DOLOR_ESPALDA, "SICOMBO", 111, "NO"),
                               //ContracturaMuscular = GetServiceComponentFielValue(a.IdServicio, pstrComponentId, Constants.OSTEO_MUSCULAR_CONTRACTURA_MUSCULAR, "SICOMBO", 111, "NO"),
                               //Observaciones = GetServiceComponentFielValue(a.IdServicio, pstrComponentId, Constants.OSTEO_MUSCULAR_OBSERVACIONES, "NOCOMBO", 0, "SI"),
                               //RodillaDerechaVaroSiNo = GetServiceComponentFielValue(a.IdServicio, pstrComponentId, Constants.OSTEO_MUSCULAR_RODILLA_DERECHA_VARO, "NOCOMBO", 0, "SI"),
                               //RodillaDerechaValgoSiNo = GetServiceComponentFielValue(a.IdServicio, pstrComponentId, Constants.OSTEO_MUSCULAR_RODILLA_DERECHA_VALGO, "NOCOMBO", 0, "SI"),
                               //RodillaIzquierdaVaroSiNo = GetServiceComponentFielValue(a.IdServicio, pstrComponentId, Constants.OSTEO_MUSCULAR_RODILLA_IZQUIERDA_VARO, "NOCOMBO", 0, "SI"),
                               //RodillaIzquierdaValgoSiNo = GetServiceComponentFielValue(a.IdServicio, pstrComponentId, Constants.OSTEO_MUSCULAR_RODILLA_IZQUIERDA_VALGO, "NOCOMBO", 0, "SI"),
                               //PieDerechoCavoSiNo = GetServiceComponentFielValue(a.IdServicio, pstrComponentId, Constants.OSTEO_MUSCULAR_PIE_DERECHO_CAVO, "NOCOMBO", 0, "SI"),
                               //PieDerechoPlanoSiNo = GetServiceComponentFielValue(a.IdServicio, pstrComponentId, Constants.OSTEO_MUSCULAR_PIE_DERECHO_PLANO, "NOCOMBO", 0, "SI"),
                               //PieIzquierdoCavoSiNo = GetServiceComponentFielValue(a.IdServicio, pstrComponentId, Constants.OSTEO_MUSCULAR_PIE_IZQUIERDO_CAVO, "NOCOMBO", 0, "SI"),
                               //PieIzquierdoPlanoSiNo = GetServiceComponentFielValue(a.IdServicio, pstrComponentId, Constants.OSTEO_MUSCULAR_PIE_IZQUIERDO_PLANO, "NOCOMBO", 0, "SI"),
                               //ReflejoTotulianoDerechoSiNo = GetServiceComponentFielValue(a.IdServicio, pstrComponentId, Constants.OSTEO_MUSCULAR_REFLEJO_TOTULIANO_DERECHO, "SICOMBO", 187, "NO"),
                               //ReflejoTotulianoIzquierdoSiNo = GetServiceComponentFielValue(a.IdServicio, pstrComponentId, Constants.OSTEO_MUSCULAR_REFLEJO_TOTULIANO_IZQUIERDO, "SICOMBO", 187, "NO"),
                               //ReflejoAquileoDerechoSiNo = GetServiceComponentFielValue(a.IdServicio, pstrComponentId, Constants.OSTEO_MUSCULAR_REFLEJO_AQUILEO_DERECHO, "SICOMBO", 187, "NO"),
                               //ReflejoAquileoIzquierdoSiNo = GetServiceComponentFielValue(a.IdServicio, pstrComponentId, Constants.OSTEO_MUSCULAR_REFLEJO_AQUILEO_IZQUIERDO, "SICOMBO", 187, "NO"),
                               //TestPhalenDerechoSiNo = GetServiceComponentFielValue(a.IdServicio, pstrComponentId, Constants.OSTEO_MUSCULAR_TEST_PHALEN_DERECHO, "NOCOMBO", 0, "SI"),
                               //TestPhalenIzquierdoSiNo = GetServiceComponentFielValue(a.IdServicio, pstrComponentId, Constants.OSTEO_MUSCULAR_TEST_PHALEN_IZQUIERDA, "NOCOMBO", 0, "SI"),
                               //TestTinelDerechoSiNo = GetServiceComponentFielValue(a.IdServicio, pstrComponentId, Constants.OSTEO_MUSCULAR_TEST_TINEL_DERECHO, "NOCOMBO", 0, "SI"),
                               //TestTinelIzquierdoSiNo = GetServiceComponentFielValue(a.IdServicio, pstrComponentId, Constants.OSTEO_MUSCULAR_TEST_TINEL_IZQUIERDO, "NOCOMBO", 0, "SI"),
                               //SignoLasagueIzquierdoSiNo = GetServiceComponentFielValue(a.IdServicio, pstrComponentId, Constants.OSTEO_MUSCULAR_SIGNO_LASAGUE_IZQUIERDO, "NOCOMBO", 0, "SI"),
                               //SignoLasagueDerechoSiNo = GetServiceComponentFielValue(a.IdServicio, pstrComponentId, Constants.OSTEO_MUSCULAR_SIGNO_LASAGUE_DERECHO, "NOCOMBO", 0, "SI"),
                               //SignoBragardIzquierdoSiNo = GetServiceComponentFielValue(a.IdServicio, pstrComponentId, Constants.OSTEO_MUSCULAR_SIGNO_BRAGARD_IZQUIERDO, "NOCOMBO", 0, "SI"),
                               //SignoBragardDerechoSiNo = GetServiceComponentFielValue(a.IdServicio, pstrComponentId, Constants.OSTEO_MUSCULAR_SIGNO_BRAGARD_DERECHO, "NOCOMBO", 0, "SI"),
                               //TemporoMadibularNID = GetServiceComponentFielValue(a.IdServicio, pstrComponentId, Constants.OSTEO_MUSCULAR_TEMPERO_MANDIBULAR, "SICOMBO", 182, "SI"),
                               //TemporoMadibularObs = GetServiceComponentFielValue(a.IdServicio, pstrComponentId, Constants.OSTEO_MUSCULAR_TEMPERO_MANDIBULAR_DESCRIPCION, "NOCOMBO", 0, "SI"),
                               //HombroNID = GetServiceComponentFielValue(a.IdServicio, pstrComponentId, Constants.OSTEO_MUSCULAR_HOMBRO, "SICOMBO", 182, "SI"),
                               //HombroObs = GetServiceComponentFielValue(a.IdServicio, pstrComponentId, Constants.OSTEO_MUSCULAR_HOMBRO_DESCRIPCION, "NOCOMBO", 0, "SI"),
                               //CodoNID = GetServiceComponentFielValue(a.IdServicio, pstrComponentId, Constants.OSTEO_MUSCULAR_CODO, "SICOMBO", 182, "SI"),
                               //CodoObs = GetServiceComponentFielValue(a.IdServicio, pstrComponentId, Constants.OSTEO_MUSCULAR_CODO_DESCRIPCION, "NOCOMBO", 0, "SI"),
                               //MunecaNID = GetServiceComponentFielValue(a.IdServicio, pstrComponentId, Constants.OSTEO_MUSCULAR_MUNECA, "SICOMBO", 182, "SI"),
                               //MunecaObs = GetServiceComponentFielValue(a.IdServicio, pstrComponentId, Constants.OSTEO_MUSCULAR_MUNECA_DESCRIPCION, "NOCOMBO", 0, "SI"),
                               //InterfalangicaNID = GetServiceComponentFielValue(a.IdServicio, pstrComponentId, Constants.OSTEO_MUSCULAR_INTERFALANGICAS, "SICOMBO", 182, "SI"),
                               //InterfalangicaObs = GetServiceComponentFielValue(a.IdServicio, pstrComponentId, Constants.OSTEO_MUSCULAR_INTERFALANGICAS_DESCRIPCION, "NOCOMBO", 0, "SI"),
                               //CoxoFermoralNID = GetServiceComponentFielValue(a.IdServicio, pstrComponentId, Constants.OSTEO_MUSCULAR_COXOFEMORAL, "SICOMBO", 182, "SI"),
                               //CoxoFermoralObs = GetServiceComponentFielValue(a.IdServicio, pstrComponentId, Constants.OSTEO_MUSCULAR_COXOFEMORAL_DESCRIPCION, "NOCOMBO", 0, "SI"),
                               //RodillaNID = GetServiceComponentFielValue(a.IdServicio, pstrComponentId, Constants.OSTEO_MUSCULAR_RODILLA, "SICOMBO", 182, "SI"),
                               //RodillaObs = GetServiceComponentFielValue(a.IdServicio, pstrComponentId, Constants.OSTEO_MUSCULAR_RODILLA_DESCRIPCION, "NOCOMBO", 0, "SI"),
                               //TobilloPieNID = GetServiceComponentFielValue(a.IdServicio, pstrComponentId, Constants.OSTEO_MUSCULAR_TOBILLO_PIE, "SICOMBO", 182, "SI"),
                               //TobilloPieObs = GetServiceComponentFielValue(a.IdServicio, pstrComponentId, Constants.OSTEO_MUSCULAR_TOBILLO_PIE_DESCRIPCION, "NOCOMBO", 0, "SI"),
                               //ColumnaCervicalSiNo = GetServiceComponentFielValue(a.IdServicio, pstrComponentId, Constants.OSTEO_MUSCULAR_COLUMNA_CERVICAL, "SICOMBO", 111, "SI"),
                               //ColumnaCervicalObs = GetServiceComponentFielValue(a.IdServicio, pstrComponentId, Constants.OSTEO_MUSCULAR_COLUMNA_CERVICAL_DESCRIPCION, "NOCOMBO", 0, "SI"),
                               //ColumnaDorsalSiNo = GetServiceComponentFielValue(a.IdServicio, pstrComponentId, Constants.OSTEO_MUSCULAR_COLUMNA_DORSAL, "SICOMBO", 111, "SI"),
                               //ColumnaDorsalObs = GetServiceComponentFielValue(a.IdServicio, pstrComponentId, Constants.OSTEO_MUSCULAR_COLUMNA_DORSAL_DESCRIPCION, "NOCOMBO", 0, "SI"),
                               //DorsoLumbarSiNo = GetServiceComponentFielValue(a.IdServicio, pstrComponentId, Constants.OSTEO_MUSCULAR_COLUMNA_DORSO_LUMBAR, "SICOMBO", 111, "SI"),
                               //DorsoLumbarObs = GetServiceComponentFielValue(a.IdServicio, pstrComponentId, Constants.OSTEO_MUSCULAR_COLUMNA_DORSO_LUMBAR_DESCRIPCION, "NOCOMBO", 0, "SI"),
                               //LumbroSacraSiNo = GetServiceComponentFielValue(a.IdServicio, pstrComponentId, Constants.OSTEO_MUSCULAR_COLUMNA_LUMBOSACRA, "SICOMBO", 111, "SI"),
                               //LumbroSacraObs = GetServiceComponentFielValue(a.IdServicio, pstrComponentId, Constants.OSTEO_MUSCULAR_COLUMNA_LUMBOSACRA_DESCRIPCION, "NOCOMBO", 0, "SI"),
                               //CondralesSiNo = GetServiceComponentFielValue(a.IdServicio, pstrComponentId, Constants.OSTEO_MUSCULAR_COSTO_CONDRALES, "SICOMBO", 111, "SI"),
                               //CondralesObs = GetServiceComponentFielValue(a.IdServicio, pstrComponentId, Constants.OSTEO_MUSCULAR_COSTO_CONDRALES_DESCRIPCION, "NOCOMBO", 0, "SI"),
                               //CostoEsternalesSiNo = GetServiceComponentFielValue(a.IdServicio, pstrComponentId, Constants.OSTEO_MUSCULAR_COSTO_ESTERNALES, "SICOMBO", 111, "SI"),
                               //CostoEsternalesObs = GetServiceComponentFielValue(a.IdServicio, pstrComponentId, Constants.OSTEO_MUSCULAR_COSTO_ESTERNALES_DESCRIPCION, "NOCOMBO", 0, "SI"),                               
                               //Descripcion = GetServiceComponentFielValue(a.IdServicio, pstrComponentId, Constants.OSTEO_MUSCULAR_DESCRIPCION_ID, "NOCOMBO", 0, "SI"),                              
                               //Aptitud = GetServiceComponentFielValue(a.IdServicio, pstrComponentId, Constants.OSTEO_MUSCULAR_APTITUD_ID, "SICOMBO", 163, "NO"),

                               Hallazgos = GetDiagnosticByServiceIdAndComponent(a.IdServicio, Constants.OSTEO_MUSCULAR_ID),
                               Recomendacion = GetRecommendationByServiceIdAndComponent(a.IdServicio, Constants.OSTEO_MUSCULAR_ID),
                               HuellaTrabajador = a.HuellaTrabajador,

                               b_Logo = MedicalCenter.b_Image,
                               EmpresaPropietaria = MedicalCenter.v_Name,
                               EmpresaPropietariaDireccion = MedicalCenter.v_Address,
                               EmpresaPropietariaTelefono = MedicalCenter.v_PhoneNumber,
                               EmpresaPropietariaEmail = MedicalCenter.v_Mail,

                           }).ToList();

                return sql;
            }
            catch (Exception)
            {

                throw;
            }
        }

        private string GetDiagnosticByServiceId(string pstrServiceId)
        {
            SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
            var query = (from ccc in dbContext.diagnosticrepository
                         join ddd in dbContext.diseases on ccc.v_DiseasesId equals ddd.v_DiseasesId  // Diagnosticos      
                         where ccc.v_ServiceId == pstrServiceId &&
                               ccc.i_IsDeleted == 0
                         select new
                         {
                             v_DiseasesName = ddd.v_Name

                         }).ToList();


            return string.Join(", ", query.Select(p => p.v_DiseasesName));
        }

        private string GetRecommendationByServiceId(string pstrServiceId)
        {
            SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
            var query = (from ccc in dbContext.recommendation
                         join ddd in dbContext.masterrecommendationrestricction on ccc.v_MasterRecommendationId equals ddd.v_MasterRecommendationRestricctionId  // Diagnosticos      
                         where ccc.v_ServiceId == pstrServiceId &&
                               ccc.i_IsDeleted == 0
                         select new
                         {
                             v_Recommendation = ddd.v_Name

                         }).ToList();


            return string.Join(", ", query.Select(p => p.v_Recommendation));
        }

        private List<RecomendationList> GetListRecommendationByServiceId(string pstrServiceId)
        {
            int isDeleted = (int)SiNo.NO;

            SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
            var query = (from ccc in dbContext.recommendation
                         join ddd in dbContext.masterrecommendationrestricction on ccc.v_MasterRecommendationId equals ddd.v_MasterRecommendationRestricctionId  // Diagnosticos      
                         where ccc.v_ServiceId == pstrServiceId &&
                               ccc.i_IsDeleted == isDeleted
                         select new RecomendationList
                         {
                             v_RecommendationName = ddd.v_Name
                         }).ToList();


            return query;
        }

        public string GetDiagnosticByServiceIdAndComponent(string pstrServiceId, string pstrComponent)
        {
            SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
            var query = (from ccc in dbContext.diagnosticrepository
                         join ddd in dbContext.diseases on ccc.v_DiseasesId equals ddd.v_DiseasesId into ddd_join
                         from ddd in ddd_join.DefaultIfEmpty()

                         join eee in dbContext.recommendation on new { a = pstrServiceId, b = pstrComponent }
                                                                    equals new { a = eee.v_ServiceId, b = eee.v_ComponentId } into eee_join
                         from eee in eee_join.DefaultIfEmpty()

                         join fff in dbContext.masterrecommendationrestricction on eee.v_MasterRecommendationId
                                                                equals fff.v_MasterRecommendationRestricctionId into fff_join
                         from fff in fff_join.DefaultIfEmpty()

                         where ccc.v_ServiceId == pstrServiceId && ccc.v_ComponentId == pstrComponent &&
                               ccc.i_IsDeleted == 0
                         select new
                         {
                             v_DiseasesName = ddd.v_Name
                         }).Distinct().ToList();


            return string.Join(", ", query.Select(p => p.v_DiseasesName));
        }


        public string GetDiagnosticByServiceIdAndComponentWithseparator(string pstrServiceId, string pstrComponent, string separator)
        {
            SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

            var query = (from ccc in dbContext.diagnosticrepository
                         join ddd in dbContext.diseases on ccc.v_DiseasesId equals ddd.v_DiseasesId into ddd_join
                         from ddd in ddd_join.DefaultIfEmpty()

                         //join eee in dbContext.recommendation on new { a = pstrServiceId, b = pstrComponent }
                         //                                           equals new { a = eee.v_ServiceId, b = eee.v_ComponentId } into eee_join
                         //from eee in eee_join.DefaultIfEmpty()

                         //join fff in dbContext.masterrecommendationrestricction on eee.v_MasterRecommendationId
                         //                                       equals fff.v_MasterRecommendationRestricctionId into fff_join
                         //from fff in fff_join.DefaultIfEmpty()

                         where ccc.v_ServiceId == pstrServiceId &&
                               ccc.v_ComponentId == pstrComponent &&
                               ccc.i_IsDeleted == 0 &&
                               ddd.i_IsDeleted == 0
                         //eee.i_IsDeleted == 0 && 
                         //fff.i_IsDeleted == 0
                         select new
                         {
                             v_DiseasesName = ddd.v_Name + "     (CIE10: " + ddd.v_CIE10Id + ")"
                         }).ToList();


            return string.Join(separator + " ", query.Select(p => p.v_DiseasesName));
        }


        public string GetDiagnosticForAudiometria(string pstrServiceId, string pstrComponent)
        {
            SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
            var query = (from ccc in dbContext.diagnosticrepository
                         join ddd in dbContext.diseases on ccc.v_DiseasesId equals ddd.v_DiseasesId into ddd_join
                         from ddd in ddd_join.DefaultIfEmpty()

                         where ccc.v_ServiceId == pstrServiceId && ccc.v_ComponentId == pstrComponent &&
                               ccc.i_IsDeleted == 0
                         select new
                         {
                             v_DiseasesName = ddd.v_Name
                         }).ToList();


            return string.Join(", ", query.Select(p => p.v_DiseasesName));
        }

        // new Alejandro
        public string GetDiagnosticByServiceIdAndComponentContains(string pstrServiceId, string pstrComponent)
        {
            SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

            var arrayComponents = pstrComponent.Split('|');

            var query = (from ccc in dbContext.diagnosticrepository
                         join ddd in dbContext.diseases on ccc.v_DiseasesId equals ddd.v_DiseasesId into ddd_join
                         from ddd in ddd_join.DefaultIfEmpty()

                         where (ccc.v_ServiceId == pstrServiceId) &&
                               (arrayComponents.Contains(ccc.v_ComponentId)) &&
                               (ccc.i_IsDeleted == 0)
                         //&&
                         //(ccc.i_FinalQualificationId == (int)FinalQualification.Definitivo ||
                         // ccc.i_FinalQualificationId == (int)FinalQualification.Presuntivo)
                         select new
                         {
                             v_DiseasesName = ddd.v_Name
                         }).ToList();


            return string.Join("| ", query.Select(p => p.v_DiseasesName));
        }

        // new Alejandro
        private string GetRecommendationByServiceIdAndComponentContains(string pstrServiceId, string pstrComponent)
        {
            SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

            var arrayComponents = pstrComponent.Split('|');

            var query = (from ccc in dbContext.recommendation
                         join ddd in dbContext.masterrecommendationrestricction on ccc.v_MasterRecommendationId equals ddd.v_MasterRecommendationRestricctionId  // Diagnosticos      
                         where (ccc.v_ServiceId == pstrServiceId) &&
                               (arrayComponents.Contains(ccc.v_ComponentId)) &&
                               (ccc.i_IsDeleted == 0)
                         select new
                         {
                             v_Recommendation = ddd.v_Name

                         }).ToList();


            return string.Join("| ", query.Select(p => p.v_Recommendation));
        }

        private string GetRecommendationByServiceIdAndComponent(string pstrServiceId, string pstrComponent)
        {
            SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

            var query = (from ccc in dbContext.recommendation
                         join ddd in dbContext.masterrecommendationrestricction on ccc.v_MasterRecommendationId equals ddd.v_MasterRecommendationRestricctionId  // Diagnosticos      
                         where ccc.v_ServiceId == pstrServiceId &&
                                ccc.v_ComponentId == pstrComponent &&
                               ccc.i_IsDeleted == 0
                         select new
                         {
                             v_Recommendation = ddd.v_Name

                         }).ToList();


            return string.Join(", ", query.Select(p => p.v_Recommendation));
        }

        private string GetRecommendationByServiceIdAndComponent(string pstrServiceId, string pstrComponent, string separator)
        {
            SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

            var query = (from ccc in dbContext.recommendation
                         join ddd in dbContext.masterrecommendationrestricction on ccc.v_MasterRecommendationId equals ddd.v_MasterRecommendationRestricctionId  // Diagnosticos      
                         where ccc.v_ServiceId == pstrServiceId &&
                                ccc.v_ComponentId == pstrComponent &&
                               ccc.i_IsDeleted == 0
                         select new
                         {
                             v_Recommendation = ddd.v_Name

                         }).ToList();


            return string.Join(separator + " ", query.Select(p => p.v_Recommendation));
        }


        // Alejandro
        private string GetRestrictionByServiceIdAndComponentWithSeparator(string pstrServiceId, string pstrComponent, string separator)
        {
            SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

            var query = (from ccc in dbContext.restriction
                         join ddd in dbContext.masterrecommendationrestricction on ccc.v_MasterRestrictionId equals ddd.v_MasterRecommendationRestricctionId  // Diagnosticos      
                         where ccc.v_ServiceId == pstrServiceId && ccc.v_ComponentId == pstrComponent &&
                               ccc.i_IsDeleted == 0
                         select new
                         {
                             v_Restriction = ddd.v_Name

                         }).ToList();


            return string.Join(separator + " ", query.Select(p => p.v_Restriction));
        }

        // Alberto
        public List<ReportFichaErgonometrica> GetReportPruebaEsfuerzo(string pstrserviceId, string pstrComponentId)
        {
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                var objEntity = (from A in dbContext.service
                                 join B in dbContext.person on A.v_PersonId equals B.v_PersonId
                                 join C in dbContext.protocol on A.v_ProtocolId equals C.v_ProtocolId
                                 join D in dbContext.organization on C.v_CustomerOrganizationId equals D.v_OrganizationId
                                 join E in dbContext.servicecomponent on new { a = A.v_ServiceId, b = pstrComponentId }
                                                                        equals new { a = E.v_ServiceId, b = E.v_ComponentId }

                                 join J1 in dbContext.datahierarchy on new { a = B.i_LevelOfId.Value, b = 108 }
                                                                    equals new { a = J1.i_ItemId, b = J1.i_GroupId } into J1_join
                                 from J1 in J1_join.DefaultIfEmpty()
                                 join F in dbContext.systemuser on E.i_InsertUserId equals F.i_SystemUserId
                                 join G in dbContext.professional on F.v_PersonId equals G.v_PersonId

                                 join M in dbContext.systemparameter on new { a = B.i_SexTypeId.Value, b = 100 }
                                     equals new { a = M.i_ParameterId, b = M.i_GroupId } into M_join
                                 from M in M_join.DefaultIfEmpty()

                                 // Usuario Medico Evaluador / Medico Aprobador ****************************
                                 join me in dbContext.systemuser on E.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
                                 from me in me_join.DefaultIfEmpty()

                                 join pme in dbContext.professional on me.v_PersonId equals pme.v_PersonId into pme_join
                                 from pme in pme_join.DefaultIfEmpty()

                                 // Usuario Tecnologo *************************************
                                 join tec in dbContext.systemuser on E.i_UpdateUserTechnicalDataRegisterId equals tec.i_SystemUserId into tec_join
                                 from tec in tec_join.DefaultIfEmpty()

                                 join ptec in dbContext.professional on tec.v_PersonId equals ptec.v_PersonId into ptec_join
                                 from ptec in ptec_join.DefaultIfEmpty()
                                 // *******************************************************       


                                 join X in dbContext.person on me.v_PersonId equals X.v_PersonId into X_join
                                 from X in X_join.DefaultIfEmpty()

                                 join Y in dbContext.person on tec.v_PersonId equals Y.v_PersonId into Y_join
                                 from Y in Y_join.DefaultIfEmpty()

                                 where A.v_ServiceId == pstrserviceId

                                 select new ReportFichaErgonometrica
                                 {
                                     Ficha = E.v_ComponentId,
                                     HistoriaClinica = A.v_ServiceId,
                                     v_FullPersonName = B.v_FirstLastName + " " + B.v_SecondLastName + " " + B.v_FirstName,

                                     d_BirthDate = B.d_Birthdate,
                                     d_ServiceDate = A.d_ServiceDate,

                                     Genero = M.v_Value1,
                                     FirmaTecnologo = ptec.b_SignatureImage,
                                     FirmaMedico = pme.b_SignatureImage,

                                     NombreDoctor = X.v_FirstLastName + " " + X.v_SecondLastName + " " + X.v_FirstName,
                                     NombreTecnico = Y.v_FirstLastName + " " + Y.v_SecondLastName + " " + Y.v_FirstName,

                                 });

                var MedicalCenter = GetInfoMedicalCenter();
                var fichaErgo = ValoresComponente(pstrserviceId, pstrComponentId);

                #region Campos


                var DiagnosticoClinico = fichaErgo.Find(p => p.v_ComponentFieldId == Constants.PRUEBA_ESFUERZO_DIAGNOSTICO_CLINICO_ID);
                var Medicacion = fichaErgo.Find(p => p.v_ComponentFieldId == Constants.PRUEBA_ESFUERZO_MEDICACION_ID);
                var EKGBasal = fichaErgo.Find(p => p.v_ComponentFieldId == Constants.PRUEBA_ESFUERZO_EKG_BASAL_ID);
                var Metodo = fichaErgo.Find(p => p.v_ComponentFieldId == Constants.PRUEBA_ESFUERZO_METODO_ID);
                var Protocolo = fichaErgo.Find(p => p.v_ComponentFieldId == Constants.PRUEBA_ESFUERZO_PROTOCOLO_ID);
                var FCMax = fichaErgo.Find(p => p.v_ComponentFieldId == Constants.PRUEBA_ESFUERZO_FC_MAX_ID);
                var FCSubMax = fichaErgo.Find(p => p.v_ComponentFieldId == Constants.PRUEBA_ESFUERZO_FC_SUB_MAX_ID);
                var PAInicial = fichaErgo.Find(p => p.v_ComponentFieldId == Constants.PRUEBA_ESFUERZO_PA_INICIAL_ID);
                var FCInicial = fichaErgo.Find(p => p.v_ComponentFieldId == Constants.PRUEBA_ESFUERZO_FC_INICIAL_ID);

                var Etapa1MIN = fichaErgo.Find(p => p.v_ComponentFieldId == Constants.PRUEBA_ESFUERZO_ETAPA_1_MIN_ID);
                var Etapa1PA = fichaErgo.Find(p => p.v_ComponentFieldId == Constants.PRUEBA_ESFUERZO_ETAPA_1_PA_ID);
                var Etapa1FC = fichaErgo.Find(p => p.v_ComponentFieldId == Constants.PRUEBA_ESFUERZO_ETAPA_1_FC_ID);
                var Etapa1ST = fichaErgo.Find(p => p.v_ComponentFieldId == Constants.PRUEBA_ESFUERZO_ETAPA_1_ST_ID);
                var Etapa1Arritmia = fichaErgo.Find(p => p.v_ComponentFieldId == Constants.PRUEBA_ESFUERZO_ETAPA_1_ARRITMIA_ID);
                var Etapa1Sintomas = fichaErgo.Find(p => p.v_ComponentFieldId == Constants.PRUEBA_ESFUERZO_ETAPA_1_SINTOMAS_ID);

                var Etapa2MIN = fichaErgo.Find(p => p.v_ComponentFieldId == Constants.PRUEBA_ESFUERZO_ETAPA_2_MIN_ID);
                var Etapa2PA = fichaErgo.Find(p => p.v_ComponentFieldId == Constants.PRUEBA_ESFUERZO_ETAPA_2_PA_ID);
                var Etapa2FC = fichaErgo.Find(p => p.v_ComponentFieldId == Constants.PRUEBA_ESFUERZO_ETAPA_2_FC_ID);
                var Etapa2ST = fichaErgo.Find(p => p.v_ComponentFieldId == Constants.PRUEBA_ESFUERZO_ETAPA_2_ST_ID);
                var Etapa2Arritmia = fichaErgo.Find(p => p.v_ComponentFieldId == Constants.PRUEBA_ESFUERZO_ETAPA_2_ARRITMIA_ID);
                var Etapa2Sintomas = fichaErgo.Find(p => p.v_ComponentFieldId == Constants.PRUEBA_ESFUERZO_ETAPA_2_SINTOMAS_ID);

                var Etapa3MIN = fichaErgo.Find(p => p.v_ComponentFieldId == Constants.PRUEBA_ESFUERZO_ETAPA_3_MIN_ID);
                var Etapa3PA = fichaErgo.Find(p => p.v_ComponentFieldId == Constants.PRUEBA_ESFUERZO_ETAPA_3_PA_ID);
                var Etapa3FC = fichaErgo.Find(p => p.v_ComponentFieldId == Constants.PRUEBA_ESFUERZO_ETAPA_3_FC_ID);
                var Etapa3ST = fichaErgo.Find(p => p.v_ComponentFieldId == Constants.PRUEBA_ESFUERZO_ETAPA_3_ST_ID);
                var Etapa3Arritmia = fichaErgo.Find(p => p.v_ComponentFieldId == Constants.PRUEBA_ESFUERZO_ETAPA_3_ARRITMIA_ID);
                var Etapa3Sintomas = fichaErgo.Find(p => p.v_ComponentFieldId == Constants.PRUEBA_ESFUERZO_ETAPA_3_SINTOMAS_ID);

                var Etapa4MIN = fichaErgo.Find(p => p.v_ComponentFieldId == Constants.PRUEBA_ESFUERZO_ETAPA_4_MIN_ID);
                var Etapa4PA = fichaErgo.Find(p => p.v_ComponentFieldId == Constants.PRUEBA_ESFUERZO_ETAPA_4_PA_ID);
                var Etapa4FC = fichaErgo.Find(p => p.v_ComponentFieldId == Constants.PRUEBA_ESFUERZO_ETAPA_4_FC_ID);
                var Etapa4ST = fichaErgo.Find(p => p.v_ComponentFieldId == Constants.PRUEBA_ESFUERZO_ETAPA_4_ST_ID);
                var Etapa4Arritmia = fichaErgo.Find(p => p.v_ComponentFieldId == Constants.PRUEBA_ESFUERZO_ETAPA_4_ARRITMIA_ID);
                var Etapa4Sintomas = fichaErgo.Find(p => p.v_ComponentFieldId == Constants.PRUEBA_ESFUERZO_ETAPA_4_SINTOMAS_ID);

                var Etapa5MIN = fichaErgo.Find(p => p.v_ComponentFieldId == Constants.PRUEBA_ESFUERZO_ETAPA_5_MIN_ID);
                var Etapa5PA = fichaErgo.Find(p => p.v_ComponentFieldId == Constants.PRUEBA_ESFUERZO_ETAPA_5_PA_ID);
                var Etapa5FC = fichaErgo.Find(p => p.v_ComponentFieldId == Constants.PRUEBA_ESFUERZO_ETAPA_5_FC_ID);
                var Etapa5ST = fichaErgo.Find(p => p.v_ComponentFieldId == Constants.PRUEBA_ESFUERZO_ETAPA_5_ST_ID);
                var Etapa5Arritmia = fichaErgo.Find(p => p.v_ComponentFieldId == Constants.PRUEBA_ESFUERZO_ETAPA_5_ARRITMIA_ID);
                var Etapa5Sintomas = fichaErgo.Find(p => p.v_ComponentFieldId == Constants.PRUEBA_ESFUERZO_ETAPA_5_SINTOMAS_ID);

                var EtapaRecuperacion1MIN = fichaErgo.Find(p => p.v_ComponentFieldId == Constants.PRUEBA_ESFUERZO_RECUPERACION_ETAPA_1_MIN_ID);
                var EtapaRecuperacion1PA = fichaErgo.Find(p => p.v_ComponentFieldId == Constants.PRUEBA_ESFUERZO_RECUPERACION_ETAPA_1_PA_ID);
                var EtapaRecuperacion1FC = fichaErgo.Find(p => p.v_ComponentFieldId == Constants.PRUEBA_ESFUERZO_RECUPERACION_ETAPA_1_FC_ID);
                var EtapaRecuperacion1ST = fichaErgo.Find(p => p.v_ComponentFieldId == Constants.PRUEBA_ESFUERZO_RECUPERACION_ETAPA_1_ST_ID);
                var EtapaRecuperacion1Arritmia = fichaErgo.Find(p => p.v_ComponentFieldId == Constants.PRUEBA_ESFUERZO_RECUPERACION_ETAPA_1_ARRITMIA_ID);
                var EtapaRecuperacion1Sintomas = fichaErgo.Find(p => p.v_ComponentFieldId == Constants.PRUEBA_ESFUERZO_RECUPERACION_ETAPA_1_SINTOMAS_ID);

                var EtapaRecuperacion2MIN = fichaErgo.Find(p => p.v_ComponentFieldId == Constants.PRUEBA_ESFUERZO_RECUPERACION_ETAPA_2_MIN_ID);
                var EtapaRecuperacion2PA = fichaErgo.Find(p => p.v_ComponentFieldId == Constants.PRUEBA_ESFUERZO_RECUPERACION_ETAPA_2_PA_ID);
                var EtapaRecuperacion2FC = fichaErgo.Find(p => p.v_ComponentFieldId == Constants.PRUEBA_ESFUERZO_RECUPERACION_ETAPA_2_FC_ID);
                var EtapaRecuperacion2ST = fichaErgo.Find(p => p.v_ComponentFieldId == Constants.PRUEBA_ESFUERZO_RECUPERACION_ETAPA_2_ST_ID);
                var EtapaRecuperacion2Arritmia = fichaErgo.Find(p => p.v_ComponentFieldId == Constants.PRUEBA_ESFUERZO_RECUPERACION_ETAPA_2_ARRITMIA_ID);
                var EtapaRecuperacion2Sintomas = fichaErgo.Find(p => p.v_ComponentFieldId == Constants.PRUEBA_ESFUERZO_RECUPERACION_ETAPA_2_SINTOMAS_ID);

                var EtapaRecuperacion3MIN = fichaErgo.Find(p => p.v_ComponentFieldId == Constants.PRUEBA_ESFUERZO_RECUPERACION_ETAPA_3_MIN_ID);
                var EtapaRecuperacion3PA = fichaErgo.Find(p => p.v_ComponentFieldId == Constants.PRUEBA_ESFUERZO_RECUPERACION_ETAPA_3_PA_ID);
                var EtapaRecuperacion3FC = fichaErgo.Find(p => p.v_ComponentFieldId == Constants.PRUEBA_ESFUERZO_RECUPERACION_ETAPA_3_FC_ID);
                var EtapaRecuperacion3ST = fichaErgo.Find(p => p.v_ComponentFieldId == Constants.PRUEBA_ESFUERZO_RECUPERACION_ETAPA_3_ST_ID);
                var EtapaRecuperacion3Arritmia = fichaErgo.Find(p => p.v_ComponentFieldId == Constants.PRUEBA_ESFUERZO_RECUPERACION_ETAPA_3_ARRITMIA_ID);
                var EtapaRecuperacion3Sintomas = fichaErgo.Find(p => p.v_ComponentFieldId == Constants.PRUEBA_ESFUERZO_RECUPERACION_ETAPA_3_SINTOMAS_ID);

                var CapacidadFuncional = fichaErgo.Find(p => p.v_ComponentFieldId == Constants.PRUEBA_ESFUERZO_CAPACIDAD_FUNCIONAL_ID);
                var RespuestaPresora = fichaErgo.Find(p => p.v_ComponentFieldId == Constants.PRUEBA_ESFUERZO_RESPUESTA_PRESORA_ID);
                var RespuestaCronotropica = fichaErgo.Find(p => p.v_ComponentFieldId == Constants.PRUEBA_ESFUERZO_RESPUESTA_CONOTROPICA_ID);
                var RespuestaIsquemica = fichaErgo.Find(p => p.v_ComponentFieldId == Constants.PRUEBA_ESFUERZO_RESPUESTA_ISQUEMICA_ID);
                var Sugerencias = fichaErgo.Find(p => p.v_ComponentFieldId == Constants.PRUEBA_ESFUERZO_SUGERENCIA_ID);

                #endregion

                var sql = (from a in objEntity.ToList()
                           select new ReportFichaErgonometrica
                           {
                               Ficha = a.Ficha,
                               HistoriaClinica = a.HistoriaClinica,
                               v_FullPersonName = a.v_FullPersonName,
                               //d_BirthDate = a.d_BirthDate,
                               v_ServiceDate = a.d_ServiceDate.Value.ToShortDateString(),
                               Edad = GetAge(a.d_BirthDate.Value),
                               Genero = a.Genero,
                               FirmaTecnologo = a.FirmaTecnologo,
                               FirmaMedico = a.FirmaMedico,

                               NombreDoctor = a.NombreDoctor,
                               NombreTecnico = a.NombreTecnico,


                               DiagnosticoClinico = DiagnosticoClinico == null ? string.Empty : DiagnosticoClinico.v_Value1,
                               Medicacion = Medicacion == null ? string.Empty : Medicacion.v_Value1,
                               EKGBasal = EKGBasal == null ? string.Empty : EKGBasal.v_Value1,
                               Metodo = Metodo == null ? string.Empty : Metodo.v_Value1,
                               Protocolo = Protocolo == null ? string.Empty : Protocolo.v_Value1,
                               FCMax = FCMax == null ? string.Empty : FCMax.v_Value1,
                               FCSubMax = FCSubMax == null ? string.Empty : FCSubMax.v_Value1,
                               PAInicial = PAInicial == null ? string.Empty : PAInicial.v_Value1,
                               FCInicial = FCInicial == null ? string.Empty : FCInicial.v_Value1,

                               Etapa1MIN = Etapa1MIN == null ? string.Empty : Etapa1MIN.v_Value1,
                               Etapa1PA = Etapa1PA == null ? string.Empty : Etapa1PA.v_Value1,
                               Etapa1FC = Etapa1FC == null ? string.Empty : Etapa1FC.v_Value1,
                               Etapa1ST = Etapa1FC == null ? string.Empty : Etapa1FC.v_Value1Name,
                               Etapa1Arritmia = Etapa1FC == null ? string.Empty : Etapa1FC.v_Value1Name,
                               Etapa1Sintomas = Etapa1FC == null ? string.Empty : Etapa1FC.v_Value1Name,

                               Etapa2MIN = Etapa2MIN == null ? string.Empty : Etapa2MIN.v_Value1,
                               Etapa2PA = Etapa2PA == null ? string.Empty : Etapa2PA.v_Value1,
                               Etapa2FC = Etapa2FC == null ? string.Empty : Etapa2FC.v_Value1,
                               Etapa2ST = Etapa2ST == null ? string.Empty : Etapa2ST.v_Value1Name,
                               Etapa2Arritmia = Etapa2Arritmia == null ? string.Empty : Etapa2Arritmia.v_Value1Name,
                               Etapa2Sintomas = Etapa2Sintomas == null ? string.Empty : Etapa2Sintomas.v_Value1Name,

                               Etapa3MIN = Etapa3MIN == null ? string.Empty : Etapa3MIN.v_Value1,
                               Etapa3PA = Etapa3PA == null ? string.Empty : Etapa3PA.v_Value1,
                               Etapa3FC = Etapa3FC == null ? string.Empty : Etapa3FC.v_Value1,
                               Etapa3ST = Etapa3ST == null ? string.Empty : Etapa3ST.v_Value1Name,
                               Etapa3Arritmia = Etapa3Arritmia == null ? string.Empty : Etapa3Arritmia.v_Value1Name,
                               Etapa3Sintomas = Etapa3Sintomas == null ? string.Empty : Etapa3Sintomas.v_Value1Name,

                               Etapa4MIN = Etapa4MIN == null ? string.Empty : Etapa4MIN.v_Value1,
                               Etapa4PA = Etapa4PA == null ? string.Empty : Etapa4PA.v_Value1,
                               Etapa4FC = Etapa4FC == null ? string.Empty : Etapa4FC.v_Value1,
                               Etapa4ST = Etapa4ST == null ? string.Empty : Etapa4ST.v_Value1Name,
                               Etapa4Arritmia = Etapa4Arritmia == null ? string.Empty : Etapa4Arritmia.v_Value1Name,
                               Etapa4Sintomas = Etapa4Sintomas == null ? string.Empty : Etapa4Sintomas.v_Value1Name,

                               Etapa5MIN = Etapa5MIN == null ? string.Empty : Etapa5MIN.v_Value1,
                               Etapa5PA = Etapa5PA == null ? string.Empty : Etapa5PA.v_Value1,
                               Etapa5FC = Etapa5FC == null ? string.Empty : Etapa5FC.v_Value1,
                               Etapa5ST = Etapa5ST == null ? string.Empty : Etapa5ST.v_Value1Name,
                               Etapa5Arritmia = Etapa5Arritmia == null ? string.Empty : Etapa5Arritmia.v_Value1Name,
                               Etapa5Sintomas = Etapa5Sintomas == null ? string.Empty : Etapa5Sintomas.v_Value1Name,

                               EtapaRecuperacion1MIN = EtapaRecuperacion1MIN == null ? string.Empty : EtapaRecuperacion1MIN.v_Value1,
                               EtapaRecuperacion1PA = EtapaRecuperacion1PA == null ? string.Empty : EtapaRecuperacion1PA.v_Value1,
                               EtapaRecuperacion1FC = EtapaRecuperacion1FC == null ? string.Empty : EtapaRecuperacion1FC.v_Value1,
                               EtapaRecuperacion1ST = EtapaRecuperacion1ST == null ? string.Empty : EtapaRecuperacion1ST.v_Value1Name,
                               EtapaRecuperacion1Arritmia = EtapaRecuperacion1Arritmia == null ? string.Empty : EtapaRecuperacion1Arritmia.v_Value1Name,
                               EtapaRecuperacion1Sintomas = EtapaRecuperacion1Sintomas == null ? string.Empty : EtapaRecuperacion1Sintomas.v_Value1Name,

                               EtapaRecuperacion2MIN = EtapaRecuperacion2MIN == null ? string.Empty : EtapaRecuperacion2MIN.v_Value1,
                               EtapaRecuperacion2PA = EtapaRecuperacion2PA == null ? string.Empty : EtapaRecuperacion2PA.v_Value1,
                               EtapaRecuperacion2FC = EtapaRecuperacion2FC == null ? string.Empty : EtapaRecuperacion2FC.v_Value1,
                               EtapaRecuperacion2ST = EtapaRecuperacion2ST == null ? string.Empty : EtapaRecuperacion2ST.v_Value1Name,
                               EtapaRecuperacion2Arritmia = EtapaRecuperacion2Arritmia == null ? string.Empty : EtapaRecuperacion2Arritmia.v_Value1Name,
                               EtapaRecuperacion2Sintomas = EtapaRecuperacion2Sintomas == null ? string.Empty : EtapaRecuperacion2Sintomas.v_Value1Name,

                               EtapaRecuperacion3MIN = EtapaRecuperacion3MIN == null ? string.Empty : EtapaRecuperacion3MIN.v_Value1,
                               EtapaRecuperacion3PA = EtapaRecuperacion3PA == null ? string.Empty : EtapaRecuperacion3PA.v_Value1,
                               EtapaRecuperacion3FC = EtapaRecuperacion3FC == null ? string.Empty : EtapaRecuperacion3FC.v_Value1,
                               EtapaRecuperacion3ST = EtapaRecuperacion3ST == null ? string.Empty : EtapaRecuperacion3ST.v_Value1Name,
                               EtapaRecuperacion3Arritmia = EtapaRecuperacion3Arritmia == null ? string.Empty : EtapaRecuperacion3Arritmia.v_Value1Name,
                               EtapaRecuperacion3Sintomas = EtapaRecuperacion3Sintomas == null ? string.Empty : EtapaRecuperacion3Sintomas.v_Value1Name,

                               CapacidadFuncional = CapacidadFuncional == null ? string.Empty : CapacidadFuncional.v_Value1,
                               RespuestaPresora = RespuestaPresora == null ? string.Empty : RespuestaPresora.v_Value1,
                               RespuestaCronotropica = RespuestaCronotropica == null ? string.Empty : RespuestaCronotropica.v_Value1,
                               RespuestaIsquemica = RespuestaIsquemica == null ? string.Empty : RespuestaIsquemica.v_Value1,
                               Sugerencias = Sugerencias == null ? string.Empty : Sugerencias.v_Value1,

                               b_Logo = MedicalCenter.b_Image,
                               EmpresaPropietaria = MedicalCenter.v_Name,
                               EmpresaPropietariaDireccion = MedicalCenter.v_Address,
                               EmpresaPropietariaTelefono = MedicalCenter.v_PhoneNumber,
                               EmpresaPropietariaEmail = MedicalCenter.v_Mail,

                           }).ToList();

                return sql;
            }
            catch (Exception)
            {

                throw;
            }
        }

        // Alberto
        public List<ReportEstudioElectrocardiografico> GetReportEstudioElectrocardiografico(string pstrserviceId, string pstrComponentId)
        {
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                var objEntity = (from A in dbContext.service
                                 join B in dbContext.person on A.v_PersonId equals B.v_PersonId
                                 join C in dbContext.protocol on A.v_ProtocolId equals C.v_ProtocolId
                                 join D in dbContext.organization on C.v_CustomerOrganizationId equals D.v_OrganizationId
                                 join E in dbContext.servicecomponent on new { a = A.v_ServiceId, b = pstrComponentId }
                                                                        equals new { a = E.v_ServiceId, b = E.v_ComponentId }

                                 join J1 in dbContext.datahierarchy on new { a = B.i_LevelOfId.Value, b = 108 }
                                                                    equals new { a = J1.i_ItemId, b = J1.i_GroupId } into J1_join
                                 from J1 in J1_join.DefaultIfEmpty()

                                 join F in dbContext.systemuser on E.i_InsertUserId equals F.i_SystemUserId into F_join
                                 from F in F_join.DefaultIfEmpty()

                                 join G in dbContext.professional on F.v_PersonId equals G.v_PersonId into G_join
                                 from G in G_join.DefaultIfEmpty()

                                 join M in dbContext.systemparameter on new { a = B.i_SexTypeId.Value, b = 100 }
                                     equals new { a = M.i_ParameterId, b = M.i_GroupId } into M_join
                                 from M in M_join.DefaultIfEmpty()

                                 // Usuario Medico Evaluador / Medico Aprobador ****************************
                                 join me in dbContext.systemuser on E.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
                                 from me in me_join.DefaultIfEmpty()

                                 join pme in dbContext.professional on me.v_PersonId equals pme.v_PersonId into pme_join
                                 from pme in pme_join.DefaultIfEmpty()

                                 // Usuario Tecnologo *************************************
                                 join tec in dbContext.systemuser on E.i_UpdateUserTechnicalDataRegisterId equals tec.i_SystemUserId into tec_join
                                 from tec in tec_join.DefaultIfEmpty()

                                 join ptec in dbContext.professional on tec.v_PersonId equals ptec.v_PersonId into ptec_join
                                 from ptec in ptec_join.DefaultIfEmpty()
                                 // *******************************************************       

                                 join X in dbContext.person on me.v_PersonId equals X.v_PersonId into X_join
                                 from X in X_join.DefaultIfEmpty()

                                 join Y in dbContext.person on tec.v_PersonId equals Y.v_PersonId into Y_join
                                 from Y in Y_join.DefaultIfEmpty()

                                 join J in dbContext.organization on C.v_CustomerOrganizationId equals J.v_OrganizationId into J_join
                                 from J in J_join.DefaultIfEmpty()

                                 join K in dbContext.organization on A.v_EmpresaFacturacionId equals K.v_OrganizationId into K_join
                                 from K in K_join.DefaultIfEmpty()

                                 where A.v_ServiceId == pstrserviceId
                                 select new ReportEstudioElectrocardiografico
                                 {
                                     NroFicha = E.v_ServiceComponentId,
                                     NroHistoria = A.v_ServiceId,
                                     DatosPaciente = B.v_FirstLastName + " " + B.v_SecondLastName + " " + B.v_FirstName,
                                     FechaNacimiento = B.d_Birthdate.Value,
                                     Genero = M.v_Value1,
                                     FirmaMedico = pme.b_SignatureImage,
                                     FirmaTecnico = ptec.b_SignatureImage,
                                     Fecha = A.d_ServiceDate.Value,
                                     //Empresa = D.v_Name,
                                     Empresa = K.v_Name,
                                     Puesto = B.v_CurrentOccupation,
                                     NombreDoctor = X.v_FirstLastName + " " + X.v_SecondLastName + " " + X.v_FirstName,
                                     NombreTecnologo = Y.v_FirstLastName + " " + Y.v_SecondLastName + " " + Y.v_FirstName,
                                     RazonSocialEmpresaCliente = K.v_Name,
                                     LogoEmpresaCliente = J.b_Image

                                 });

                var MedicalCenter = GetInfoMedicalCenter();

                var DxEkg = GetDiagnosticByServiceIdAndComponentWithseparator(pstrserviceId, pstrComponentId, "|");
                var res = GetRestrictionByServiceIdAndComponentWithSeparator(pstrserviceId, pstrComponentId, "|");
                var rec = GetRecommendationByServiceIdAndComponent(pstrserviceId, pstrComponentId, "|");
                var ekg = ValoresComponente(pstrserviceId, pstrComponentId);

                var sql = (from a in objEntity.ToList()
                           select new ReportEstudioElectrocardiografico
                           {
                               NroFicha = a.NroFicha,
                               NroHistoria = a.NroHistoria,
                               DatosPaciente = a.DatosPaciente,
                               FechaNacimiento = a.FechaNacimiento,
                               Genero = a.Genero,
                               FirmaMedico = a.FirmaMedico,
                               FirmaTecnico = a.FirmaTecnico,
                               Fecha = a.Fecha,
                               Empresa = a.Empresa,
                               Puesto = a.Puesto,
                               Edad = GetAge(a.FechaNacimiento),
                               NombreDoctor = a.NombreDoctor,
                               NombreTecnologo = a.NombreTecnologo,
                               // validación Davi ekg.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_PACIENTE_ENCUENTRA_APTO_TRAB_ALTURA_MAY_2500_ID)==null?"": .... poner lo que sigue
                               //Antecedentes
                               SoploSiNo = ekg.Count == 0 ? string.Empty : ekg.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_ANTECEDENTES_SOPLO_CARDIACO_ID) == null ? "" : ekg.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_ANTECEDENTES_SOPLO_CARDIACO_ID).v_Value1,
                               PresionAltaSiNo = ekg.Count == 0 ? string.Empty : ekg.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_ANTECEDENTES_PRESION_ALTA_ID) == null ? "" : ekg.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_ANTECEDENTES_PRESION_ALTA_ID).v_Value1,
                               DolorPrecordialSiNo = ekg.Count == 0 ? string.Empty : ekg.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_ANTECEDENTES_DOLOR_PRECORDIAL_ID) == null ? "" : ekg.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_ANTECEDENTES_DOLOR_PRECORDIAL_ID).v_Value1,
                               ELECTROCARDIOGRAMA_ANTECEDENTES_IMAS_ID = ekg.Count == 0 ? string.Empty : ekg.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_ANTECEDENTES_IMAS_ID) == null ? "" : ekg.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_ANTECEDENTES_IMAS_ID).v_Value1,
                               ObesidadSiNo = ekg.Count == 0 ? string.Empty : ekg.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_ANTECEDENTES_OBESIDAD_ID) == null ? "" : ekg.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_ANTECEDENTES_OBESIDAD_ID).v_Value1,
                               CansancioSiNo = ekg.Count == 0 ? string.Empty : ekg.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_ANTECEDENTES_CANSANCIO_RAPIDO_ID) == null ? "" : ekg.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_ANTECEDENTES_CANSANCIO_RAPIDO_ID).v_Value1,
                               MareosSiNo = ekg.Count == 0 ? string.Empty : ekg.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_ANTECEDENTES_MAREOS_ID) == null ? "" : ekg.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_ANTECEDENTES_MAREOS_ID).v_Value1,
                               PalpitacionesSiNo = ekg.Count == 0 ? string.Empty : ekg.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_ANTECEDENTES_PALPITACIONES_ID) == null ? "" : ekg.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_ANTECEDENTES_PALPITACIONES_ID).v_Value1,
                               PerdidaConcienciaSiNo = ekg.Count == 0 ? string.Empty : ekg.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_ANTECEDENTES_PERDIDA_CONCIENCIA_ID) == null ? "" : ekg.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_ANTECEDENTES_PERDIDA_CONCIENCIA_ID).v_Value1,
                               TabaquismoSiNo = ekg.Count == 0 ? string.Empty : ekg.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_ANTECEDENTES_TABAQUISMO_ID) == null ? "" : ekg.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_ANTECEDENTES_TABAQUISMO_ID).v_Value1,
                               DiabetesSiNo = ekg.Count == 0 ? string.Empty : ekg.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_ANTECEDENTES_DIABETES_ID) == null ? "" : ekg.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_ANTECEDENTES_DIABETES_ID).v_Value1,
                               DisplidemiaSiNo = ekg.Count == 0 ? string.Empty : ekg.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_ANTECEDENTES_DISLIPIDEMIA_ID) == null ? "" : ekg.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_ANTECEDENTES_DISLIPIDEMIA_ID).v_Value1,
                               VaricesSiNo = ekg.Count == 0 ? string.Empty : ekg.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_ANTECEDENTES_VARICES_ID) == null ? "" : ekg.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_ANTECEDENTES_VARICES_ID).v_Value1,
                               ELECTROCARDIOGRAMA_ANTECEDENTES_OTROS_ID = ekg.Count == 0 ? string.Empty : ekg.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_ANTECEDENTES_OTROS_ID) == null ? "" : ekg.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_ANTECEDENTES_OTROS_ID).v_Value1,

                               // Examen fisico preferencial
                               ELECTROCARDIOGRAMA_EXAMEN_FISICO_PREF_EXA_CORAZON_ID = ekg.Count == 0 ? string.Empty : ekg.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_EXAMEN_FISICO_PREF_EXA_CORAZON_ID) == null ? "" : ekg.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_EXAMEN_FISICO_PREF_EXA_CORAZON_ID).v_Value1,
                               ELECTROCARDIOGRAMA_EXAMEN_FISICO_PREF_OTROS_HALLAZGOS_ID = ekg.Count == 0 ? string.Empty : ekg.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_EXAMEN_FISICO_PREF_OTROS_HALLAZGOS_ID) == null ? "" : ekg.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_EXAMEN_FISICO_PREF_OTROS_HALLAZGOS_ID).v_Value1,
                               ELECTROCARDIOGRAMA_EXAMEN_FISICO_PREF_PAS_ID = ekg.Count == 0 ? string.Empty : ekg.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_EXAMEN_FISICO_PREF_PAS_ID) == null ? "" : ekg.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_EXAMEN_FISICO_PREF_PAS_ID).v_Value1,
                               ELECTROCARDIOGRAMA_EXAMEN_FISICO_PREF_PAD_ID = ekg.Count == 0 ? string.Empty : ekg.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_EXAMEN_FISICO_PREF_PAD_ID) == null ? "" : ekg.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_EXAMEN_FISICO_PREF_PAD_ID).v_Value1,

                               //Sintomas
                               DolorPrecordial2SiNo = ekg.Count == 0 ? string.Empty : ekg.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_SINTOMAS_DOLOR_PRECORDIAL_ID) == null ? "" : ekg.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_SINTOMAS_DOLOR_PRECORDIAL_ID).v_Value1,
                               Palpitaciones2SiNo = ekg.Count == 0 ? string.Empty : ekg.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_SINTOMAS_PALPITACIONES_ID) == null ? "" : ekg.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_SINTOMAS_PALPITACIONES_ID).v_Value1,
                               DisneaSiNo = ekg.Count == 0 ? string.Empty : ekg.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_SINTOMAS_DISNEA_PAROXISTICA_ID) == null ? "" : ekg.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_SINTOMAS_DISNEA_PAROXISTICA_ID).v_Value1,
                               Mareos2SiNo = ekg.Count == 0 ? string.Empty : ekg.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_SINTOMAS_MAREOS_ID) == null ? "" : ekg.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_SINTOMAS_MAREOS_ID).v_Value1,
                               ClaudicacSiNo = ekg.Count == 0 ? string.Empty : ekg.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_SINTOMAS_CLAUDICAC_INTERMITENTE_ID) == null ? "" : ekg.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_SINTOMAS_CLAUDICAC_INTERMITENTE_ID).v_Value1,
                               ELECTROCARDIOGRAMA_SINTOMAS_LIPOTIMIAS_ID = ekg.Count == 0 ? string.Empty : ekg.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_SINTOMAS_LIPOTIMIAS_ID) == null ? "" : ekg.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_SINTOMAS_LIPOTIMIAS_ID).v_Value1,
                               ELECTROCARDIOGRAMA_SINTOMAS_ASINTOMATICO_ID = ekg.Count == 0 ? string.Empty : ekg.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_SINTOMAS_ASINTOMATICO_ID) == null ? "" : ekg.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_SINTOMAS_ASINTOMATICO_ID).v_Value1,
                               // Signos Interpretacion
                               ELECTROCARDIOGRAMA_SIGNOS_INTER_ECG_RITMO_ID = ekg.Count == 0 ? string.Empty : ekg.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_SIGNOS_INTER_ECG_RITMO_ID) == null ? "" : ekg.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_SIGNOS_INTER_ECG_RITMO_ID).v_Value1,
                               ELECTROCARDIOGRAMA_SIGNOS_INTER_ECG_INTERVALO_PR_ID = ekg.Count == 0 ? string.Empty : ekg.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_SIGNOS_INTER_ECG_INTERVALO_PR_ID) == null ? "" : ekg.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_SIGNOS_INTER_ECG_INTERVALO_PR_ID).v_Value1,
                               ELECTROCARDIOGRAMA_SIGNOS_INTER_ECG_INTERVALO_QRS_ID = ekg.Count == 0 ? string.Empty : ekg.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_SIGNOS_INTER_ECG_INTERVALO_QRS_ID) == null ? "" : ekg.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_SIGNOS_INTER_ECG_INTERVALO_QRS_ID).v_Value1,
                               ELECTROCARDIOGRAMA_SIGNOS_INTER_ECG_INTERVALO_QT_ID = ekg.Count == 0 ? string.Empty : ekg.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_SIGNOS_INTER_ECG_INTERVALO_QT_ID) == null ? "" : ekg.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_SIGNOS_INTER_ECG_INTERVALO_QT_ID).v_Value1,
                               ELECTROCARDIOGRAMA_SIGNOS_INTER_ECG_ONDA_P_ID = ekg.Count == 0 ? string.Empty : ekg.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_SIGNOS_INTER_ECG_ONDA_P_ID) == null ? "" : ekg.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_SIGNOS_INTER_ECG_ONDA_P_ID).v_Value1,
                               ELECTROCARDIOGRAMA_SIGNOS_INTER_ECG_ONDA_Q_ID = ekg.Count == 0 ? string.Empty : ekg.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_SIGNOS_INTER_ECG_ONDA_Q_ID) == null ? "" : ekg.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_SIGNOS_INTER_ECG_ONDA_Q_ID).v_Value1,
                               ELECTROCARDIOGRAMA_SIGNOS_INTER_ECG_ONDA_R_ID = ekg.Count == 0 ? string.Empty : ekg.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_SIGNOS_INTER_ECG_ONDA_R_ID) == null ? "" : ekg.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_SIGNOS_INTER_ECG_ONDA_R_ID).v_Value1,
                               ELECTROCARDIOGRAMA_SIGNOS_INTER_ECG_ONDA_S_ID = ekg.Count == 0 ? string.Empty : ekg.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_SIGNOS_INTER_ECG_ONDA_S_ID) == null ? "" : ekg.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_SIGNOS_INTER_ECG_ONDA_S_ID).v_Value1,
                               ELECTROCARDIOGRAMA_SIGNOS_INTER_ECG_ONDA_T_ID = ekg.Count == 0 ? string.Empty : ekg.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_SIGNOS_INTER_ECG_ONDA_T_ID) == null ? "" : ekg.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_SIGNOS_INTER_ECG_ONDA_T_ID).v_Value1,
                               ELECTROCARDIOGRAMA_SIGNOS_INTER_ECG_ONDA_U_ID = ekg.Count == 0 ? string.Empty : ekg.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_SIGNOS_INTER_ECG_ONDA_U_ID) == null ? "" : ekg.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_SIGNOS_INTER_ECG_ONDA_U_ID).v_Value1,
                               ELECTROCARDIOGRAMA_SIGNOS_INTER_ECG_SEGMENTO_ST_ID = ekg.Count == 0 ? string.Empty : ekg.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_SIGNOS_INTER_ECG_SEGMENTO_ST_ID) == null ? "" : ekg.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_SIGNOS_INTER_ECG_SEGMENTO_ST_ID).v_Value1,
                               ELECTROCARDIOGRAMA_SIGNOS_INTER_ECG_EJE_QRS_ID = ekg.Count == 0 ? string.Empty : ekg.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_SIGNOS_INTER_ECG_EJE_QRS_ID) == null ? "" : ekg.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_SIGNOS_INTER_ECG_EJE_QRS_ID).v_Value1,
                               ELECTROCARDIOGRAMA_SIGNOS_INTER_ECG_FC_ID = ekg.Count == 0 ? string.Empty : ekg.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_SIGNOS_INTER_ECG_FC_ID) == null ? "" : ekg.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_SIGNOS_INTER_ECG_FC_ID).v_Value1,

                               Conclusiones = ekg.Count == 0 ? string.Empty : ekg.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_DESCRIPCION_INTERPRETACION_ID) == null ? "" : ekg.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_DESCRIPCION_INTERPRETACION_ID).v_Value1,

                               // PAciente se encuentra
                               ELECTROCARDIOGRAMA_PACIENTE_ENCUENTRA_APTO_TRAB_FORZADO_ID = ekg.Count == 0 ? string.Empty : ekg.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_PACIENTE_ENCUENTRA_APTO_TRAB_FORZADO_ID) == null ? "" : ekg.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_PACIENTE_ENCUENTRA_APTO_TRAB_FORZADO_ID).v_Value1,
                               ELECTROCARDIOGRAMA_PACIENTE_ENCUENTRA_APTO_TRAB_ALTURA_MAY_2500_ID = ekg.Count == 0 ? string.Empty : ekg.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_PACIENTE_ENCUENTRA_APTO_TRAB_ALTURA_MAY_2500_ID) == null ? "" : ekg.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_PACIENTE_ENCUENTRA_APTO_TRAB_ALTURA_MAY_2500_ID).v_Value1,

                               b_Logo = MedicalCenter.b_Image,
                               EmpresaPropietaria = MedicalCenter.v_Name,
                               EmpresaPropietariaDireccion = MedicalCenter.v_Address,
                               EmpresaPropietariaTelefono = MedicalCenter.v_PhoneNumber,
                               EmpresaPropietariaEmail = MedicalCenter.v_Mail,


                               Dx = DxEkg,
                               Restriction = res,
                               Recomendation = rec,

                               RazonSocialEmpresaCliente = a.LogoEmpresaCliente == null ? a.RazonSocialEmpresaCliente : "",
                               LogoEmpresaCliente = a.LogoEmpresaCliente,

                           }).ToList();

                return sql;
            }
            catch (Exception)
            {

                throw;
            }
        }

        public List<ReportInformeRadiografico> ReportInformeRadiografico(string pstrserviceId, string pstrComponentId)
        {
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();


                var objEntity = (from A in dbContext.service
                                 join B in dbContext.person on A.v_PersonId equals B.v_PersonId
                                 join E in dbContext.servicecomponent on new { a = pstrserviceId, b = pstrComponentId }
                                                                        equals new { a = E.v_ServiceId, b = E.v_ComponentId }

                                 //join F in dbContext.systemuser on E.i_UpdateUserId equals F.i_SystemUserId into F_join
                                 //from F in F_join.DefaultIfEmpty()


                                 // Usuario Medico Evaluador / Medico Aprobador ****************************
                                 join me in dbContext.systemuser on E.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
                                 from me in me_join.DefaultIfEmpty()

                                 join pme in dbContext.professional on me.v_PersonId equals pme.v_PersonId into pme_join
                                 from pme in pme_join.DefaultIfEmpty()


                                 // Usuario Tecnologo *************************************
                                 join tec in dbContext.systemuser on E.i_UpdateUserTechnicalDataRegisterId equals tec.i_SystemUserId into tec_join
                                 from tec in tec_join.DefaultIfEmpty()

                                 join ptec in dbContext.professional on tec.v_PersonId equals ptec.v_PersonId into ptec_join
                                 from ptec in ptec_join.DefaultIfEmpty()
                                 // *******************************************************      

                                 join me1 in dbContext.person on me.v_PersonId equals me1.v_PersonId


                                 join G in dbContext.professional on new { a = me.v_PersonId }
                                                                      equals new { a = G.v_PersonId } into G_join
                                 from G in G_join.DefaultIfEmpty()

                                 join H in dbContext.person on me.v_PersonId equals H.v_PersonId into H_join
                                 from H in H_join.DefaultIfEmpty()

                                 join I in dbContext.protocol on A.v_ProtocolId equals I.v_ProtocolId into I_join
                                 from I in I_join.DefaultIfEmpty()

                                 join J in dbContext.organization on A.v_EmpresaFacturacionId equals J.v_OrganizationId into J_join
                                 from J in J_join.DefaultIfEmpty()



                                 where A.v_ServiceId == pstrserviceId
                                 select new ReportInformeRadiografico
                                 {
                                     Nombre = B.v_FirstName + " " + B.v_FirstLastName + " " + B.v_SecondLastName,
                                     FechaNacimiento = B.d_Birthdate,
                                     d_ServiceDate = A.d_ServiceDate,
                                     v_ServiceId = A.v_ServiceId,
                                     FirmaMedico = pme.b_SignatureImage,
                                     v_ServiceComponentId = E.v_ServiceComponentId,
                                     Lector = me1.v_FirstName + " " + me1.v_FirstLastName + " " + me1.v_SecondLastName,
                                     Hcl = A.v_ServiceId,
                                     FirmaTecnologo = ptec.b_SignatureImage,
                                 });

                var MedicalCenter = GetInfoMedicalCenter();
                var ValorUSer = ValoresComponentesUserControl(pstrserviceId, Constants.OIT_ID).ToList();
                var sql = (from a in objEntity.ToList()
                           select new ReportInformeRadiografico
                           {
                               Nombre = a.Nombre,
                               FechaNacimiento = a.FechaNacimiento,
                               d_ServiceDate = a.d_ServiceDate,
                               v_ServiceId = a.v_ServiceId,
                               FirmaMedico = a.FirmaMedico,
                               FirmaTecnologo = a.FirmaTecnologo,
                               v_ServiceComponentId = a.v_ServiceComponentId,
                               Lector = a.Lector,
                               Edad = GetAge(a.FechaNacimiento.Value),


                               Placa = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.txt_Placa) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.txt_Placa).v_Value1,// Constants.RX_NRO_PLACA_ID, "NOCOMBO", 0, "SI"),
                               CalidaRadio = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.txt_Placa) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.RX_CALIDAD_ID).v_Value1,//GetServiceComponentFielValue(RX_CALIDAD_ID, "NOCOMBO", 0, "SI"),
                               Causas = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.txt_Placa) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.RX_CAUSAS_ID).v_Value1,//GetServiceComponentFielValue(RX_CAUSAS_ID, "NOCOMBO", 0, "SI"),
                               Comentario = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.txt_Placa) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.RX_COMENTARIOS_ID).v_Value1,//(RX_COMENTARIOS_ID, "NOCOMBO", 0, "SI"),
                               Hcl = a.Hcl,
                               FechaLectura = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.txt_Placa) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.RX_FECHA_LECTURA_ID).v_Value1,//(RX_FECHA_LECTURA_ID, "NOCOMBO", 0, "SI"),
                               FechaRadiografia = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.txt_Placa) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.RX_FECHA_TOMA_ID).v_Value1,//(RX_FECHA_TOMA_ID, "NOCOMBO", 0, "SI"),

                               SuperiorDerecho = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.txt_Placa) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.RX_SUPERIOR_DERECHO_ID).v_Value1,//(RX_SUPERIOR_DERECHO_ID, "NOCOMBO", 0, "SI"),
                               SuperiorIzquierda = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.txt_Placa) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.RX_SUPERIOR_IZQUIERDO_ID).v_Value1,//(RX_SUPERIOR_IZQUIERDO_ID, "NOCOMBO", 0, "SI"),
                               MedioDerecho = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.txt_Placa) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.RX_MEDIO_DERECHO_ID).v_Value1,//(RX_MEDIO_DERECHO_ID, "NOCOMBO", 0, "SI"),
                               MedioIzquierda = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.txt_Placa) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.RX_MEDIO_IZQUIERDO_ID).v_Value1,//(RX_MEDIO_IZQUIERDO_ID, "NOCOMBO", 0, "SI"),
                               InferiorDerecho = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.txt_Placa) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.RX_INFERIOR_DERECHO_ID).v_Value1,//(RX_INFERIOR_DERECHO_ID, "NOCOMBO", 0, "SI"),
                               InferiorIzquierdo = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.txt_Placa) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.RX_INFERIOR_IZQUIERDO_ID).v_Value1,//(RX_INFERIOR_IZQUIERDO_ID, "NOCOMBO", 0, "SI"),

                               SimboloSi = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.txt_Placa) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.RX_SIMBOLO_SI_ID).v_Value1,//(RX_SIMBOLO_SI_ID, "NOCOMBO", 0, "SI"),
                               SimboloNo = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.txt_Placa) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.RX_SIMBOLO_NO_ID).v_Value1,//(RX_SIMBOLO_NO_ID, "NOCOMBO", 0, "SI"),

                               CeroNada = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.txt_Placa) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.RX_0_NADA_ID).v_Value1,//(RX_0_NADA_ID, "NOCOMBO", 0, "SI"),
                               CeroCero = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.txt_Placa) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.RX_0_0_ID).v_Value1,//(RX_0_0_ID, "NOCOMBO", 0, "SI"),
                               CeroUno = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.txt_Placa) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.RX_0_1_ID).v_Value1,//(RX_0_1_ID, "NOCOMBO", 0, "SI"),

                               UnoCero = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.txt_Placa) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.RX_1_0_ID).v_Value1,//(RX_1_0_ID, "NOCOMBO", 0, "SI"),
                               UnoUno = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.txt_Placa) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.RX_1_1_ID).v_Value1,//(RX_1_1_ID, "NOCOMBO", 0, "SI"),
                               UnoDos = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.txt_Placa) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.RX_1_2_ID).v_Value1,//(RX_1_2_ID, "NOCOMBO", 0, "SI"),

                               DosUno = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.txt_Placa) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.RX_2_1_ID).v_Value1,//(RX_2_1_ID, "NOCOMBO", 0, "SI"),
                               DosDos = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.txt_Placa) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.RX_2_2_ID).v_Value1,//(RX_2_2_ID, "NOCOMBO", 0, "SI"),
                               DosTres = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.txt_Placa) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.RX_2_3_ID).v_Value1,//(RX_2_3_ID, "NOCOMBO", 0, "SI"),

                               TresDos = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.txt_Placa) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.RX_3_2_ID).v_Value1,//(RX_3_2_ID, "NOCOMBO", 0, "SI"),
                               TresTres = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.txt_Placa) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.RX_3_3_ID).v_Value1,//(RX_3_3_ID, "NOCOMBO", 0, "SI"),
                               TresMas = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.txt_Placa) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.RX_3_MAS_ID).v_Value1,//(RX_3_MAS_ID, "NOCOMBO", 0, "SI"),

                               p = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.txt_Placa) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.RX_P_ID).v_Value1,//(RX_P_ID, "NOCOMBO", 0, "SI"),
                               q = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.txt_Placa) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.RX_Q_ID).v_Value1,//(RX_Q_ID, "NOCOMBO", 0, "SI"),
                               r = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.txt_Placa) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.RX_R_ID).v_Value1,//(RX_R_ID, "NOCOMBO", 0, "SI"),
                               s = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.txt_Placa) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.RX_S_ID).v_Value1,//(RX_S_ID, "NOCOMBO", 0, "SI"),
                               t = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.txt_Placa) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.RX_T_ID).v_Value1,//(RX_T_ID, "NOCOMBO", 0, "SI"),
                               u = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.txt_Placa) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.RX_U_ID).v_Value1,//(RX_U_ID, "NOCOMBO", 0, "SI"),
                               p1 = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.txt_Placa) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.RX_P1_ID).v_Value1,//(RX_P1_ID, "NOCOMBO", 0, "SI"),
                               q1 = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.txt_Placa) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.RX_Q1_ID).v_Value1,//(RX_Q1_ID, "NOCOMBO", 0, "SI"),
                               r1 = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.txt_Placa) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.RX_R1_ID).v_Value1,//(RX_R1_ID, "NOCOMBO", 0, "SI"),
                               s1 = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.txt_Placa) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.RX_S1_ID).v_Value1,//(RX_S1_ID, "NOCOMBO", 0, "SI"),
                               t1 = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.txt_Placa) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.RX_T1_ID).v_Value1,//(RX_T1_ID, "NOCOMBO", 0, "SI"),
                               u1 = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.txt_Placa) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.RX_U1_ID).v_Value1,//(RX_U1_ID, "NOCOMBO", 0, "SI"),


                               O = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.txt_Placa) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.RX_D_ID).v_Value1,//(RX_D_ID, "NOCOMBO", 0, "SI"),
                               A = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.txt_Placa) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.RX_A_ID).v_Value1,//(RX_A_ID, "NOCOMBO", 0, "SI"),
                               B = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.txt_Placa) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.RX_B_ID).v_Value1,//(RX_B_ID, "NOCOMBO", 0, "SI"),
                               C = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.txt_Placa) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.RX_C_ID).v_Value1,//(RX_C_ID, "NOCOMBO", 0, "SI"),
                               //SimboloSiNo= ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.txt_Placa) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.txt_Placa).v_Value1,//(RX_SIM, "NOCOMBO", 0, "SI"), 
                               aa = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.txt_Placa) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.RX_AA_ID).v_Value1,//(RX_AA_ID, "NOCOMBO", 0, "SI"),
                               at = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.txt_Placa) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.RX_AT_ID).v_Value1,//(RX_AT_ID, "NOCOMBO", 0, "SI"),
                               ax = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.txt_Placa) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.RX_AX_ID).v_Value1,//(RX_AX_ID, "NOCOMBO", 0, "SI"),
                               bu = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.txt_Placa) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.RX_BU_ID).v_Value1,//(RX_BU_ID, "NOCOMBO", 0, "SI"),
                               ca = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.txt_Placa) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.RX_CA_ID).v_Value1,//(RX_CA_ID, "NOCOMBO", 0, "SI"),
                               cg = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.txt_Placa) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.RX_CG_ID).v_Value1,//(RX_CG_ID, "NOCOMBO", 0, "SI"),
                               cn = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.txt_Placa) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.RX_CN_ID).v_Value1,//(RX_CN_ID, "NOCOMBO", 0, "SI"),
                               co = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.txt_Placa) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.RX_CO_ID).v_Value1,//(RX_CO_ID, "NOCOMBO", 0, "SI"),
                               cp = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.txt_Placa) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.RX_CP_ID).v_Value1,//(RX_CP_ID, "NOCOMBO", 0, "SI"),
                               cv = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.txt_Placa) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.RX_CV_ID).v_Value1,//(RX_CV_ID, "NOCOMBO", 0, "SI"),



                               di = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.txt_Placa) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.RX_DI_ID).v_Value1,//(RX_DI_ID, "NOCOMBO", 0, "SI"),
                               ef = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.txt_Placa) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.RX_EF_ID).v_Value1,//(RX_EF_ID, "NOCOMBO", 0, "SI"),
                               em = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.txt_Placa) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.RX_EM_ID).v_Value1,//(RX_EM_ID, "NOCOMBO", 0, "SI"),
                               es = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.txt_Placa) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.RX_ES_ID).v_Value1,//(RX_ES_ID, "NOCOMBO", 0, "SI"),
                               fr = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.txt_Placa) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.RX_FR_ID).v_Value1,//(RX_FR_ID, "NOCOMBO", 0, "SI"),
                               hi = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.txt_Placa) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.RX_HI_ID).v_Value1,//(RX_HI_ID, "NOCOMBO", 0, "SI"),
                               ho = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.txt_Placa) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.RX_HO_ID).v_Value1,//(RX_HO_ID, "NOCOMBO", 0, "SI"),
                               id = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.txt_Placa) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.RX_ID_ID).v_Value1,//(RX_ID_ID, "NOCOMBO", 0, "SI"),
                               ih = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.txt_Placa) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.RX_IH_ID).v_Value1,//(RX_IH_ID, "NOCOMBO", 0, "SI"),
                               kl = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.txt_Placa) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.RX_KL_ID).v_Value1,//(RX_KL_ID, "NOCOMBO", 0, "SI"),
                               me = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.txt_Placa) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.RX_ME_ID).v_Value1,//(RX_ME_ID, "NOCOMBO", 0, "SI"),
                               od = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.txt_Placa) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.RX_OD_ID).v_Value1,//(RX_OD_ID, "NOCOMBO", 0, "SI"),
                               pa = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.txt_Placa) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.RX_PA_ID).v_Value1,//(RX_PA_ID, "NOCOMBO", 0, "SI"),
                               pb = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.txt_Placa) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.RX_PB_ID).v_Value1,//(RX_PB_ID, "NOCOMBO", 0, "SI"),
                               pi = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.txt_Placa) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.RX_PI_ID).v_Value1,//(RX_PI_ID, "NOCOMBO", 0, "SI"),
                               px = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.txt_Placa) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.RX_PX_ID).v_Value1,//(RX_PX_ID, "NOCOMBO", 0, "SI"),
                               ra = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.txt_Placa) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.RX_RA_ID).v_Value1,//(RX_RA_ID, "NOCOMBO", 0, "SI"),
                               rp = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.txt_Placa) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.RX_RP_ID).v_Value1,//(RX_RP_ID, "NOCOMBO", 0, "SI"),
                               tb = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.txt_Placa) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.RX_TB_ID).v_Value1,//(RX_TB_ID, "NOCOMBO", 0, "SI"),
                               Comentario_Od = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.txt_Placa) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.RX_COMENTARIO_OD_ID).v_Value1,//(RX_COMENTARIO_OD_ID, "NOCOMBO", 0, "SI"),


                               Conclusiones = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.txt_Placa) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.RX_CONCLUSIONES_OIT_DESCRIPCION_ID).v_Value1,//(RX_CONCLUSIONES_OIT_DESCRIPCION_ID, "NOCOMBO", 0, "SI"),
                               Dx = GetDiagnosticByServiceIdAndComponent(a.v_ServiceId, pstrComponentId),

                               b_Logo = MedicalCenter.b_Image,
                               EmpresaPropietaria = MedicalCenter.v_Name,
                               EmpresaPropietariaDireccion = MedicalCenter.v_Address,
                               EmpresaPropietariaTelefono = MedicalCenter.v_PhoneNumber,
                               EmpresaPropietariaEmail = MedicalCenter.v_Mail,

                           }).ToList();

                return sql;
            }
            catch (Exception)
            {

                throw;
            }
        }

        public List<ReportTamizajeDermatologico> ReportTamizajeDermatologico(string pstrserviceId, string pstrComponentId)
        {
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();


                var objEntity = (from A in dbContext.service
                                 join B in dbContext.person on A.v_PersonId equals B.v_PersonId
                                 join E in dbContext.servicecomponent on new { a = pstrserviceId, b = pstrComponentId }
                                                                        equals new { a = E.v_ServiceId, b = E.v_ComponentId }

                                 //join F in dbContext.systemuser on E.i_UpdateUserId equals F.i_SystemUserId into F_join
                                 //from F in F_join.DefaultIfEmpty()


                                 // Usuario Medico Evaluador / Medico Aprobador ****************************
                                 join me in dbContext.systemuser on E.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
                                 from me in me_join.DefaultIfEmpty()

                                 join pme in dbContext.professional on me.v_PersonId equals pme.v_PersonId into pme_join
                                 from pme in pme_join.DefaultIfEmpty()

                                 join G in dbContext.professional on new { a = me.v_PersonId }
                                                                      equals new { a = G.v_PersonId } into G_join
                                 from G in G_join.DefaultIfEmpty()

                                 join H in dbContext.person on me.v_PersonId equals H.v_PersonId into H_join
                                 from H in H_join.DefaultIfEmpty()

                                 join I in dbContext.protocol on A.v_ProtocolId equals I.v_ProtocolId into I_join
                                 from I in I_join.DefaultIfEmpty()

                                 join J in dbContext.organization on I.v_EmployerOrganizationId equals J.v_OrganizationId into J_join
                                 from J in J_join.DefaultIfEmpty()



                                 where A.v_ServiceId == pstrserviceId
                                 select new ReportTamizajeDermatologico
                                 {
                                     Ficha = A.v_ServiceId,
                                     Hc = E.v_ServiceComponentId,
                                     NombreTrabajador = B.v_FirstName + " " + B.v_FirstLastName + " " + B.v_SecondLastName,
                                     Fecha = A.d_ServiceDate.Value,
                                     FirmaMedico = pme.b_SignatureImage,
                                     FirmaTrabajador = B.b_RubricImage,
                                     HuellaTrabajador = B.b_FingerPrintImage
                                 });


                var MedicalCenter = GetInfoMedicalCenter();

                var sql = (from a in objEntity.ToList()
                           select new ReportTamizajeDermatologico
                           {
                               Ficha = a.Ficha,
                               Hc = a.Hc,
                               NombreTrabajador = a.NombreTrabajador,
                               Fecha = a.Fecha,
                               FirmaMedico = a.FirmaMedico,
                               FirmaTrabajador = a.FirmaTrabajador,
                               HuellaTrabajador = a.HuellaTrabajador,
                               SufreEnfermedadPielSiNo = GetServiceComponentFielValue(pstrserviceId, pstrComponentId, Constants.TAMIZAJE_DERMATOLOGIO_SUFRE_UD_ENFERMEDAD_PIEL_ID, "NOCOMBO", 0, "SI"),
                               SiQueDxTiene = GetServiceComponentFielValue(a.Ficha, pstrComponentId, Constants.TAMIZAJE_DERMATOLOGIO_SI_QUE_DX_TIENE_ID, "NOCOMBO", 0, "SI"),
                               ActualmenteLesionSiNo = GetServiceComponentFielValue(a.Ficha, pstrComponentId, Constants.TAMIZAJE_DERMATOLOGIO_ACTUALMENTE_LESION_ID, "NOCOMBO", 0, "SI"),
                               DondeLocalizaLesion = GetServiceComponentFielValue(a.Ficha, pstrComponentId, Constants.TAMIZAJE_DERMATOLOGIO_SI_DONDE_LOCALIZA_ID, "NOCOMBO", 0, "SI"),
                               CuantoTieneLesion = GetServiceComponentFielValue(a.Ficha, pstrComponentId, Constants.TAMIZAJE_DERMATOLOGIO_CUANTO_TIENE_LESION_ID, "NOCOMBO", 0, "SI"),
                               PresentaColoracionPielSiNo = GetServiceComponentFielValue(a.Ficha, pstrComponentId, Constants.TAMIZAJE_DERMATOLOGIO_PRESENTA_COLORACION_PIEL_ID, "NOCOMBO", 0, "SI"),
                               LesionRepiteVariasAniosSiNo = GetServiceComponentFielValue(a.Ficha, pstrComponentId, Constants.TAMIZAJE_DERMATOLOGIO_LESIONES_REPITE_VARIAS_ANIOS_ID, "NOCOMBO", 0, "SI"),
                               EnrrojecimientoParteCuerpoSiNo = GetServiceComponentFielValue(a.Ficha, pstrComponentId, Constants.TAMIZAJE_DERMATOLOGIO_ENRROJECIMIENTO_PARTE_CUERPO_ID, "NOCOMBO", 0, "SI"),
                               EnrrojecimientoLocaliza = GetServiceComponentFielValue(a.Ficha, pstrComponentId, Constants.TAMIZAJE_DERMATOLOGIO_ENRROJECIMIENTO_SI_DONDE_LOCALIZA_ID, "NOCOMBO", 0, "SI"),
                               TieneComezonSiNo = GetServiceComponentFielValue(a.Ficha, pstrComponentId, Constants.TAMIZAJE_DERMATOLOGIO_TIENE_COMEZON_ID, "NOCOMBO", 0, "SI"),
                               ComezonLocaliza = GetServiceComponentFielValue(a.Ficha, pstrComponentId, Constants.TAMIZAJE_DERMATOLOGIO_COMEZON_LOCALIZA_ID, "NOCOMBO", 0, "SI"),
                               HinchazonParteCuerpoSiNo = GetServiceComponentFielValue(a.Ficha, pstrComponentId, Constants.TAMIZAJE_DERMATOLOGIO_HINCHAZON_PARTE_CUERPO_ID, "NOCOMBO", 0, "SI"),
                               HinchazonParteCuerpoLocaliza = GetServiceComponentFielValue(a.Ficha, pstrComponentId, Constants.TAMIZAJE_DERMATOLOGIO_HINCHAZON_PARTE_CUERPO_DONDE_LOCALIZA_ID, "NOCOMBO", 0, "SI"),
                               AlergiaAsmaSiNo = GetServiceComponentFielValue(a.Ficha, pstrComponentId, Constants.TAMIZAJE_DERMATOLOGIO_ALERGIA_ASMA_ID, "NOCOMBO", 0, "SI"),
                               EppSiNo = GetServiceComponentFielValue(a.Ficha, pstrComponentId, Constants.TAMIZAJE_DERMATOLOGIO_USA_EPP_ID, "NOCOMBO", 0, "SI"),
                               TipoProteccionUsa = GetServiceComponentFielValue(a.Ficha, pstrComponentId, Constants.TAMIZAJE_DERMATOLOGIO_SI_TIPO_PROTECCION_USA_ID, "NOCOMBO", 0, "SI"),
                               CambioUnasSiNo = GetServiceComponentFielValue(a.Ficha, pstrComponentId, Constants.TAMIZAJE_DERMATOLOGIO_PRESENTA_CAMBIO_UNAS_ID, "NOCOMBO", 0, "SI"),
                               TomandoMedicacionSiNo = GetServiceComponentFielValue(a.Ficha, pstrComponentId, Constants.TAMIZAJE_DERMATOLOGIO_TOMANDO_ALGUNA_MEDICACION_ID, "NOCOMBO", 0, "SI"),
                               ComoLlamaMedicacion = GetServiceComponentFielValue(a.Ficha, pstrComponentId, Constants.TAMIZAJE_DERMATOLOGIO_SI_COMO_SE_LLAMA_ID, "NOCOMBO", 0, "SI"),
                               DosisFrecuencia = GetServiceComponentFielValue(a.Ficha, pstrComponentId, Constants.TAMIZAJE_DERMATOLOGIO_DOSIS_FRECUENCIA_ID, "NOCOMBO", 0, "SI"),
                               Descripcion = GetServiceComponentFielValue(a.Ficha, pstrComponentId, Constants.TAMIZAJE_DERMATOLOGIO_DESCRIPCION1_ID, "NOCOMBO", 0, "SI"),
                               DermatopiaSiNo = GetServiceComponentFielValue(a.Ficha, pstrComponentId, Constants.TAMIZAJE_DERMATOLOGIO_DERMATOPIA_ID, "NOCOMBO", 0, "SI"),
                               NikolskySiNo = GetServiceComponentFielValue(a.Ficha, pstrComponentId, Constants.TAMIZAJE_DERMATOLOGIO_DERMATOPIA_ID, "NOCOMBO", 0, "SI"),
                               v_OwnerOrganizationName = (from n in dbContext.organization
                                                          where n.v_OrganizationId == Constants.OWNER_ORGNIZATION_ID
                                                          select n.v_Name).SingleOrDefault<string>(),


                               b_Logo = MedicalCenter.b_Image,
                               EmpresaPropietaria = MedicalCenter.v_Name,
                               EmpresaPropietariaDireccion = MedicalCenter.v_Address,
                               EmpresaPropietariaTelefono = MedicalCenter.v_PhoneNumber,
                               EmpresaPropietariaEmail = MedicalCenter.v_Mail,

                           }).ToList();

                return sql;
            }
            catch (Exception)
            {

                throw;
            }
        }

        //AMC / Alejandro/ ya te lo agarrastes
        public List<ReportAseguradora> ReporteAseguradora(DateTime? FechaInicio, DateTime? FechaFin, string pstrCustomerOrganizationId, string pstrFilterExpression)
        {

            try
            {
                using (SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel())
                {


                    #region Antecedentes

                    var varDxReco = DevolverJerarquiaDxRecomendaciones(FechaInicio, FechaFin);
                    var varAntecedentes = DevolverTodosAntecedentes(FechaInicio, FechaFin);
                    var varValores = DevolverValorCampoPorServicio(FechaInicio, FechaFin);
                    var varDx = DevolverJerarquiaDx(FechaInicio, FechaFin);


                    #endregion


                    #region Prepare Query

                    var objEntity = from A in dbContext.service
                                    join B in dbContext.person on A.v_PersonId equals B.v_PersonId

                                    join C in dbContext.protocol on A.v_ProtocolId equals C.v_ProtocolId into C_join
                                    from C in C_join.DefaultIfEmpty()

                                    join D in dbContext.organization on C.v_WorkingOrganizationId equals D.v_OrganizationId into D_join
                                    from D in C_join.DefaultIfEmpty()

                                    join J1 in dbContext.systemparameter on new { a = B.i_Relationship.Value, b = 207 }
                                              equals new { a = J1.i_ParameterId, b = J1.i_GroupId } into J1_join
                                    from J1 in J1_join.DefaultIfEmpty()

                                    join J2 in dbContext.systemparameter on new { a = A.i_ServiceTypeOfInsurance.Value, b = 225 }
                                           equals new { a = J2.i_ParameterId, b = J2.i_GroupId } into J2_join
                                    from J2 in J2_join.DefaultIfEmpty()

                                    join J3 in dbContext.systemparameter on new { a = A.i_ModalityOfInsurance.Value, b = 226 }
                                       equals new { a = J3.i_ParameterId, b = J3.i_GroupId } into J3_join
                                    from J3 in J3_join.DefaultIfEmpty()

                                    join J4 in dbContext.systemparameter on new { a = A.i_AptitudeStatusId.Value, b = 124 }
                                       equals new { a = J4.i_ParameterId, b = J4.i_GroupId } into J4_join
                                    from J4 in J4_join.DefaultIfEmpty()

                                    where A.d_ServiceDate >= FechaInicio && A.d_ServiceDate <= FechaFin

                                    select new ReportAseguradora
                                    {
                                        IdServicio = A.v_ServiceId,
                                        IdProtocolId = A.v_ProtocolId,
                                        IdTrabajador = B.v_PersonId,
                                        Trabajador = B.v_FirstName + " " + B.v_FirstLastName + " " + B.v_SecondLastName,
                                        NroDNI = B.v_DocNumber,
                                        PuestoTrabajo = B.v_CurrentOccupation,
                                        Parentesco = J1.v_Value1,
                                        NombreTitular = B.v_OwnerName,
                                        EmpresaTrabajo = D.v_Name,
                                        Producto = "EPS", //J2.v_Value1
                                        DireccionTrabajador = B.v_AdressLocation,
                                        Proveedor = "",
                                        Modalidad = "A demanda", //J3.v_Value1,
                                        FechaServicioDate = A.d_ServiceDate.Value,
                                        TelefonoTrabajador = B.v_TelephoneNumber,
                                        CelularTrabajador = "",
                                        EmailTrabajador = B.v_Mail,
                                        FechaNacimiento = B.d_Birthdate.Value,
                                        GeneroTrabajador = B.i_SexTypeId == 1 ? "M" : "F",
                                        Anannesis = A.v_Story,
                                        v_CustomerOrganizationId = C.v_CustomerOrganizationId,
                                        v_CustomerLocationId = C.v_CustomerLocationId,
                                        Aptitud = J4.v_Value1
                                    };


                    if (!string.IsNullOrEmpty(pstrFilterExpression))
                    {
                        objEntity = objEntity.Where(pstrFilterExpression);
                    }

                    #endregion

                    var sql = (from a in objEntity.ToList()

                               #region Falta
                               let varPesoMaximo = PesoMaximo(varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ANTROPOMETRIA_ID && o.IdCampo == Constants.ANTROPOMETRIA_TALLA_ID) == null ? "" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ANTROPOMETRIA_ID && o.IdCampo == Constants.ANTROPOMETRIA_TALLA_ID).Valor)//Revisar Beto

                               #region Subquerys

                               //// Subquerys ************************************************************************
                               let nameMedicalCenter = GetNameMedicalCenter()
                               let nameDoctoPhisicalExam = GetNameDoctoPhisicalExam(a.IdServicio)
                               let age = GetAge(a.FechaNacimiento.Value)
                               let ageGroup = GetGrupoEtario(age)

                               #endregion

                               #region DX


                               //// Dx

                               //let varPresionArterialDx = GetDxByField(a.IdServicio, Constants.FUNCIONES_VITALES_PAS_ID, varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.FUNCIONES_VITALES_ID && o.IdCampo == Constants.FUNCIONES_VITALES_PAS_ID).Valor, varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.FUNCIONES_VITALES_ID && o.IdCampo == Constants.FUNCIONES_VITALES_PAD_ID).Valor)
                               //let varHDLDx = GetDxByField(a.IdServicio, Constants.PERFIL_HIPIDICO_COLESTEROL_HDL_ID, varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PERFIL_HIPIDICO_ID && o.IdCampo == Constants.PERFIL_HIPIDICO_COLESTEROL_HDL_ID).Valor, varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PERFIL_HIPIDICO_ID && o.IdCampo == Constants.PERFIL_HIPIDICO_COLESTEROL_HDL_DESEABLE_ID).Valor)
                               //let varIMCDx = GetDxByField(a.IdServicio, Constants.ANTROPOMETRIA_IMC_ID, varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ANTROPOMETRIA_ID && o.IdCampo == Constants.ANTROPOMETRIA_IMC_ID).Valor, varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ANTROPOMETRIA_ID && o.IdCampo == Constants.ANTROPOMETRIA_IMC_ID).Valor) //Revisar Beto
                               //let varHemoglobinaDX = GetDxByField(a.IdServicio, Constants.HEMOGLOBINA_ID, varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.LABORATORIO_HEMOGLOBINA_ID && o.IdCampo == Constants.HEMOGLOBINA_ID).Valor, varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.LABORATORIO_HEMOGLOBINA_ID && o.IdCampo == Constants.LABORATORIO_HEMOGLOBINA_VALOR_DESEABLE_ID).Valor)
                               //let varGlucosaDx = GetDxByField(a.IdServicio, Constants.GLUCOSA_GLUCOSA_ID, varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.GLUCOSA_ID && o.IdCampo == Constants.GLUCOSA_GLUCOSA_ID).Valor, varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.GLUCOSA_ID && o.IdCampo == Constants.GLUCOSA_GLUCOSA_VALOR_DESEABLE_ID).Valor)
                               //let varColesterolDx = GetDxByField(a.IdServicio, Constants.COLESTEROL_COLESTEROL_TOTAL_ID, varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.COLESTEROL_ID && o.IdCampo == Constants.COLESTEROL_COLESTEROL_TOTAL_ID).Valor, varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.COLESTEROL_ID && o.IdCampo == Constants.COLESTEROL_COLESTEROL_TOTAL_DESEABLE_ID).Valor)
                               //let varTrigliceridoDx = GetDxByField(a.IdServicio, Constants.PERFIL_HIPIDICO_TRIGLICERIDO_ID, varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PERFIL_HIPIDICO_ID && o.IdCampo == Constants.PERFIL_HIPIDICO_TRIGLICERIDO_ID).Valor, varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PERFIL_HIPIDICO_ID && o.IdCampo == Constants.PERFIL_HIPIDICO_TRIGLICERIDO_DESEABLE_ID).Valor)
                               //let varPSADx = GetDxByField(a.IdServicio, Constants.ANTIGENO_PROSTATICO_ANTIGENO_PROSTATICO_VALOR, varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.HEMOGRAMA_COMPLETO_ID && o.IdCampo == Constants.PERFIL_HIPIDICO_TRIGLICERIDO_ID).Valor, varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.HEMOGRAMA_COMPLETO_ID && o.IdCampo == Constants.ANTIGENO_PROSTATICO_VALOR_DESEABLE).Valor)

                               let varDxAudiometria = GetDiagnosticByServiceIdAndComponent(a.IdServicio, Constants.AUDIOMETRIA_ID)
                               let varDxEspirometria = GetDiagnosticByServiceIdAndComponent(a.IdServicio, Constants.ESPIROMETRIA_ID)

                               #endregion



                               #endregion

                               #region Ya Está

                               #region titulos

                               //// Titulos de campos (estos titulos se muestran siempre y cuando esten en el servicio)

                               //let varHemogramaA = ExistComponentInService(a.IdServicio, Constants.HEMOGRAMA_COMPLETO_ID) ? "HEMOGRAMA" : ""
                               //let varHemoglobinaA = ExistComponentInService(a.IdServicio, Constants.LABORATORIO_HEMOGLOBINA_ID) ? "HEMOGLOBINA" : ""
                               //let varGlucosaA = ExistComponentInService(a.IdServicio, Constants.GLUCOSA_ID) ? "GLUCOSA" : ""
                               //let varColesterolA = ExistComponentInService(a.IdServicio, Constants.COLESTEROL_ID) ? "COLESTEROL TOTAL" : ""
                               //let varHDLColesterolA = ExistComponentInService(a.IdServicio, Constants.PERFIL_HIPIDICO_ID) ? "HDL COLESTEROL TOTAL" : ""
                               //let varTrigliceridoA = ExistComponentInService(a.IdServicio, Constants.PERFIL_HIPIDICO_ID) ? "TRIGLICERIDOS" : ""
                               //let varPSAA = ExistComponentInService(a.IdServicio, Constants.HEMOGRAMA_COMPLETO_ID) ? "ANTIGENOS PROSTATICO" : ""
                               //let varExamenOrinaA = ExistComponentInService(a.IdServicio, Constants.EXAMEN_COMPLETO_DE_ORINA_ID) ? "EXAMEN COMPLETO DE ORINA" : ""
                               //let varRx = ExistComponentInService(a.IdServicio, Constants.RX_ID) ? "RX" : ""
                               //let varElectrocardiogramaA = ExistComponentInService(a.IdServicio, Constants.ELECTROCARDIOGRAMA_ID) ? "ELECTROCARDIOGRAMA" : ""



                               #endregion

                               #region Campos


                               ////   ****************************************************
                               ////let VarIMC = GetValueComponent(a.IdServicio, Constants.ANTROPOMETRIA_ID, Constants.ANTROPOMETRIA_IMC_ID)
                               ////let PerimetroAbdominal = GetValueComponent(a.IdServicio, Constants.ANTROPOMETRIA_ID, Constants.ANTROPOMETRIA_PERIMETRO_ABDOMINAL_ID)
                               ////let varPerimetroAbdominal = GetValueComponent(a.IdServicio, Constants.ANTROPOMETRIA_ID, Constants.ANTROPOMETRIA_PERIMETRO_ABDOMINAL_ID)
                               ////let varTalla = string.IsNullOrEmpty(GetValueComponent(a.IdServicio, Constants.ANTROPOMETRIA_ID, Constants.ANTROPOMETRIA_TALLA_ID)) ? "" : GetValueComponent(a.IdServicio, Constants.ANTROPOMETRIA_ID, Constants.ANTROPOMETRIA_TALLA_ID)
                               ////let varPeso = GetValueComponent(a.IdServicio, Constants.ANTROPOMETRIA_ID, Constants.ANTROPOMETRIA_PESO_ID)
                               //let VarPresionSistolica = GetValueComponent(a.IdServicio, Constants.FUNCIONES_VITALES_ID, Constants.FUNCIONES_VITALES_PAS_ID) == "0.00" ? "Sin Datos" : GetValueComponent(a.IdServicio, Constants.FUNCIONES_VITALES_ID, Constants.FUNCIONES_VITALES_PAS_ID)
                               //let VarPresionDiastolica = GetValueComponent(a.IdServicio, Constants.FUNCIONES_VITALES_ID, Constants.FUNCIONES_VITALES_PAD_ID) == "0.00" ? "Sin Datos" : GetValueComponent(a.IdServicio, Constants.FUNCIONES_VITALES_ID, Constants.FUNCIONES_VITALES_PAD_ID)
                               //let VarHemoglobina = GetValueComponent(a.IdServicio, Constants.LABORATORIO_HEMOGLOBINA_ID, Constants.HEMOGLOBINA_ID) == "0.00" ? "Sin Datos" : GetValueComponent(a.IdServicio, Constants.LABORATORIO_HEMOGLOBINA_ID, Constants.HEMOGLOBINA_ID)
                               //let VarHemoglobinaB = GetValueComponent(a.IdServicio, Constants.LABORATORIO_HEMOGLOBINA_ID, Constants.LABORATORIO_HEMOGLOBINA_VALOR_DESEABLE_ID) == "0.00" ? "Sin Datos" : GetValueComponent(a.IdServicio, Constants.LABORATORIO_HEMOGLOBINA_ID, Constants.LABORATORIO_HEMOGLOBINA_VALOR_DESEABLE_ID)
                               //let VarGlucosa = GetValueComponent(a.IdServicio, Constants.GLUCOSA_ID, Constants.GLUCOSA_GLUCOSA_ID) == "0.00" ? "Sin Datos" : GetValueComponent(a.IdServicio, Constants.GLUCOSA_ID, Constants.GLUCOSA_GLUCOSA_ID)
                               //let VarGlucosaB = GetValueComponent(a.IdServicio, Constants.GLUCOSA_ID, Constants.GLUCOSA_GLUCOSA_VALOR_DESEABLE_ID) == "0.00" ? "Sin Datos" : GetValueComponent(a.IdServicio, Constants.GLUCOSA_ID, Constants.GLUCOSA_GLUCOSA_VALOR_DESEABLE_ID)
                               //let VarColesterol = GetValueComponent(a.IdServicio, Constants.COLESTEROL_ID, Constants.COLESTEROL_COLESTEROL_TOTAL_ID) == "0.00" ? "Sin Datos" : GetValueComponent(a.IdServicio, Constants.COLESTEROL_ID, Constants.COLESTEROL_COLESTEROL_TOTAL_ID)
                               //let VarColesterolB = GetValueComponent(a.IdServicio, Constants.COLESTEROL_ID, Constants.COLESTEROL_COLESTEROL_TOTAL_DESEABLE_ID) == "0.00" ? "Sin Datos" : GetValueComponent(a.IdServicio, Constants.COLESTEROL_ID, Constants.COLESTEROL_COLESTEROL_TOTAL_DESEABLE_ID)
                               //let VarHDLColesterol = GetValueComponent(a.IdServicio, Constants.PERFIL_HIPIDICO_ID, Constants.PERFIL_HIPIDICO_COLESTEROL_HDL_ID) == "0.00" ? "Sin Datos" : GetValueComponent(a.IdServicio, Constants.PERFIL_HIPIDICO_ID, Constants.PERFIL_HIPIDICO_COLESTEROL_HDL_ID)
                               //let VarHDLColesterolB = GetValueComponent(a.IdServicio, Constants.PERFIL_HIPIDICO_ID, Constants.PERFIL_HIPIDICO_COLESTEROL_HDL_DESEABLE_ID) == "0.00" ? "Sin Datos" : GetValueComponent(a.IdServicio, Constants.PERFIL_HIPIDICO_ID, Constants.PERFIL_HIPIDICO_COLESTEROL_HDL_DESEABLE_ID)
                               //let VarTriglicerido = GetValueComponent(a.IdServicio, Constants.PERFIL_HIPIDICO_ID, Constants.PERFIL_HIPIDICO_TRIGLICERIDO_ID) == "0.00" ? "Sin Datos" : GetValueComponent(a.IdServicio, Constants.PERFIL_HIPIDICO_ID, Constants.PERFIL_HIPIDICO_TRIGLICERIDO_ID)
                               //let VarTrigliceridoB = GetValueComponent(a.IdServicio, Constants.PERFIL_HIPIDICO_ID, Constants.PERFIL_HIPIDICO_TRIGLICERIDO_DESEABLE_ID) == "0.00" ? "Sin Datos" : GetValueComponent(a.IdServicio, Constants.PERFIL_HIPIDICO_ID, Constants.PERFIL_HIPIDICO_TRIGLICERIDO_DESEABLE_ID)
                               //let VarPSA = GetValueComponent(a.IdServicio, Constants.HEMOGRAMA_COMPLETO_ID, Constants.ANTIGENO_PROSTATICO_ANTIGENO_PROSTATICO_VALOR) == "0.00" ? "Sin Datos" : GetValueComponent(a.IdServicio, Constants.HEMOGRAMA_COMPLETO_ID, Constants.ANTIGENO_PROSTATICO_ANTIGENO_PROSTATICO_VALOR)
                               //let VarPSAB = GetValueComponent(a.IdServicio, Constants.HEMOGRAMA_COMPLETO_ID, Constants.ANTIGENO_PROSTATICO_VALOR_DESEABLE) == "0.00" ? "Sin Datos" : GetValueComponent(a.IdServicio, Constants.HEMOGRAMA_COMPLETO_ID, Constants.ANTIGENO_PROSTATICO_VALOR_DESEABLE)

                               //let varHemograma = GetValueComponent(a.IdServicio, Constants.HEMOGRAMA_COMPLETO_ID, Constants.HEMOGRAMA_COMPLETO_CONCLUSIONES_DE_HEMOGRAMA)
                               //let varExamenFisicoDescripcion = GetValueComponent(a.IdServicio, Constants.EXAMEN_FISICO_ID, Constants.EXAMEN_FISICO_HALLAZGOS_ID)
                               //let varExamenClinico2 = GetValueComponent(a.IdServicio, Constants.EXAMEN_FISICO_7C_ID, Constants.EXAMEN_FISICO_7C_HALLAZGOS_ID)
                               //let varExamenOrina = GetValueComponent(a.IdServicio, Constants.EXAMEN_COMPLETO_DE_ORINA_ID, Constants.EXAMEN_COMPLETO_DE_ORINA_CONCLUSIONES_ID)
                               //let varTHENEVON = GetValueComponent(a.IdServicio, Constants.EXAMEN_D_HECES_ID, Constants.EXAMEN_D_HECES_THENEVON_EXAMEN_DE_HECES_ID)
                               //let varRxDescripcion = GetValueComponent(a.IdServicio, Constants.RX_ID, Constants.RX_CONCLUSIONES_RADIOGRAFICAS_DESCRIPCION_ID)
                               //let varElectrocardiograma = GetValueComponent(a.IdServicio, Constants.ELECTROCARDIOGRAMA_ID, Constants.ELECTROCARDIOGRAMA_DESCRIPCION_ID)
                               //let varPapanicolao = GetValueComponent(a.IdServicio, Constants.PAPANICOLAU_ID, Constants.PAPANICOLAU_HALLAZGOS)
                               //let varMamografia = GetValueComponent(a.IdServicio, Constants.PAPANICOLAU_ID, Constants.PAPANICOLAU_RADIOGRAFIA_RESULTADO_DE_LA_EVALUACION)
                               //let varEcoPelvica = GetValueComponent(a.IdServicio, Constants.ECOGRAFIA_PELVICA_ID, Constants.ECOGRAFIA_PELVICA_HALLAZGOS)
                               //let varEcoTransvaginal = GetValueComponent(a.IdServicio, Constants.ECOGRAFIA_TRANSVAGINAL_ID, Constants.ECOGRAFIA_TRANSVAGINAL_HALLAZGOS)
                               //let varColonoscopia = GetValueComponent(a.IdServicio, Constants.COLONOSCOPIA_ID, Constants.COLONOSCOPIA_HALLAZGOS)
                               //let varDesintometriaOsea = GetValueComponent(a.IdServicio, Constants.DENSITOMETRIA_OSEA_ID, Constants.DENSITOMETRIA_OSEA_HALLAZGOS)
                               //let varEvOdontologica = GetValueComponent(a.IdServicio, Constants.ODONTOGRAMA_ID, Constants.ODONTOGRAMA_CONCLUSIONES_DESCRIPCION_ID)
                               //let varEvOftalmologica = GetValueComponent(a.IdServicio, Constants.OFTALMOLOGIA_ID, Constants.OFTALMOLOGIA_HALLAZGOS_ID)
                               //let varEvPsicologica = GetValueComponent(a.IdServicio, Constants.PSICOLOGIA_ID, Constants.PSICOLOGIA_AREA_CONCLUSIONES_ID) // revisar ... me pusistes la constante : N002-MF000000368 que es PRUEBA_ESFUERZO_METS_ID







                               #endregion
                               #region Antecedentes


                               //// Antecedentes

                               //let AntecPer1 = GetPersonMedicalHistory(a.IdTrabajador, 0) == null ? "" : GetPersonMedicalHistory(a.IdTrabajador, 0)
                               //let AntecPer2 = GetPersonMedicalHistory(a.IdTrabajador, 1) == null ? "" : GetPersonMedicalHistory(a.IdTrabajador, 1)
                               //let AntecPer3 = GetPersonMedicalHistory(a.IdTrabajador, 2) == null ? "" : GetPersonMedicalHistory(a.IdTrabajador, 2)
                               //let AntecPer4 = GetPersonMedicalHistory(a.IdTrabajador, 3) == null ? "" : GetPersonMedicalHistory(a.IdTrabajador, 3)
                               //let AntecPer5 = GetPersonMedicalHistory(a.IdTrabajador, 4) == null ? "" : GetPersonMedicalHistory(a.IdTrabajador, 4)
                               //let AntecPer6 = GetPersonMedicalHistory(a.IdTrabajador, 5) == null ? "" : GetPersonMedicalHistory(a.IdTrabajador, 5)

                               //let AntecFam1 = GetFamilyMedical(a.IdTrabajador, 0) == null ? "" : GetFamilyMedical(a.IdTrabajador, 0)
                               //let AntecFam2 = GetFamilyMedical(a.IdTrabajador, 1) == null ? "" : GetFamilyMedical(a.IdTrabajador, 1)
                               //let AntecFam3 = GetFamilyMedical(a.IdTrabajador, 2) == null ? "" : GetFamilyMedical(a.IdTrabajador, 2)
                               //let AntecFam4 = GetFamilyMedical(a.IdTrabajador, 3) == null ? "" : GetFamilyMedical(a.IdTrabajador, 3)
                               //let AntecFam5 = GetFamilyMedical(a.IdTrabajador, 4) == null ? "" : GetFamilyMedical(a.IdTrabajador, 4)

                               //
                               #endregion
                               #region Recomendaciones y Dx

                               //// Recomendaciones
                               //let varRecomendacion1 = GetRecomendationByServiceId(a.IdServicio, 0) == null ? "" : GetRecomendationByServiceId(a.IdServicio, 0)
                               //let varRecomendacion2 = GetRecomendationByServiceId(a.IdServicio, 1) == null ? "" : GetRecomendationByServiceId(a.IdServicio, 1)
                               //let varRecomendacion3 = GetRecomendationByServiceId(a.IdServicio, 2) == null ? "" : GetRecomendationByServiceId(a.IdServicio, 2)
                               //let varRecomendacion4 = GetRecomendationByServiceId(a.IdServicio, 3) == null ? "" : GetRecomendationByServiceId(a.IdServicio, 3)
                               //let varRecomendacion5 = GetRecomendationByServiceId(a.IdServicio, 4) == null ? "" : GetRecomendationByServiceId(a.IdServicio, 4)
                               //let varRecomendacion6 = GetRecomendationByServiceId(a.IdServicio, 5) == null ? "" : GetRecomendationByServiceId(a.IdServicio, 5)
                               //let varRecomendacion7 = GetRecomendationByServiceId(a.IdServicio, 6) == null ? "" : GetRecomendationByServiceId(a.IdServicio, 6)
                               //let varRecomendacion8 = GetRecomendationByServiceId(a.IdServicio, 7) == null ? "" : GetRecomendationByServiceId(a.IdServicio, 7)
                               //let varRecomendacion9 = GetRecomendationByServiceId(a.IdServicio, 8) == null ? "" : GetRecomendationByServiceId(a.IdServicio, 8)
                               //let varRecomendacion10 = GetRecomendationByServiceId(a.IdServicio, 9) == null ? "" : GetRecomendationByServiceId(a.IdServicio, 9)
                               //let varRecomendacion11 = GetRecomendationByServiceId(a.IdServicio, 10) == null ? "" : GetRecomendationByServiceId(a.IdServicio, 10)
                               //let varRecomendacion12 = GetRecomendationByServiceId(a.IdServicio, 11) == null ? "" : GetRecomendationByServiceId(a.IdServicio, 11)
                               //let varRecomendacion13 = GetRecomendationByServiceId(a.IdServicio, 12) == null ? "" : GetRecomendationByServiceId(a.IdServicio, 12)
                               //let varRecomendacion14 = GetRecomendationByServiceId(a.IdServicio, 13) == null ? "" : GetRecomendationByServiceId(a.IdServicio, 13)

                               //let varDx1 = GetDxByServiceId(a.IdServicio, 0) == null ? "" : GetDxByServiceId(a.IdServicio, 0)
                               //let varDx2 = GetDxByServiceId(a.IdServicio, 1) == null ? "" : GetDxByServiceId(a.IdServicio, 1)
                               //let varDx3 = GetDxByServiceId(a.IdServicio, 2) == null ? "" : GetDxByServiceId(a.IdServicio, 2)
                               //let varDx4 = GetDxByServiceId(a.IdServicio, 3) == null ? "" : GetDxByServiceId(a.IdServicio, 3)
                               //let varDx5 = GetDxByServiceId(a.IdServicio, 4) == null ? "" : GetDxByServiceId(a.IdServicio, 4)
                               //let varDx6 = GetDxByServiceId(a.IdServicio, 5) == null ? "" : GetDxByServiceId(a.IdServicio, 5)
                               //let varDx7 = GetDxByServiceId(a.IdServicio, 6) == null ? "" : GetDxByServiceId(a.IdServicio, 6)
                               //let varDx8 = GetDxByServiceId(a.IdServicio, 7) == null ? "" : GetDxByServiceId(a.IdServicio, 7)
                               #endregion
                               #endregion

                               select new ReportAseguradora
                               {
                                   #region No Sirve
                                   //Peso = varPeso,
                                   //IMC = VarIMC,
                                   //PerimetroAbdominal = varPerimetroAbdominal,
                                   //Talla = varTalla,

                                   //PresionSistolica = varValores.Find(p => p.IdComponente == Constants.FUNCIONES_VITALES_ID && p.IdCampo == Constants.FUNCIONES_VITALES_PAS_ID).Valor == "0" ? "Sin Datos" : varValores.Find(p => p.IdComponente == Constants.FUNCIONES_VITALES_ID && p.IdCampo == Constants.FUNCIONES_VITALES_PAS_ID).Valor,
                                   //PresionDiastolica = varValores.Find(p => p.IdComponente == Constants.FUNCIONES_VITALES_ID && p.IdCampo == Constants.FUNCIONES_VITALES_PAD_ID).Valor == "0" ? "Sin Datos" : varValores.Find(p => p.IdComponente == Constants.FUNCIONES_VITALES_ID && p.IdCampo == Constants.FUNCIONES_VITALES_PAD_ID).Valor,                                                                  
                                   //Hemograma = varValores.Find(p => p.IdComponente == Constants.HEMOGRAMA_COMPLETO_ID && p.IdCampo == Constants.HEMOGRAMA_COMPLETO_CONCLUSIONES_DE_HEMOGRAMA) == null || varValores.Find(p => p.IdComponente == Constants.HEMOGRAMA_COMPLETO_ID && p.IdCampo == Constants.HEMOGRAMA_COMPLETO_CONCLUSIONES_DE_HEMOGRAMA).Valor == "0" ? "" : varValores.Find(p => p.IdComponente == Constants.HEMOGRAMA_COMPLETO_ID && p.IdCampo == Constants.HEMOGRAMA_COMPLETO_CONCLUSIONES_DE_HEMOGRAMA).Valor,
                                   //Hemoglobina = varValores.Find(p => p.IdComponente == Constants.LABORATORIO_HEMOGLOBINA_ID && p.IdCampo == Constants.HEMOGLOBINA_ID) == null || varValores.Find(p => p.IdComponente == Constants.LABORATORIO_HEMOGLOBINA_ID && p.IdCampo == Constants.HEMOGLOBINA_ID).Valor == "0" ? "Sin Datos" : varValores.Find(p => p.IdComponente == Constants.LABORATORIO_HEMOGLOBINA_ID && p.IdCampo == Constants.HEMOGLOBINA_ID).Valor,
                                   //HemoglobinaB = varValores.Find(p => p.IdComponente == Constants.LABORATORIO_HEMOGLOBINA_ID && p.IdCampo == Constants.LABORATORIO_HEMOGLOBINA_VALOR_DESEABLE_ID) == null || varValores.Find(p => p.IdComponente == Constants.LABORATORIO_HEMOGLOBINA_ID && p.IdCampo == Constants.LABORATORIO_HEMOGLOBINA_VALOR_DESEABLE_ID).Valor == "0" ? "Sin Datos" : varValores.Find(p => p.IdComponente == Constants.LABORATORIO_HEMOGLOBINA_ID && p.IdCampo == Constants.LABORATORIO_HEMOGLOBINA_VALOR_DESEABLE_ID).Valor,
                                   //Glucosa = varValores.Find(p => p.IdComponente == Constants.GLUCOSA_ID && p.IdCampo == Constants.GLUCOSA_GLUCOSA_ID) == null || varValores.Find(p => p.IdComponente == Constants.GLUCOSA_ID && p.IdCampo == Constants.GLUCOSA_GLUCOSA_ID).Valor == "0" ? "Sin Datos" : varValores.Find(p => p.IdComponente == Constants.GLUCOSA_ID && p.IdCampo == Constants.GLUCOSA_GLUCOSA_ID).Valor,
                                   //GlucosaB = varValores.Find(p => p.IdComponente == Constants.GLUCOSA_ID && p.IdCampo == Constants.GLUCOSA_GLUCOSA_VALOR_DESEABLE_ID) == null || varValores.Find(p => p.IdComponente == Constants.GLUCOSA_ID && p.IdCampo == Constants.GLUCOSA_GLUCOSA_VALOR_DESEABLE_ID).Valor == "0" ? "Sin Datos" : varValores.Find(p => p.IdComponente == Constants.GLUCOSA_ID && p.IdCampo == Constants.GLUCOSA_GLUCOSA_VALOR_DESEABLE_ID).Valor,
                                   //Colesterol = varValores.Find(p => p.IdComponente == Constants.COLESTEROL_ID && p.IdCampo == Constants.COLESTEROL_COLESTEROL_TOTAL_ID) == null || varValores.Find(p => p.IdComponente == Constants.COLESTEROL_ID && p.IdCampo == Constants.COLESTEROL_COLESTEROL_TOTAL_ID).Valor == "0" ? "Sin Datos" : varValores.Find(p => p.IdComponente == Constants.COLESTEROL_ID && p.IdCampo == Constants.COLESTEROL_COLESTEROL_TOTAL_ID).Valor,
                                   //ColesterolB = varValores.Find(p => p.IdComponente == Constants.COLESTEROL_ID && p.IdCampo == Constants.COLESTEROL_COLESTEROL_TOTAL_DESEABLE_ID) == null || varValores.Find(p => p.IdComponente == Constants.COLESTEROL_ID && p.IdCampo == Constants.COLESTEROL_COLESTEROL_TOTAL_DESEABLE_ID).Valor == "0" ? "Sin Datos" : varValores.Find(p => p.IdComponente == Constants.COLESTEROL_ID && p.IdCampo == Constants.COLESTEROL_COLESTEROL_TOTAL_DESEABLE_ID).Valor,
                                   //HDLColesterol = varValores.Find(p => p.IdComponente == Constants.PERFIL_HIPIDICO_ID && p.IdCampo == Constants.PERFIL_HIPIDICO_COLESTEROL_HDL_ID) == null || varValores.Find(p => p.IdComponente == Constants.PERFIL_HIPIDICO_ID && p.IdCampo == Constants.PERFIL_HIPIDICO_COLESTEROL_HDL_ID).Valor == "0" ? "Sin Datos" : varValores.Find(p => p.IdComponente == Constants.PERFIL_HIPIDICO_ID && p.IdCampo == Constants.PERFIL_HIPIDICO_COLESTEROL_HDL_ID).Valor,
                                   //HDLColesterolB = varValores.Find(p => p.IdComponente == Constants.PERFIL_HIPIDICO_ID && p.IdCampo == Constants.PERFIL_HIPIDICO_COLESTEROL_HDL_DESEABLE_ID) == null || varValores.Find(p => p.IdComponente == Constants.PERFIL_HIPIDICO_ID && p.IdCampo == Constants.PERFIL_HIPIDICO_COLESTEROL_HDL_DESEABLE_ID).Valor == "0" ? "Sin Datos" : varValores.Find(p => p.IdComponente == Constants.PERFIL_HIPIDICO_ID && p.IdCampo == Constants.PERFIL_HIPIDICO_COLESTEROL_HDL_DESEABLE_ID).Valor,
                                   //Triglicerido = varValores.Find(p => p.IdComponente == Constants.PERFIL_HIPIDICO_ID && p.IdCampo == Constants.PERFIL_HIPIDICO_TRIGLICERIDO_ID) == null || varValores.Find(p => p.IdComponente == Constants.PERFIL_HIPIDICO_ID && p.IdCampo == Constants.PERFIL_HIPIDICO_TRIGLICERIDO_ID).Valor == "0" ? "Sin Datos" : varValores.Find(p => p.IdComponente == Constants.PERFIL_HIPIDICO_ID && p.IdCampo == Constants.PERFIL_HIPIDICO_TRIGLICERIDO_ID).Valor,
                                   //TrigliceridoB = varValores.Find(p => p.IdComponente == Constants.PERFIL_HIPIDICO_ID && p.IdCampo == Constants.PERFIL_HIPIDICO_TRIGLICERIDO_DESEABLE_ID) == null || varValores.Find(p => p.IdComponente == Constants.PERFIL_HIPIDICO_ID && p.IdCampo == Constants.PERFIL_HIPIDICO_TRIGLICERIDO_DESEABLE_ID).Valor == "0" ? "Sin Datos" : varValores.Find(p => p.IdComponente == Constants.PERFIL_HIPIDICO_ID && p.IdCampo == Constants.PERFIL_HIPIDICO_TRIGLICERIDO_DESEABLE_ID).Valor,
                                   //PSA = varValores.Find(p => p.IdComponente == Constants.HEMOGRAMA_COMPLETO_ID && p.IdCampo == Constants.PERFIL_HIPIDICO_TRIGLICERIDO_ID) == null || varValores.Find(p => p.IdComponente == Constants.HEMOGRAMA_COMPLETO_ID && p.IdCampo == Constants.PERFIL_HIPIDICO_COLESTEROL_HDL_ID).Valor == "0" ? "Sin Datos" : varValores.Find(p => p.IdComponente == Constants.HEMOGRAMA_COMPLETO_ID && p.IdCampo == Constants.PERFIL_HIPIDICO_COLESTEROL_HDL_ID).Valor,
                                   //PSAB = varValores.Find(p => p.IdComponente == Constants.HEMOGRAMA_COMPLETO_ID && p.IdCampo == Constants.ANTIGENO_PROSTATICO_VALOR_DESEABLE) == null || varValores.Find(p => p.IdComponente == Constants.HEMOGRAMA_COMPLETO_ID && p.IdCampo == Constants.ANTIGENO_PROSTATICO_VALOR_DESEABLE).Valor == "0" ? "Sin Datos" : varValores.Find(p => p.IdComponente == Constants.HEMOGRAMA_COMPLETO_ID && p.IdCampo == Constants.ANTIGENO_PROSTATICO_VALOR_DESEABLE).Valor,
                                   //IMC = varValores.Find(p => p.IdComponente == Constants.ANTROPOMETRIA_ID && p.IdCampo == Constants.ANTROPOMETRIA_IMC_ID).Valor,
                                   //PerimetroAbdominal = varValores.Find(p => p.IdComponente == Constants.ANTROPOMETRIA_ID && p.IdCampo == Constants.ANTROPOMETRIA_PERIMETRO_ABDOMINAL_ID).Valor,
                                   //Talla = varValores.Find(p => p.IdComponente == Constants.ANTROPOMETRIA_ID && p.IdCampo == Constants.ANTROPOMETRIA_TALLA_ID).Valor,
                                   //Peso = varValores.Find(p => p.IdComponente == Constants.ANTROPOMETRIA_ID && p.IdCampo == Constants.ANTROPOMETRIA_PESO_ID).Valor,
                                   //ExamenFisicoDescripcion = varValores.Find(p => p.IdComponente == Constants.EXAMEN_FISICO_ID && p.IdCampo == Constants.EXAMEN_FISICO_HALLAZGOS_ID) == null || varValores.Find(p => p.IdComponente == Constants.EXAMEN_FISICO_ID && p.IdCampo == Constants.EXAMEN_FISICO_HALLAZGOS_ID).Valor == "0" ? "" : varValores.Find(p => p.IdComponente == Constants.EXAMEN_FISICO_ID && p.IdCampo == Constants.EXAMEN_FISICO_HALLAZGOS_ID).Valor,
                                   //ExamenClinico2 = varValores.Find(p => p.IdComponente == Constants.EXAMEN_FISICO_7C_ID && p.IdCampo == Constants.EXAMEN_FISICO_7C_HALLAZGOS_ID) == null || varValores.Find(p => p.IdComponente == Constants.EXAMEN_FISICO_7C_ID && p.IdCampo == Constants.EXAMEN_FISICO_7C_HALLAZGOS_ID).Valor == "0" ? "" : varValores.Find(p => p.IdComponente == Constants.EXAMEN_FISICO_7C_ID && p.IdCampo == Constants.EXAMEN_FISICO_7C_HALLAZGOS_ID).Valor,
                                   //ExamenOrina = varValores.Find(p => p.IdComponente == Constants.EXAMEN_COMPLETO_DE_ORINA_ID && p.IdCampo == Constants.EXAMEN_COMPLETO_DE_ORINA_CONCLUSIONES_ID) == null || varValores.Find(p => p.IdComponente == Constants.EXAMEN_COMPLETO_DE_ORINA_ID && p.IdCampo == Constants.EXAMEN_COMPLETO_DE_ORINA_CONCLUSIONES_ID).Valor == "0" ? "" : varValores.Find(p => p.IdComponente == Constants.EXAMEN_COMPLETO_DE_ORINA_ID && p.IdCampo == Constants.EXAMEN_COMPLETO_DE_ORINA_CONCLUSIONES_ID).Valor,
                                   //THENEVON = varValores.Find(p => p.IdComponente == Constants.EXAMEN_D_HECES_ID && p.IdCampo == Constants.EXAMEN_D_HECES_THENEVON_EXAMEN_DE_HECES_ID) == null || varValores.Find(p => p.IdComponente == Constants.EXAMEN_D_HECES_ID && p.IdCampo == Constants.EXAMEN_D_HECES_THENEVON_EXAMEN_DE_HECES_ID).Valor == "0" ? "" : varValores.Find(p => p.IdComponente == Constants.EXAMEN_D_HECES_ID && p.IdCampo == Constants.EXAMEN_D_HECES_THENEVON_EXAMEN_DE_HECES_ID).Valor,
                                   //RxDescripcion = varValores.Find(p => p.IdComponente == Constants.RX_ID && p.IdCampo == Constants.RX_CONCLUSIONES_RADIOGRAFICAS_DESCRIPCION_ID) == null || varValores.Find(p => p.IdComponente == Constants.RX_ID && p.IdCampo == Constants.RX_CONCLUSIONES_RADIOGRAFICAS_DESCRIPCION_ID).Valor == "0" ? "" : varValores.Find(p => p.IdComponente == Constants.RX_ID && p.IdCampo == Constants.RX_CONCLUSIONES_RADIOGRAFICAS_DESCRIPCION_ID).Valor,
                                   //Electrocardiograma = varValores.Find(p => p.IdComponente == Constants.ELECTROCARDIOGRAMA_ID && p.IdCampo == Constants.ELECTROCARDIOGRAMA_DESCRIPCION_ID) == null || varValores.Find(p => p.IdComponente == Constants.ELECTROCARDIOGRAMA_ID && p.IdCampo == Constants.ELECTROCARDIOGRAMA_DESCRIPCION_ID).Valor == "0" ? "" : varValores.Find(p => p.IdComponente == Constants.ELECTROCARDIOGRAMA_ID && p.IdCampo == Constants.ELECTROCARDIOGRAMA_DESCRIPCION_ID).Valor,
                                   //Papanicolao = varValores.Find(p => p.IdComponente == Constants.PAPANICOLAU_ID && p.IdCampo == Constants.PAPANICOLAU_HALLAZGOS) == null || varValores.Find(p => p.IdComponente == Constants.PAPANICOLAU_ID && p.IdCampo == Constants.PAPANICOLAU_HALLAZGOS).Valor == "0" ? "" : varValores.Find(p => p.IdComponente == Constants.PAPANICOLAU_ID && p.IdCampo == Constants.PAPANICOLAU_HALLAZGOS).Valor,
                                   //Mamografia = varValores.Find(p => p.IdComponente == Constants.PAPANICOLAU_ID && p.IdCampo == Constants.PAPANICOLAU_RADIOGRAFIA_RESULTADO_DE_LA_EVALUACION) == null || varValores.Find(p => p.IdComponente == Constants.PAPANICOLAU_ID && p.IdCampo == Constants.PAPANICOLAU_RADIOGRAFIA_RESULTADO_DE_LA_EVALUACION).Valor == "0" ? "" : varValores.Find(p => p.IdComponente == Constants.PAPANICOLAU_ID && p.IdCampo == Constants.PAPANICOLAU_RADIOGRAFIA_RESULTADO_DE_LA_EVALUACION).Valor,
                                   //EcoPelvica = varValores.Find(p => p.IdComponente == Constants.ECOGRAFIA_PELVICA_ID && p.IdCampo == Constants.ECOGRAFIA_PELVICA_HALLAZGOS) == null || varValores.Find(p => p.IdComponente == Constants.ECOGRAFIA_PELVICA_ID && p.IdCampo == Constants.ECOGRAFIA_PELVICA_HALLAZGOS).Valor == "0" ? "" : varValores.Find(p => p.IdComponente == Constants.ECOGRAFIA_PELVICA_ID && p.IdCampo == Constants.ECOGRAFIA_PELVICA_HALLAZGOS).Valor,
                                   //EcoTransvaginal = varValores.Find(p => p.IdComponente == Constants.ECOGRAFIA_TRANSVAGINAL_ID && p.IdCampo == Constants.ECOGRAFIA_TRANSVAGINAL_HALLAZGOS) == null || varValores.Find(p => p.IdComponente == Constants.ECOGRAFIA_TRANSVAGINAL_ID && p.IdCampo == Constants.ECOGRAFIA_TRANSVAGINAL_HALLAZGOS).Valor == "0" ? "" : varValores.Find(p => p.IdComponente == Constants.ECOGRAFIA_TRANSVAGINAL_ID && p.IdCampo == Constants.ECOGRAFIA_TRANSVAGINAL_HALLAZGOS).Valor,
                                   //Colonoscopia = varValores.Find(p => p.IdComponente == Constants.COLONOSCOPIA_ID && p.IdCampo == Constants.COLONOSCOPIA_HALLAZGOS) == null || varValores.Find(p => p.IdComponente == Constants.COLONOSCOPIA_ID && p.IdCampo == Constants.COLONOSCOPIA_HALLAZGOS).Valor == "0" ? "" : varValores.Find(p => p.IdComponente == Constants.COLONOSCOPIA_ID && p.IdCampo == Constants.COLONOSCOPIA_HALLAZGOS).Valor,
                                   //DesintometriaOsea = varValores.Find(p => p.IdComponente == Constants.DENSITOMETRIA_OSEA_ID && p.IdCampo == Constants.DENSITOMETRIA_OSEA_HALLAZGOS) == null || varValores.Find(p => p.IdComponente == Constants.DENSITOMETRIA_OSEA_ID && p.IdCampo == Constants.DENSITOMETRIA_OSEA_HALLAZGOS).Valor == "0" ? "" : varValores.Find(p => p.IdComponente == Constants.DENSITOMETRIA_OSEA_ID && p.IdCampo == Constants.DENSITOMETRIA_OSEA_HALLAZGOS).Valor,
                                   //EvOdontologica = varValores.Find(p => p.IdComponente == Constants.ODONTOGRAMA_ID && p.IdCampo == Constants.ODONTOGRAMA_CONCLUSIONES_DESCRIPCION_ID) == null || varValores.Find(p => p.IdComponente == Constants.ODONTOGRAMA_ID && p.IdCampo == Constants.ODONTOGRAMA_CONCLUSIONES_DESCRIPCION_ID).Valor == "0" ? "" : varValores.Find(p => p.IdComponente == Constants.ODONTOGRAMA_ID && p.IdCampo == Constants.ODONTOGRAMA_CONCLUSIONES_DESCRIPCION_ID).Valor,
                                   //EvOftalmologica = varValores.Find(p => p.IdComponente == Constants.OFTALMOLOGIA_ID && p.IdCampo == Constants.OFTALMOLOGIA_HALLAZGOS_ID) == null || varValores.Find(p => p.IdComponente == Constants.OFTALMOLOGIA_ID && p.IdCampo == Constants.OFTALMOLOGIA_HALLAZGOS_ID).Valor == "0" ? "" : varValores.Find(p => p.IdComponente == Constants.OFTALMOLOGIA_ID && p.IdCampo == Constants.OFTALMOLOGIA_HALLAZGOS_ID).Valor,
                                   //EvPsicológica = varValores.Find(p => p.IdComponente == Constants.PSICOLOGIA_ID && p.IdCampo == Constants.PSICOLOGIA_AREA_CONCLUSIONES_ID) == null || varValores.Find(p => p.IdComponente == Constants.PSICOLOGIA_ID && p.IdCampo == Constants.PSICOLOGIA_AREA_CONCLUSIONES_ID).Valor == "0" ? "" : varValores.Find(p => p.IdComponente == Constants.PSICOLOGIA_ID && p.IdCampo == Constants.PSICOLOGIA_AREA_CONCLUSIONES_ID).Valor,



                                   #endregion

                                   Aptitud = a.Aptitud,
                                   IdServicio = a.IdServicio,
                                   IdProtocolId = a.IdProtocolId,
                                   IdTrabajador = a.IdTrabajador,
                                   Trabajador = a.Trabajador,
                                   NroDNI = a.NroDNI,
                                   PuestoTrabajo = a.PuestoTrabajo,
                                   Parentesco = a.Parentesco,
                                   NombreTitular = a.NombreTitular,
                                   EmpresaTrabajo = a.EmpresaTrabajo,
                                   Producto = a.Producto,
                                   DireccionTrabajador = a.DireccionTrabajador,
                                   Proveedor = a.Proveedor,
                                   Modalidad = a.Modalidad,
                                   FechaServicio = a.FechaServicioDate.ToShortDateString(),
                                   TelefonoTrabajador = a.TelefonoTrabajador,
                                   CelularTrabajador = a.CelularTrabajador,
                                   EmailTrabajador = a.EmailTrabajador,
                                   FechaNacimiento = a.FechaNacimiento,
                                   GeneroTrabajador = a.GeneroTrabajador,
                                   AntecedentePersonal1 = varAntecedentes.Find(p => p.PersonId == a.IdTrabajador).ListaAntecendentes[0].v_DiseasesName,
                                   AntecedentePersonal2 = varAntecedentes.Find(p => p.PersonId == a.IdTrabajador).ListaAntecendentes[1].v_DiseasesName,
                                   AntecedentePersonal3 = varAntecedentes.Find(p => p.PersonId == a.IdTrabajador).ListaAntecendentes[2].v_DiseasesName,
                                   AntecedentePersonal4 = varAntecedentes.Find(p => p.PersonId == a.IdTrabajador).ListaAntecendentes[3].v_DiseasesName,
                                   AntecedentePersonal5 = varAntecedentes.Find(p => p.PersonId == a.IdTrabajador).ListaAntecendentes[4].v_DiseasesName,
                                   AntecedentePersonal6 = varAntecedentes.Find(p => p.PersonId == a.IdTrabajador).ListaAntecendentes[5].v_DiseasesName,
                                   AntecedenteFamiliar1 = varAntecedentes.Find(p => p.PersonId == a.IdTrabajador).ListaAntecendentes[6].v_DiseasesName,
                                   AntecedenteFamiliar2 = varAntecedentes.Find(p => p.PersonId == a.IdTrabajador).ListaAntecendentes[7].v_DiseasesName,
                                   AntecedenteFamiliar3 = varAntecedentes.Find(p => p.PersonId == a.IdTrabajador).ListaAntecendentes[8].v_DiseasesName,
                                   AntecedenteFamiliar4 = varAntecedentes.Find(p => p.PersonId == a.IdTrabajador).ListaAntecendentes[9].v_DiseasesName,
                                   AntecedenteFamiliar5 = varAntecedentes.Find(p => p.PersonId == a.IdTrabajador).ListaAntecendentes[10].v_DiseasesName,

                                   PresionSistolica = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.FUNCIONES_VITALES_ID && o.IdCampo == Constants.FUNCIONES_VITALES_PAS_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.FUNCIONES_VITALES_ID && o.IdCampo == Constants.FUNCIONES_VITALES_PAS_ID).Valor == "0.00" ? "Sin Datos" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.FUNCIONES_VITALES_ID && o.IdCampo == Constants.FUNCIONES_VITALES_PAS_ID).Valor,
                                   PresionDiastolica = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.FUNCIONES_VITALES_ID && o.IdCampo == Constants.FUNCIONES_VITALES_PAD_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.FUNCIONES_VITALES_ID && o.IdCampo == Constants.FUNCIONES_VITALES_PAD_ID).Valor == "0.00" ? "Sin Datos" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.FUNCIONES_VITALES_ID && o.IdCampo == Constants.FUNCIONES_VITALES_PAD_ID).Valor,
                                   Hemograma = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.HEMOGRAMA_COMPLETO_ID && o.IdCampo == Constants.HEMOGRAMA_COMPLETO_CONCLUSIONES_DE_HEMOGRAMA) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.HEMOGRAMA_COMPLETO_ID && o.IdCampo == Constants.HEMOGRAMA_COMPLETO_CONCLUSIONES_DE_HEMOGRAMA).Valor == "0.00" ? "Sin Datos" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.HEMOGRAMA_COMPLETO_ID && o.IdCampo == Constants.HEMOGRAMA_COMPLETO_CONCLUSIONES_DE_HEMOGRAMA).Valor,
                                   Hemoglobina = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.LABORATORIO_HEMOGLOBINA_ID && o.IdCampo == Constants.HEMOGLOBINA_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.LABORATORIO_HEMOGLOBINA_ID && o.IdCampo == Constants.HEMOGLOBINA_ID).Valor == "0.00" ? "Sin Datos" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.LABORATORIO_HEMOGLOBINA_ID && o.IdCampo == Constants.HEMOGLOBINA_ID).Valor,
                                   HemoglobinaB = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.LABORATORIO_HEMOGLOBINA_ID && o.IdCampo == Constants.LABORATORIO_HEMOGLOBINA_VALOR_DESEABLE_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.LABORATORIO_HEMOGLOBINA_ID && o.IdCampo == Constants.LABORATORIO_HEMOGLOBINA_VALOR_DESEABLE_ID).Valor == "0.00" ? "Sin Datos" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.LABORATORIO_HEMOGLOBINA_ID && o.IdCampo == Constants.LABORATORIO_HEMOGLOBINA_VALOR_DESEABLE_ID).Valor,
                                   Glucosa = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.GLUCOSA_ID && o.IdCampo == Constants.GLUCOSA_GLUCOSA_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.GLUCOSA_ID && o.IdCampo == Constants.GLUCOSA_GLUCOSA_ID).Valor == "0.00" ? "Sin Datos" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.GLUCOSA_ID && o.IdCampo == Constants.GLUCOSA_GLUCOSA_ID).Valor,
                                   GlucosaB = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.GLUCOSA_ID && o.IdCampo == Constants.GLUCOSA_GLUCOSA_VALOR_DESEABLE_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.GLUCOSA_ID && o.IdCampo == Constants.GLUCOSA_GLUCOSA_VALOR_DESEABLE_ID).Valor == "0.00" ? "Sin Datos" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.GLUCOSA_ID && o.IdCampo == Constants.GLUCOSA_GLUCOSA_VALOR_DESEABLE_ID).Valor,
                                   Colesterol = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.COLESTEROL_ID && o.IdCampo == Constants.COLESTEROL_COLESTEROL_TOTAL_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.COLESTEROL_ID && o.IdCampo == Constants.COLESTEROL_COLESTEROL_TOTAL_ID).Valor == "0.00" ? "Sin Datos" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.COLESTEROL_ID && o.IdCampo == Constants.COLESTEROL_COLESTEROL_TOTAL_ID).Valor,
                                   ColesterolB = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.COLESTEROL_ID && o.IdCampo == Constants.COLESTEROL_COLESTEROL_TOTAL_DESEABLE_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.COLESTEROL_ID && o.IdCampo == Constants.COLESTEROL_COLESTEROL_TOTAL_DESEABLE_ID).Valor == "0.00" ? "Sin Datos" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.COLESTEROL_ID && o.IdCampo == Constants.COLESTEROL_COLESTEROL_TOTAL_DESEABLE_ID).Valor,
                                   HDLColesterol = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PERFIL_HIPIDICO_ID && o.IdCampo == Constants.PERFIL_HIPIDICO_COLESTEROL_HDL_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PERFIL_HIPIDICO_ID && o.IdCampo == Constants.PERFIL_HIPIDICO_COLESTEROL_HDL_ID).Valor == "0.00" ? "Sin Datos" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PERFIL_HIPIDICO_ID && o.IdCampo == Constants.PERFIL_HIPIDICO_COLESTEROL_HDL_ID).Valor,
                                   HDLColesterolB = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PERFIL_HIPIDICO_ID && o.IdCampo == Constants.PERFIL_HIPIDICO_COLESTEROL_HDL_DESEABLE_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PERFIL_HIPIDICO_ID && o.IdCampo == Constants.PERFIL_HIPIDICO_COLESTEROL_HDL_DESEABLE_ID).Valor == "0.00" ? "Sin Datos" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PERFIL_HIPIDICO_ID && o.IdCampo == Constants.PERFIL_HIPIDICO_COLESTEROL_HDL_DESEABLE_ID).Valor,
                                   Triglicerido = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PERFIL_HIPIDICO_ID && o.IdCampo == Constants.PERFIL_HIPIDICO_TRIGLICERIDO_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PERFIL_HIPIDICO_ID && o.IdCampo == Constants.PERFIL_HIPIDICO_TRIGLICERIDO_ID).Valor == "0.00" ? "Sin Datos" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PERFIL_HIPIDICO_ID && o.IdCampo == Constants.PERFIL_HIPIDICO_TRIGLICERIDO_ID).Valor,
                                   TrigliceridoB = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PERFIL_HIPIDICO_ID && o.IdCampo == Constants.PERFIL_HIPIDICO_TRIGLICERIDO_DESEABLE_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PERFIL_HIPIDICO_ID && o.IdCampo == Constants.PERFIL_HIPIDICO_TRIGLICERIDO_DESEABLE_ID).Valor == "0.00" ? "Sin Datos" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PERFIL_HIPIDICO_ID && o.IdCampo == Constants.PERFIL_HIPIDICO_TRIGLICERIDO_DESEABLE_ID).Valor,
                                   PSA = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.HEMOGRAMA_COMPLETO_ID && o.IdCampo == Constants.PERFIL_HIPIDICO_TRIGLICERIDO_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.HEMOGRAMA_COMPLETO_ID && o.IdCampo == Constants.PERFIL_HIPIDICO_TRIGLICERIDO_ID).Valor == "0.00" ? "Sin Datos" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.HEMOGRAMA_COMPLETO_ID && o.IdCampo == Constants.PERFIL_HIPIDICO_TRIGLICERIDO_ID).Valor,
                                   PSAB = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.HEMOGRAMA_COMPLETO_ID && o.IdCampo == Constants.ANTIGENO_PROSTATICO_VALOR_DESEABLE) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.HEMOGRAMA_COMPLETO_ID && o.IdCampo == Constants.ANTIGENO_PROSTATICO_VALOR_DESEABLE).Valor == "0.00" ? "Sin Datos" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.HEMOGRAMA_COMPLETO_ID && o.IdCampo == Constants.ANTIGENO_PROSTATICO_VALOR_DESEABLE).Valor,
                                   IMC = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ANTROPOMETRIA_ID && o.IdCampo == Constants.ANTROPOMETRIA_IMC_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ANTROPOMETRIA_ID && o.IdCampo == Constants.ANTROPOMETRIA_IMC_ID).Valor == "0.00" ? "" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ANTROPOMETRIA_ID && o.IdCampo == Constants.ANTROPOMETRIA_IMC_ID).Valor,
                                   PerimetroAbdominal = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ANTROPOMETRIA_ID && o.IdCampo == Constants.ANTROPOMETRIA_PERIMETRO_ABDOMINAL_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ANTROPOMETRIA_ID && o.IdCampo == Constants.ANTROPOMETRIA_PERIMETRO_ABDOMINAL_ID).Valor == "0.00" ? "" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ANTROPOMETRIA_ID && o.IdCampo == Constants.ANTROPOMETRIA_PERIMETRO_ABDOMINAL_ID).Valor,
                                   Talla = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ANTROPOMETRIA_ID && o.IdCampo == Constants.ANTROPOMETRIA_TALLA_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ANTROPOMETRIA_ID && o.IdCampo == Constants.ANTROPOMETRIA_TALLA_ID).Valor == "0.00" ? "" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ANTROPOMETRIA_ID && o.IdCampo == Constants.ANTROPOMETRIA_TALLA_ID).Valor,
                                   Peso = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ANTROPOMETRIA_ID && o.IdCampo == Constants.ANTROPOMETRIA_PESO_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ANTROPOMETRIA_ID && o.IdCampo == Constants.ANTROPOMETRIA_PESO_ID).Valor == "0.00" ? "" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ANTROPOMETRIA_ID && o.IdCampo == Constants.ANTROPOMETRIA_PESO_ID).Valor,

                                   ExamenFisicoDescripcion = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.EXAMEN_FISICO_ID && o.IdCampo == Constants.EXAMEN_FISICO_HALLAZGOS_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.EXAMEN_FISICO_ID && o.IdCampo == Constants.EXAMEN_FISICO_HALLAZGOS_ID).Valor == "0.00" ? "" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.EXAMEN_FISICO_ID && o.IdCampo == Constants.EXAMEN_FISICO_HALLAZGOS_ID).Valor,
                                   ExamenClinico2 = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.EXAMEN_FISICO_7C_ID && o.IdCampo == Constants.EXAMEN_FISICO_7C_HALLAZGOS_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.EXAMEN_FISICO_7C_ID && o.IdCampo == Constants.EXAMEN_FISICO_7C_HALLAZGOS_ID).Valor == "0.00" ? "" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.EXAMEN_FISICO_7C_ID && o.IdCampo == Constants.EXAMEN_FISICO_7C_HALLAZGOS_ID).Valor,
                                   ExamenOrina = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.EXAMEN_COMPLETO_DE_ORINA_ID && o.IdCampo == Constants.EXAMEN_COMPLETO_DE_ORINA_CONCLUSIONES_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.EXAMEN_COMPLETO_DE_ORINA_ID && o.IdCampo == Constants.EXAMEN_COMPLETO_DE_ORINA_CONCLUSIONES_ID).Valor == "0.00" ? "" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.EXAMEN_COMPLETO_DE_ORINA_ID && o.IdCampo == Constants.EXAMEN_COMPLETO_DE_ORINA_CONCLUSIONES_ID).Valor,
                                   THENEVON = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.EXAMEN_D_HECES_ID && o.IdCampo == Constants.EXAMEN_D_HECES_THENEVON_EXAMEN_DE_HECES_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.EXAMEN_D_HECES_ID && o.IdCampo == Constants.EXAMEN_D_HECES_THENEVON_EXAMEN_DE_HECES_ID).Valor == "0.00" ? "" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.EXAMEN_D_HECES_ID && o.IdCampo == Constants.EXAMEN_D_HECES_THENEVON_EXAMEN_DE_HECES_ID).Valor,
                                   RxDescripcion = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.RX_ID && o.IdCampo == Constants.RX_CONCLUSIONES_RADIOGRAFICAS_DESCRIPCION_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.RX_ID && o.IdCampo == Constants.RX_CONCLUSIONES_RADIOGRAFICAS_DESCRIPCION_ID).Valor == "0.00" ? "" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.RX_ID && o.IdCampo == Constants.RX_CONCLUSIONES_RADIOGRAFICAS_DESCRIPCION_ID).Valor,
                                   Electrocardiograma = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ELECTROCARDIOGRAMA_ID && o.IdCampo == Constants.ELECTROCARDIOGRAMA_DESCRIPCION_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ELECTROCARDIOGRAMA_ID && o.IdCampo == Constants.ELECTROCARDIOGRAMA_DESCRIPCION_ID).Valor == "0.00" ? "" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ELECTROCARDIOGRAMA_ID && o.IdCampo == Constants.ELECTROCARDIOGRAMA_DESCRIPCION_ID).Valor,
                                   Papanicolao = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PAPANICOLAU_ID && o.IdCampo == Constants.PAPANICOLAU_HALLAZGOS) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PAPANICOLAU_ID && o.IdCampo == Constants.PAPANICOLAU_HALLAZGOS).Valor == "0.00" ? "" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PAPANICOLAU_ID && o.IdCampo == Constants.PAPANICOLAU_HALLAZGOS).Valor,
                                   Mamografia = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PAPANICOLAU_ID && o.IdCampo == Constants.PAPANICOLAU_RADIOGRAFIA_RESULTADO_DE_LA_EVALUACION) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PAPANICOLAU_ID && o.IdCampo == Constants.PAPANICOLAU_RADIOGRAFIA_RESULTADO_DE_LA_EVALUACION).Valor == "0.00" ? "" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PAPANICOLAU_ID && o.IdCampo == Constants.PAPANICOLAU_RADIOGRAFIA_RESULTADO_DE_LA_EVALUACION).Valor,
                                   EcoPelvica = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ECOGRAFIA_PELVICA_ID && o.IdCampo == Constants.ECOGRAFIA_PELVICA_HALLAZGOS) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ECOGRAFIA_PELVICA_ID && o.IdCampo == Constants.ECOGRAFIA_PELVICA_HALLAZGOS).Valor == "0.00" ? "" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ECOGRAFIA_PELVICA_ID && o.IdCampo == Constants.ECOGRAFIA_PELVICA_HALLAZGOS).Valor,
                                   EcoTransvaginal = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ECOGRAFIA_TRANSVAGINAL_ID && o.IdCampo == Constants.ECOGRAFIA_TRANSVAGINAL_HALLAZGOS) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ECOGRAFIA_TRANSVAGINAL_ID && o.IdCampo == Constants.ECOGRAFIA_TRANSVAGINAL_HALLAZGOS).Valor == "0.00" ? "" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ECOGRAFIA_TRANSVAGINAL_ID && o.IdCampo == Constants.ECOGRAFIA_TRANSVAGINAL_HALLAZGOS).Valor,
                                   Colonoscopia = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.COLONOSCOPIA_ID && o.IdCampo == Constants.COLONOSCOPIA_HALLAZGOS) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.COLONOSCOPIA_ID && o.IdCampo == Constants.COLONOSCOPIA_HALLAZGOS).Valor == "0.00" ? "" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.COLONOSCOPIA_ID && o.IdCampo == Constants.COLONOSCOPIA_HALLAZGOS).Valor,
                                   DesintometriaOsea = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.DENSITOMETRIA_OSEA_ID && o.IdCampo == Constants.DENSITOMETRIA_OSEA_HALLAZGOS) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.DENSITOMETRIA_OSEA_ID && o.IdCampo == Constants.DENSITOMETRIA_OSEA_HALLAZGOS).Valor == "0.00" ? "" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.DENSITOMETRIA_OSEA_ID && o.IdCampo == Constants.DENSITOMETRIA_OSEA_HALLAZGOS).Valor,
                                   EvOdontologica = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ODONTOGRAMA_ID && o.IdCampo == Constants.ODONTOGRAMA_CONCLUSIONES_DESCRIPCION_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ODONTOGRAMA_ID && o.IdCampo == Constants.ODONTOGRAMA_CONCLUSIONES_DESCRIPCION_ID).Valor == "0.00" ? "" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ODONTOGRAMA_ID && o.IdCampo == Constants.ODONTOGRAMA_CONCLUSIONES_DESCRIPCION_ID).Valor,
                                   EvOftalmologica = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.OFTALMOLOGIA_ID && o.IdCampo == Constants.OFTALMOLOGIA_HALLAZGOS_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.OFTALMOLOGIA_ID && o.IdCampo == Constants.OFTALMOLOGIA_HALLAZGOS_ID).Valor == "0.00" ? "" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.OFTALMOLOGIA_ID && o.IdCampo == Constants.OFTALMOLOGIA_HALLAZGOS_ID).Valor,
                                   EvPsicológica = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PSICOLOGIA_ID && o.IdCampo == Constants.PSICOLOGIA_AREA_CONCLUSIONES_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PSICOLOGIA_ID && o.IdCampo == Constants.PSICOLOGIA_AREA_CONCLUSIONES_ID).Valor == "0.00" ? "" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PSICOLOGIA_ID && o.IdCampo == Constants.PSICOLOGIA_AREA_CONCLUSIONES_ID).Valor,

                                   Dx1 = varDxReco.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones[0].Descripcion,
                                   Dx2 = varDxReco.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones[1].Descripcion,
                                   Dx3 = varDxReco.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones[2].Descripcion,
                                   Dx4 = varDxReco.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones[3].Descripcion,
                                   Dx5 = varDxReco.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones[4].Descripcion,
                                   Dx6 = varDxReco.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones[5].Descripcion,
                                   Dx7 = varDxReco.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones[6].Descripcion,
                                   Dx8 = varDxReco.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones[7].Descripcion,

                                   Recomendacion1 = varDxReco.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones[8].Descripcion,
                                   Recomendacion2 = varDxReco.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones[9].Descripcion,
                                   Recomendacion3 = varDxReco.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones[10].Descripcion,
                                   Recomendacion4 = varDxReco.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones[11].Descripcion,
                                   Recomendacion5 = varDxReco.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones[12].Descripcion,
                                   Recomendacion6 = varDxReco.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones[13].Descripcion,
                                   Recomendacion7 = varDxReco.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones[14].Descripcion,
                                   Recomendacion8 = varDxReco.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones[15].Descripcion,
                                   Recomendacion9 = varDxReco.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones[16].Descripcion,
                                   Recomendacion10 = varDxReco.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones[17].Descripcion,
                                   Recomendacion11 = varDxReco.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones[18].Descripcion,
                                   Recomendacion12 = varDxReco.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones[19].Descripcion,
                                   Recomendacion13 = varDxReco.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones[20].Descripcion,
                                   Recomendacion14 = varDxReco.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones[21].Descripcion,

                                   HemogramaA = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.HEMOGRAMA_COMPLETO_ID) != null ? "HEMOGRAMA" : "",
                                   HemoglobinaA = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.LABORATORIO_HEMOGLOBINA_ID) != null ? "HEMOGLOBINA" : "",
                                   GlucosaA = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.GLUCOSA_ID) != null ? "GLUCOSA" : "",
                                   ColesterolA = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.COLESTEROL_ID) != null ? "COLESTEROL TOTAL" : "",
                                   HDLColesterolA = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PERFIL_HIPIDICO_ID) != null ? "HDL COLESTEROL TOTAL" : "",
                                   TrigliceridoA = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PERFIL_HIPIDICO_ID) != null ? "TRIGLICERIDOS" : "",
                                   PSAA = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.HEMOGRAMA_COMPLETO_ID) != null ? "ANTIGENOS PROSTATICO" : "",
                                   ExamenOrinaA = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.EXAMEN_COMPLETO_DE_ORINA_ID) != null ? "EXAMEN COMPLETO DE ORINA" : "",
                                   Rx = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.RX_ID) != null ? "RX" : "",
                                   ElectrocardiogramaA = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ELECTROCARDIOGRAMA_ID) != null ? "ELECTROCARDIOGRAMA" : "",

                                   DxAudiometria = varDxAudiometria,
                                   DxEspirometria = varDxEspirometria,

                                   LugarChekeo = nameMedicalCenter,
                                   MedicoEvaluador = nameDoctoPhisicalExam,
                                   EdadTrabajador = age,
                                   GrupoEtario = ageGroup,
                                   Anannesis = a.Anannesis,
                                   ActividadFisica = GetHabitoNoscivo(a.IdTrabajador, 4),
                                   Fumar = GetHabitoNoscivo(a.IdTrabajador, 1),

                                   PresionArterialDx = varDx.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones.Find(o => o.IdCampo == Constants.FUNCIONES_VITALES_PAS_ID) != null ? varDx.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones.Find(o => o.IdCampo == Constants.FUNCIONES_VITALES_PAS_ID).Descripcion : "Normal",
                                   HDLDx = varDx.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones.Find(o => o.IdCampo == Constants.PERFIL_HIPIDICO_COLESTEROL_HDL_ID) != null ? varDx.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones.Find(o => o.IdCampo == Constants.PERFIL_HIPIDICO_COLESTEROL_HDL_ID).Descripcion : "Normal",

                                   IMCDx = varDx.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones.Find(o => o.IdCampo == Constants.ANTROPOMETRIA_IMC_ID) != null ? varDx.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones.Find(o => o.IdCampo == Constants.ANTROPOMETRIA_IMC_ID).Descripcion : "Normal",

                                   HemoglobinaDX = varDx.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones.Find(o => o.IdCampo == Constants.HEMOGLOBINA_ID) != null ? varDx.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones.Find(o => o.IdCampo == Constants.HEMOGLOBINA_ID).Descripcion : "Normal",
                                   GlucosaDx = varDx.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones.Find(o => o.IdCampo == Constants.GLUCOSA_GLUCOSA_ID) != null ? varDx.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones.Find(o => o.IdCampo == Constants.GLUCOSA_GLUCOSA_ID).Descripcion : "Normal",
                                   ColesterolDx = varDx.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones.Find(o => o.IdCampo == Constants.COLESTEROL_COLESTEROL_TOTAL_ID) != null ? varDx.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones.Find(o => o.IdCampo == Constants.COLESTEROL_COLESTEROL_TOTAL_ID).Descripcion : "Normal",
                                   TrigliceridoDx = varDx.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones.Find(o => o.IdCampo == Constants.PERFIL_HIPIDICO_TRIGLICERIDO_ID) != null ? varDx.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones.Find(o => o.IdCampo == Constants.PERFIL_HIPIDICO_TRIGLICERIDO_ID).Descripcion : "Normal",
                                   PSADx = varDx.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones.Find(o => o.IdCampo == Constants.ANTIGENO_PROSTATICO_ANTIGENO_PROSTATICO_VALOR) != null ? varDx.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones.Find(o => o.IdCampo == Constants.ANTIGENO_PROSTATICO_ANTIGENO_PROSTATICO_VALOR).Descripcion : "Normal",


                                   PesoMaximo = varPesoMaximo,

                               }).ToList();

                    return sql;
                }
            }
            catch (Exception)
            {

                throw;
            }
        }

        // Alejandro
        public string GetNameMedicalCenter()
        {
            using (SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel())
            {

                var nameMedicalCenter = (from n in dbContext.organization
                                         where n.v_OrganizationId == Constants.OWNER_ORGNIZATION_ID
                                         select n.v_Name + " " + n.v_Address).SingleOrDefault<string>();

                return nameMedicalCenter;
            }
        }

        public string GetNameMedicalCenterName()
        {
            using (SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel())
            {

                var nameMedicalCenter = (from n in dbContext.organization
                                         where n.v_OrganizationId == Constants.OWNER_ORGNIZATION_ID
                                         select n.v_Name).SingleOrDefault<string>();

                return nameMedicalCenter;
            }
        }

        public string GetNameMedicalCenteraddress()
        {
            using (SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel())
            {

                var nameMedicalCenter = (from n in dbContext.organization
                                         where n.v_OrganizationId == Constants.OWNER_ORGNIZATION_ID
                                         select n.v_Address).SingleOrDefault<string>();

                return nameMedicalCenter;
            }
        }

        public string GetPhoneNumberMedicalCenter()
        {
            using (SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel())
            {

                var phoneNumber = (from n in dbContext.organization
                                   where n.v_OrganizationId == Constants.OWNER_ORGNIZATION_ID
                                   select n.v_PhoneNumber).SingleOrDefault<string>();

                return phoneNumber;
            }
        }

        public string GetEmailMedicalCenter()
        {
            using (SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel())
            {

                var email = (from n in dbContext.organization
                             where n.v_OrganizationId == Constants.OWNER_ORGNIZATION_ID
                             select n.v_Mail).SingleOrDefault<string>();

                return email;
            }
        }

        // Alejandro
        public organizationDto GetInfoMedicalCenter()
        {
            using (SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel())
            {

                var sql = (from o in dbContext.organization
                           where o.v_OrganizationId == Constants.OWNER_ORGNIZATION_ID
                           select new organizationDto
                           {
                               v_Name = o.v_Name,
                               v_Address = o.v_Address,
                               b_Image = o.b_Image,
                               v_PhoneNumber = o.v_PhoneNumber,
                               v_Mail = o.v_Mail,

                           }).SingleOrDefault();


                return sql;
            }
        }

        //AMC
        public byte[] GetLogoMedicalCenter()
        {
            using (SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel())
            {

                var nameMedicalCenter = (from n in dbContext.organization
                                         where n.v_OrganizationId == Constants.OWNER_ORGNIZATION_ID
                                         select n.b_Image).SingleOrDefault();

                return nameMedicalCenter;
            }
        }

        // alejandro
        public string GetNameDoctoPhisicalExam(string serviceId)
        {
            using (SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel())
            {
                var nameDoctor = (from x in dbContext.servicecomponent
                                  join me in dbContext.systemuser on x.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
                                  from me in me_join.DefaultIfEmpty()
                                  join Pe in dbContext.person on me.v_PersonId equals Pe.v_PersonId

                                  where x.v_ComponentId == Constants.EXAMEN_FISICO_ID && x.v_ServiceId == serviceId
                                  select Pe.v_FirstName + " " +
                                         Pe.v_FirstLastName + " " + Pe.v_SecondLastName
                                                       ).SingleOrDefault<string>();

                return nameDoctor;
            }
        }

        // alejandro
        public ServiceList GetDoctoPhisicalExam(string serviceId)
        {
            using (SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel())
            {
                var sql = (from x in dbContext.servicecomponent
                           join me in dbContext.systemuser on x.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
                           from me in me_join.DefaultIfEmpty()

                           join Pe in dbContext.person on me.v_PersonId equals Pe.v_PersonId

                           join pr in dbContext.professional on Pe.v_PersonId equals pr.v_PersonId into pr_join
                           from pr in pr_join.DefaultIfEmpty()

                           where x.v_ComponentId == Constants.EXAMEN_FISICO_ID &&
                                 x.v_ServiceId == serviceId

                           select new ServiceList
                             {
                                 v_Pacient = Pe.v_FirstName + " " + Pe.v_FirstLastName + " " + Pe.v_SecondLastName,
                                 FirmaDoctor = pr.b_SignatureImage

                             }).FirstOrDefault();

                return sql;
            }
        }

        private string GetGrupoEtario(int Edad)
        {
            string GrupoEterario = "";
            try
            {
                if (Edad < 18)
                {
                    GrupoEterario = "Menor de 18";
                }
                else if (18 <= Edad && Edad <= 29)
                {
                    GrupoEterario = "de 18 a 29";
                }
                else if (30 <= Edad && Edad <= 39)
                {
                    GrupoEterario = "de 30 a 39";
                }
                else if (40 <= Edad && Edad <= 49)
                {
                    GrupoEterario = "de 40 a 49";
                }
                else if (Edad >= 50)
                {
                    GrupoEterario = "mayor de 50";
                }

                return GrupoEterario;
            }
            catch (Exception)
            {

                throw;
            }

        }

        public string PesoMaximo(string Talla)
        {
            if (Talla != "")
            {
                double ValueTalla = double.Parse(Talla);
                double Result = ValueTalla * ValueTalla * 25;
                return Result.ToString();
            }
            else
            {
                return "";
            }
        }

        public string GetDxByField(string pstrServiceId, string pstrCampoId, string Value1, string Value2)
        {
            try
            {
                using (SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel())
                {

                    string CadenaRetornar = "";
                    var query = (from A in dbContext.diagnosticrepository
                                 join B in dbContext.diseases on A.v_DiseasesId equals B.v_DiseasesId
                                 where A.v_ServiceId == pstrServiceId && A.v_ComponentFieldId == pstrCampoId
                                 select new
                                 {
                                     Dx = B.v_Name
                                 }
                                  ).FirstOrDefault();

                    if (query != null)
                    {
                        CadenaRetornar = query.Dx;
                    }
                    else
                    {
                        if (Value1 == "" || Value2 == "")
                        {
                            CadenaRetornar = "";
                        }
                        else
                        {
                            CadenaRetornar = "Normal";
                        }

                    }

                    return CadenaRetornar;
                }
            }
            catch (Exception)
            {

                throw;
            }
        }

        //Antecedentes Personales
        public string GetPersonMedicalHistory(string pstrPacientId, int Nro)
        {
            try
            {
                using (SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel())
                {

                    string CadenaRetornar = "";

                    var query = (from A in dbContext.personmedicalhistory
                                 join D in dbContext.diseases on A.v_DiseasesId equals D.v_DiseasesId
                                 where A.i_IsDeleted == 0 && A.v_PersonId == pstrPacientId
                                 select new
                                 {
                                     v_DiseasesName = D.v_Name,
                                     d_StartDate = A.d_StartDate.Value,
                                     Detalle_Dx = A.v_DiagnosticDetail
                                 }).ToList();

                    var sql = (from a in query
                               select new
                               {
                                   Concatec = a.v_DiseasesName + " (" + a.d_StartDate.ToString("MM/yyyy") + ")" + ", " + a.Detalle_Dx
                               }).ToList();

                    if (Nro == 5)
                    {
                        int Contador = query.Count - 5;
                        var x = sql.GetRange(5, Contador);

                        CadenaRetornar = string.Join(", ", x.Select(p => p.Concatec));

                    }
                    else
                    {
                        CadenaRetornar = query.Count == 0 ? "" : sql[Nro].Concatec;
                    }

                    return CadenaRetornar;
                }

            }
            catch (Exception ex)
            {
                return null;
            }
        }

        //Antecedentes Familiares
        public string GetFamilyMedical(string pstrPacientId, int Nro)
        {
            int isDeleted = (int)SiNo.NO;

            try
            {
                using (SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel())
                {

                    string CadenaRetornar = "";

                    var query = (from A in dbContext.familymedicalantecedents
                                 join D in dbContext.diseases on A.v_DiseasesId equals D.v_DiseasesId

                                 join J1 in dbContext.systemparameter on new { a = A.i_TypeFamilyId.Value, b = 149 }
                                     equals new { a = J1.i_ParameterId, b = J1.i_GroupId } into J1_join
                                 from J1 in J1_join.DefaultIfEmpty()

                                 join J2 in dbContext.systemparameter on new { a = J1.i_ParentParameterId.Value, b = 149 }
                                     equals new { a = J2.i_ParameterId, b = J2.i_GroupId } into J2_join
                                 from J2 in J2_join.DefaultIfEmpty()

                                 where A.i_IsDeleted == isDeleted && A.v_PersonId == pstrPacientId
                                 select new
                                 {
                                     v_DiseasesName = D.v_Name,
                                     Parentesco = J2.v_Value1
                                 }).ToList();

                    var sql = (from a in query
                               select new
                               {
                                   Concatec = a.v_DiseasesName + " (" + a.Parentesco + ")"
                               }).ToList();

                    if (Nro == 4)
                    {
                        int Contador = query.Count - 4;
                        var x = sql.GetRange(4, Contador);

                        CadenaRetornar = string.Join(", ", x.Select(p => p.Concatec));

                    }
                    else
                    {
                        CadenaRetornar = query.Count == 0 ? "" : sql[Nro].Concatec;
                    }

                    return CadenaRetornar;
                }

            }
            catch (Exception ex)
            {
                return null;
            }
        }

        //Habitos Noscivos
        public string GetHabitoNoscivo(string pstrPacientId, int pintTypeHabit)
        {
            int isDeleted = (int)SiNo.NO;

            try
            {

                using (SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel())
                {

                    string CadenaRetornar = "";
                    var query = (from A in dbContext.noxioushabits
                                 //join J1 in dbContext.systemparameter on new { a = B.i_Relationship.Value, b = 205 }
                                 //              equals new { a = J1.i_ParameterId, b = J1.i_GroupId } into J1_join
                                 where A.i_IsDeleted == isDeleted && A.v_PersonId == pstrPacientId && A.i_TypeHabitsId == pintTypeHabit
                                 select new
                                 {
                                     Frecuencia = A.v_Frequency
                                 }).FirstOrDefault();

                    return CadenaRetornar = query == null ? "" : query.Frecuencia;
                }
            }
            catch (Exception)
            {

                throw;
            }
        }

        //Diagnosticos por Servicio
        public string GetDxByServiceId(string pstrServiceId, int Nro)
        {
            string CadenaRetornar = "";
            try
            {

                List<DiagnosticRepositoryList> ListaDx = GetDxByServiceId(pstrServiceId);
                if (ListaDx.Count != 0)
                {
                    if (ListaDx.Count <= 8)
                    {
                        if (Nro <= 7)
                        {
                            if (Nro <= ListaDx.Count - 1)
                            {
                                CadenaRetornar = ListaDx[Nro].v_DiseasesName;
                            }
                            else
                            {
                                CadenaRetornar = "";
                            }
                        }
                    }
                    else if (ListaDx.Count > 8)
                    {
                        if (Nro <= 6)
                        {
                            if (Nro <= ListaDx.Count - 1)
                            {
                                CadenaRetornar = ListaDx[Nro].v_DiseasesName;
                            }
                            else
                            {
                                CadenaRetornar = "";
                            }
                        }
                        else
                        {
                            int Contador = ListaDx.Count - 7;
                            var x = ListaDx.GetRange(7, Contador);

                            CadenaRetornar = string.Join(", ", x.Select(p => p.v_DiseasesName));
                        }
                    }


                }
                return CadenaRetornar;

            }
            catch (Exception)
            {

                throw;
            }
        }

        //Recomendaciones por Servicio
        public string GetRecomendationByServiceId(string pstrServiceId, int Nro)
        {
            string CadenaRetornar = "";
            try
            {

                List<RecomendationList> ListaRecomendaciones = GetListRecommendationByServiceId(pstrServiceId);

                if (ListaRecomendaciones.Count != 0)
                {
                    if (ListaRecomendaciones.Count <= 14)
                    {
                        if (Nro <= 13)
                        {
                            if (Nro <= ListaRecomendaciones.Count - 1)
                            {
                                CadenaRetornar = ListaRecomendaciones[Nro].v_RecommendationName;
                            }
                            else
                            {
                                CadenaRetornar = "";
                            }
                        }
                    }
                    else if (ListaRecomendaciones.Count > 14)
                    {
                        if (Nro <= 6)
                        {
                            if (Nro <= ListaRecomendaciones.Count - 1)
                            {
                                CadenaRetornar = ListaRecomendaciones[Nro].v_RecommendationName;
                            }
                            else
                            {
                                CadenaRetornar = "";
                            }
                        }
                        else
                        {
                            int Contador = ListaRecomendaciones.Count - 13;
                            var x = ListaRecomendaciones.GetRange(13, Contador);

                            CadenaRetornar = string.Join(", ", x.Select(p => p.v_RecommendationName));
                        }
                    }


                }



















                //if (ListaRecomendaciones.Count != 0)
                //{
                //    if (Nro == 13)
                //    {
                //        if (Nro == ListaRecomendaciones.Count)
                //        {
                //            CadenaRetornar = ListaRecomendaciones.Count == 0 ? "" : ListaRecomendaciones[Nro - 1].v_RecommendationName;
                //        }
                //        else if (ListaRecomendaciones.Count > 12)
                //        {
                //            int Contador = ListaRecomendaciones.Count - 14;
                //            var x = ListaRecomendaciones.GetRange(14, Contador);

                //            CadenaRetornar = string.Join(", ", ListaRecomendaciones.Select(p => p.v_RecommendationName));
                //        }
                //        else
                //        {
                //            return "";
                //        }

                //    }
                //    else
                //    {
                //        if (ListaRecomendaciones.Count > Nro)
                //        {
                //            CadenaRetornar = ListaRecomendaciones.Count == 0 ? "" : ListaRecomendaciones[Nro].v_RecommendationName;
                //        }
                //        else
                //        {
                //            return "";
                //        }
                //    }
                //}
                return CadenaRetornar;
            }
            catch (Exception)
            {

                throw;
            }
        }

        // Alberto
        public List<ReportEvaGinecologico> GetReportEvaluacionGinecologico(string pstrserviceId, string pstrComponentId)
        {

            string[] excludeComponents = {   Sigesoft.Common.Constants.GINECOLOGIA_ID,
                                                 Sigesoft.Common.Constants.EXAMEN_MAMA_ID,
                                                 Sigesoft.Common.Constants.ECOGRAFIA_MAMA_ID ,
                                                 Sigesoft.Common.Constants.PAPANICOLAU_ID,
                                                 Sigesoft.Common.Constants.RESULTADOS_MAMOGRAFIA_ID
                                             };
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                var objEntity = (from A in dbContext.service
                                 join B in dbContext.person on A.v_PersonId equals B.v_PersonId

                                 join C in dbContext.protocol on A.v_ProtocolId equals C.v_ProtocolId into C_join
                                 from C in C_join.DefaultIfEmpty()

                                 join D in dbContext.organization on C.v_CustomerOrganizationId equals D.v_OrganizationId into D_join
                                 from D in D_join.DefaultIfEmpty()

                                 join C1 in dbContext.organization on C.v_EmployerOrganizationId equals C1.v_OrganizationId into C1_join
                                 from C1 in C1_join.DefaultIfEmpty()

                                 join M in dbContext.systemparameter on new { a = B.i_TypeOfInsuranceId.Value, b = 188 }
                                     equals new { a = M.i_ParameterId, b = M.i_GroupId } into M_join
                                 from M in M_join.DefaultIfEmpty()

                                 join E in dbContext.servicecomponent on new { a = A.v_ServiceId, b = pstrComponentId }
                                                                        equals new { a = E.v_ServiceId, b = E.v_ComponentId } into E_join
                                 from E in E_join.DefaultIfEmpty()


                                 //join F in dbContext.component on new { a = E.v_ComponentId, b = 12 }
                                 //                                       equals new { a = F.v_ComponentId, b = F.i_CategoryId.Value } into F_join
                                 //from F in F_join.DefaultIfEmpty()

                                 // Usuario Medico Evaluador / Medico Aprobador ****************************
                                 join me in dbContext.systemuser on E.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
                                 from me in me_join.DefaultIfEmpty()

                                 join pme in dbContext.professional on me.v_PersonId equals pme.v_PersonId into pme_join
                                 from pme in pme_join.DefaultIfEmpty()

                                 join y in dbContext.person on me.v_PersonId equals y.v_PersonId


                                 join I in dbContext.systemparameter on new { a = A.i_MacId.Value, b = 134 }
                                   equals new { a = I.i_ParameterId, b = I.i_GroupId } into I_join
                                 from I in I_join.DefaultIfEmpty()

                                 join ccc in dbContext.diagnosticrepository on A.v_ServiceId equals ccc.v_ServiceId into ccc_join
                                 from ccc in ccc_join.DefaultIfEmpty()  // ESO

                                 join ddd in dbContext.diseases on ccc.v_DiseasesId equals ddd.v_DiseasesId into ddd_join
                                 from ddd in ddd_join.DefaultIfEmpty()  // Diagnosticos


                                 where A.v_ServiceId == pstrserviceId
                                 select new ReportEvaGinecologico
                                 {
                                     v_DiagnosticRepositoryId = ccc.v_DiagnosticRepositoryId,
                                     Ficha = E.v_ServiceComponentId,
                                     Historia = A.v_ServiceId,
                                     NombreTrabajador = B.v_FirstLastName + " " + B.v_SecondLastName + " " + B.v_FirstName,
                                     FechaNacimiento = B.d_Birthdate.Value,
                                     Seguro = M.v_Value1,
                                     EmpresaCliente = D.v_Name,
                                     EmpresaEmpleadora = C1.v_Name,
                                     Medico = y.v_FirstName + " " + y.v_FirstLastName + " " + y.v_SecondLastName,
                                     FechaAtencion = A.d_ServiceDate.Value,
                                     Fum = A.d_Fur.Value,
                                     Gestapara = A.v_Gestapara,
                                     MAC = I.v_Value1,
                                     Menarquia = A.v_Menarquia,
                                     RegimenCatamenial = A.v_CatemenialRegime,
                                     CirugiaGinecologica = A.v_CiruGine,
                                     FirmaDoctor = pme.b_SignatureImage,
                                     FotoPaciente = B.b_PersonImage,
                                     Diagnosticos = ddd.v_Name,
                                     v_ComponentId = ccc.v_ComponentId

                                 });

                var MedicalCenter = GetInfoMedicalCenter();

                var sql = (from a in objEntity.ToList()
                           let Gine = ValoresComponente(pstrserviceId, Constants.GINECOLOGIA_ID)


                           let ExamMama = ValoresComponente(pstrserviceId, Constants.EXAMEN_MAMA_ID)
                           let LogoEmpresa = GetLogoMedicalCenter()
                           //let ResultadoEcografiaMama = ValoresComponente(pstrserviceId, Constants.ECOGRAFIA_MAMA_ID)
                           let AntePersonales = ValoresComponente(pstrserviceId, Constants.ISTAS_21_ABREVIADA)

                           //let ResultadoPapanicolao = ValoresComponente(pstrserviceId, Constants.PAPANICOLAU_ID)
                           let GineAuxiliares = ValoresComponente(pstrserviceId, Constants.PAPANICOLAU_ID)
                           let ResultadoEcografia = ValoresComponente(pstrserviceId, Constants.RESULTADOS_MAMOGRAFIA_ID)
                           let ResultadoEcografiaMama = ValoresComponente(pstrserviceId, Constants.ECOGRAFIA_MAMA_ID)

                           select new ReportEvaGinecologico
                           {
                               v_ComponentId = a.v_ComponentId,
                               v_DiagnosticRepositoryId = a.v_DiagnosticRepositoryId,
                               Ficha = a.Ficha,
                               Historia = a.Historia,
                               Logo = LogoEmpresa,
                               NombreTrabajador = a.NombreTrabajador,
                               FechaNacimiento = a.FechaNacimiento,
                               Edad = GetAge(a.FechaNacimiento.Value),
                               Seguro = a.Seguro,
                               EmpresaCliente = a.EmpresaCliente,
                               EmpresaEmpleadora = a.EmpresaEmpleadora,
                               CentroMedico = (from n in dbContext.organization
                                               where n.v_OrganizationId == Constants.OWNER_ORGNIZATION_ID
                                               select n.v_Name + ", " + n.v_Address).SingleOrDefault<string>(),
                               Medico = a.Medico,
                               FechaAtencion = a.FechaAtencion,
                               Fum = a.Fum,
                               Gestapara = a.Gestapara,
                               FechaPAP = Gine.Count == 0 ? string.Empty : Gine.Find(p => p.v_ComponentFieldId == Constants.EVALUACION_GINECOLOGICA_ANTECEDENTES_FECHA_ULTIMO_PAP).v_Value1,
                               MAC = a.MAC,
                               Menarquia = a.Menarquia,
                               FechaMamografia = Gine.Count == 0 ? string.Empty : Gine.Find(p => p.v_ComponentFieldId == Constants.EVALUACION_GINECOLOGICA_ANTECEDENTES_FECHA_ULTIMA_MAMOGRAFIA).v_Value1,
                               RegimenCatamenial = a.RegimenCatamenial,
                               CirugiaGinecologica = a.CirugiaGinecologica,

                               Leucorrea = Gine.Count == 0 ? string.Empty : Gine.Find(p => p.v_ComponentFieldId == Constants.GINECOLOGIA_SINTOMAS_LEUCORREA).v_Value1,
                               LeucorreaDescripcion = Gine.Count == 0 ? string.Empty : Gine.Find(p => p.v_ComponentFieldId == Constants.GINECOLOGIA_SINTOMAS_LEUCORREA_COMENTARIO).v_Value1,

                               Dipareunia = Gine.Count == 0 ? string.Empty : Gine.Find(p => p.v_ComponentFieldId == Constants.GINECOLOGIA_SINTOMAS_DISPAREUNIA).v_Value1,
                               DipareuniaDescripcion = Gine.Count == 0 ? string.Empty : Gine.Find(p => p.v_ComponentFieldId == Constants.GINECOLOGIA_SINTOMAS_DISPAREUNIA_COMENTARIO).v_Value1,

                               Incontinencia = Gine.Count == 0 ? string.Empty : Gine.Find(p => p.v_ComponentFieldId == Constants.GINECOLOGIA_SINTOMAS_INCONTINENCIA_URINARIA).v_Value1,
                               IncontinenciaDescripcion = Gine.Count == 0 ? string.Empty : Gine.Find(p => p.v_ComponentFieldId == Constants.GINECOLOGIA_SINTOMAS_INCONTINENCIA_URINARIA_COMENTARIO).v_Value1,

                               Otros = Gine.Count == 0 ? string.Empty : Gine.Find(p => p.v_ComponentFieldId == Constants.GINECOLOGIA_SINTOMAS_OTROS).v_Value1,
                               OtrosDescripcion = Gine.Count == 0 ? string.Empty : Gine.Find(p => p.v_ComponentFieldId == Constants.GINECOLOGIA_SINTOMAS_OTROS_COMENTARIO).v_Value1,

                               EvaluacionGinecologica = Gine.Count == 0 ? string.Empty : Gine.Find(p => p.v_ComponentFieldId == Constants.GINECOLOGIA_HALLAZGOS_HALLAZGOS).v_Value1,

                               ExamenMama = ExamMama.Count == 0 ? string.Empty : ExamMama.Find(p => p.v_ComponentFieldId == Constants.GINECOLOGIA_EX_MAMA_HALLAZGOS_HALLAZGOS).v_Value1.Replace("\n", " "),




                               ResultadoPAP = GineAuxiliares.Count == 0 ? "N/A" : GineAuxiliares.Find(p => p.v_ComponentFieldId == Constants.PAPANICOLAU_HALLAZGOS).v_Value1 == "" ? "" : GineAuxiliares.Find(p => p.v_ComponentFieldId == Constants.PAPANICOLAU_HALLAZGOS).v_Value1,
                               ResultadoMamografia = ResultadoEcografia.Count == 0 ? "N/A" : ResultadoEcografia.Find(p => p.v_ComponentFieldId == Constants.PAPANICOLAU_RADIOGRAFIA_HALLAZGOS).v_Value1 == "" ? "" : ResultadoEcografia.Find(p => p.v_ComponentFieldId == Constants.PAPANICOLAU_RADIOGRAFIA_HALLAZGOS).v_Value1,
                               ResultadoMama = ResultadoEcografiaMama.Count == 0 ? "N/A" : ResultadoEcografiaMama.Find(p => p.v_ComponentFieldId == Constants.RESULTADOS_DE_ECOGRAFIA_HALLAZGOS).v_Value1 == "" ? "" : ResultadoEcografiaMama.Find(p => p.v_ComponentFieldId == Constants.RESULTADOS_DE_ECOGRAFIA_HALLAZGOS).v_Value1,






                               Diagnosticos = a.Diagnosticos,
                               Recomendaciones = ConcatenateRecommendation(a.v_DiagnosticRepositoryId),

                               FotoPaciente = a.FotoPaciente,
                               FirmaDoctor = a.FirmaDoctor,
                               AntecedentesPersonales = Gine.Count == 0 ? string.Empty : Gine.Find(p => p.v_ComponentFieldId == Constants.GINECOLOGIA_ANTECEDENTES_PERSONALES_ANTECEDENTES).v_Value1,

                               AntecendentesFamiliares = Gine.Count == 0 ? string.Empty : Gine.Find(p => p.v_ComponentFieldId == Constants.GINECOLOGIA_ANTECEDENTES_FAMILIARES).v_Value1,


                               b_Logo = MedicalCenter.b_Image,
                               EmpresaPropietaria = MedicalCenter.v_Name,
                               EmpresaPropietariaDireccion = MedicalCenter.v_Address,
                               EmpresaPropietariaTelefono = MedicalCenter.v_PhoneNumber,
                               EmpresaPropietariaEmail = MedicalCenter.v_Mail,

                           }).ToList();


                var otherExams = sql.FindAll(p => excludeComponents.Contains(p.v_ComponentId));


                return otherExams;
            }
            catch (Exception)
            {

                throw;
            }
        }

        // Alejandro
        public List<ReportInformeEspirometria> GetReportInformeEspirometria(string pstrserviceId, string pstrComponentId)
        {
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                var objEntity = (from A in dbContext.service

                                 join B in dbContext.servicecomponent on new { a = A.v_ServiceId, b = pstrComponentId }
                                                                     equals new { a = B.v_ServiceId, b = B.v_ComponentId } into B_join
                                 from B in B_join.DefaultIfEmpty()


                                 join C in dbContext.protocol on A.v_ProtocolId equals C.v_ProtocolId into C_join
                                 from C in C_join.DefaultIfEmpty()

                                 join D in dbContext.organization on A.v_EmpresaFacturacionId equals D.v_OrganizationId into D_join
                                 from D in D_join.DefaultIfEmpty()

                                 join E in dbContext.person on A.v_PersonId equals E.v_PersonId into E_join
                                 from E in E_join.DefaultIfEmpty()

                                 join SP1 in dbContext.datahierarchy on new { a = D.i_SectorTypeId.Value, b = 104 }
                                        equals new { a = SP1.i_ItemId, b = SP1.i_GroupId } into SP1_join
                                 from SP1 in SP1_join.DefaultIfEmpty()

                                 // Usuario Medico Evaluador / Medico Aprobador ****************************
                                 join me in dbContext.systemuser on B.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
                                 from me in me_join.DefaultIfEmpty()

                                 join pme in dbContext.professional on me.v_PersonId equals pme.v_PersonId into pme_join
                                 from pme in pme_join.DefaultIfEmpty()

                                 // Usuario Tecnologo *************************************
                                 join tec in dbContext.systemuser on B.i_UpdateUserTechnicalDataRegisterId equals tec.i_SystemUserId into tec_join
                                 from tec in tec_join.DefaultIfEmpty()

                                 join ptec in dbContext.professional on tec.v_PersonId equals ptec.v_PersonId into ptec_join
                                 from ptec in ptec_join.DefaultIfEmpty()
                                 // *******************************************************  

                                 join J in dbContext.organization on A.v_EmpresaFacturacionId equals J.v_OrganizationId into J_join
                                 from J in J_join.DefaultIfEmpty()

                                 where A.v_ServiceId == pstrserviceId
                                 select new ReportInformeEspirometria
                                 {
                                     EspirometriaNro = B.v_ServiceComponentId,
                                     Fecha = A.d_ServiceDate.Value,
                                     HCL = A.v_ServiceId,
                                     i_TipoEvaluacion = C.i_EsoTypeId.Value,
                                     RazonSocial = D.v_Name,
                                     ActividadEconomica = SP1.v_Value1,
                                     PuestoTrabajo = E.v_CurrentOccupation,
                                     NombreTrabajador = E.v_FirstName + " " + E.v_FirstLastName + " " + E.v_SecondLastName,
                                     FechaNacimiento = E.d_Birthdate.Value,
                                     i_Sexo = E.i_SexTypeId.Value,
                                     FirmaRealizaEspirometria = ptec.b_SignatureImage,
                                     FirmaMedicoInterpreta = pme.b_SignatureImage,
                                     RazonSocialEmpresaCliente = J.v_Name,
                                     LogoEmpresaCliente = J.b_Image
                                 });

                var MedicalCenter = GetInfoMedicalCenter();

                var Antropometria = ValoresComponente(pstrserviceId, Constants.ANTROPOMETRIA_ID);
                var Espirometria = ValoresComponente(pstrserviceId, Constants.ESPIROMETRIA_ID);
                var DxEspirometria = GetDiagnosticByServiceIdAndComponentWithseparator(pstrserviceId, Constants.ESPIROMETRIA_ID, "|");
                var res = GetRestrictionByServiceIdAndComponentWithSeparator(pstrserviceId, Constants.ESPIROMETRIA_ID, "|");
                var rec = GetRecommendationByServiceIdAndComponent(pstrserviceId, Constants.ESPIROMETRIA_ID, "|");

                var sql = (from a in objEntity.ToList()
                           let age = GetAge(a.FechaNacimiento.Value)
                           select new ReportInformeEspirometria
                           {
                               Logo = MedicalCenter.b_Image,
                               EspirometriaNro = a.EspirometriaNro,
                               Fecha = a.Fecha,
                               HCL = a.HCL,
                               TipoEvaluacion = a.i_TipoEvaluacion.ToString(),
                               LugarExamen = MedicalCenter.v_Name,
                               RazonSocial = a.RazonSocial,
                               ActividadEconomica = a.ActividadEconomica,
                               PuestoTrabajo = a.PuestoTrabajo,
                               NombreTrabajador = a.NombreTrabajador,
                               Edad = age,
                               Sexo = a.i_Sexo.ToString(),
                               Talla = Antropometria.Count == 0 ? string.Empty : Antropometria.Find(p => p.v_ComponentFieldId == Constants.ANTROPOMETRIA_TALLA_ID).v_Value1,
                               Peso = Antropometria.Count == 0 ? string.Empty : Antropometria.Find(p => p.v_ComponentFieldId == Constants.ANTROPOMETRIA_PESO_ID).v_Value1,

                               CVF = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == "N003-MF000000012") == null ? "" : Espirometria.Find(p => p.v_ComponentFieldId == "N003-MF000000012").v_Value1,
                               VEF1 = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == "N003-MF000000013") == null ? "" : Espirometria.Find(p => p.v_ComponentFieldId == "N003-MF000000013").v_Value1,
                               VEF1CVF = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == "N003-MF000000014") == null ? "" : Espirometria.Find(p => p.v_ComponentFieldId == "N003-MF000000014").v_Value1,
                               FEV2575 = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == "N003-MF000000015") == null ? "" : Espirometria.Find(p => p.v_ComponentFieldId == "N003-MF000000015").v_Value1,
                               Resultado = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_RESULTADO_ID) == null ? "" : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_RESULTADO_ID).v_Value1,
                               Observacion = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == "N003-MF000000016") == null ? "" : Espirometria.Find(p => p.v_ComponentFieldId == "N003-MF000000016").v_Value1,
                               FirmaRealizaEspirometria = a.FirmaRealizaEspirometria,
                               FirmaMedicoInterpreta = a.FirmaMedicoInterpreta,
                               //Dx = DxEspirometria,
                               //Observacion = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == "N003-MF000000016").v_Value1,
                               b_Logo = MedicalCenter.b_Image,
                               EmpresaPropietaria = MedicalCenter.v_Name,
                               EmpresaPropietariaDireccion = MedicalCenter.v_Address,
                               EmpresaPropietariaTelefono = MedicalCenter.v_PhoneNumber,
                               EmpresaPropietariaEmail = MedicalCenter.v_Mail,

                               Restriction = res,
                               Recomendation = rec,
                               RazonSocialEmpresaCliente = a.LogoEmpresaCliente == null ? a.RazonSocialEmpresaCliente : "",
                               LogoEmpresaCliente = a.LogoEmpresaCliente,
                           }).ToList();

                return sql;
            }
            catch (Exception)
            {

                throw;
            }
        }

        // ALEJANDRO
        public List<ReportCuestionarioEspirometria> GetReportCuestionarioEspirometria(string pstrserviceId, string pstrComponentId)
        {
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                var objEntity = (from A in dbContext.service

                                 join B in dbContext.servicecomponent on new { a = A.v_ServiceId, b = pstrComponentId }
                                                                     equals new { a = B.v_ServiceId, b = B.v_ComponentId } into B_join
                                 from B in B_join.DefaultIfEmpty()


                                 join C in dbContext.protocol on A.v_ProtocolId equals C.v_ProtocolId into C_join
                                 from C in C_join.DefaultIfEmpty()

                                 join D in dbContext.organization on A.v_EmpresaFacturacionId equals D.v_OrganizationId into D_join
                                 from D in D_join.DefaultIfEmpty()

                                 join E in dbContext.person on A.v_PersonId equals E.v_PersonId into E_join
                                 from E in E_join.DefaultIfEmpty()

                                 join SP1 in dbContext.systemparameter on new { a = D.i_SectorTypeId.Value, b = 104 }
                                        equals new { a = SP1.i_ParameterId, b = SP1.i_GroupId } into SP1_join
                                 from SP1 in SP1_join.DefaultIfEmpty()

                                 join J in dbContext.organization on A.v_EmpresaFacturacionId equals J.v_OrganizationId into J_join
                                 from J in J_join.DefaultIfEmpty()

                                 where A.v_ServiceId == pstrserviceId
                                 select new ReportCuestionarioEspirometria
                                 {
                                     IdServicio = A.v_ServiceId,
                                     IdComponent = B.v_ServiceComponentId,
                                     Fecha = A.d_ServiceDate.Value,
                                     NombreTrabajador = E.v_FirstName + " " + E.v_FirstLastName + " " + E.v_SecondLastName,
                                     FechaNacimineto = E.d_Birthdate,
                                     Genero = E.i_SexTypeId.Value,
                                     FirmaTrabajador = E.b_RubricImage,
                                     HuellaTrabajador = E.b_FingerPrintImage,
                                     i_TipEso = C.i_EsoTypeId.Value,
                                     Dni = E.v_DocNumber,
                                     Puesto = E.v_CurrentOccupation,
                                     RazonSocialEmpresaCliente = J.v_Name,
                                     LogoEmpresaCliente = J.b_Image

                                 });

                var MedicalCenter = GetInfoMedicalCenter();

                var sql = (from a in objEntity.ToList()

                           let Espirometria = ValoresComponente(pstrserviceId, Constants.ESPIROMETRIA_ID)
                           let age = GetAge(a.FechaNacimineto.Value)
                           let LogoEmpresa = GetLogoMedicalCenter()
                           select new ReportCuestionarioEspirometria
                           {
                               IdServicio = a.IdServicio,
                               IdComponent = a.IdComponent,
                               Fecha = a.Fecha,
                               NombreTrabajador = a.NombreTrabajador,
                               FechaNacimineto = a.FechaNacimineto,
                               Edad = age,
                               Logo = LogoEmpresa,
                               i_TipEso = a.i_TipEso,
                               v_TipEso = a.i_TipEso.ToString(),
                               Dni = a.Dni,
                               Puesto = a.Puesto,

                               Genero = a.Genero,
                               FirmaTrabajador = a.FirmaTrabajador,
                               //FirmaTrabajador = a.FirmaTrabajador == null ? GetFirma("","F") : a.FirmaTrabajador,
                               HuellaTrabajador = a.HuellaTrabajador,

                               b_Logo = MedicalCenter.b_Image,
                               EmpresaPropietaria = MedicalCenter.v_Name,
                               EmpresaPropietariaDireccion = MedicalCenter.v_Address,
                               EmpresaPropietariaTelefono = MedicalCenter.v_PhoneNumber,
                               EmpresaPropietariaEmail = MedicalCenter.v_Mail,

                               // NUEVO SIGESOFT
                               CUESTIONARIO_EXCLUSION_TUVO_DESPRENDIMIENTO_RETINA = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_CUESTIONARIO_EXCLUSION_TUVO_DESPRENDIMIENTO_RETINA).v_Value1,
                               CUESTIONARIO_EXCLUSION_TENIDO_ATAQUE_CARDIACO = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_CUESTIONARIO_EXCLUSION_TENIDO_ATAQUE_CARDIACO).v_Value1,
                               CUESTIONARIO_EXCLUSION_ESTADO_HOSPITALIZADO = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_CUESTIONARIO_EXCLUSION_ESTADO_HOSPITALIZADO).v_Value1,
                               CUESTIONARIO_EXCLUSION_USANDO_MEDICAMENTOS = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_CUESTIONARIO_EXCLUSION_USANDO_MEDICAMENTOS).v_Value1,
                               CUESTIONARIO_EXCLUSION_CASO_SER_MUJER = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_CUESTIONARIO_EXCLUSION_CASO_SER_MUJER).v_Value1,
                               CUESTIONARIO_EXCLUSION_HEMOPTISIS = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_CUESTIONARIO_EXCLUSION_HEMOPTISIS).v_Value1,
                               CUESTIONARIO_EXCLUSION_NEUMOTORAX = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_CUESTIONARIO_EXCLUSION_NEUMOTORAX).v_Value1,
                               CUESTIONARIO_EXCLUSION_TRAQUEOSTOMIA = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_CUESTIONARIO_EXCLUSION_TRAQUEOSTOMIA).v_Value1,
                               CUESTIONARIO_EXCLUSION_SONDA_PLEURAL = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_CUESTIONARIO_EXCLUSION_SONDA_PLEURAL).v_Value1,
                               CUESTIONARIO_EXCLUSION_ANEURISMA_ABDOMEN = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_CUESTIONARIO_EXCLUSION_ANEURISMA_ABDOMEN).v_Value1,
                               CUESTIONARIO_EXCLUSION_EMBOLIA_PULMONAR = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_CUESTIONARIO_EXCLUSION_EMBOLIA_PULMONAR).v_Value1,
                               CUESTIONARIO_EXCLUSION_INFARTO_RECIENTE = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_CUESTIONARIO_EXCLUSION_INFARTO_RECIENTE).v_Value1,
                               CUESTIONARIO_EXCLUSION_INESTABILIDAD_CV = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_CUESTIONARIO_EXCLUSION_INESTABILIDAD_CV).v_Value1,
                               CUESTIONARIO_EXCLUSION_FIEBRE_NAUSEA_VOMITO = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_CUESTIONARIO_EXCLUSION_FIEBRE_NAUSEA_VOMITO).v_Value1,
                               CUESTIONARIO_EXCLUSION_EMBARAZO_COMPLICADO = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_CUESTIONARIO_EXCLUSION_EMBARAZO_COMPLICADO).v_Value1,
                               ESPIROMETRIA_CUESTIONARIO_EXCLUSION_EMBARAZO_AVANZADO = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_CUESTIONARIO_EXCLUSION_EMBARAZO_AVANZADO).v_Value1,
                               CUESTIONARIO_DEBEN_HACER_TUVO_INFECCION_RESPIRATORIA = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_CUESTIONARIO_DEBEN_HACER_TUVO_INFECCION_RESPIRATORIA).v_Value1,
                               CUESTIONARIO_DEBEN_HACER_TUVO_INFECCION_OIDO = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_CUESTIONARIO_DEBEN_HACER_TUVO_INFECCION_OIDO).v_Value1,
                               CUESTIONARIO_DEBEN_HACER_USA_AEROSOLES = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_CUESTIONARIO_DEBEN_HACER_USA_AEROSOLES).v_Value1,
                               CUESTIONARIO_DEBEN_HACER_USADO_MEDICAMENTO_BRONCODILATADOR = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_CUESTIONARIO_DEBEN_HACER_USADO_MEDICAMENTO_BRONCODILATADOR).v_Value1,
                               CUESTIONARIO_DEBEN_HACER_FUMO_TIPO_DE_CIGARRO = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_CUESTIONARIO_DEBEN_HACER_FUMO_TIPO_DE_CIGARRO).v_Value1,
                               ////CUESTIONARIO_DEBEN_HACER_CUANTOS = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_CUESTIONARIO_DEBEN_HACER_CUANTOS).v_Value1,
                               CUESTIONARIO_DEBEN_HACER_REALIZO_EJERCICIO_FUERTE = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_CUESTIONARIO_DEBEN_HACER_REALIZO_EJERCICIO_FUERTE).v_Value1,
                               RazonSocialEmpresaCliente = a.LogoEmpresaCliente == null ? a.RazonSocialEmpresaCliente : "",
                               LogoEmpresaCliente = a.LogoEmpresaCliente,
                           }).ToList();

                return sql;
            }
            catch (Exception)
            {

                throw;
            }
        }

        //Obtener Imagen Firma de Carpeta

        private byte[] GetFirma(string Dni, string TipoImg)
        {
            //Bitmap bitmap = new Bitmap(@"E:\FirmaHuella\23227210_Firma.jpg");

            if (TipoImg == "F")
            {
                byte[] imageArray = System.IO.File.ReadAllBytes(@"E:\FirmaHuella\23227210_F.jpg");
                return imageArray;
            }
            else
            {
                byte[] imageArray = System.IO.File.ReadAllBytes(@"E:\FirmaHuella\23227210_H.jpg");
                return imageArray;
            }


        }
        //Alejandro
        public List<DiagnosticsByAgeGroup> ReportDiagnosticsByAgeGroup(DateTime? FechaInicio, DateTime? FechaFin, string pstrFilterExpression, string ageGroupText, int top)
        {


            int isDeleted = (int)SiNo.NO;
            int definitivo = (int)FinalQualification.Definitivo;
            int presuntivo = (int)FinalQualification.Presuntivo;

            try
            {
                using (SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel())
                {

                    #region Prepare Query

                    var objEntity = from A in dbContext.service
                                    join B in dbContext.person on A.v_PersonId equals B.v_PersonId

                                    join C in dbContext.protocol on A.v_ProtocolId equals C.v_ProtocolId into C_join
                                    from C in C_join.DefaultIfEmpty()

                                    join dr in dbContext.diagnosticrepository on A.v_ServiceId equals dr.v_ServiceId
                                    where (dr.i_FinalQualificationId == definitivo ||
                                          dr.i_FinalQualificationId == presuntivo) &&
                                          (dr.i_IsDeleted == isDeleted)

                                    join go in dbContext.groupoccupation on C.v_GroupOccupationId equals go.v_GroupOccupationId

                                    join disea in dbContext.diseases on dr.v_DiseasesId equals disea.v_DiseasesId into disea_join // Diagnosticos
                                    from disea in disea_join.DefaultIfEmpty()

                                    where (A.d_ServiceDate >= FechaInicio && A.d_ServiceDate <= FechaFin)

                                    select new DiagnosticsByAgeGroup
                                    {
                                        IdServicio = A.v_ServiceId,
                                        IdProtocolId = A.v_ProtocolId,
                                        IdTrabajador = B.v_PersonId,
                                        Trabajador = B.v_FirstName + " " + B.v_FirstLastName + " " + B.v_SecondLastName,
                                        FechaNacimiento = B.d_Birthdate.Value,
                                        GeneroTrabajador = B.i_SexTypeId == 1 ? "M" : "F",
                                        v_CustomerOrganizationId = C.v_CustomerOrganizationId,
                                        v_CustomerLocationId = C.v_CustomerLocationId,
                                        v_DiseasesId = disea.v_DiseasesId,
                                        v_DiseasesName = disea.v_Name
                                    };


                    if (!string.IsNullOrEmpty(pstrFilterExpression))
                    {
                        objEntity = objEntity.Where(pstrFilterExpression);
                    }

                    #endregion

                    // discriminar los dx que expresan normalidad
                    // NORMOACUSIA; NORMOPESO; EMETROPE; EXAMEN DE SALUD SIN ALTERACION

                    string[] excludeDx = new[] { "N002-DD000000145", "N002-DD000000146", "N009-DD000000181", "N009-DD000000190" };


                    var sql = (from a in objEntity.AsEnumerable()

                               let age = GetAge(a.FechaNacimiento.Value)
                               let ageGroup = GetGrupoEtario(age)

                               where !excludeDx.Contains(a.v_DiseasesId)
                               select new DiagnosticsByAgeGroup
                               {
                                   //IdServicio = a.IdServicio,
                                   //IdProtocolId = a.IdProtocolId,
                                   //IdTrabajador = a.IdTrabajador,
                                   //Trabajador = a.Trabajador,
                                   GrupoEtario = ageGroup,

                                   //FechaNacimiento = g.Key.FechaNacimiento,
                                   //EdadTrabajador = age,

                                   //GeneroTrabajador = a.GeneroTrabajador,
                                   //v_DiseasesId = a.v_DiseasesId,
                                   v_DiseasesName = a.v_DiseasesName

                               });

                    List<DiagnosticsByAgeGroup> gg = new List<DiagnosticsByAgeGroup>();

                    if (!string.IsNullOrEmpty(ageGroupText))
                    {
                        gg = (from a in sql
                              group a by new { a.v_DiseasesName, a.GrupoEtario } into g
                              where g.Key.GrupoEtario == ageGroupText
                              select new DiagnosticsByAgeGroup
                              {
                                  GrupoEtario = g.Key.GrupoEtario,
                                  v_DiseasesName = g.Key.v_DiseasesName,
                                  CantTrabajador = g.Count()
                              }).ToList();
                    }
                    else
                    {
                        gg = (from a in sql
                              group a by new { a.v_DiseasesName, a.GrupoEtario } into g
                              select new DiagnosticsByAgeGroup
                              {
                                  GrupoEtario = g.Key.GrupoEtario,
                                  v_DiseasesName = g.Key.v_DiseasesName,
                                  CantTrabajador = g.Count()
                              }).ToList();
                    }

                    return gg.Take(top).OrderByDescending(p => p.CantTrabajador).ToList();

                }
            }
            catch (Exception)
            {

                throw;
            }
        }

        //Alejandro
        public List<DiagnosticsByGender> ReportDiagnosticsByGender(DateTime? FechaInicio, DateTime? FechaFin, string pstrFilterExpression, int top)
        {


            int isDeleted = (int)SiNo.NO;
            int definitivo = (int)FinalQualification.Definitivo;
            int presuntivo = (int)FinalQualification.Presuntivo;

            try
            {
                using (SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel())
                {

                    #region Prepare Query

                    var objEntity = from A in dbContext.service
                                    join B in dbContext.person on A.v_PersonId equals B.v_PersonId

                                    join C in dbContext.protocol on A.v_ProtocolId equals C.v_ProtocolId into C_join
                                    from C in C_join.DefaultIfEmpty()

                                    join dr in dbContext.diagnosticrepository on A.v_ServiceId equals dr.v_ServiceId
                                    where (dr.i_FinalQualificationId == definitivo ||
                                           dr.i_FinalQualificationId == presuntivo) &&
                                          (dr.i_IsDeleted == isDeleted)

                                    join go in dbContext.groupoccupation on C.v_GroupOccupationId equals go.v_GroupOccupationId

                                    join disea in dbContext.diseases on dr.v_DiseasesId equals disea.v_DiseasesId into disea_join // Diagnosticos
                                    from disea in disea_join.DefaultIfEmpty()

                                    where (A.d_ServiceDate >= FechaInicio && A.d_ServiceDate <= FechaFin)

                                    select new DiagnosticsByGender
                                    {
                                        IdServicio = A.v_ServiceId,
                                        IdProtocolId = A.v_ProtocolId,
                                        IdTrabajador = B.v_PersonId,
                                        Trabajador = B.v_FirstName + " " + B.v_FirstLastName + " " + B.v_SecondLastName,
                                        FechaNacimiento = B.d_Birthdate.Value,
                                        GeneroTrabajador = B.i_SexTypeId == 1 ? "Masculino" : "Femenino",
                                        v_CustomerOrganizationId = C.v_CustomerOrganizationId,
                                        v_CustomerLocationId = C.v_CustomerLocationId,
                                        v_DiseasesId = disea.v_DiseasesId,
                                        v_DiseasesName = disea.v_Name,
                                        i_SexTypeId = B.i_SexTypeId

                                    };


                    if (!string.IsNullOrEmpty(pstrFilterExpression))
                    {
                        objEntity = objEntity.Where(pstrFilterExpression);
                    }

                    #endregion

                    // discriminar los dx que expresan normalidad
                    // NORMOACUSIA; NORMOPESO; EMETROPE; EXAMEN DE SALUD SIN ALTERACION

                    string[] excludeDx = new[] { "N002-DD000000145", "N002-DD000000146", "N009-DD000000181", "N009-DD000000190" };
                    objEntity = objEntity.Where(p => !excludeDx.Contains(p.v_DiseasesId));

                    var gg = (from a in objEntity.AsEnumerable()
                              group a by new { a.v_DiseasesName, a.GeneroTrabajador } into g
                              //where g.Key.GrupoEtario == ageGroupText
                              select new DiagnosticsByGender
                              {
                                  GeneroTrabajador = g.Key.GeneroTrabajador,
                                  v_DiseasesName = g.Key.v_DiseasesName,
                                  NroHallazgos = g.Count()
                              }).ToList();


                    return gg.Take(top).OrderByDescending(p => p.NroHallazgos).ToList();
                }
            }
            catch (Exception)
            {

                throw;
            }
        }

        //Alejandro
        public List<DiagnosticsByGroupOccupation> ReportDiagnosticsByGroupOccupation(DateTime? FechaInicio, DateTime? FechaFin, string pstrFilterExpression, int top)
        {

            int isDeleted = (int)SiNo.NO;
            int definitivo = (int)FinalQualification.Definitivo;
            int presuntivo = (int)FinalQualification.Presuntivo;

            try
            {
                using (SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel())
                {

                    #region Prepare Query

                    var objEntity = from A in dbContext.service
                                    join B in dbContext.person on A.v_PersonId equals B.v_PersonId

                                    join C in dbContext.protocol on A.v_ProtocolId equals C.v_ProtocolId into C_join
                                    from C in C_join.DefaultIfEmpty()

                                    join dr in dbContext.diagnosticrepository on A.v_ServiceId equals dr.v_ServiceId
                                    where (dr.i_FinalQualificationId == definitivo ||
                                           dr.i_FinalQualificationId == presuntivo) &&
                                          (dr.i_IsDeleted == isDeleted)

                                    join go in dbContext.groupoccupation on C.v_GroupOccupationId equals go.v_GroupOccupationId

                                    join disea in dbContext.diseases on dr.v_DiseasesId equals disea.v_DiseasesId into disea_join // Diagnosticos
                                    from disea in disea_join.DefaultIfEmpty()

                                    where (A.d_ServiceDate >= FechaInicio && A.d_ServiceDate <= FechaFin)

                                    select new DiagnosticsByGroupOccupation
                                    {
                                        v_DiseasesId = disea.v_DiseasesId,
                                        v_DiseasesName = disea.v_Name,
                                        v_GroupOccupationName = go.v_Name,
                                        v_GroupOccupationId = go.v_GroupOccupationId,
                                        v_CustomerOrganizationId = C.v_CustomerOrganizationId,
                                        v_CustomerLocationId = C.v_CustomerLocationId,
                                        IdProtocolId = A.v_ProtocolId
                                    };


                    if (!string.IsNullOrEmpty(pstrFilterExpression))
                    {
                        objEntity = objEntity.Where(pstrFilterExpression);
                    }

                    #endregion

                    // discriminar los dx que expresan normalidad
                    // NORMOACUSIA; NORMOPESO; EMETROPE; EXAMEN DE SALUD SIN ALTERACION

                    string[] excludeDx = new[] { "N002-DD000000145", "N002-DD000000146", "N009-DD000000181", "N009-DD000000190" };
                    objEntity = objEntity.Where(p => !excludeDx.Contains(p.v_DiseasesId));

                    var gg = (from a in objEntity.AsEnumerable()
                              group a by new { a.v_DiseasesName, a.v_GroupOccupationName } into g
                              select new DiagnosticsByGroupOccupation
                              {
                                  v_GroupOccupationName = g.Key.v_GroupOccupationName,
                                  v_DiseasesName = g.Key.v_DiseasesName,
                                  NroHallazgos = g.Count()
                              }).ToList();


                    return gg.Take(top).OrderByDescending(p => p.NroHallazgos).ToList();
                }
            }
            catch (Exception)
            {

                throw;
            }
        }

        //Alejandro
        public List<DiagnosticsByOffice> ReportDiagnosticsByOffice(DateTime? FechaInicio, DateTime? FechaFin, string pstrFilterExpression, int top, string[] componentId)
        {


            int isDeleted = (int)SiNo.NO;
            int definitivo = (int)FinalQualification.Definitivo;
            int presuntivo = (int)FinalQualification.Presuntivo;

            try
            {
                using (SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel())
                {

                    #region Prepare Query

                    var objEntity = from A in dbContext.service
                                    join B in dbContext.person on A.v_PersonId equals B.v_PersonId

                                    join C in dbContext.protocol on A.v_ProtocolId equals C.v_ProtocolId into C_join
                                    from C in C_join.DefaultIfEmpty()

                                    join dr in dbContext.diagnosticrepository on A.v_ServiceId equals dr.v_ServiceId

                                    join office in dbContext.component on dr.v_ComponentId equals office.v_ComponentId

                                    join cat in dbContext.systemparameter on new { a = office.i_CategoryId.Value, b = 116 }
                                                                    equals new { a = cat.i_ParameterId, b = cat.i_GroupId } into cat_join
                                    from cat in cat_join.DefaultIfEmpty()

                                    where (dr.i_FinalQualificationId == definitivo ||
                                           dr.i_FinalQualificationId == presuntivo) &&
                                          (dr.i_IsDeleted == isDeleted)

                                    join disea in dbContext.diseases on dr.v_DiseasesId equals disea.v_DiseasesId into disea_join // Diagnosticos
                                    from disea in disea_join.DefaultIfEmpty()

                                    where (A.d_ServiceDate >= FechaInicio && A.d_ServiceDate <= FechaFin)

                                    select new DiagnosticsByOffice
                                    {
                                        v_DiseasesId = disea.v_DiseasesId,
                                        v_DiseasesName = disea.v_Name,
                                        v_ComponentId = office.v_ComponentId,
                                        v_ComponentName = office.i_CategoryId == -1 ? office.v_Name : cat.v_Value1,
                                        v_CustomerOrganizationId = C.v_CustomerOrganizationId,
                                        v_CustomerLocationId = C.v_CustomerLocationId,
                                        IdProtocolId = A.v_ProtocolId
                                    };


                    if (!string.IsNullOrEmpty(pstrFilterExpression))
                    {
                        objEntity = objEntity.Where(pstrFilterExpression);
                    }

                    if (componentId != null)
                    {
                        objEntity = objEntity.Where(p => componentId.Contains(p.v_ComponentId));
                    }

                    #endregion

                    // discriminar los dx que expresan normalidad
                    // NORMOACUSIA; NORMOPESO; EMETROPE; EXAMEN DE SALUD SIN ALTERACION

                    string[] excludeDx = new[] { "N002-DD000000145", "N002-DD000000146", "N009-DD000000181", "N009-DD000000190" };
                    objEntity = objEntity.Where(p => !excludeDx.Contains(p.v_DiseasesId));

                    var gg = (from a in objEntity.AsEnumerable()
                              group a by new { a.v_DiseasesName, a.v_ComponentName } into g

                              select new DiagnosticsByOffice
                              {
                                  v_ComponentName = g.Key.v_ComponentName,
                                  v_DiseasesName = g.Key.v_DiseasesName,
                                  NroHallazgos = g.Count()
                              }).ToList();

                    var dd = gg.OrderByDescending(o => o.NroHallazgos).ToList();
                    var od = dd.Take(top).ToList();

                    return od;
                }
            }
            catch (Exception)
            {

                throw;
            }
        }

        //Alejandro
        public List<DiagnosticsByOffice> ReportDiagnosticsByOfficeDetail(DateTime? FechaInicio, DateTime? FechaFin, string pstrFilterExpression, string[] componentId)
        {


            int isDeleted = (int)SiNo.NO;
            int definitivo = (int)FinalQualification.Definitivo;
            int presuntivo = (int)FinalQualification.Presuntivo;

            try
            {
                using (SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel())
                {

                    #region Prepare Query

                    var objEntity = from A in dbContext.service
                                    join B in dbContext.person on A.v_PersonId equals B.v_PersonId

                                    join C in dbContext.protocol on A.v_ProtocolId equals C.v_ProtocolId into C_join
                                    from C in C_join.DefaultIfEmpty()

                                    join dr in dbContext.diagnosticrepository on A.v_ServiceId equals dr.v_ServiceId

                                    join office in dbContext.component on dr.v_ComponentId equals office.v_ComponentId

                                    join cat in dbContext.systemparameter on new { a = office.i_CategoryId.Value, b = 116 }
                                                                    equals new { a = cat.i_ParameterId, b = cat.i_GroupId } into cat_join
                                    from cat in cat_join.DefaultIfEmpty()

                                    where (dr.i_FinalQualificationId == definitivo ||
                                           dr.i_FinalQualificationId == presuntivo) &&
                                          (dr.i_IsDeleted == isDeleted)

                                    join disea in dbContext.diseases on dr.v_DiseasesId equals disea.v_DiseasesId into disea_join // Diagnosticos
                                    from disea in disea_join.DefaultIfEmpty()

                                    where (A.d_ServiceDate >= FechaInicio && A.d_ServiceDate <= FechaFin)

                                    select new DiagnosticsByOffice
                                    {
                                        v_DiseasesId = disea.v_DiseasesId,
                                        v_DiseasesName = disea.v_Name,
                                        v_ComponentId = office.v_ComponentId,
                                        v_ComponentName = office.i_CategoryId == -1 ? office.v_Name : cat.v_Value1,
                                        v_CustomerOrganizationId = C.v_CustomerOrganizationId,
                                        v_CustomerLocationId = C.v_CustomerLocationId,
                                        IdProtocolId = A.v_ProtocolId
                                    };


                    if (!string.IsNullOrEmpty(pstrFilterExpression))
                    {
                        objEntity = objEntity.Where(pstrFilterExpression);
                    }

                    if (componentId != null)
                    {
                        objEntity = objEntity.Where(p => componentId.Contains(p.v_ComponentId));
                    }

                    #endregion

                    // discriminar los dx que expresan normalidad
                    // NORMOACUSIA; NORMOPESO; EMETROPE; EXAMEN DE SALUD SIN ALTERACION

                    string[] excludeDx = new[] { "N002-DD000000145", "N009-DD000000181", "N009-DD000000190" };
                    objEntity = objEntity.Where(p => !excludeDx.Contains(p.v_DiseasesId));

                    var gg = (from a in objEntity.AsEnumerable()
                              group a by new { a.v_DiseasesName, a.v_ComponentName } into g
                              select new DiagnosticsByOffice
                              {
                                  v_ComponentName = g.Key.v_ComponentName,
                                  v_DiseasesName = g.Key.v_DiseasesName,
                                  NroHallazgos = g.Count()
                              }).ToList();


                    return gg;
                }
            }
            catch (Exception)
            {

                throw;
            }
        }


        //Alberto
        public List<ReportProduccionProfesional> ReporteProduccionProfesional(DateTime? FechaInicio, DateTime? FechaFin, string pstrCustomerOrganizationId, string pstrFilterExpression, string pstrUsuario, string pstrNombreUsuario, string pstrConsultorio, int pintCategoriaId, string EmpresaClienteCabecera)
        {

            try
            {
                using (SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel())
                {

                    #region Prepare Query

                    var objEntity = from A in dbContext.service
                                    join B in dbContext.person on A.v_PersonId equals B.v_PersonId

                                    join C in dbContext.protocol on A.v_ProtocolId equals C.v_ProtocolId into C_join
                                    from C in C_join.DefaultIfEmpty()

                                    join D in dbContext.organization on C.v_WorkingOrganizationId equals D.v_OrganizationId into D_join
                                    from D in D_join.DefaultIfEmpty()

                                    join E in dbContext.servicecomponent on A.v_ServiceId equals E.v_ServiceId into E_join
                                    from E in E_join.DefaultIfEmpty()

                                    join F in dbContext.component on E.v_ComponentId equals F.v_ComponentId into F_join
                                    from F in F_join.DefaultIfEmpty()

                                    join G in dbContext.organization on C.v_CustomerOrganizationId equals G.v_OrganizationId into G_join
                                    from G in G_join.DefaultIfEmpty()

                                    join lc in dbContext.location on new { a = C.v_CustomerOrganizationId, b = C.v_CustomerLocationId }
                                    equals new { a = lc.v_OrganizationId, b = lc.v_LocationId } into lc_join
                                    from lc in lc_join.DefaultIfEmpty()


                                    join J1 in dbContext.systemparameter on new { a = B.i_Relationship.Value, b = 207 }
                                              equals new { a = J1.i_ParameterId, b = J1.i_GroupId } into J1_join
                                    from J1 in J1_join.DefaultIfEmpty()

                                    join J2 in dbContext.systemparameter on new { a = A.i_ServiceTypeOfInsurance.Value, b = 225 }
                                           equals new { a = J2.i_ParameterId, b = J2.i_GroupId } into J2_join
                                    from J2 in J2_join.DefaultIfEmpty()

                                    join J3 in dbContext.systemparameter on new { a = A.i_ModalityOfInsurance.Value, b = 226 }
                                       equals new { a = J3.i_ParameterId, b = J3.i_GroupId } into J3_join
                                    from J3 in J3_join.DefaultIfEmpty()

                                    join J4 in dbContext.systemparameter on new { a = B.i_Relationship.Value, b = 225 }
                                           equals new { a = J4.i_ParameterId, b = J4.i_GroupId } into J4_join
                                    from J4 in J4_join.DefaultIfEmpty()


                                    where A.d_ServiceDate >= FechaInicio && A.d_ServiceDate <= FechaFin

                                    select new ReportProduccionProfesional
                                    {
                                        v_CustomerOrganizationId = G.v_OrganizationId,
                                        NroAtencion = A.v_ServiceId,
                                        Fecha = A.d_ServiceDate.Value,
                                        FechaNacimiento = B.d_Birthdate.Value,
                                        Dni = B.v_DocNumber,
                                        Paciente = B.v_FirstName + " " + B.v_FirstLastName + " " + B.v_SecondLastName,
                                        Titular = B.v_OwnerName,
                                        EmpresaCliente = G.v_Name,
                                        EmpresaTrabajo = D.v_Name,
                                        i_ApprovedUpdateUserId = E.i_ApprovedUpdateUserId.Value,
                                        i_CategoryId = F.i_CategoryId.Value,
                                        v_PersonId = B.v_PersonId,
                                        v_ProtocoloId = A.v_ProtocolId,
                                        FechaInicio = FechaInicio.Value,
                                        FechaFin = FechaFin.Value,
                                        Parentesco = J4.v_Value1,
                                        v_CustomerLocationId = lc.v_LocationId
                                    };

                    if (!string.IsNullOrEmpty(pstrFilterExpression))
                    {
                        objEntity = objEntity.Where(pstrFilterExpression);
                    }

                    #endregion

                    var sql = (from a in objEntity.ToList()
                               let age = GetAge(a.FechaNacimiento.Value)
                               let CostoProtocolo = GetServiceCost(a.NroAtencion)
                               let x = pstrUsuario
                               let xx = pstrNombreUsuario
                               let xxx = pstrConsultorio
                               let xxxx = EmpresaClienteCabecera
                               select new ReportProduccionProfesional
                               {
                                   NroAtencion = a.NroAtencion,
                                   Fecha = a.Fecha,
                                   FechaNacimiento = a.FechaNacimiento,
                                   Edad = age,
                                   Dni = a.Dni,
                                   Paciente = a.Paciente,
                                   Titular = a.Titular,
                                   EmpresaCliente = a.EmpresaCliente,
                                   EmpresaTrabajo = a.EmpresaTrabajo,
                                   CostoProtocolo = CostoProtocolo,
                                   FechaInicio = a.FechaInicio,
                                   FechaFin = a.FechaFin,
                                   Usuario = x,
                                   NombreUsuario = xx,
                                   Consultorio = xxx,
                                   Parentesco = a.Parentesco,
                                   i_CategoryId = a.i_CategoryId,
                                   v_PersonId = a.v_PersonId,
                                   EmpresaClienteCabecera = xxxx
                               }).ToList();

                    var objData = new List<ReportProduccionProfesional>();

                    objData = sql.FindAll(s => s.i_CategoryId == pintCategoriaId)
                                                 .GroupBy(x => new { x.i_CategoryId, x.v_PersonId })
                                                 .Select(group => group.First())
                                                 .ToList();

                    return objData;

                }


            }
            catch (Exception)
            {

                throw;
            }
        }


        //float CalcularCostoProtocolo( string ServiceId, string PersonId, string ProtocoloId)
        //{
        //    SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

        //    float CostoTotalProtocolo = 0;
        //    try
        //    {
        //        var ListaPrecioProtocolo = (from A in dbContext.service
        //                     join B in dbContext.protocolcomponent on A.v_ProtocolId equals B.v_ProtocolId

        //                     where A.v_ServiceId == ServiceId
        //                            && A.v_PersonId == PersonId
        //                            && A.v_ProtocolId == ProtocoloId
        //                     select new {

        //                         PrecioComponente = B.r_Price
        //                     });

        //        foreach (var item in ListaPrecioProtocolo)
        //        {
        //            CostoTotalProtocolo += item.PrecioComponente.Value;
        //        }
        //        return CostoTotalProtocolo;


        //    }
        //    catch (Exception)
        //    {

        //        throw;
        //    }
        //}
        #endregion

        #region Pre-Liquidation

        public void UpdateStatusPreLiquidation(ref OperationResult pobjOperationResult, int status, string serviceId, List<string> ClientSession)
        {
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                // UPDATE

                // Obtener la entidad fuente
                var objEntitySource = (from a in dbContext.service
                                       where a.v_ServiceId == serviceId
                                       select a).FirstOrDefault();

                // Crear la entidad con los datos actualizados   
                // Total Diagnósticos
                objEntitySource.i_InsertUserOccupationalMedicalId = status;

                //objEntitySource.d_UpdateDate = DateTime.Now;
                //objEntitySource.i_UpdateUserId = Int32.Parse(ClientSession[2]);

                // Guardar los cambios
                dbContext.SaveChanges();
                pobjOperationResult.Success = 1;
                // Llenar entidad Log
                LogBL.SaveLog(ClientSession[0], ClientSession[1], ClientSession[2], LogEventType.CREACION, "SERVICE / PRE-LIQUIDACIÓN", null, Success.Ok, null);
                return;
            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
                // Llenar entidad Log
                LogBL.SaveLog(ClientSession[0], ClientSession[1], ClientSession[2], LogEventType.CREACION, "SERVICE / PRE-LIQUIDACIÓN", null, Success.Failed, pobjOperationResult.ExceptionMessage);
                return;
            }
        }

        #endregion


        public ServiceShort GetServiceShort(string pstrServiceId)
        {
            //mon.IsActive = true;

            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                var objEntity = (from A in dbContext.service
                                 join B in dbContext.protocol on A.v_ProtocolId equals B.v_ProtocolId into B_join
                                 from B in B_join.DefaultIfEmpty()
                                 join C in dbContext.organization on B.v_CustomerOrganizationId equals C.v_OrganizationId into C_join
                                 from C in C_join.DefaultIfEmpty()
                                 join D in dbContext.person on A.v_PersonId equals D.v_PersonId
                                 join L in dbContext.datahierarchy on new { a = C.i_SectorTypeId.Value, b = 104 } equals new { a = L.i_ItemId, b = L.i_GroupId } into L_join
                                 from L in L_join.DefaultIfEmpty()
                                 join M in dbContext.systemparameter on new { a = B.i_TypeReport.Value, b = 272 } equals new { a = M.i_ParameterId, b = M.i_GroupId } into M_join
                                 from M in M_join.DefaultIfEmpty()

                                 where A.v_ServiceId == pstrServiceId

                                 select new ServiceShort
                                 {
                                     Empresa = C.v_Name,
                                     Paciente = D.v_FirstLastName + " " + D.v_SecondLastName + " " + D.v_FirstName,
                                     FechaServicio = A.d_ServiceDate,
                                     DNI = D.v_DocNumber,
                                     EmpresaRubro = L.v_Value1,
                                     ProtTipoReporte = M.v_Value1
                                 });


                var sql = (from a in objEntity.ToList()

                           select new ServiceShort
                           {
                               Empresa = a.Empresa,
                               Paciente = a.Paciente,
                               FechaServicio = a.FechaServicio,
                               DNI = a.DNI,
                               EmpresaRubro = a.EmpresaRubro,
                               ProtTipoReporte = a.ProtTipoReporte
                           }).FirstOrDefault();

                return sql;
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        // Alberto
        public List<ReportEvaluacionPsicolaboralPersonal> GetReportEvaluacionPsicolaborlaPersonal(string pstrserviceId, string pstrComponentId)
        {
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                var objEntity = (from A in dbContext.service
                                 join B in dbContext.person on A.v_PersonId equals B.v_PersonId

                                 join C in dbContext.protocol on A.v_ProtocolId equals C.v_ProtocolId into C_join
                                 from C in C_join.DefaultIfEmpty()

                                 join D in dbContext.organization on C.v_CustomerOrganizationId equals D.v_OrganizationId into D_join
                                 from D in D_join.DefaultIfEmpty()

                                 join C1 in dbContext.organization on C.v_EmployerOrganizationId equals C1.v_OrganizationId into C1_join
                                 from C1 in C1_join.DefaultIfEmpty()

                                 join E in dbContext.servicecomponent on new { a = A.v_ServiceId, b = pstrComponentId }
                                                                        equals new { a = E.v_ServiceId, b = E.v_ComponentId } into E_join
                                 from E in E_join.DefaultIfEmpty()

                                 join J in dbContext.systemparameter on new { a = B.i_SexTypeId.Value, b = 100 }
                                                             equals new { a = J.i_ParameterId, b = J.i_GroupId } into J_join // GENERO
                                 from J in J_join.DefaultIfEmpty()


                                 // Usuario Medico Evaluador / Medico Aprobador ****************************
                                 join me in dbContext.systemuser on E.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
                                 from me in me_join.DefaultIfEmpty()

                                 join pme in dbContext.professional on me.v_PersonId equals pme.v_PersonId into pme_join
                                 from pme in pme_join.DefaultIfEmpty()

                                 join y in dbContext.person on me.v_PersonId equals y.v_PersonId



                                 where A.v_ServiceId == pstrserviceId
                                 select new ReportEvaluacionPsicolaboralPersonal
                                 {
                                     Trabajador = B.v_FirstLastName + " " + B.v_SecondLastName + " " + B.v_FirstName,
                                     Genero = J.v_Value1,
                                     FechaNacimiento = B.d_Birthdate.Value,
                                     PuestoPostula = B.v_CurrentOccupation,
                                     EmpresaCliente = D.v_Name,
                                     FechaEvaluacion = A.d_ServiceDate.Value,
                                     Evaluador = y.v_FirstName + " " + y.v_FirstLastName + " " + y.v_SecondLastName,
                                     Cpsp = pme.v_ProfessionalCode,
                                     FirmaTrabajador = B.b_RubricImage,
                                     FirmaProfesional = pme.b_SignatureImage


                                 });

                var MedicalCenter = GetInfoMedicalCenter();

                var sql = (from a in objEntity.ToList()
                           let EvaPsicolaborla = ValoresComponente(pstrserviceId, Constants.EVALUACION_PSICOLABORAL)
                           select new ReportEvaluacionPsicolaboralPersonal
                           {

                               Trabajador = a.Trabajador,
                               Genero = a.Genero,
                               FechaNacimiento = a.FechaNacimiento,
                               Edad = GetAge(a.FechaNacimiento),
                               PuestoPostula = a.PuestoPostula,
                               EmpresaCliente = a.EmpresaCliente,
                               FechaEvaluacion = a.FechaEvaluacion,
                               Cs = (from n in dbContext.organization
                                     where n.v_OrganizationId == Constants.OWNER_ORGNIZATION_ID
                                     select n.v_Name).SingleOrDefault<string>(),
                               Evaluador = a.Evaluador,
                               Cpsp = a.Cpsp,
                               FirmaTrabajador = a.FirmaTrabajador,
                               FirmaProfesional = a.FirmaProfesional,

                               _1 = EvaPsicolaborla.Count == 0 ? string.Empty : EvaPsicolaborla.Find(p => p.v_ComponentFieldId == Constants._1).v_Value1,
                               _2 = EvaPsicolaborla.Count == 0 ? string.Empty : EvaPsicolaborla.Find(p => p.v_ComponentFieldId == Constants._2).v_Value1,
                               _3 = EvaPsicolaborla.Count == 0 ? string.Empty : EvaPsicolaborla.Find(p => p.v_ComponentFieldId == Constants._3).v_Value1,
                               _4 = EvaPsicolaborla.Count == 0 ? string.Empty : EvaPsicolaborla.Find(p => p.v_ComponentFieldId == Constants._4).v_Value1,
                               _5 = EvaPsicolaborla.Count == 0 ? string.Empty : EvaPsicolaborla.Find(p => p.v_ComponentFieldId == Constants._5).v_Value1,
                               _6 = EvaPsicolaborla.Count == 0 ? string.Empty : EvaPsicolaborla.Find(p => p.v_ComponentFieldId == Constants._6).v_Value1,
                               _7 = EvaPsicolaborla.Count == 0 ? string.Empty : EvaPsicolaborla.Find(p => p.v_ComponentFieldId == Constants._7).v_Value1,
                               _8 = EvaPsicolaborla.Count == 0 ? string.Empty : EvaPsicolaborla.Find(p => p.v_ComponentFieldId == Constants._8).v_Value1,
                               _9 = EvaPsicolaborla.Count == 0 ? string.Empty : EvaPsicolaborla.Find(p => p.v_ComponentFieldId == Constants._9).v_Value1,
                               _10 = EvaPsicolaborla.Count == 0 ? string.Empty : EvaPsicolaborla.Find(p => p.v_ComponentFieldId == Constants._10).v_Value1,
                               _11 = EvaPsicolaborla.Count == 0 ? string.Empty : EvaPsicolaborla.Find(p => p.v_ComponentFieldId == Constants._11).v_Value1,
                               _12 = EvaPsicolaborla.Count == 0 ? string.Empty : EvaPsicolaborla.Find(p => p.v_ComponentFieldId == Constants._12).v_Value1,
                               _13 = EvaPsicolaborla.Count == 0 ? string.Empty : EvaPsicolaborla.Find(p => p.v_ComponentFieldId == Constants._13).v_Value1,
                               _14 = EvaPsicolaborla.Count == 0 ? string.Empty : EvaPsicolaborla.Find(p => p.v_ComponentFieldId == Constants._14).v_Value1,
                               _15 = EvaPsicolaborla.Count == 0 ? string.Empty : EvaPsicolaborla.Find(p => p.v_ComponentFieldId == Constants._15).v_Value1,
                               _16 = EvaPsicolaborla.Count == 0 ? string.Empty : EvaPsicolaborla.Find(p => p.v_ComponentFieldId == Constants._16).v_Value1,
                               _17 = EvaPsicolaborla.Count == 0 ? string.Empty : EvaPsicolaborla.Find(p => p.v_ComponentFieldId == Constants._17).v_Value1,
                               _18 = EvaPsicolaborla.Count == 0 ? string.Empty : EvaPsicolaborla.Find(p => p.v_ComponentFieldId == Constants._18).v_Value1,
                               _19 = EvaPsicolaborla.Count == 0 ? string.Empty : EvaPsicolaborla.Find(p => p.v_ComponentFieldId == Constants._19).v_Value1,
                               _20 = EvaPsicolaborla.Count == 0 ? string.Empty : EvaPsicolaborla.Find(p => p.v_ComponentFieldId == Constants._20).v_Value1,
                               _21 = EvaPsicolaborla.Count == 0 ? string.Empty : EvaPsicolaborla.Find(p => p.v_ComponentFieldId == Constants._21).v_Value1,
                               _22 = EvaPsicolaborla.Count == 0 ? string.Empty : EvaPsicolaborla.Find(p => p.v_ComponentFieldId == Constants._22).v_Value1,
                               _23 = EvaPsicolaborla.Count == 0 ? string.Empty : EvaPsicolaborla.Find(p => p.v_ComponentFieldId == Constants._23).v_Value1,
                               _24 = EvaPsicolaborla.Count == 0 ? string.Empty : EvaPsicolaborla.Find(p => p.v_ComponentFieldId == Constants._24).v_Value1,
                               _25 = EvaPsicolaborla.Count == 0 ? string.Empty : EvaPsicolaborla.Find(p => p.v_ComponentFieldId == Constants._25).v_Value1,
                               _26 = EvaPsicolaborla.Count == 0 ? string.Empty : EvaPsicolaborla.Find(p => p.v_ComponentFieldId == Constants._26).v_Value1,
                               _27 = EvaPsicolaborla.Count == 0 ? string.Empty : EvaPsicolaborla.Find(p => p.v_ComponentFieldId == Constants._27).v_Value1,
                               _28 = EvaPsicolaborla.Count == 0 ? string.Empty : EvaPsicolaborla.Find(p => p.v_ComponentFieldId == Constants._28).v_Value1,

                               Fatiga = EvaPsicolaborla.Count == 0 ? string.Empty : EvaPsicolaborla.Find(p => p.v_ComponentFieldId == Constants.EVALUACION_PSICOLABORAL_ESCALA_FATIGA_OBSERVACIONES).v_Value1,
                               Recomendacion = EvaPsicolaborla.Count == 0 ? string.Empty : EvaPsicolaborla.Find(p => p.v_ComponentFieldId == Constants.EVALUACION_PSICOLABORAL_ESCALA_FATIGA_RECOMENDACIONES).v_Value1,
                               Somnolencia = EvaPsicolaborla.Count == 0 ? string.Empty : EvaPsicolaborla.Find(p => p.v_ComponentFieldId == Constants.EVALUACION_PSICOLABORAL_ESCALA_SOMNOLENCIA).v_Value1,
                               ConclusionFinal = EvaPsicolaborla.Count == 0 ? string.Empty : EvaPsicolaborla.Find(p => p.v_ComponentFieldId == Constants.EVALUACION_PSICOLABORAL_CONCLUSION_FINAL_CONCLUSION).v_Value1,
                               Conclusion = EvaPsicolaborla.Count == 0 ? string.Empty : EvaPsicolaborla.Find(p => p.v_ComponentFieldId == Constants.EVALUACION_PSICOLABORAL_CONCLUSION_FINAL_APTITUD).v_Value1,
                               RiesgoEstres = EvaPsicolaborla.Count == 0 ? string.Empty : EvaPsicolaborla.Find(p => p.v_ComponentFieldId == Constants.EVALUACION_PSICOLABORAL_RIESGO_ESTRES).v_Value1,

                               b_Logo = MedicalCenter.b_Image,
                               EmpresaPropietaria = MedicalCenter.v_Name,
                               EmpresaPropietariaDireccion = MedicalCenter.v_Address,
                               EmpresaPropietariaTelefono = MedicalCenter.v_PhoneNumber,
                               EmpresaPropietariaEmail = MedicalCenter.v_Mail,

                           }).ToList();


                return sql;
            }
            catch (Exception)
            {

                throw;
            }
        }


        // Alberto
        public List<ReportOsteo> GetReportOsteo(string pstrserviceId, string pstrComponentId)
        {
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                var objEntity = (from A in dbContext.service
                                 join B in dbContext.person on A.v_PersonId equals B.v_PersonId

                                 join C in dbContext.protocol on A.v_ProtocolId equals C.v_ProtocolId into C_join
                                 from C in C_join.DefaultIfEmpty()

                                 join D in dbContext.organization on C.v_CustomerOrganizationId equals D.v_OrganizationId into D_join
                                 from D in D_join.DefaultIfEmpty()

                                 join C1 in dbContext.organization on C.v_EmployerOrganizationId equals C1.v_OrganizationId into C1_join
                                 from C1 in C1_join.DefaultIfEmpty()

                                 join E in dbContext.servicecomponent on new { a = A.v_ServiceId, b = pstrComponentId }
                                                                        equals new { a = E.v_ServiceId, b = E.v_ComponentId } into E_join
                                 from E in E_join.DefaultIfEmpty()

                                 join J in dbContext.systemparameter on new { a = B.i_SexTypeId.Value, b = 100 }
                                                             equals new { a = J.i_ParameterId, b = J.i_GroupId } into J_join // GENERO
                                 from J in J_join.DefaultIfEmpty()


                                 // Usuario Medico Evaluador / Medico Aprobador ****************************
                                 join me in dbContext.systemuser on E.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
                                 from me in me_join.DefaultIfEmpty()

                                 join pme in dbContext.professional on me.v_PersonId equals pme.v_PersonId into pme_join
                                 from pme in pme_join.DefaultIfEmpty()

                                 join y in dbContext.person on me.v_PersonId equals y.v_PersonId

                                 where A.v_ServiceId == pstrserviceId
                                 select new ReportOsteo
                                 {
                                     ServiceId = A.v_ServiceId,
                                     HuellaTrabajador = B.b_FingerPrintImage,
                                     FirmaTrabajador = B.b_RubricImage,
                                     FirmaMedico = pme.b_SignatureImage

                                 });

                var MedicalCenter = GetInfoMedicalCenter();

                var sql = (from a in objEntity.ToList()
                           let Osteo = ValoresComponente(pstrserviceId, Constants.OSTEO_MUSCULAR_ID)


                           select new ReportOsteo
                           {

                               ServiceId = a.ServiceId,
                               HuellaTrabajador = a.HuellaTrabajador,
                               FirmaTrabajador = a.FirmaTrabajador,
                               FirmaMedico = a.FirmaMedico,

                               TareasHorasDias = Osteo.Count == 0 ? string.Empty : Osteo.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_TAREAS_HORAS_DIAS).v_Value1,
                               TareasFrecuencia = Osteo.Count == 0 ? string.Empty : Osteo.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_TAREAS_FRECUENCIA).v_Value1,
                               TareasHorasSemana = Osteo.Count == 0 ? string.Empty : Osteo.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_TAREAS_HORAS_SEMANA).v_Value1,
                               TareasTipo = Osteo.Count == 0 ? string.Empty : Osteo.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_TAREAS_TIPO).v_Value1,
                               TareasCiclo = Osteo.Count == 0 ? string.Empty : Osteo.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_TAREAS_CICLO).v_Value1,
                               TareasCarga = Osteo.Count == 0 ? string.Empty : Osteo.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_TAREAS_CARGA).v_Value1,
                               LateralCervical = Osteo.Count == 0 ? string.Empty : Osteo.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_COLUMNA_LATERAL_CERVICAL).v_Value1,
                               LateralLumbar = Osteo.Count == 0 ? string.Empty : Osteo.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_COLUMNA_LATERAL_LUMBAR).v_Value1,
                               LateralDorsal = Osteo.Count == 0 ? string.Empty : Osteo.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_COLUMNA_LATERAL_DORSAL).v_Value1,
                               LordosisCervical = Osteo.Count == 0 ? string.Empty : Osteo.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_LORDOSIS_CERVICAL).v_Value1,
                               LordosisLumbar = Osteo.Count == 0 ? string.Empty : Osteo.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_LORDOSIS_LUMBAR).v_Value1,
                               EscoliosisLumbar = Osteo.Count == 0 ? string.Empty : Osteo.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_CIFOSIS_DORSAL).v_Value1,
                               ContracturaMuscular = Osteo.Count == 0 ? string.Empty : Osteo.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_CONTRACTURA_MUSCULAR).v_Value1,
                               DolorEspalda = Osteo.Count == 0 ? string.Empty : Osteo.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_DOLOR_ESPALDA).v_Value1,
                               ConclusionDescripcion = Osteo.Count == 0 ? string.Empty : Osteo.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_DESCRIPCION_ID).v_Value1,
                               Dx = GetDiagnosticByServiceIdAndComponent(pstrserviceId, Constants.OSTEO_MUSCULAR_ID),
                               Aptitud = Osteo.Count == 0 ? string.Empty : Osteo.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_APTITUD_ID).v_Value1,
                               Recomendaciones = GetRecommendationByServiceIdAndComponent(a.ServiceId, Constants.OSTEO_MUSCULAR_ID),

                               b_Logo = MedicalCenter.b_Image,
                               EmpresaPropietaria = MedicalCenter.v_Name,
                               EmpresaPropietariaDireccion = MedicalCenter.v_Address,
                               EmpresaPropietariaTelefono = MedicalCenter.v_PhoneNumber,
                               EmpresaPropietariaEmail = MedicalCenter.v_Mail,

                           }).ToList();


                return sql;
            }
            catch (Exception)
            {

                throw;
            }
        }

        #region Query Matriz

        public List<Antecedentes> DevolverTodosAntecedentes(DateTime? FeIni, DateTime? FeFin)
        {
            try
            {
                int isDeleted = (int)SiNo.NO;
                //Antecedentes Retornar;
                List<Antecedentes> ListaTotalJerarquizada = new List<Antecedentes>();
                Antecedentes ListaJerarquizadaAntecedentes = new Antecedentes();
                List<AntecedentesList> ListaAntecedentesPorPersona;

                using (SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel())
                {

                    var ListaAntecedentesTodos = (from A in dbContext.personmedicalhistory
                                                  join D in dbContext.diseases on A.v_DiseasesId equals D.v_DiseasesId
                                                  join E in dbContext.service on A.v_PersonId equals E.v_PersonId
                                                  where A.i_IsDeleted == 0
                                                         && E.d_ServiceDate < FeFin && E.d_ServiceDate > FeIni
                                                  orderby A.v_PersonId
                                                  select new AntecedentesList
                                                  {
                                                      PersonId = A.v_PersonId,
                                                      v_DiseasesName = D.v_Name,
                                                      d_StartDate = A.d_StartDate.Value,
                                                      Detalle_Dx = A.v_DiagnosticDetail,
                                                      Parentesco = "",
                                                      TipoAntecedente = "P"
                                                  }).Union(from A in dbContext.familymedicalantecedents
                                                           join D in dbContext.diseases on A.v_DiseasesId equals D.v_DiseasesId
                                                           join E in dbContext.service on A.v_PersonId equals E.v_PersonId

                                                           join J1 in dbContext.systemparameter on new { a = A.i_TypeFamilyId.Value, b = 149 }
                                                               equals new { a = J1.i_ParameterId, b = J1.i_GroupId } into J1_join
                                                           from J1 in J1_join.DefaultIfEmpty()

                                                           join J2 in dbContext.systemparameter on new { a = J1.i_ParentParameterId.Value, b = 149 }
                                                               equals new { a = J2.i_ParameterId, b = J2.i_GroupId } into J2_join
                                                           from J2 in J2_join.DefaultIfEmpty()

                                                           where A.i_IsDeleted == isDeleted
                                                                 && E.d_ServiceDate < FeFin && E.d_ServiceDate > FeIni
                                                           orderby A.v_PersonId
                                                           select new AntecedentesList
                                                           {
                                                               PersonId = A.v_PersonId,
                                                               v_DiseasesName = D.v_Name,
                                                               d_StartDate = DateTime.Now,
                                                               Detalle_Dx = "",
                                                               Parentesco = J2.v_Value1,
                                                               TipoAntecedente = "F"
                                                           }).ToList();


                    var ListaJerarquizada = (from A in dbContext.service
                                             where A.d_ServiceDate < FeFin && A.d_ServiceDate > FeIni
                                             select new Antecedentes
                                             {
                                                 PersonId = A.v_PersonId,
                                                 ServicioId = A.v_ServiceId
                                             }).ToList();

                    ListaJerarquizada.ForEach(a =>
                    {
                        a.ListaAntecendentes = ListaAntecedentesTodos.FindAll(p => p.PersonId == a.PersonId);
                    });


                    foreach (var item in ListaJerarquizada)
                    {
                        ListaJerarquizadaAntecedentes = new Antecedentes();
                        ListaAntecedentesPorPersona = new List<AntecedentesList>();
                        ListaJerarquizadaAntecedentes.PersonId = item.PersonId;
                        ListaJerarquizadaAntecedentes.ServicioId = item.ServicioId;


                        var DetalleTodos = ListaJerarquizada.SelectMany(p => p.ListaAntecendentes).ToList();

                        //Antecedentes Personales
                        var DetalleAntecPerson = DetalleTodos.FindAll(p => p.PersonId == item.PersonId && p.TipoAntecedente == "P");

                        for (int i = 0; i < 6; i++)
                        {
                            if (i < DetalleAntecPerson.Count())
                            {
                                if (i == 5)
                                {
                                    int Contador = DetalleAntecPerson.Count - 5;
                                    var x = DetalleAntecPerson.GetRange(5, Contador);

                                    DetalleAntecPerson[i].v_DiseasesName = string.Join(", ", x.Select(p => p.v_DiseasesName + " (" + p.d_StartDate.ToString("MM/yyyy") + ")" + ", " + p.Detalle_Dx));
                                    ListaAntecedentesPorPersona.Add(DetalleAntecPerson[i]);
                                }
                                else
                                {
                                    DetalleAntecPerson[i].v_DiseasesName = DetalleAntecPerson[i].v_DiseasesName + " (" + DetalleAntecPerson[i].d_StartDate.ToString("MM/yyyy") + ")" + ", " + DetalleAntecPerson[i].Detalle_Dx;
                                    ListaAntecedentesPorPersona.Add(DetalleAntecPerson[i]);
                                }
                            }
                            else
                            {
                                ListaAntecedentesPorPersona.Add(new AntecedentesList());
                            }
                        }


                        //Antecedentes Familiares
                        var DetalleAntecFami = DetalleTodos.FindAll(p => p.PersonId == item.PersonId && p.TipoAntecedente == "F");

                        for (int i = 0; i < 5; i++)
                        {
                            if (i < DetalleAntecFami.Count())
                            {
                                if (i == 4)
                                {
                                    int Contador = DetalleAntecFami.Count - 4;
                                    var y = DetalleAntecFami.GetRange(4, Contador);

                                    DetalleAntecFami[i].v_DiseasesName = string.Join(", ", y.Select(p => p.v_DiseasesName + " (" + p.Parentesco + ")"));
                                    ListaAntecedentesPorPersona.Add(DetalleAntecFami[i]);

                                }
                                else
                                {
                                    DetalleAntecFami[i].v_DiseasesName = DetalleAntecFami[i].v_DiseasesName + " (" + DetalleAntecFami[i].Parentesco + ")";
                                    ListaAntecedentesPorPersona.Add(DetalleAntecFami[i]);
                                }

                            }
                            else
                            {
                                ListaAntecedentesPorPersona.Add(new AntecedentesList());
                            }
                        }
                        ListaJerarquizadaAntecedentes.ListaAntecendentes = ListaAntecedentesPorPersona;

                        ListaTotalJerarquizada.Add(ListaJerarquizadaAntecedentes);
                    }

                    ////5 Antecedentes Personales
                    //var ListaAntcPersonales = ListaAntecedentesTodos.FindAll(p => p.TipoAntecedente == "P");

                    //for (int i = 0; i < 6; i++)
                    //{
                    //    if (i < ListaAntcPersonales.Count())
                    //    {
                    //        if (i == 5)
                    //        {
                    //            int Contador = ListaAntcPersonales.Count - 5;
                    //            var x = ListaAntcPersonales.GetRange(5, Contador);

                    //            ListaAntcPersonales[i].v_DiseasesName = string.Join(", ", x.Select(p => p.v_DiseasesName + " (" + p.d_StartDate.ToString("MM/yyyy") + ")" + ", " + p.Detalle_Dx));
                    //            ListaAntecedentesPorPersona.Add(ListaAntcPersonales[i]);
                    //        }
                    //        else
                    //        {
                    //            ListaAntcPersonales[i].v_DiseasesName = ListaAntcPersonales[i].v_DiseasesName + " (" + ListaAntcPersonales[i].d_StartDate.ToString("MM/yyyy") + ")" + ", " + ListaAntcPersonales[i].Detalle_Dx;
                    //            ListaAntecedentesPorPersona.Add(ListaAntcPersonales[i]);
                    //        }
                    //    }
                    //    else
                    //    {
                    //        ListaAntecedentesPorPersona.Add(new AntecedentesList());
                    //    }
                    //}

                    ////4 Antecedentes Familiares
                    //var ListaAntcFamiliares = ListaAntecedentesTodos.FindAll(p => p.TipoAntecedente == "F");

                    //for (int i = 0; i < 5; i++)
                    //{
                    //    if (i < ListaAntcFamiliares.Count())
                    //    {
                    //        if (i == 4)
                    //        {
                    //            int Contador = ListaAntcFamiliares.Count - 4;
                    //            var y = ListaAntcFamiliares.GetRange(4, Contador);

                    //            ListaAntcFamiliares[i].v_DiseasesName = string.Join(", ", y.Select(p => p.v_DiseasesName + " (" + p.Parentesco + ")"));
                    //            ListaAntecedentesPorPersona.Add(ListaAntcFamiliares[i]);

                    //        }
                    //        else
                    //        {
                    //            ListaAntcFamiliares[i].v_DiseasesName = ListaAntcFamiliares[i].v_DiseasesName + " (" + ListaAntcFamiliares[i].Parentesco + ")";
                    //            ListaAntecedentesPorPersona.Add(ListaAntcFamiliares[i]);
                    //        }

                    //    }
                    //    else
                    //    {
                    //        ListaAntecedentesPorPersona.Add(new AntecedentesList());
                    //    }
                    //}

                    return ListaTotalJerarquizada;
                }

            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public List<DiagnosticosRecomendaciones> DevolverJerarquiaDxRecomendaciones(DateTime? FeIni, DateTime? FeFin)
        {
            try
            {
                int isDeleted = (int)SiNo.NO;
                int definitivo = (int)FinalQualification.Definitivo;
                int presuntivo = (int)FinalQualification.Presuntivo;

                List<DiagnosticosRecomendaciones> ListaTotalJerarquizada = new List<DiagnosticosRecomendaciones>();
                DiagnosticosRecomendaciones ListaJerarquizadaDxRecomendaciones = new DiagnosticosRecomendaciones();
                List<DiagnosticosRecomendacionesList> ListaDxRecomendacionesPorServicio;

                using (SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel())
                {
                    var ListaDxRecoTodos = (from ccc in dbContext.diagnosticrepository
                                            join bbb in dbContext.component on ccc.v_ComponentId equals bbb.v_ComponentId into J7_join
                                            from bbb in J7_join.DefaultIfEmpty()
                                            join ddd in dbContext.diseases on ccc.v_DiseasesId equals ddd.v_DiseasesId  // Diagnosticos 
                                            join eee in dbContext.service on ccc.v_ServiceId equals eee.v_ServiceId
                                            where (ccc.i_IsDeleted == isDeleted) &&
                                                (ccc.i_FinalQualificationId == definitivo ||
                                                ccc.i_FinalQualificationId == presuntivo)
                                               && eee.d_ServiceDate < FeFin && eee.d_ServiceDate > FeIni
                                            orderby eee.v_ServiceId
                                            select new DiagnosticosRecomendacionesList
                                            {
                                                ServicioId = eee.v_ServiceId,
                                                Descripcion = ddd.v_Name,
                                                Tipo = "D"
                                            }).Union(from ccc in dbContext.recommendation
                                                     join ddd in dbContext.masterrecommendationrestricction on ccc.v_MasterRecommendationId equals ddd.v_MasterRecommendationRestricctionId  // Diagnosticos      
                                                     join eee in dbContext.service on ccc.v_ServiceId equals eee.v_ServiceId
                                                     where ccc.i_IsDeleted == isDeleted
                                                      && eee.d_ServiceDate < FeFin && eee.d_ServiceDate > FeIni
                                                     orderby eee.v_ServiceId
                                                     select new DiagnosticosRecomendacionesList
                                                             {
                                                                 ServicioId = eee.v_ServiceId,
                                                                 Descripcion = ddd.v_Name,
                                                                 Tipo = "R"
                                                             }).ToList();



                    var ListaJerarquizada = (from A in dbContext.service
                                             where A.d_ServiceDate < FeFin && A.d_ServiceDate > FeIni
                                             select new DiagnosticosRecomendaciones
                                             {
                                                 ServicioId = A.v_ServiceId
                                             }).ToList();

                    ListaJerarquizada.ForEach(a =>
                    {
                        a.DetalleDxRecomendaciones = ListaDxRecoTodos.FindAll(p => p.ServicioId == a.ServicioId);
                    });

                    foreach (var item in ListaJerarquizada)
                    {
                        ListaJerarquizadaDxRecomendaciones = new DiagnosticosRecomendaciones();
                        ListaDxRecomendacionesPorServicio = new List<DiagnosticosRecomendacionesList>();

                        ListaJerarquizadaDxRecomendaciones.ServicioId = item.ServicioId;


                        var DetalleTodos = ListaJerarquizada.SelectMany(p => p.DetalleDxRecomendaciones).ToList();

                        //Lista Dx
                        var DetalleDx = DetalleTodos.FindAll(p => p.ServicioId == item.ServicioId && p.Tipo == "D");

                        for (int i = 0; i < 8; i++)
                        {
                            if (i < DetalleDx.Count())
                            {
                                if (i == 7)
                                {
                                    int Contador = DetalleDx.Count - 7;
                                    var x = DetalleDx.GetRange(7, Contador);

                                    DetalleDx[i].Descripcion = string.Join(", ", x.Select(p => p.Descripcion));
                                    ListaDxRecomendacionesPorServicio.Add(DetalleDx[i]);
                                }
                                else
                                {
                                    DetalleDx[i].Descripcion = DetalleDx[i].Descripcion;
                                    ListaDxRecomendacionesPorServicio.Add(DetalleDx[i]);
                                }
                            }
                            else
                            {
                                ListaDxRecomendacionesPorServicio.Add(new DiagnosticosRecomendacionesList());
                            }
                        }

                        //Lista Recomendaciones
                        var DetalleReco = DetalleTodos.FindAll(p => p.ServicioId == item.ServicioId && p.Tipo == "R");

                        for (int i = 0; i < 14; i++)
                        {
                            if (i < DetalleReco.Count())
                            {
                                if (i == 13)
                                {
                                    int Contador = DetalleReco.Count - 13;
                                    var x = DetalleReco.GetRange(13, Contador);

                                    DetalleReco[i].Descripcion = string.Join(", ", x.Select(p => p.Descripcion));
                                    ListaDxRecomendacionesPorServicio.Add(DetalleReco[i]);
                                }
                                else
                                {
                                    DetalleReco[i].Descripcion = DetalleReco[i].Descripcion;
                                    ListaDxRecomendacionesPorServicio.Add(DetalleReco[i]);
                                }
                            }
                            else
                            {
                                ListaDxRecomendacionesPorServicio.Add(new DiagnosticosRecomendacionesList());
                            }
                        }
                        ListaJerarquizadaDxRecomendaciones.DetalleDxRecomendaciones = ListaDxRecomendacionesPorServicio;

                        ListaTotalJerarquizada.Add(ListaJerarquizadaDxRecomendaciones);
                    }
                }
                return ListaTotalJerarquizada;
            }
            catch (Exception)
            {

                throw;
            }
        }

        public List<DiagnosticosRecomendaciones> DevolverJerarquiaDx(DateTime? FeIni, DateTime? FeFin)
        {
            try
            {
                int isDeleted = (int)SiNo.NO;
                int definitivo = (int)FinalQualification.Definitivo;
                int presuntivo = (int)FinalQualification.Presuntivo;

                List<DiagnosticosRecomendaciones> ListaTotalJerarquizada = new List<DiagnosticosRecomendaciones>();
                DiagnosticosRecomendaciones ListaJerarquizadaDxRecomendaciones = new DiagnosticosRecomendaciones();

                using (SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel())
                {
                    var ListaDxRecoTodos = (from ccc in dbContext.diagnosticrepository
                                            join bbb in dbContext.component on ccc.v_ComponentId equals bbb.v_ComponentId into J7_join
                                            from bbb in J7_join.DefaultIfEmpty()
                                            join ddd in dbContext.diseases on ccc.v_DiseasesId equals ddd.v_DiseasesId  // Diagnosticos 
                                            join eee in dbContext.service on ccc.v_ServiceId equals eee.v_ServiceId
                                            where (ccc.i_IsDeleted == isDeleted) &&
                                                (ccc.i_FinalQualificationId == definitivo ||
                                                ccc.i_FinalQualificationId == presuntivo)
                                               && eee.d_ServiceDate < FeFin && eee.d_ServiceDate > FeIni
                                            orderby eee.v_ServiceId
                                            select new DiagnosticosRecomendacionesList
                                            {
                                                ServicioId = eee.v_ServiceId,
                                                Descripcion = ddd.v_Name,
                                                IdCampo = ccc.v_ComponentFieldId,
                                                Tipo = "D"
                                            }).ToList();



                    var ListaJerarquizada = (from A in dbContext.service
                                             where A.d_ServiceDate < FeFin && A.d_ServiceDate > FeIni
                                             select new DiagnosticosRecomendaciones
                                             {
                                                 ServicioId = A.v_ServiceId
                                             }).ToList();

                    ListaJerarquizada.ForEach(a =>
                    {
                        a.DetalleDxRecomendaciones = ListaDxRecoTodos.FindAll(p => p.ServicioId == a.ServicioId);
                    });

                    //foreach (var item in ListaJerarquizada)
                    //{
                    //    var xxx = ListaJerarquizada.Find(p => p.ServicioId == item.ServicioId).DetalleDxRecomendaciones.Find(o => o.IdCampo == Constants.ANTROPOMETRIA_IMC_ID).Descripcion;
                    //}

                    return ListaJerarquizada;
                }

            }
            catch (Exception)
            {

                throw;
            }
        }

        //public List<AntecedentesList> DevolverTodosAntecedentes(string pstrPacientId)
        //{
        //    try
        //    {
        //        int isDeleted = (int)SiNo.NO;
        //        List<AntecedentesList> Retornar = new List<AntecedentesList>();

        //        using (SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel())
        //        {

        //            var query = (from A in dbContext.personmedicalhistory
        //                         join D in dbContext.diseases on A.v_DiseasesId equals D.v_DiseasesId
        //                         where A.i_IsDeleted == 0 && A.v_PersonId == pstrPacientId
        //                         select new AntecedentesList
        //                         {
        //                             v_DiseasesName = D.v_Name,
        //                             d_StartDate = A.d_StartDate.Value,
        //                             Detalle_Dx = A.v_DiagnosticDetail,
        //                             Parentesco = "",
        //                             TipoAntecedente ="P"
        //                         }).Union(from A in dbContext.familymedicalantecedents
        //                                  join D in dbContext.diseases on A.v_DiseasesId equals D.v_DiseasesId

        //                                  join J1 in dbContext.systemparameter on new { a = A.i_TypeFamilyId.Value, b = 149 }
        //                                      equals new { a = J1.i_ParameterId, b = J1.i_GroupId } into J1_join
        //                                  from J1 in J1_join.DefaultIfEmpty()

        //                                  join J2 in dbContext.systemparameter on new { a = J1.i_ParentParameterId.Value, b = 149 }
        //                                      equals new { a = J2.i_ParameterId, b = J2.i_GroupId } into J2_join
        //                                  from J2 in J2_join.DefaultIfEmpty()

        //                                  where A.i_IsDeleted == isDeleted && A.v_PersonId == pstrPacientId
        //                                  select new AntecedentesList
        //                                  {
        //                                      v_DiseasesName = D.v_Name,
        //                                      d_StartDate = DateTime.Now,
        //                                      Detalle_Dx = "",
        //                                      Parentesco = J2.v_Value1,
        //                                      TipoAntecedente = "F"
        //                                  }).ToList();


        //            //5 Antecedentes Personales
        //            var ListaAntcPersonales = query.FindAll(p => p.TipoAntecedente == "P");

        //                for (int i = 0; i < 6; i++)
        //                {
        //                    if (i < ListaAntcPersonales.Count())
        //                    {
        //                        if (i == 5)
        //                        {
        //                            int Contador = ListaAntcPersonales.Count - 5;
        //                            var x = ListaAntcPersonales.GetRange(5, Contador);

        //                            ListaAntcPersonales[i].v_DiseasesName = string.Join(", ", x.Select(p => p.v_DiseasesName + " (" + p.d_StartDate.ToString("MM/yyyy") + ")" + ", " + p.Detalle_Dx));
        //                            Retornar.Add(ListaAntcPersonales[i]); 
        //                        }
        //                        else
        //                        {
        //                            ListaAntcPersonales[i].v_DiseasesName = ListaAntcPersonales[i].v_DiseasesName + " (" + ListaAntcPersonales[i].d_StartDate.ToString("MM/yyyy") + ")" + ", " + ListaAntcPersonales[i].Detalle_Dx;
        //                            Retornar.Add(ListaAntcPersonales[i]); 
        //                        }
        //                    }
        //                    else
        //                    {
        //                        Retornar.Add(new AntecedentesList());                                
        //                    }                            
        //                }

        //            //4 Antecedentes Familiares
        //                var ListaAntcFamiliares = query.FindAll(p => p.TipoAntecedente == "F");

        //                for (int i = 0; i < 5; i++)
        //                {
        //                    if (i < ListaAntcFamiliares.Count())
        //                    {
        //                        if (i == 4)
        //                        {
        //                            int Contador = ListaAntcFamiliares.Count - 4;
        //                            var y = ListaAntcFamiliares.GetRange(4, Contador);

        //                            ListaAntcFamiliares[i].v_DiseasesName = string.Join(", ", y.Select(p => p.v_DiseasesName + " (" + p.Parentesco + ")"));
        //                            Retornar.Add(ListaAntcFamiliares[i]); 

        //                        }
        //                        else 
        //                        {
        //                            ListaAntcFamiliares[i].v_DiseasesName = ListaAntcFamiliares[i].v_DiseasesName + " (" + ListaAntcFamiliares[i].Parentesco + ")";
        //                            Retornar.Add(ListaAntcFamiliares[i]);
        //                        }

        //                    }
        //                    else
        //                    {
        //                        Retornar.Add(new AntecedentesList());
        //                    }
        //                }

        //                return Retornar;
        //        }

        //    }
        //    catch (Exception ex)
        //    {
        //        return null;
        //    }
        //}


        public List<JerarquiaServicioCamposValores> DevolverValorCampoPorServicio(DateTime? FechaIni, DateTime? FechaFin)
        {
            SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

            int isDeleted = (int)SiNo.NO;

            try
            {

                //var query1 = (from A in dbContext.service
                //              join B in dbContext.servicecomponent on A.v_ServiceId equals B.v_ServiceId
                //              join C in dbContext.servicecomponentfields on B.v_ServiceComponentId equals C.v_ServiceComponentId
                //              join D in dbContext.servicecomponentfieldvalues on C.v_ServiceComponentFieldsId equals D.v_ServiceComponentFieldsId
                //              where B.i_IsDeleted == isDeleted
                //                && C.i_IsDeleted == isDeleted
                //                && A.d_ServiceDate < FechaFin && A.d_ServiceDate > FechaIni
                //              select new ValorComponenteList
                //                {
                //                    ServicioId = A.v_ServiceId,
                //                    IdComponente = B.v_ComponentId,
                //                    IdCampo = C.v_ComponentFieldId,
                //                    Valor = D.v_Value1
                //                }).ToList();


                //var query2 = (from A in dbContext.component
                //              join B in dbContext.componentfields on A.v_ComponentId equals B.v_ComponentId
                //              join C in dbContext.componentfield on B.v_ComponentFieldId equals C.v_ComponentFieldId
                //              where A.i_IsDeleted == isDeleted && B.i_IsDeleted == isDeleted && C.i_IsDeleted == isDeleted
                //              select new ValorComponenteList
                //              {
                //                  IdComponente = A.v_ComponentId,
                //                  IdCampo = C.v_ComponentFieldId
                //              }).ToList();


                //var query3 = (from A in query2
                //              join E in query1 on A.IdComponente equals E.IdComponente
                //              //join F in dbContext.componentfields on E.IdCampo equals F.v_ComponentFieldId
                //              //join G in dbContext.componentfield on E.IdCampo equals G.v_ComponentFieldId
                //              //join H in dbContext.component on F.v_ComponentId equals H.v_ComponentId

                //              select new ValorComponenteList
                //              {
                //                  ServicioId = E.ServicioId,
                //                  Valor = E.Valor,
                //                  //NombreComponente = H.v_Name,
                //                  //IdComponente = H.v_ComponentId,
                //                  //NombreCampo = G.v_TextLabel,
                //                  //IdCampo = G.v_ComponentFieldId 

                //              }).ToList();


                //var ListaIds = (from A in dbContext.service
                //                join B in dbContext.servicecomponent on A.v_ServiceId equals B.v_ServiceId
                //                join C in dbContext.servicecomponentfields on B.v_ServiceComponentId equals C.v_ServiceComponentId
                //                where A.d_ServiceDate < FechaFin && A.d_ServiceDate > FechaIni && C.i_IsDeleted == isDeleted
                //                select new
                //                {
                //                    IdCampo = C.v_ServiceComponentFieldsId
                //                }
                //                ).ToList();

                //var Concat = string.Join(", ", ListaIds.Select(p => p.IdCampo));

                //var Array = Concat.Split(',');


                //List<ValorComponenteList> ccc = (from A in dbContext.servicecomponentfieldvalues
                //                                 where Array.Contains(A.v_ServiceComponentFieldsId)
                //                                 select new ValorComponenteList
                //                                 {
                //                                     IdComponente = A.v_Value1
                //                                 }).ToList();




                var PreQuery = (from A in dbContext.service
                                join B in dbContext.servicecomponent on A.v_ServiceId equals B.v_ServiceId
                                join C in dbContext.servicecomponentfields on B.v_ServiceComponentId equals C.v_ServiceComponentId
                                join D in dbContext.servicecomponentfieldvalues on C.v_ServiceComponentFieldsId equals D.v_ServiceComponentFieldsId
                                join F in dbContext.componentfields on C.v_ComponentFieldId equals F.v_ComponentFieldId
                                join G in dbContext.componentfield on C.v_ComponentFieldId equals G.v_ComponentFieldId
                                join H in dbContext.component on F.v_ComponentId equals H.v_ComponentId
                                where B.i_IsDeleted == isDeleted
                                     && C.i_IsDeleted == isDeleted
                                     && A.d_ServiceDate < FechaFin && A.d_ServiceDate > FechaIni

                                orderby A.v_ServiceId
                                select new ValorComponenteList
                                {
                                    ServicioId = A.v_ServiceId,
                                    Valor = D.v_Value1,
                                    NombreComponente = H.v_Name,
                                    IdComponente = C.v_ComponentId,
                                    NombreCampo = G.v_TextLabel,
                                    IdCampo = C.v_ComponentFieldId
                                }

                            ).ToList();

                //PreQuery.Sort((x, y) => x.ServicioId.CompareTo(y.ServicioId));

                var ListaJerarquizada = (from A in dbContext.service
                                         where A.d_ServiceDate < FechaFin && A.d_ServiceDate > FechaIni
                                         select new JerarquiaServicioCamposValores
                                         {
                                             ServicioId = A.v_ServiceId
                                         }).ToList();

                ListaJerarquizada.ForEach(a =>
                {
                    a.CampoValores = PreQuery.FindAll(p => p.ServicioId == a.ServicioId);
                });

                //ListaJerarquizada.Sort((x, y) => x.ServicioId.CompareTo(y.ServicioId));

                return ListaJerarquizada;
            }
            catch (Exception)
            {

                throw;
            }

        }
        #endregion

        // Nuevos Inicio -> LUN 23/03/2015

        // Alejandro
        public List<OftalmologiaList> ReportOftalmologia(string pstrserviceId, string pstrComponentId)
        {
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                var objEntity = (from A in dbContext.service
                                 join B in dbContext.person on A.v_PersonId equals B.v_PersonId
                                 join E in dbContext.servicecomponent on new { a = pstrserviceId, b = pstrComponentId }
                                                                        equals new { a = E.v_ServiceId, b = E.v_ComponentId }

                                 // Usuario Medico Evaluador / Medico Aprobador ****************************
                                 join me in dbContext.systemuser on E.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
                                 from me in me_join.DefaultIfEmpty()

                                 join pme in dbContext.professional on me.v_PersonId equals pme.v_PersonId into pme_join
                                 from pme in pme_join.DefaultIfEmpty()
                                 //***************************************************************************************                             

                                 join J in dbContext.organization on A.v_EmpresaFacturacionId equals J.v_OrganizationId into J_join
                                 from J in J_join.DefaultIfEmpty()

                                 where A.v_ServiceId == pstrserviceId

                                 select new OftalmologiaList
                                 {
                                     v_PersonId = A.v_PersonId,

                                     v_FullPersonName = B.v_FirstLastName + " " + B.v_SecondLastName + " " + B.v_FirstName,

                                     d_BirthDate = B.d_Birthdate,
                                     d_ServiceDate = A.d_ServiceDate,

                                     v_DocNumber = B.v_DocNumber,
                                     i_SexTypeId = B.i_SexTypeId.Value,
                                     FirmaMedico = pme.b_SignatureImage,
                                     Puesto = B.v_CurrentOccupation,
                                     v_SexType = B.i_SexTypeId == (int)Gender.MASCULINO ? "M" : "F",
                                     EmpresaPropietaria = J.v_Name

                                 });


                // Obtener los Campos del User control de oftalmologia

                #region AGUDEZA VISUAL

                var OftalmoValores = ValoresComponenteOdontogramaValue1(pstrserviceId, Constants.VISION_DE_COLORES_ID);


                var agudezaVisual = ValoresComponentes(pstrserviceId, Constants.AGUDEZA_VISUAL);

                //var agudezaVisualLejos = ValoresPrefixComponentesUserControlByGroupParameterId(pstrserviceId, "OFT", (int)SystemParameterGroups.OftalmologiaMedidas);
                //var agudezaVisualCerca = ValoresPrefixComponentesUserControlByGroupParameterId(pstrserviceId, "OFT", (int)SystemParameterGroups.OftalmologiaMedidasCerca);

                var xAgudezaVisualLejos_SC_OD = string.Empty;
                var xAgudezaVisualLejos_SC_OI = string.Empty;
                var xAgudezaVisualLejos_CC_OD = string.Empty;
                var xAgudezaVisualLejos_CC_OI = string.Empty;
                var xAgudezaVisualLejos_AE_OD = string.Empty;
                var xAgudezaVisualLejos_AE_OI = string.Empty;

                var xAgudezaVisualCerca_SC_OD = string.Empty;
                var xAgudezaVisualCerca_SC_OI = string.Empty;
                var xAgudezaVisualCerca_CC_OD = string.Empty;
                var xAgudezaVisualCerca_CC_OI = string.Empty;

                var xCC2CercaOD = string.Empty;
                var xCC2CercaOI = string.Empty;
                var xAgudezaVisualFIGURAS = string.Empty;

                var xAgudezaVisualEstaEnProtolo = false;

                if (agudezaVisual.ToList().Count > 0)
                {

                    var AgudezaVisualLejos_SC_OD = OftalmoValores.Find(p => p.v_ComponentFieldId == Sigesoft.Common.Constants.TXT_OFT_SC_OD) == null ? "" : DEvolver237string(OftalmoValores.Find(p => p.v_ComponentFieldId == Sigesoft.Common.Constants.TXT_OFT_SC_OD).v_Value1);
                    var AgudezaVisualLejos_SC_OI = OftalmoValores.Find(p => p.v_ComponentFieldId == Sigesoft.Common.Constants.TXT_OFT_SC_OI) == null ? "" : DEvolver237string(OftalmoValores.Find(p => p.v_ComponentFieldId == Sigesoft.Common.Constants.TXT_OFT_SC_OI).v_Value1);
                    var AgudezaVisualLejos_CC_OD = OftalmoValores.Find(p => p.v_ComponentFieldId == Sigesoft.Common.Constants.TXT_OFT_CC_OD) == null ? "" : DEvolver237string(OftalmoValores.Find(p => p.v_ComponentFieldId == Sigesoft.Common.Constants.TXT_OFT_CC_OD).v_Value1);
                    var AgudezaVisualLejos_CC_OI = OftalmoValores.Find(p => p.v_ComponentFieldId == Sigesoft.Common.Constants.TXT_OFT_CC_OI) == null ? "" : DEvolver237string(OftalmoValores.Find(p => p.v_ComponentFieldId == Sigesoft.Common.Constants.TXT_OFT_CC_OI).v_Value1);
                    var AgudezaVisualLejos_AE_OD = OftalmoValores.Find(p => p.v_ComponentFieldId == Sigesoft.Common.Constants.TXT_OFT_AE_OD) == null ? "" : DEvolver237string(OftalmoValores.Find(p => p.v_ComponentFieldId == Sigesoft.Common.Constants.TXT_OFT_AE_OD).v_Value1);
                    var AgudezaVisualLejos_AE_OI = OftalmoValores.Find(p => p.v_ComponentFieldId == Sigesoft.Common.Constants.TXT_OFT_AE_OI) == null ? "" : DEvolver237string(OftalmoValores.Find(p => p.v_ComponentFieldId == Sigesoft.Common.Constants.TXT_OFT_AE_OI).v_Value1);

                    //var AgudezaVisualLejos_SC_OD = agudezaVisualLejos.Find(p => p.v_ComponentFieldId == Constants.TXT_OFT_SC_OD);
                    //var AgudezaVisualLejos_SC_OI = agudezaVisualLejos.Find(p => p.v_ComponentFieldId == Constants.TXT_OFT_SC_OI);
                    //var AgudezaVisualLejos_CC_OD = agudezaVisualLejos.Find(p => p.v_ComponentFieldId == Constants.TXT_OFT_CC_OD);
                    //var AgudezaVisualLejos_CC_OI = agudezaVisualLejos.Find(p => p.v_ComponentFieldId == Constants.TXT_OFT_CC_OI);
                    //var AgudezaVisualLejos_AE_OD = agudezaVisualLejos.Find(p => p.v_ComponentFieldId == Constants.TXT_OFT_AE_OD);
                    //var AgudezaVisualLejos_AE_OI = agudezaVisualLejos.Find(p => p.v_ComponentFieldId == Constants.TXT_OFT_AE_OI);

                    xAgudezaVisualEstaEnProtolo = true;

                    if (AgudezaVisualLejos_SC_OD != null)
                        xAgudezaVisualLejos_SC_OD = AgudezaVisualLejos_SC_OD;

                    if (AgudezaVisualLejos_SC_OI != null)
                        xAgudezaVisualLejos_SC_OI = AgudezaVisualLejos_SC_OI;

                    if (AgudezaVisualLejos_CC_OD != null)
                        xAgudezaVisualLejos_CC_OD = AgudezaVisualLejos_CC_OD;

                    if (AgudezaVisualLejos_CC_OI != null)
                        xAgudezaVisualLejos_CC_OI = AgudezaVisualLejos_CC_OI;

                    if (AgudezaVisualLejos_AE_OD != null)
                        xAgudezaVisualLejos_AE_OD = AgudezaVisualLejos_AE_OD;

                    if (AgudezaVisualLejos_AE_OI != null)
                        xAgudezaVisualLejos_AE_OI = AgudezaVisualLejos_AE_OI;
                }

                if (agudezaVisual.Count > 0)
                {
                    //var AgudezaVisualCerca_SC_OD = agudezaVisualCerca.Find(p => p.v_ComponentFieldId == Constants.TXT_OFT_SC_ODC);
                    //var AgudezaVisualCerca_SC_OI = agudezaVisualCerca.Find(p => p.v_ComponentFieldId == Constants.TXT_OFT_SC_OIC);
                    //var AgudezaVisualCerca_CC_OD = agudezaVisualCerca.Find(p => p.v_ComponentFieldId == Constants.TXT_OFT_CC_ODC);
                    //var AgudezaVisualCerca_CC_OI = agudezaVisualCerca.Find(p => p.v_ComponentFieldId == Constants.TXT_OFT_CC_OIC);

                    var AgudezaVisualCerca_SC_OD = OftalmoValores.Find(p => p.v_ComponentFieldId == Sigesoft.Common.Constants.TXT_OFT_SC_ODC) == null ? "" : DEvolver262string(OftalmoValores.Find(p => p.v_ComponentFieldId == Sigesoft.Common.Constants.TXT_OFT_SC_ODC).v_Value1);
                    var AgudezaVisualCerca_SC_OI = OftalmoValores.Find(p => p.v_ComponentFieldId == Sigesoft.Common.Constants.TXT_OFT_SC_OIC) == null ? "" : DEvolver262string(OftalmoValores.Find(p => p.v_ComponentFieldId == Sigesoft.Common.Constants.TXT_OFT_SC_OIC).v_Value1);
                    var AgudezaVisualCerca_CC_OD = OftalmoValores.Find(p => p.v_ComponentFieldId == Sigesoft.Common.Constants.TXT_OFT_CC_ODC) == null ? "" : DEvolver262string(OftalmoValores.Find(p => p.v_ComponentFieldId == Sigesoft.Common.Constants.TXT_OFT_CC_ODC).v_Value1);
                    var AgudezaVisualCerca_CC_OI = OftalmoValores.Find(p => p.v_ComponentFieldId == Sigesoft.Common.Constants.TXT_OFT_CC_OIC) == null ? "" : DEvolver262string(OftalmoValores.Find(p => p.v_ComponentFieldId == Sigesoft.Common.Constants.TXT_OFT_CC_OIC).v_Value1);


                    //David Agregar para el reporte
                    //var CC2CercaOD = agudezaVisualCerca.Find(p => p.v_ComponentFieldId == Constants.TXT_OFT_CC_ODC2);
                    //var CC2CercaOI = agudezaVisualCerca.Find(p => p.v_ComponentFieldId == Constants.TXT_OFT_CC_OIC2);
                    //var AgudezaVisualFIGURAS = agudezaVisualCerca.Find(p => p.v_ComponentFieldId == Constants.CHK_OFT_FIGURAS);
                    var AgudezaVisualFIGURAS = agudezaVisual.Find(p => p.v_ComponentFieldId == Constants.ANTECEDENTES_AGUDEZA_VISUAL);

                    xAgudezaVisualEstaEnProtolo = true;

                    if (AgudezaVisualCerca_SC_OD != null)
                        xAgudezaVisualCerca_SC_OD = AgudezaVisualCerca_SC_OD;

                    if (AgudezaVisualCerca_SC_OI != null)
                        xAgudezaVisualCerca_SC_OI = AgudezaVisualCerca_SC_OI;

                    if (AgudezaVisualCerca_CC_OD != null)
                        xAgudezaVisualCerca_CC_OD = AgudezaVisualCerca_CC_OD;

                    if (AgudezaVisualCerca_CC_OI != null)
                        xAgudezaVisualCerca_CC_OI = AgudezaVisualCerca_CC_OI;
                    //
                    //if (CC2CercaOD != null)
                    //    xCC2CercaOD = CC2CercaOD.v_Value1Name;

                    //if (CC2CercaOI != null)
                    //    xCC2CercaOI = CC2CercaOI.v_Value1Name;

                    if (AgudezaVisualFIGURAS != null)
                        xAgudezaVisualFIGURAS = AgudezaVisualFIGURAS.v_Value1Name;
                }

                #endregion

                ///////////////////

                #region EXPLORACION CLINICA

                var exploracionClinica = ValoresComponentes(pstrserviceId, Constants.EXPLORACIÓN_CLÍNICA_ID);

                var xExploracionClinicaCorrectoresOcularesVisionLejos = string.Empty;
                var xExploracionClinicaCorrectoresOcularesVisionCerca = string.Empty;
                var xExploracionClinicaMovimientosOculares_OD = string.Empty;
                var xExploracionClinicaMovimientosOculares_OI = string.Empty;
                var xExploracionClinicaHallazgosEstrabismo = string.Empty;
                var xExploracionClinicaHallazgosChalazion = string.Empty;
                var xExploracionClinicaHallazgosOrzuelo = string.Empty;
                var xExploracionClinicaHallazgosPinguecula = string.Empty;
                var xExploracionClinicaHallazgosPterigion = string.Empty;
                var xExploracionClinicaHallazgosSecuelaTrauma = string.Empty;
                var xExploracionClinicaHallazgosCatarata = string.Empty;
                var xExploracionClinicaHallazgosPseudofaquia = string.Empty;
                var xExploracionClinicaHallazgosOtros = string.Empty;
                var xExploracionClinicaDescripcionHallazgos = string.Empty;
                var xExploracionClinicaEstaEnProtolo = false;

                if (exploracionClinica.Count > 0)
                {
                    var ExploracionClinicaCorrectoresOcularesVisionLejos = exploracionClinica.Find(p => p.v_ComponentFieldId == Constants.EXPLORACIÓN_CLÍNICA_CORRECTORES_OCULARES_VISIÓN_DE_LEJOS);
                    var ExploracionClinicaCorrectoresOcularesVisionCerca = exploracionClinica.Find(p => p.v_ComponentFieldId == Constants.EXPLORACIÓN_CLÍNICA_CORRECTORES_OCULARES_VISIÓN_DE_CERCA);
                    var ExploracionClinicaMovimientosOculares_OD = exploracionClinica.Find(p => p.v_ComponentFieldId == Constants.EXPLORACIÓN_CLÍNICA_MOVIMIENTOS_OCULARES_OD);
                    var ExploracionClinicaMovimientosOculares_OI = exploracionClinica.Find(p => p.v_ComponentFieldId == Constants.EXPLORACIÓN_CLÍNICA_MOVIMIENTOS_OCULARES_OI);
                    var ExploracionClinicaHallazgosEstrabismo = exploracionClinica.Find(p => p.v_ComponentFieldId == Constants.EXPLORACIÓN_CLÍNICA_HALLAZGOS_ESTRABISMO);
                    var ExploracionClinicaHallazgosChalazion = exploracionClinica.Find(p => p.v_ComponentFieldId == Constants.EXPLORACIÓN_CLÍNICA_HALLAZGOS_CHALAZION);
                    var ExploracionClinicaHallazgosOrzuelo = exploracionClinica.Find(p => p.v_ComponentFieldId == Constants.EXPLORACIÓN_CLÍNICA_HALLAZGOS_ORZUELO);
                    var ExploracionClinicaHallazgosPinguecula = exploracionClinica.Find(p => p.v_ComponentFieldId == Constants.EXPLORACIÓN_CLÍNICA_HALLAZGOS_PINGUECULA);
                    var ExploracionClinicaHallazgosPterigion = exploracionClinica.Find(p => p.v_ComponentFieldId == Constants.EXPLORACIÓN_CLÍNICA_HALLAZGOS_PTERIGION);
                    var ExploracionClinicaHallazgosSecuelaTrauma = exploracionClinica.Find(p => p.v_ComponentFieldId == Constants.EXPLORACIÓN_CLÍNICA_HALLAZGOS_SECUELA_DE_TRAUMA);
                    var ExploracionClinicaHallazgosCatarata = exploracionClinica.Find(p => p.v_ComponentFieldId == Constants.EXPLORACIÓN_CLÍNICA_HALLAZGOS_CATARATA);
                    var ExploracionClinicaHallazgosPseudofaquia = exploracionClinica.Find(p => p.v_ComponentFieldId == Constants.EXPLORACIÓN_CLÍNICA_HALLAZGOS_PSEUDOFAQUIA);
                    var ExploracionClinicaHallazgosOtros = exploracionClinica.Find(p => p.v_ComponentFieldId == Constants.EXPLORACIÓN_CLÍNICA_HALLAZGOS_OTROS);
                    var ExploracionClinicaDescripcionHallazgos = exploracionClinica.Find(p => p.v_ComponentFieldId == Constants.EXPLORACIÓN_CLÍNICA_DESCRIPCION_DE_HALLAZGOS);

                    xExploracionClinicaEstaEnProtolo = true;

                    if (ExploracionClinicaCorrectoresOcularesVisionLejos != null)
                        xExploracionClinicaCorrectoresOcularesVisionLejos = ExploracionClinicaCorrectoresOcularesVisionLejos.v_Value1;

                    if (ExploracionClinicaCorrectoresOcularesVisionCerca != null)
                        xExploracionClinicaCorrectoresOcularesVisionCerca = ExploracionClinicaCorrectoresOcularesVisionCerca.v_Value1;

                    if (ExploracionClinicaMovimientosOculares_OD != null)
                        xExploracionClinicaMovimientosOculares_OD = ExploracionClinicaMovimientosOculares_OD.v_Value1Name;

                    if (ExploracionClinicaMovimientosOculares_OI != null)
                        xExploracionClinicaMovimientosOculares_OI = ExploracionClinicaMovimientosOculares_OI.v_Value1Name;

                    if (ExploracionClinicaHallazgosEstrabismo != null)
                        xExploracionClinicaHallazgosEstrabismo = ExploracionClinicaHallazgosEstrabismo.v_Value1Name;

                    if (ExploracionClinicaHallazgosChalazion != null)
                        xExploracionClinicaHallazgosChalazion = ExploracionClinicaHallazgosChalazion.v_Value1Name;

                    if (ExploracionClinicaHallazgosOrzuelo != null)
                        xExploracionClinicaHallazgosOrzuelo = ExploracionClinicaHallazgosOrzuelo.v_Value1Name;

                    if (ExploracionClinicaHallazgosPinguecula != null)
                        xExploracionClinicaHallazgosPinguecula = ExploracionClinicaHallazgosPinguecula.v_Value1Name;

                    if (ExploracionClinicaHallazgosPterigion != null)
                        xExploracionClinicaHallazgosPterigion = ExploracionClinicaHallazgosPterigion.v_Value1Name;

                    if (ExploracionClinicaHallazgosSecuelaTrauma != null)
                        xExploracionClinicaHallazgosSecuelaTrauma = ExploracionClinicaHallazgosSecuelaTrauma.v_Value1Name;

                    if (ExploracionClinicaHallazgosCatarata != null)
                        xExploracionClinicaHallazgosCatarata = ExploracionClinicaHallazgosCatarata.v_Value1Name;

                    if (ExploracionClinicaHallazgosPseudofaquia != null)
                        xExploracionClinicaHallazgosPseudofaquia = ExploracionClinicaHallazgosPseudofaquia.v_Value1Name;

                    if (ExploracionClinicaHallazgosOtros != null)
                        xExploracionClinicaHallazgosOtros = ExploracionClinicaHallazgosOtros.v_Value1Name;

                    if (ExploracionClinicaDescripcionHallazgos != null)
                        xExploracionClinicaDescripcionHallazgos = ExploracionClinicaDescripcionHallazgos.v_Value1;

                }

                #endregion

                #region VISION DE COLORES

                var visionColores = ValoresComponentes(pstrserviceId, Constants.VISION_DE_COLORES_ID);

                var xVisionColoresTestIshiharaSeleccionar = string.Empty;
                var xVisionColoresTestIshiharaDescripcion = string.Empty;
                var xVisionColoresPercepcionColoresBasicosRojo_OD = string.Empty;
                var xVisionColoresPercepcionColoresBasicosRojo_OI = string.Empty;
                var xVisionColoresPercepcionColoresBasicosVerde_OD = string.Empty;
                var xVisionColoresPercepcionColoresBasicosVerde_OI = string.Empty;
                var xVisionColoresPercepcionColoresBasicosAzul_OD = string.Empty;
                var xVisionColoresPercepcionColoresBasicosAzul_OI = string.Empty;
                var xVisionColoresPercepcionColoresBasicosAmarillo_OD = string.Empty;
                var xVisionColoresPercepcionColoresBasicosAmarillo_OI = string.Empty;
                var xVisionColoresPercepcionColoresBasicosBlanco_OD = string.Empty;
                var xVisionColoresPercepcionColoresBasicosBlanco_OI = string.Empty;
                var xVisionColoresPercepcionColoresBasicosNegro_OD = string.Empty;
                var xVisionColoresPercepcionColoresBasicosNegro_OI = string.Empty;
                var xVisionColoresEstaEnProtolo = false;

                if (visionColores.Count > 0)
                {
                    var VisionColoresTestIshiharaSeleccionar = visionColores.Find(p => p.v_ComponentFieldId == Constants.VISION_DE_COLORES_TEST_DE_ISHIHARA_SELECCIONAR);
                    var VisionColoresTestIshiharaDescripcion = visionColores.Find(p => p.v_ComponentFieldId == Constants.VISION_DE_COLORES_TEST_DE_ISHIHARA_DESCRIPCION);
                    var VisionColoresPercepcionColoresBasicosRojo_OD = visionColores.Find(p => p.v_ComponentFieldId == Constants.VISION_DE_COLORES_PERCEPCION_DE_COLORES_BASICOS_ROJO_OD);
                    var VisionColoresPercepcionColoresBasicosRojo_OI = visionColores.Find(p => p.v_ComponentFieldId == Constants.VISION_DE_COLORES_PERCEPCION_DE_COLORES_BASICOS_ROJO_OI);
                    var VisionColoresPercepcionColoresBasicosVerde_OD = visionColores.Find(p => p.v_ComponentFieldId == Constants.VISION_DE_COLORES_PERCEPCION_DE_COLORES_BASICOS_VERDE_OD);
                    var VisionColoresPercepcionColoresBasicosVerde_OI = visionColores.Find(p => p.v_ComponentFieldId == Constants.VISION_DE_COLORES_PERCEPCION_DE_COLORES_BASICOS_VERDE_OI);
                    var VisionColoresPercepcionColoresBasicosAzul_OD = visionColores.Find(p => p.v_ComponentFieldId == Constants.VISION_DE_COLORES_PERCEPCION_DE_COLORES_BASICOS_AZUL_OD);
                    var VisionColoresPercepcionColoresBasicosAzul_OI = visionColores.Find(p => p.v_ComponentFieldId == Constants.VISION_DE_COLORES_PERCEPCION_DE_COLORES_BASICOS_AZUL_OI);
                    var VisionColoresPercepcionColoresBasicosAmarillo_OD = visionColores.Find(p => p.v_ComponentFieldId == Constants.VISION_DE_COLORES_PERCEPCION_DE_COLORES_BASICOS_AMARILLO_OD);
                    var VisionColoresPercepcionColoresBasicosAmarillo_OI = visionColores.Find(p => p.v_ComponentFieldId == Constants.VISION_DE_COLORES_PERCEPCION_DE_COLORES_BASICOS_AMARILLO_OI);
                    var VisionColoresPercepcionColoresBasicosBlanco_OD = visionColores.Find(p => p.v_ComponentFieldId == Constants.VISION_DE_COLORES_PERCEPCION_DE_COLORES_BASICOS_BLANCO_OD);
                    var VisionColoresPercepcionColoresBasicosBlanco_OI = visionColores.Find(p => p.v_ComponentFieldId == Constants.VISION_DE_COLORES_PERCEPCION_DE_COLORES_BASICOS_BLANCO_OI);
                    var VisionColoresPercepcionColoresBasicosNegro_OD = visionColores.Find(p => p.v_ComponentFieldId == Constants.VISION_DE_COLORES_PERCEPCION_DE_COLORES_BASICOS_NEGRO_OD);
                    var VisionColoresPercepcionColoresBasicosNegro_OI = visionColores.Find(p => p.v_ComponentFieldId == Constants.VISION_DE_COLORES_PERCEPCION_DE_COLORES_BASICOS_NEGRO_OI);

                    xVisionColoresEstaEnProtolo = true;

                    if (VisionColoresTestIshiharaSeleccionar != null)
                        xVisionColoresTestIshiharaSeleccionar = VisionColoresTestIshiharaSeleccionar.v_Value1;

                    if (VisionColoresTestIshiharaDescripcion != null)
                        xVisionColoresTestIshiharaDescripcion = VisionColoresTestIshiharaDescripcion.v_Value1;

                    if (VisionColoresPercepcionColoresBasicosRojo_OD != null)
                        xVisionColoresPercepcionColoresBasicosRojo_OD = VisionColoresPercepcionColoresBasicosRojo_OD.v_Value1Name;

                    if (VisionColoresPercepcionColoresBasicosRojo_OI != null)
                        xVisionColoresPercepcionColoresBasicosRojo_OI = VisionColoresPercepcionColoresBasicosRojo_OI.v_Value1Name;

                    if (VisionColoresPercepcionColoresBasicosVerde_OD != null)
                        xVisionColoresPercepcionColoresBasicosVerde_OD = VisionColoresPercepcionColoresBasicosVerde_OD.v_Value1Name;

                    if (VisionColoresPercepcionColoresBasicosVerde_OI != null)
                        xVisionColoresPercepcionColoresBasicosVerde_OI = VisionColoresPercepcionColoresBasicosVerde_OI.v_Value1Name;

                    if (VisionColoresPercepcionColoresBasicosAzul_OD != null)
                        xVisionColoresPercepcionColoresBasicosAzul_OD = VisionColoresPercepcionColoresBasicosAzul_OD.v_Value1Name;

                    if (VisionColoresPercepcionColoresBasicosAzul_OI != null)
                        xVisionColoresPercepcionColoresBasicosAzul_OI = VisionColoresPercepcionColoresBasicosAzul_OI.v_Value1Name;

                    if (VisionColoresPercepcionColoresBasicosAmarillo_OD != null)
                        xVisionColoresPercepcionColoresBasicosAmarillo_OD = VisionColoresPercepcionColoresBasicosAmarillo_OD.v_Value1Name;

                    if (VisionColoresPercepcionColoresBasicosAmarillo_OI != null)
                        xVisionColoresPercepcionColoresBasicosAmarillo_OI = VisionColoresPercepcionColoresBasicosAmarillo_OI.v_Value1Name;

                    if (VisionColoresPercepcionColoresBasicosBlanco_OD != null)
                        xVisionColoresPercepcionColoresBasicosBlanco_OD = VisionColoresPercepcionColoresBasicosBlanco_OD.v_Value1Name;

                    if (VisionColoresPercepcionColoresBasicosBlanco_OI != null)
                        xVisionColoresPercepcionColoresBasicosBlanco_OI = VisionColoresPercepcionColoresBasicosBlanco_OI.v_Value1Name;

                    if (VisionColoresPercepcionColoresBasicosNegro_OD != null)
                        xVisionColoresPercepcionColoresBasicosNegro_OD = VisionColoresPercepcionColoresBasicosNegro_OD.v_Value1Name;

                    if (VisionColoresPercepcionColoresBasicosNegro_OI != null)
                        xVisionColoresPercepcionColoresBasicosNegro_OI = VisionColoresPercepcionColoresBasicosNegro_OI.v_Value1Name;

                }

                #endregion

                #region VISION ESTEREOSCOPICA

                var visionEstereoscopica = ValoresComponentes(pstrserviceId, Constants.VISION_ESTEREOSCOPICA_ID);

                var xVisionEstereoscopicaTestAnillosSeleccionar = string.Empty;
                var xVisionEstereoscopicaTestAnillosDescripcion = string.Empty;
                var xVisionEstereoscopicaEstaEnProtolo = false;

                if (visionEstereoscopica.Count > 0)
                {
                    var VisionEstereoscopicaTestAnillosSeleccionar = visionEstereoscopica.Find(p => p.v_ComponentFieldId == Constants.VISION_ESTEREOSCOPICA_TEST_DE_LOS_ANILLOS_SELECCIONAR);
                    var VisionEstereoscopicaTestAnillosDescripcion = visionEstereoscopica.Find(p => p.v_ComponentFieldId == Constants.VISION_ESTEREOSCOPICA_TEST_DE_LOS_ANILLOS_DESCRIPCION);

                    xVisionEstereoscopicaEstaEnProtolo = true;

                    if (VisionEstereoscopicaTestAnillosSeleccionar != null)
                        xVisionEstereoscopicaTestAnillosSeleccionar = VisionEstereoscopicaTestAnillosSeleccionar.v_Value1;

                    if (VisionEstereoscopicaTestAnillosDescripcion != null)
                        xVisionEstereoscopicaTestAnillosDescripcion = VisionEstereoscopicaTestAnillosDescripcion.v_Value1;

                }

                #endregion

                #region CAMPO VISUAL

                var campoVisual = ValoresComponentes(pstrserviceId, Constants.CAMPO_VISUAL_ID);

                var xCampoVisualCampimetriaSeleccionar_OD = string.Empty;
                var xCampoVisualCampimetriaSeleccionar_OI = string.Empty;
                var xCampoVisualCampimetriaDescripcion_OD = string.Empty;
                var xCampoVisualCampimetriaDescripcion_OI = string.Empty;
                var xCampoVisualEstaEnProtolo = false;


                if (campoVisual.Count > 0)
                {
                    var CampoVisualCampimetriaSeleccionar_OD = campoVisual.Find(p => p.v_ComponentFieldId == Constants.CAMPO_VISUAL_CAMPIMETRIA_SELECCIONAR_OD);
                    var CampoVisualCampimetriaSeleccionar_OI = campoVisual.Find(p => p.v_ComponentFieldId == Constants.CAMPO_VISUAL_CAMPIMETRIA_SELECCIONAR_OI);
                    var CampoVisualCampimetriaDescripcion_OD = campoVisual.Find(p => p.v_ComponentFieldId == Constants.CAMPO_VISUAL_CAMPIMETRIA_DESCRIPCION_OD);
                    var CampoVisualCampimetriaDescripcion_OI = campoVisual.Find(p => p.v_ComponentFieldId == Constants.CAMPO_VISUAL_CAMPIMETRIA_DESCRIPCION_OI);

                    xCampoVisualEstaEnProtolo = true;

                    if (CampoVisualCampimetriaSeleccionar_OD != null)
                        xCampoVisualCampimetriaSeleccionar_OD = CampoVisualCampimetriaSeleccionar_OD.v_Value1;

                    if (CampoVisualCampimetriaSeleccionar_OI != null)
                        xCampoVisualCampimetriaSeleccionar_OI = CampoVisualCampimetriaSeleccionar_OI.v_Value1;

                    if (CampoVisualCampimetriaDescripcion_OD != null)
                        xCampoVisualCampimetriaDescripcion_OD = CampoVisualCampimetriaDescripcion_OD.v_Value1;

                    if (CampoVisualCampimetriaDescripcion_OI != null)
                        xCampoVisualCampimetriaDescripcion_OI = CampoVisualCampimetriaDescripcion_OI.v_Value1;


                }

                #endregion

                #region PRESION INTRAOCULAR

                var presionIntraocular = ValoresComponentes(pstrserviceId, Constants.PRESION_INTRAOCULAR_ID);

                var xPresionIntraocularTonometria_OD = string.Empty;
                var xPresionIntraocularTonometria_OI = string.Empty;
                var xPresionIntraocularEstaEnProtolo = false;

                if (presionIntraocular.Count > 0)
                {
                    var PresionIntraocularTonometria_OD = presionIntraocular.Find(p => p.v_ComponentFieldId == Constants.PRESION_INTRAOCULAR_TONOMETRIA_OD);
                    var PresionIntraocularTonometria_OI = presionIntraocular.Find(p => p.v_ComponentFieldId == Constants.PRESION_INTRAOCULAR_TONOMETRIA_OI);

                    xPresionIntraocularEstaEnProtolo = true;

                    if (PresionIntraocularTonometria_OD != null)
                        xPresionIntraocularTonometria_OD = PresionIntraocularTonometria_OD.v_Value1;

                    if (PresionIntraocularTonometria_OI != null)
                        xPresionIntraocularTonometria_OI = PresionIntraocularTonometria_OI.v_Value1;

                }

                #endregion

                #region FONDO DE OJO

                var fondoOjo = ValoresComponentes(pstrserviceId, Constants.FONDO_DE_OJO_ID);

                var xFondoOjoOftalmoscopiaVitreo_OD = string.Empty;
                var xFondoOjoOftalmoscopiaVitreo_OI = string.Empty;
                var xFondoOjoOftalmoscopiaMacula_OD = string.Empty;
                var xFondoOjoOftalmoscopiaMacula_OI = string.Empty;
                var xFondoOjoOftalmoscopiaRetina_OD = string.Empty;
                var xFondoOjoOftalmoscopiaRetina_OI = string.Empty;
                var xFondoOjoOftalmoscopiaNervioOptico_OD = string.Empty;
                var xFondoOjoOftalmoscopiaNervioOptico_OI = string.Empty;
                var xFondoOjoDescripcion = string.Empty;
                var xFondoOjoEstaEnProtolo = false;

                if (fondoOjo.Count > 0)
                {
                    var FondoOjoOftalmoscopiaVitreo_OD = fondoOjo.Find(p => p.v_ComponentFieldId == Constants.FONDO_DE_OJO_OFTALMOSCOPIA_VITREO_OD);
                    var FondoOjoOftalmoscopiaVitreo_OI = fondoOjo.Find(p => p.v_ComponentFieldId == Constants.FONDO_DE_OJO_OFTALMOSCOPIA_VITREO_OI);
                    var FondoOjoOftalmoscopiaMacula_OD = fondoOjo.Find(p => p.v_ComponentFieldId == Constants.FONDO_DE_OJO_OFTALMOSCOPIA_MACULA_OD);
                    var FondoOjoOftalmoscopiaMacula_OI = fondoOjo.Find(p => p.v_ComponentFieldId == Constants.FONDO_DE_OJO_OFTALMOSCOPIA_MACULA_OI);
                    var FondoOjoOftalmoscopiaRetina_OD = fondoOjo.Find(p => p.v_ComponentFieldId == Constants.FONDO_DE_OJO_OFTALMOSCOPIA_RETINA_OD);
                    var FondoOjoOftalmoscopiaRetina_OI = fondoOjo.Find(p => p.v_ComponentFieldId == Constants.FONDO_DE_OJO_OFTALMOSCOPIA_RETINA_OI);
                    var FondoOjoOftalmoscopiaNervioOptico_OD = fondoOjo.Find(p => p.v_ComponentFieldId == Constants.FONDO_DE_OJO_OFTALMOSCOPIA_NERVIO_OPTICO_OD);
                    var FondoOjoOftalmoscopiaNervioOptico_OI = fondoOjo.Find(p => p.v_ComponentFieldId == Constants.FONDO_DE_OJO_OFTALMOSCOPIA_NERVIO_OPTICO_OI);
                    var FondoOjoDescripcion = fondoOjo.Find(p => p.v_ComponentFieldId == Constants.FONDO_DE_OJO_DESCRIPCION);

                    xFondoOjoEstaEnProtolo = true;

                    if (FondoOjoOftalmoscopiaVitreo_OD != null)
                        xFondoOjoOftalmoscopiaVitreo_OD = FondoOjoOftalmoscopiaVitreo_OD.v_Value1Name;

                    if (FondoOjoOftalmoscopiaVitreo_OI != null)
                        xFondoOjoOftalmoscopiaVitreo_OI = FondoOjoOftalmoscopiaVitreo_OI.v_Value1Name;

                    if (FondoOjoOftalmoscopiaMacula_OD != null)
                        xFondoOjoOftalmoscopiaMacula_OD = FondoOjoOftalmoscopiaMacula_OD.v_Value1Name;

                    if (FondoOjoOftalmoscopiaMacula_OI != null)
                        xFondoOjoOftalmoscopiaMacula_OI = FondoOjoOftalmoscopiaMacula_OI.v_Value1Name;

                    if (FondoOjoOftalmoscopiaRetina_OD != null)
                        xFondoOjoOftalmoscopiaRetina_OD = FondoOjoOftalmoscopiaRetina_OD.v_Value1Name;

                    if (FondoOjoOftalmoscopiaRetina_OI != null)
                        xFondoOjoOftalmoscopiaRetina_OI = FondoOjoOftalmoscopiaRetina_OI.v_Value1Name;

                    if (FondoOjoOftalmoscopiaNervioOptico_OD != null)
                        xFondoOjoOftalmoscopiaNervioOptico_OD = FondoOjoOftalmoscopiaNervioOptico_OD.v_Value1Name;

                    if (FondoOjoOftalmoscopiaNervioOptico_OI != null)
                        xFondoOjoOftalmoscopiaNervioOptico_OI = FondoOjoOftalmoscopiaNervioOptico_OI.v_Value1Name;

                    if (FondoOjoDescripcion != null)
                        xFondoOjoDescripcion = FondoOjoDescripcion.v_Value1;



                }


                #endregion

                #region REFRACCION

                var refraccion = ValoresComponentes(pstrserviceId, Constants.REFRACCION_ID);

                var xRefraccionLejosEsfera_OD = string.Empty;
                var xRefraccionLejosEsfera_OI = string.Empty;
                var xRefraccionLejosCilindro_OD = string.Empty;
                var xRefraccionLejosCilindro_OI = string.Empty;
                var xRefraccionLejosEje_OD = string.Empty;
                var xRefraccionLejosEje_OI = string.Empty;
                var xRefraccionCercaAddMas = string.Empty;
                var xRefraccionEstaEnProtolo = false;

                if (presionIntraocular.Count > 0)
                {
                    var RefraccionLejosEsfera_OD = refraccion.Find(p => p.v_ComponentFieldId == Constants.REFRACCION_LEJOS_ESFERA_OD);
                    var RefraccionLejosEsfera_OI = refraccion.Find(p => p.v_ComponentFieldId == Constants.REFRACCION_LEJOS_ESFERA_OI);
                    var RefraccionLejosCilindro_OD = refraccion.Find(p => p.v_ComponentFieldId == Constants.REFRACCION_LEJOS_CILINDRO_OD);
                    var RefraccionLejosCilindro_OI = refraccion.Find(p => p.v_ComponentFieldId == Constants.REFRACCION_LEJOS_CILINDRO_OI);
                    var RefraccionLejosEje_OD = refraccion.Find(p => p.v_ComponentFieldId == Constants.REFRACCION_LEJOS_EJE_OD);
                    var RefraccionLejosEje_OI = refraccion.Find(p => p.v_ComponentFieldId == Constants.REFRACCION_LEJOS_EJE_OI);
                    var RefraccionCercaAddMas = refraccion.Find(p => p.v_ComponentFieldId == Constants.REFRACCION_CERCA_ADD_MAS);

                    xRefraccionEstaEnProtolo = true;

                    if (RefraccionLejosEsfera_OD != null)
                        xRefraccionLejosEsfera_OD = RefraccionLejosEsfera_OD.v_Value1;

                    if (RefraccionLejosEsfera_OI != null)
                        xRefraccionLejosEsfera_OI = RefraccionLejosEsfera_OI.v_Value1;

                    if (RefraccionLejosCilindro_OD != null)
                        xRefraccionLejosCilindro_OD = RefraccionLejosCilindro_OD.v_Value1;

                    if (RefraccionLejosCilindro_OI != null)
                        xRefraccionLejosCilindro_OI = RefraccionLejosCilindro_OI.v_Value1;

                    if (RefraccionLejosEje_OD != null)
                        xRefraccionLejosEje_OD = RefraccionLejosEje_OD.v_Value1;

                    if (RefraccionLejosEje_OI != null)
                        xRefraccionLejosEje_OI = RefraccionLejosEje_OI.v_Value1;

                    if (RefraccionCercaAddMas != null)
                        xRefraccionCercaAddMas = RefraccionCercaAddMas.v_Value1;

                }

                #endregion

                #region DX,RECO OFTLMOLOGIA

                string[] compOftalmo = new string[]
                {    
                    Constants.AGUDEZA_VISUAL,
                    Constants.EXPLORACIÓN_CLÍNICA_ID,
                    Constants.VISION_DE_COLORES_ID,
                    Constants.VISION_ESTEREOSCOPICA_ID,
                    Constants.CAMPO_VISUAL_ID, 
                    Constants.PRESION_INTRAOCULAR_ID,
                    Constants.FONDO_DE_OJO_ID,
                    Constants.REFRACCION_ID,
                };

                var concatCompoOftalmo = string.Join("|", compOftalmo.Select(p => p));

                var dxConcat = GetDiagnosticByServiceIdAndComponentContains(pstrserviceId, concatCompoOftalmo);
                var recoConcat = GetRecommendationByServiceIdAndComponentContains(pstrserviceId, concatCompoOftalmo);

                #endregion

                var MedicalCenter = GetInfoMedicalCenter();

                var sql = (from a in objEntity.ToList()

                           select new OftalmologiaList
                           {
                               v_PersonId = a.v_PersonId,
                               v_FullPersonName = a.v_FullPersonName,

                               d_BirthDate = a.d_BirthDate,
                               i_AgePacient = GetAge(a.d_BirthDate.Value),
                               d_ServiceDate = a.d_ServiceDate,
                               v_DocNumber = a.v_DocNumber,
                               i_SexTypeId = a.i_SexTypeId,
                               FirmaMedico = a.FirmaMedico,
                               FirmaTecnologo = a.FirmaTecnologo,
                               Puesto = a.Puesto,
                               v_SexType = a.v_SexType,

                               ExploracionClinicaEstaEnProtolo = xExploracionClinicaEstaEnProtolo,
                               ExploracionClinicaCorrectoresOcularesVisionLejos = xExploracionClinicaCorrectoresOcularesVisionLejos,
                               ExploracionClinicaCorrectoresOcularesVisionCerca = xExploracionClinicaCorrectoresOcularesVisionCerca,
                               ExploracionClinicaMovimientosOculares_OD = xExploracionClinicaMovimientosOculares_OD,
                               ExploracionClinicaMovimientosOculares_OI = xExploracionClinicaMovimientosOculares_OI,
                               ExploracionClinicaHallazgosEstrabismo = xExploracionClinicaHallazgosEstrabismo,
                               ExploracionClinicaHallazgosChalazion = xExploracionClinicaHallazgosChalazion,
                               ExploracionClinicaHallazgosOrzuelo = xExploracionClinicaHallazgosOrzuelo,
                               ExploracionClinicaHallazgosPinguecula = xExploracionClinicaHallazgosPinguecula,
                               ExploracionClinicaHallazgosPterigion = xExploracionClinicaHallazgosPterigion,
                               ExploracionClinicaHallazgosSecuelaTrauma = xExploracionClinicaHallazgosSecuelaTrauma,
                               ExploracionClinicaHallazgosCatarata = xExploracionClinicaHallazgosCatarata,
                               ExploracionClinicaHallazgosPseudofaquia = xExploracionClinicaHallazgosPseudofaquia,
                               ExploracionClinicaHallazgosOtros = xExploracionClinicaHallazgosOtros,
                               ExploracionClinicaDescripcionHallazgos = xExploracionClinicaDescripcionHallazgos,

                               VisionColoresEstaEnProtolo = xVisionColoresEstaEnProtolo,
                               VisionColoresTestIshiharaSeleccionar = xVisionColoresTestIshiharaSeleccionar,
                               VisionColoresTestIshiharaDescripcion = xVisionColoresTestIshiharaDescripcion,
                               VisionColoresPercepcionColoresBasicosRojo_OD = xVisionColoresPercepcionColoresBasicosRojo_OD,
                               VisionColoresPercepcionColoresBasicosRojo_OI = xVisionColoresPercepcionColoresBasicosRojo_OI,
                               VisionColoresPercepcionColoresBasicosVerde_OD = xVisionColoresPercepcionColoresBasicosVerde_OD,
                               VisionColoresPercepcionColoresBasicosVerde_OI = xVisionColoresPercepcionColoresBasicosVerde_OI,
                               VisionColoresPercepcionColoresBasicosAzul_OD = xVisionColoresPercepcionColoresBasicosAzul_OD,
                               VisionColoresPercepcionColoresBasicosAzul_OI = xVisionColoresPercepcionColoresBasicosAzul_OI,
                               VisionColoresPercepcionColoresBasicosAmarillo_OD = xVisionColoresPercepcionColoresBasicosAmarillo_OD,
                               VisionColoresPercepcionColoresBasicosAmarillo_OI = xVisionColoresPercepcionColoresBasicosAmarillo_OI,
                               VisionColoresPercepcionColoresBasicosBlanco_OD = xVisionColoresPercepcionColoresBasicosBlanco_OD,
                               VisionColoresPercepcionColoresBasicosBlanco_OI = xVisionColoresPercepcionColoresBasicosBlanco_OI,
                               VisionColoresPercepcionColoresBasicosNegro_OD = xVisionColoresPercepcionColoresBasicosNegro_OD,
                               VisionColoresPercepcionColoresBasicosNegro_OI = xVisionColoresPercepcionColoresBasicosNegro_OI,

                               VisionEstereoscopicaEstaEnProtolo = xVisionEstereoscopicaEstaEnProtolo,
                               VisionEstereoscopicaTestAnillosSeleccionar = xVisionEstereoscopicaTestAnillosSeleccionar,
                               VisionEstereoscopicaTestAnillosDescripcion = xVisionEstereoscopicaTestAnillosDescripcion,

                               CampoVisualCampimetriaSeleccionar_OD = xCampoVisualCampimetriaSeleccionar_OD,
                               CampoVisualCampimetriaSeleccionar_OI = xCampoVisualCampimetriaSeleccionar_OI,
                               CampoVisualEstaEnProtolo = xCampoVisualEstaEnProtolo,
                               CampoVisualCampimetriaDescripcion_OD = xCampoVisualCampimetriaDescripcion_OD,
                               CampoVisualCampimetriaDescripcion_OI = xCampoVisualCampimetriaDescripcion_OI,

                               FondoOjoEstaEnProtolo = xFondoOjoEstaEnProtolo,
                               FondoOjoOftalmoscopiaVitreo_OD = xFondoOjoOftalmoscopiaVitreo_OD,
                               FondoOjoOftalmoscopiaVitreo_OI = xFondoOjoOftalmoscopiaVitreo_OI,
                               FondoOjoOftalmoscopiaMacula_OD = xFondoOjoOftalmoscopiaMacula_OD,
                               FondoOjoOftalmoscopiaMacula_OI = xFondoOjoOftalmoscopiaMacula_OI,
                               FondoOjoOftalmoscopiaRetina_OD = xFondoOjoOftalmoscopiaRetina_OD,
                               FondoOjoOftalmoscopiaRetina_OI = xFondoOjoOftalmoscopiaRetina_OI,
                               FondoOjoOftalmoscopiaNervioOptico_OD = xFondoOjoOftalmoscopiaNervioOptico_OD,
                               FondoOjoOftalmoscopiaNervioOptico_OI = xFondoOjoOftalmoscopiaNervioOptico_OI,
                               FondoOjoDescripcion = xFondoOjoDescripcion,

                               RefraccionEstaEnProtolo = xRefraccionEstaEnProtolo,
                               RefraccionLejosEsfera_OD = xRefraccionLejosEsfera_OD,
                               RefraccionLejosEsfera_OI = xRefraccionLejosEsfera_OI,
                               RefraccionLejosCilindro_OD = xRefraccionLejosCilindro_OD,
                               RefraccionLejosCilindro_OI = xRefraccionLejosCilindro_OI,
                               RefraccionLejosEje_OD = xRefraccionLejosEje_OD,
                               RefraccionLejosEje_OI = xRefraccionLejosEje_OI,
                               RefraccionCercaAddMas = xRefraccionCercaAddMas,
                               //David Agregar campos para el Dataset
                               AgudezaVisualEstaEnProtolo = xAgudezaVisualEstaEnProtolo,
                               AgudezaVisualLejos_SC_OD = xAgudezaVisualLejos_SC_OD,
                               AgudezaVisualLejos_SC_OI = xAgudezaVisualLejos_SC_OI,
                               AgudezaVisualLejos_CC_OD = xAgudezaVisualLejos_CC_OD,
                               AgudezaVisualLejos_CC_OI = xAgudezaVisualLejos_CC_OI,

                               AgudezaVisualLejos_AE_OD = xAgudezaVisualLejos_AE_OD,
                               AgudezaVisualLejos_AE_OI = xAgudezaVisualLejos_AE_OI,

                               AgudezaVisualCerca_SC_OD = xAgudezaVisualCerca_SC_OD,
                               AgudezaVisualCerca_SC_OI = xAgudezaVisualCerca_SC_OI,
                               AgudezaVisualCerca_CC_OD = xAgudezaVisualCerca_CC_OD,
                               AgudezaVisualCerca_CC_OI = xAgudezaVisualCerca_CC_OI,
                               CC2CercaOD = xCC2CercaOD,
                               CC2CercaOI = xCC2CercaOI,
                               AgudezaVisualFIGURAS = xAgudezaVisualFIGURAS,

                               b_Logo = MedicalCenter.b_Image,
                               //EmpresaPropietaria = MedicalCenter.v_Name,
                               EmpresaPropietariaDireccion = MedicalCenter.v_Address,
                               EmpresaPropietariaTelefono = MedicalCenter.v_PhoneNumber,
                               EmpresaPropietariaEmail = MedicalCenter.v_Mail,

                               Diagnosticos = dxConcat,
                               Recomendaciones = recoConcat,

                           }).ToList();

                return sql;
            }
            catch (Exception)
            {

                throw;
            }
        }

        private static string DEvolver237string(string pstrIdParameter)
        {
            if (pstrIdParameter == "1")
            {
                return "20/20";

            }
            else if (pstrIdParameter == "2")
            {
                return "20/25";

            }
            else if (pstrIdParameter == "3")
            {
                return "20/30";

            }
            else if (pstrIdParameter == "4")
            {
                return "20/40";

            }
            else if (pstrIdParameter == "5")
            {
                return "20/50";

            }
            else if (pstrIdParameter == "6")
            {
                return "20/60";

            }
            else if (pstrIdParameter == "7")
            {
                return "20/80";

            }
            else if (pstrIdParameter == "8")
            {
                return "20/100";

            }
            else if (pstrIdParameter == "9")
            {
                return "20/140";

            }
            else if (pstrIdParameter == "10")
            {
                return "20/200";

            }
            else if (pstrIdParameter == "11")
            {
                return "20/400";

            }
            else if (pstrIdParameter == "12")
            {
                return "CD 3M";

            }
            else if (pstrIdParameter == "13")
            {
                return "CD 1M";

            }
            else if (pstrIdParameter == "14")
            {
                return "CD 0.3M";

            }
            else if (pstrIdParameter == "15")
            {
                return "MM";

            }
            else if (pstrIdParameter == "16")
            {
                return "PL";

            }
            else if (pstrIdParameter == "17")
            {
                return "NPL";

            }
            else if (pstrIdParameter == "18")
            {
                return "---";
            }
            else
            { return ""; }
        }
        private static string DEvolver262string(string pstrIdParameter)
        {
            if (pstrIdParameter == "1")
            {
                return "20/20";
            }
            else if (pstrIdParameter == "2")
            {
                return "20/30";

            }
            else if (pstrIdParameter == "3")
            {
                return "20/40";

            }
            else if (pstrIdParameter == "4")
            {
                return "20/50";

            }
            else if (pstrIdParameter == "5")
            {
                return "20/60";

            }
            else if (pstrIdParameter == "6")
            {
                return "20/70";

            }
            else if (pstrIdParameter == "7")
            {
                return "20/80";

            }
            else if (pstrIdParameter == "8")
            {
                return "20/100";

            }
            else if (pstrIdParameter == "9")
            {
                return "20/160";

            }
            else if (pstrIdParameter == "10")
            {
                return "20/200";

            }
            else if (pstrIdParameter == "11")
            {
                return "> 20/200";

            }
            else
            { return ""; }
        }


        // Alejandro
        public List<ServiceComponentFieldValuesList> ValoresPrefixComponentesUserControlByGroupParameterId(string pstrServiceId, string pstrPrefixComponentId, int groupId)
        {
            //mon.IsActive = true;

            SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
            int rpta = 0;

            try
            {
                var serviceComponents = (from A in dbContext.service
                                         join B in dbContext.servicecomponent on A.v_ServiceId equals B.v_ServiceId
                                         join C in dbContext.servicecomponentfields on B.v_ServiceComponentId equals C.v_ServiceComponentId
                                         join D in dbContext.servicecomponentfieldvalues on C.v_ServiceComponentFieldsId equals D.v_ServiceComponentFieldsId

                                         join E in dbContext.component on B.v_ComponentId equals E.v_ComponentId

                                         where A.v_ServiceId == pstrServiceId
                                             //&& B.v_ComponentId == pstrComponentId
                                                 && B.i_IsDeleted == 0
                                         //&& C.i_IsDeleted == 0

                                         select new ServiceComponentFieldValuesList
                                         {
                                             v_ServiceComponentId = B.v_ServiceComponentId,
                                             v_ComponentId = B.v_ComponentId,
                                             v_ComponentFieldId = C.v_ComponentFieldId,
                                             v_ServiceComponentFieldsId = C.v_ServiceComponentFieldsId,
                                             v_Value1 = D.v_Value1,
                                             v_ComponentName = E.v_Name
                                         }).ToList();

                var finalQuery = (from a in serviceComponents
                                  let value1 = int.TryParse(a.v_Value1, out rpta)
                                  join sp in dbContext.systemparameter on new { a = groupId, b = rpta }
                                                                 equals new { a = sp.i_GroupId, b = sp.i_ParameterId } into sp_join
                                  from sp in sp_join.DefaultIfEmpty()

                                  where a.v_ComponentFieldId.Contains(pstrPrefixComponentId)

                                  select new ServiceComponentFieldValuesList
                                  {
                                      v_ComponentFieldId = a.v_ComponentFieldId,
                                      //v_ComponentFielName = G.v_TextLabel,
                                      v_ServiceComponentFieldsId = a.v_ServiceComponentFieldsId,
                                      v_Value1 = a.v_Value1,
                                      v_Value1Name = sp == null ? "" : sp.v_Value1,
                                      //v_ComponentId = H.v_ComponentId,
                                      v_ServiceComponentId = a.v_ServiceComponentId,
                                      //v_ComponentName = H.v_Name

                                  }).ToList();

                return finalQuery;

            }
            catch (Exception)
            {

                throw;
            }

        }

        public List<ServiceComponentFieldValuesList> ValoresPrefixComponentesUserControl(string pstrServiceId, string pstrPrefixComponentId)
        {
            //mon.IsActive = true;

            SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
            int rpta = 0;

            try
            {
                var serviceComponents = (from A in dbContext.service
                                         join B in dbContext.servicecomponent on A.v_ServiceId equals B.v_ServiceId
                                         join C in dbContext.servicecomponentfields on B.v_ServiceComponentId equals C.v_ServiceComponentId
                                         join D in dbContext.servicecomponentfieldvalues on C.v_ServiceComponentFieldsId equals D.v_ServiceComponentFieldsId

                                         join E in dbContext.component on B.v_ComponentId equals E.v_ComponentId

                                         where A.v_ServiceId == pstrServiceId
                                             //&& B.v_ComponentId == pstrComponentId
                                                 && B.i_IsDeleted == 0
                                             //&& C.i_IsDeleted == 0
                                         && C.v_ComponentFieldId.Contains(pstrPrefixComponentId)

                                         select new ServiceComponentFieldValuesList
                                         {
                                             v_ServiceComponentId = B.v_ServiceComponentId,
                                             v_ComponentId = B.v_ComponentId,
                                             v_ComponentFieldId = C.v_ComponentFieldId,
                                             v_ServiceComponentFieldsId = C.v_ServiceComponentFieldsId,
                                             v_Value1 = D.v_Value1,
                                             v_ComponentName = E.v_Name
                                         }).ToList();


                return serviceComponents;

            }
            catch (Exception)
            {

                throw;
            }

        }

        // AlejandroReportOdontograma
        public List<ServiceComponentFieldValuesList> ValoresComponentes(string pstrServiceId, string pstrComponentId)
        {
            SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
            int rpta = 0;

            try
            {
                var serviceComponentFieldValues = (from A in dbContext.service
                                                   join B in dbContext.servicecomponent on A.v_ServiceId equals B.v_ServiceId
                                                   join C in dbContext.servicecomponentfields on B.v_ServiceComponentId equals C.v_ServiceComponentId
                                                   join D in dbContext.servicecomponentfieldvalues on C.v_ServiceComponentFieldsId equals D.v_ServiceComponentFieldsId
                                                   join E in dbContext.component on B.v_ComponentId equals E.v_ComponentId
                                                   join F in dbContext.componentfields on C.v_ComponentFieldId equals F.v_ComponentFieldId
                                                   join G in dbContext.componentfield on C.v_ComponentFieldId equals G.v_ComponentFieldId
                                                   join H in dbContext.component on F.v_ComponentId equals H.v_ComponentId

                                                   where A.v_ServiceId == pstrServiceId
                                                           && H.v_ComponentId == pstrComponentId
                                                           && B.i_IsDeleted == 0
                                                           && C.i_IsDeleted == 0

                                                   select new ServiceComponentFieldValuesList
                                                   {
                                                       v_ComponentFieldId = G.v_ComponentFieldId,
                                                       v_ComponentFielName = G.v_TextLabel,
                                                       v_ServiceComponentFieldsId = C.v_ServiceComponentFieldsId,
                                                       v_Value1 = D.v_Value1,
                                                       i_GroupId = G.i_GroupId.Value
                                                   });

                var finalQuery = (from a in serviceComponentFieldValues.ToList()

                                  let value1 = int.TryParse(a.v_Value1, out rpta)
                                  join sp in dbContext.systemparameter on new { a = a.i_GroupId, b = rpta }
                                                  equals new { a = sp.i_GroupId, b = sp.i_ParameterId } into sp_join
                                  from sp in sp_join.DefaultIfEmpty()

                                  select new ServiceComponentFieldValuesList
                                  {
                                      v_ComponentFieldId = a.v_ComponentFieldId,
                                      v_ComponentFielName = a.v_ComponentFielName,
                                      v_ServiceComponentFieldsId = a.v_ServiceComponentFieldsId,
                                      v_Value1 = a.v_Value1,
                                      v_Value1Name = sp == null ? "" : sp.v_Value1
                                  }).ToList();


                return finalQuery;
            }
            catch (Exception)
            {

                throw;
            }

        }

        //// Alejandro - 23/07/15
        //public List<ServiceComponentFieldValuesList> GetValoresUCPsicologia(string pstrServiceId, int GrupoOcupacional_PSICOLOGIA)
        //{
        //    //mon.IsActive = true;

        //    SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
        //    int rpta = 0;        

        //    try
        //    {
        //        var serviceComponents = (from A in dbContext.service
        //                                 join B in dbContext.servicecomponent on A.v_ServiceId equals B.v_ServiceId
        //                                 join C in dbContext.servicecomponentfields on B.v_ServiceComponentId equals C.v_ServiceComponentId
        //                                 join D in dbContext.servicecomponentfieldvalues on C.v_ServiceComponentFieldsId equals D.v_ServiceComponentFieldsId

        //                                 join E in dbContext.component on B.v_ComponentId equals E.v_ComponentId

        //                                 where A.v_ServiceId == pstrServiceId && B.i_IsDeleted == 0

        //                                 select new ServiceComponentFieldValuesList
        //                                 {
        //                                     v_ServiceComponentId = B.v_ServiceComponentId,
        //                                     v_ComponentId = B.v_ComponentId,
        //                                     v_ComponentFieldId = C.v_ComponentFieldId,
        //                                     v_ServiceComponentFieldsId = C.v_ServiceComponentFieldsId,
        //                                     v_Value1 = D.v_Value1,
        //                                     v_ComponentName = E.v_Name
        //                                 }).ToList();


        //        int estemo = (int)SystemParameterGroups.ResultadoEvaluacion_EstabilidadEmocional;
        //        int per = (int)SystemParameterGroups.ResultadoEvaluacion_Personalidad;
        //        int afe = (int)SystemParameterGroups.ResultadoEvaluacion_Afectividad;
        //        int mot = (int)SystemParameterGroups.ResultadoEvaluacion_Motivacion;

        //        var finalQuery = (from a in serviceComponents
        //                          let value1 = int.TryParse(a.v_Value1, out rpta)

        //                          // Grupo ocupacional - psicologia
        //                          join spGoPsi in dbContext.systemparameter on new { a = GrupoOcupacional_PSICOLOGIA, b = rpta }
        //                                                       equals new { a = spGoPsi.i_GroupId, b = spGoPsi.i_ParameterId } into spGoPsi_join
        //                          from spGoPsi in spGoPsi_join.DefaultIfEmpty()

        //                          // Estabilidad emocional
        //                          join spEstEmo in dbContext.systemparameter on new { a = estemo, b = rpta }
        //                                                       equals new { a = spEstEmo.i_GroupId, b = spEstEmo.i_ParameterId } into spEstEmo_join
        //                          from spEstEmo in spEstEmo_join.DefaultIfEmpty()

        //                          // Personalidad
        //                          join spPer in dbContext.systemparameter on new { a = per, b = rpta }
        //                                                       equals new { a = spPer.i_GroupId, b = spPer.i_ParameterId } into spPer_join
        //                          from sp in spPer_join.DefaultIfEmpty()

        //                          // Afetividad
        //                          join spAfe in dbContext.systemparameter on new { a = afe, b = rpta }
        //                                                       equals new { a = spAfe.i_GroupId, b = spAfe.i_ParameterId } into spAfe_join
        //                          from spAfe in spAfe_join.DefaultIfEmpty()

        //                          // Motivacion
        //                          join spMot in dbContext.systemparameter on new { a = mot, b = rpta }
        //                                                       equals new { a = spMot.i_GroupId, b = spMot.i_ParameterId } into spMot_join
        //                          from spMot in spMot_join.DefaultIfEmpty()

        //                          where a.v_ComponentFieldId.Contains("PSI")

        //                          select new ReportInformePsicologicoOcupacional
        //                          {
        //                              v_ComponentFieldId = a.v_ComponentFieldId,
        //                              //v_ComponentFielName = G.v_TextLabel,
        //                              v_ServiceComponentFieldsId = a.v_ServiceComponentFieldsId,
        //                              v_Value1 = a.v_Value1,
        //                              v_Value1Name = sp == null ? "" : sp.v_Value1,

        //                              v_ServiceComponentId = a.v_ServiceComponentId,

        //                              cb_GrupoOcupacional = a.v_Value1,
        //                              cb_GrupoOcupacionalName = spGoPsi == null ? "" : spGoPsi.v_Value1,
        //                              cb_RESULTADO_EVAL_EstabilidadEmocional = spEstEmo == null ? "" : spEstEmo.v_Value1,

        //                              txt_RESULTADO_EVAL_IndicadoresFobia = xtxt_RESULTADO_EVAL_IndicadoresFobia,
        //                              txt_RESULTADO_EVAL_IndicadoresFatigaySomnolencia = xtxt_RESULTADO_EVAL_IndicadoresFatigaySomnolencia,
        //                              cb_RESULTADO_EVAL_Personalidad = xcb_RESULTADO_EVAL_Personalidad,
        //                              cb_RESULTADO_EVAL_Afectividad = xcb_RESULTADO_EVAL_Afectividad,
        //                              cb_RESULTADO_EVAL_Motivacion = xcb_RESULTADO_EVAL_Motivacion,
        //                              cb_RESULTADO_EVAL_NivelStres = xcb_RESULTADO_EVAL_NivelStres,
        //                              txt_RESULTADO_EVAL_IndicadoresPsicosomaticosStres = xtxt_RESULTADO_EVAL_IndicadoresPsicosomaticosStres,
        //                              txt_RESULTADO_EVAL_IndicadoresFatigaLaboral = xtxt_RESULTADO_EVAL_IndicadoresFatigaLaboral,


        //                          }).ToList();

        //        return finalQuery;

        //    }
        //    catch (Exception)
        //    {

        //        throw;
        //    }

        //}

        public List<multimediafileList> GetFilePdfsByServiceId(ref OperationResult pobjOperationResult, string pstrServiceId)
        {

            int isDeleted = (int)SiNo.NO;

            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();


                var query = (from A in dbContext.service
                             join B in dbContext.servicecomponent on A.v_ServiceId equals B.v_ServiceId
                             join C in dbContext.servicecomponentmultimedia on B.v_ServiceComponentId equals C.v_ServiceComponentId
                             join D in dbContext.multimediafile on C.v_MultimediaFileId equals D.v_MultimediaFileId

                             where A.v_ServiceId == pstrServiceId &&
                                   A.i_IsDeleted == isDeleted && B.i_IsDeleted == isDeleted && C.i_IsDeleted == isDeleted && D.i_IsDeleted == 0

                             select new multimediafileList
                             {
                                 v_MultimediaFileId = D.v_MultimediaFileId,
                                 v_FileName = D.v_FileName,
                                 b_File = D.b_File
                             });

                List<multimediafileList> obj = query.ToList();

                List<multimediafileList> objFinal = obj.FindAll(p => p.v_FileName.Contains(".pdf"));

                pobjOperationResult.Success = 1;
                return objFinal;
            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
                return null;
            }
        }

        public List<InterfaceBS> ObtenerListaDatos(string pstrServiceId)
        {
            SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
            try
            {
                var query = (from A in dbContext.interfacebc300
                             join B in dbContext.componentfields on A.v_ComponentId equals B.v_ComponentFieldId
                             join C in dbContext.component on B.v_ComponentId equals C.v_ComponentId

                             where A.v_ServiceId == pstrServiceId
                             select new InterfaceBS
                             {
                                 i_InterfaceBS300 = A.i_InterfaceBS300,
                                 v_ServiceId = A.v_ServiceId,
                                 v_ComponentId = A.v_ComponentId,
                                 v_ResultComponent = A.v_ResultComponent,
                                 i_CategoryId = C.i_CategoryId.Value
                             }
             ).ToList();

                return query;
            }
            catch (Exception ex)
            {

                throw;
            }



        }

        public List<ServiceList> ObtenerServicios()
        {
            SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();


            var query = (from A in dbContext.service
                         select new ServiceList
                         {
                             v_ServiceId = A.v_ServiceId,
                             v_PersonId = A.v_PersonId
                         }
                         ).ToList();

            return query;

        }

        public List<ServiceComponentShort> ObtenerServiceComponent(string pServiceId, int pstrCategoryId)
        {
            //mon.IsActive = true;
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
                List<ServiceComponentShort> objEntity = null;

                objEntity = (from a in dbContext.servicecomponent
                             join b in dbContext.component on a.v_ComponentId equals b.v_ComponentId
                             join c in dbContext.service on a.v_ServiceId equals c.v_ServiceId
                             join d in dbContext.person on c.v_PersonId equals d.v_PersonId
                             where c.v_ServiceId == pServiceId && b.i_CategoryId == pstrCategoryId

                             select new ServiceComponentShort
                             {
                                 ServicioId = c.v_ServiceId,
                                 v_ServiceComponentId = a.v_ServiceComponentId,
                                 v_ComponentId = a.v_ComponentId,
                                 i_UIIndex = b.i_UIIndex.Value,
                                 CategoriaId = b.i_CategoryId.Value,
                             }).ToList();

                objEntity.Sort((x, y) => x.v_ComponentId.CompareTo(y.v_ComponentId));

                var objData = objEntity.AsEnumerable()
                           .GroupBy(x => new { x.CategoriaId, x.ServicioId })
                           .Select(group => group.First())
                           .OrderBy(o => o.i_UIIndex);

                return objData.ToList();
            }
            catch (Exception ex)
            {

                return null;
            }
        }

        //AGVR - DRA

        public void UpdateServiceStatus(string pstrServiceId)
        {
            //mon.IsActive = true;

            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                // Obtener la entidad fuente
                var objEntitySource = (from a in dbContext.service
                                       where a.v_ServiceId == pstrServiceId
                                       select a).FirstOrDefault();

                objEntitySource.i_ServiceStatusId = (int)ServiceStatus.Cancelado;

                // cambiar estado de los examenes a No realizado excepto el toxi
                var serviceComponentsList = (from a in dbContext.servicecomponent
                                             where a.v_ServiceId == pstrServiceId && a.v_ComponentId != Constants.TOXICOLOGICO_COMPLETO_ID
                                             select a).ToList();

                foreach (var item in serviceComponentsList)
                {
                    item.i_ServiceComponentStatusId = (int)ServiceComponentStatus.NoRealizado;
                }

                // Guardar los cambios
                dbContext.SaveChanges();
                return;
            }
            catch (Exception)
            {
                return;
            }

        }

        public void UpdateServiceAptitudeNOAPTO(string pstrServiceId)
        {
            //mon.IsActive = true;

            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                // Obtener la entidad fuente
                var objEntitySource = (from a in dbContext.service
                                       where a.v_ServiceId == pstrServiceId
                                       select a).FirstOrDefault();

                objEntitySource.i_AptitudeStatusId = (int)AptitudeStatus.NoApto;
                // Guardar los cambios
                dbContext.SaveChanges();
                return;
            }
            catch (Exception)
            {
                return;
            }

        }


        public List<Seguimiento> GetSeguimiento(ref OperationResult pobjOperationResult, int? pintPageIndex, int? pintResultsPerPage, string pstrSortExpression, string pstrFilterExpression, DateTime? pdatBeginDate, DateTime? pdatEndDate)
        {
            //mon.IsActive = true;

            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
                var query = from A in dbContext.service

                            join AA in dbContext.servicecomponent on A.v_ServiceId equals AA.v_ServiceId
                            join bbb in dbContext.component on AA.v_ComponentId equals bbb.v_ComponentId
                            join fff in dbContext.systemparameter on new { a = bbb.i_CategoryId.Value, b = 116 } // CATEGORIA DEL EXAMEN
                                                                              equals new { a = fff.i_ParameterId, b = fff.i_GroupId } into J5_join
                            from fff in J5_join.DefaultIfEmpty()

                            join B in dbContext.systemparameter on new { a = A.i_ServiceStatusId.Value, b = 125 } equals new { a = B.i_ParameterId, b = B.i_GroupId } into B_join
                            from B in B_join.DefaultIfEmpty()

                            join C in dbContext.systemparameter on new { a = A.i_MasterServiceId.Value, b = 119 } equals new { a = C.i_ParameterId, b = C.i_GroupId } into C_join
                            from C in C_join.DefaultIfEmpty()

                            join D in dbContext.calendar on A.v_ServiceId equals D.v_ServiceId into D_join
                            from D in D_join.DefaultIfEmpty()

                            join E in dbContext.protocol on A.v_ProtocolId equals E.v_ProtocolId

                            join F in dbContext.organization on E.v_CustomerOrganizationId equals F.v_OrganizationId

                            join G in dbContext.location on E.v_CustomerLocationId equals G.v_LocationId

                            join H in dbContext.systemparameter on new { a = E.i_MasterServiceTypeId.Value, b = 119 } equals new { a = H.i_ParameterId, b = H.i_GroupId } into H_join
                            from H in H_join.DefaultIfEmpty()

                            join I in dbContext.person on A.v_PersonId equals I.v_PersonId

                            join K in dbContext.systemparameter on new { a = A.i_AptitudeStatusId.Value, b = 124 } equals new { a = K.i_ParameterId, b = K.i_GroupId } into K_join
                            from K in K_join.DefaultIfEmpty()

                            join L in dbContext.datahierarchy on new { a = I.i_DocTypeId.Value, b = 106 } equals new { a = L.i_ItemId, b = L.i_GroupId } into L_join
                            from L in L_join.DefaultIfEmpty()

                            join et in dbContext.systemparameter on new { a = E.i_EsoTypeId.Value, b = 118 }
                                                equals new { a = et.i_ParameterId, b = et.i_GroupId } into et_join  // TIPO ESO [ESOA,ESOR,ETC]
                            from et in et_join.DefaultIfEmpty()

                            join J1 in dbContext.systemuser on new { i_InsertUserId = A.i_InsertUserId.Value }
                                                            equals new { i_InsertUserId = J1.i_SystemUserId } into J1_join
                            from J1 in J1_join.DefaultIfEmpty()

                            join J2 in dbContext.systemuser on new { i_UpdateUserId = A.i_UpdateUserId.Value }
                                                            equals new { i_UpdateUserId = J2.i_SystemUserId } into J2_join
                            from J2 in J2_join.DefaultIfEmpty()
                            where A.i_IsDeleted == 0
                            select new Seguimiento
                            {
                                ServiceId = A.v_ServiceId,
                                Trabajador = I.v_FirstLastName + " " + I.v_SecondLastName + " " + I.v_FirstName,
                                d_ServiceDate = (DateTime)A.d_ServiceDate,
                                Estado = B.v_Value1,
                                Categoria = fff.v_Value1,
                                Comentario = AA.v_Comment,
                                v_ProtocolId = A.v_ProtocolId,
                                i_MasterServiceId = A.i_MasterServiceId.Value,
                                i_ServiceStatusId = A.i_ServiceStatusId.Value,
                                i_AptitudeStatusId = A.i_AptitudeStatusId.Value,
                                i_ServiceTypeId = E.i_MasterServiceTypeId.Value,
                                i_EsoTypeId = E.i_EsoTypeId.Value,
                                v_CustomerOrganizationId = E.v_CustomerOrganizationId,
                                v_CustomerLocationId = E.v_CustomerLocationId,

                            };

                if (!string.IsNullOrEmpty(pstrFilterExpression))
                {
                    query = query.Where(pstrFilterExpression);
                }
                if (pdatBeginDate.HasValue && pdatEndDate.HasValue)
                {
                    query = query.Where("d_ServiceDate >= @0 && d_ServiceDate <= @1", pdatBeginDate.Value, pdatEndDate.Value);
                }
                if (!string.IsNullOrEmpty(pstrSortExpression))
                {
                    query = query.OrderBy(pstrSortExpression);
                }
                if (pintPageIndex.HasValue && pintResultsPerPage.HasValue)
                {
                    int intStartRowIndex = pintPageIndex.Value * pintResultsPerPage.Value;
                    query = query.Skip(intStartRowIndex);
                }
                if (pintResultsPerPage.HasValue)
                {
                    query = query.Take(pintResultsPerPage.Value);
                }

                List<Seguimiento> objData = query.ToList();
                pobjOperationResult.Success = 1;

                var Agrupacion = (objData.GroupBy(g => new { g.ServiceId })
                              .Select(s => s.First()).ToList());

                List<Seguimiento> Seguimiento = new List<Seguimiento>();
                Seguimiento oSeguimiento;
                foreach (var item in Agrupacion)
                {
                    oSeguimiento = new Seguimiento();
                    oSeguimiento.ServiceId = item.ServiceId;
                    oSeguimiento.Trabajador = item.Trabajador;
                    oSeguimiento.d_ServiceDate = item.d_ServiceDate;
                    oSeguimiento.Estado = item.Estado;
                    var Detalle = objData.FindAll(p => p.ServiceId == item.ServiceId).ToList().GroupBy(g => new { g.Categoria }).Select(s => s.First()).ToList();

                    List<SeguimientoDetalle> ListaSeguimientoDetalle = new List<SeguimientoDetalle>();
                    SeguimientoDetalle oSeguimientoDetalle;
                    foreach (var itemDetalle in Detalle)
                    {
                        oSeguimientoDetalle = new SeguimientoDetalle();

                        oSeguimientoDetalle.Categoria = itemDetalle.Categoria;
                        oSeguimientoDetalle.Comentario = itemDetalle.Comentario;
                        ListaSeguimientoDetalle.Add(oSeguimientoDetalle);
                    }
                    oSeguimiento.SeguimientoDetalle = ListaSeguimientoDetalle;
                    Seguimiento.Add(oSeguimiento);
                }


                return Seguimiento;

            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
                return null;
            }
        }

        public List<Servicios> ListarServiciosSinReportes()
        {
            SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
            DateTime FechaMin = DateTime.Parse("30/12/2017");
            var query = (from A in dbContext.service
                         join B in dbContext.protocol on A.v_ProtocolId equals B.v_ProtocolId
                         join C in dbContext.person on A.v_PersonId equals C.v_PersonId

                         where A.i_IsDeleted == 0
                         && (A.i_AptitudeStatusId != (int)AptitudeStatus.Pendiente && A.i_AptitudeStatusId != (int)AptitudeStatus.SinAptitud)
                         && A.d_ServiceDate > FechaMin && A.i_InsertUserOccupationalMedicalId == null
                         select new Servicios
                         {
                             ServiceId = A.v_ServiceId,
                             PacienteId = A.v_PersonId,
                             EmpresaCliente = B.v_CustomerOrganizationId,
                             NombrePaciente = C.v_FirstLastName + " " + C.v_SecondLastName + " " + C.v_FirstName
                         }
                         ).ToList();

            return query;
        }

        #region AMC  ESO2
        public List<ComponentList> ListMissingExamenesNames(ref OperationResult pobjOperationResult, string pstrServiceId, int pintNodeId, int pintRoleId)
        {
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                List<ComponentList> components = (from aaa in dbContext.servicecomponent

                                                  join bbb in dbContext.component on aaa.v_ComponentId equals bbb.v_ComponentId

                                                  join fff in dbContext.systemparameter on new { a = bbb.i_CategoryId.Value, b = 116 } // CATEGORIA DEL EXAMEN
                                                                                               equals new { a = fff.i_ParameterId, b = fff.i_GroupId } into J5_join
                                                  from fff in J5_join.DefaultIfEmpty()

                                                  join ggg in dbContext.rolenodecomponentprofile on aaa.v_ComponentId equals ggg.v_ComponentId

                                                  where (aaa.v_ServiceId == pstrServiceId) &&
                                                        (bbb.i_ComponentTypeId == (int?)ComponentType.Examen) &&
                                                        (aaa.i_IsDeleted == 0) &&
                                                        (aaa.i_IsRequiredId == (int?)SiNo.SI) &&
                                                        (ggg.i_NodeId == pintNodeId) &&
                                                        (ggg.i_RoleId == pintRoleId) &&
                                                        (ggg.i_IsDeleted == (int)SiNo.NO)
                                                  select new ComponentList
                                                  {
                                                      v_CategoryName = fff.v_Value1,
                                                      v_ComponentId = bbb.v_ComponentId,
                                                      v_ServiceComponentId = aaa.v_ServiceComponentId,
                                                  }).ToList();
                var objData = components.AsEnumerable()
                    .GroupBy(x => x.v_CategoryName)
                    .Select(group => group.First())
                    .OrderBy(p => p.v_ComponentId);

                return objData.ToList();
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
                throw;
            }
        }
        public string ConcatenateComponents(string pstrServiceId, string pstrComponentId)
        {
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
                var component = (from a in dbContext.component
                                 where a.v_ComponentId == pstrComponentId
                                 select a).FirstOrDefault();
                var categoryId = component.i_CategoryId;

                var servicecomponent = (from a in dbContext.servicecomponent
                                        join b in dbContext.component on a.v_ComponentId equals b.v_ComponentId
                                        where b.i_CategoryId == categoryId && a.v_ServiceId == pstrServiceId
                                        select new
                                        {
                                            componentId = b.v_ComponentId
                                        });

                return string.Join("|", servicecomponent.Select(p => p.componentId));
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
                throw;
            }
        }
        public List<ComponentList> ExamenByDefaultOrAssigned(ref OperationResult pobjOperationResult, string pstrServiceId, string pstrComponentId)
        {
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                var isDeleted = 0;
                int? componentTypeId = (int?)ComponentType.Examen;
                int? isRequiredId = (int?)SiNo.SI;
                var recomId = (int)Typifying.Recomendaciones;
                var restricId = (int)Typifying.Restricciones;
                int groupMeasurementUnitId = 105;
                List<string> list = pstrComponentId.Split('|').ToList();

                #region Recomendation

                var _valueFieldsRecome = (from s in dbContext.service
                                          join sc in dbContext.servicecomponent on s.v_ServiceId equals sc.v_ServiceId
                                          join c in dbContext.component on sc.v_ComponentId equals c.v_ComponentId
                                          join cfs in dbContext.componentfields on c.v_ComponentId equals cfs.v_ComponentId
                                          join cfsv in dbContext.componentfieldvalues on cfs.v_ComponentFieldId equals cfsv.v_ComponentFieldId
                                          join rec in dbContext.componentfieldvaluesrecommendation on cfsv.v_ComponentFieldValuesId equals rec.v_ComponentFieldValuesId
                                          join mrec in dbContext.masterrecommendationrestricction on rec.v_MasterRecommendationRestricctionId equals mrec.v_MasterRecommendationRestricctionId

                                          where (rec.i_IsDeleted == isDeleted) &&
                                                (mrec.i_TypifyingId == recomId) &&
                                                (s.v_ServiceId == pstrServiceId) &&
                                              //(sc.v_ComponentId == pstrComponentId)
                                                (list.Contains(sc.v_ComponentId))

                                          select new RecomendationList
                                          {
                                              v_ComponentFieldValuesRecommendationId = rec.v_ComponentFieldValuesRecommendationId,
                                              v_ComponentFieldValuesId = rec.v_ComponentFieldValuesId,
                                              v_MasterRecommendationId = rec.v_MasterRecommendationRestricctionId,
                                              v_RecommendationName = mrec.v_Name,
                                              v_ComponentId = sc.v_ComponentId,
                                              i_RecordStatus = (int)RecordStatus.Grabado,
                                              i_RecordType = (int)RecordType.NoTemporal,

                                          }).ToList();

                #endregion

                #region Restriction

                var _valueFieldsRestri = (from s in dbContext.service
                                          join sc in dbContext.servicecomponent on s.v_ServiceId equals sc.v_ServiceId
                                          join c in dbContext.component on sc.v_ComponentId equals c.v_ComponentId
                                          join cfs in dbContext.componentfields on c.v_ComponentId equals cfs.v_ComponentId
                                          join cfsv in dbContext.componentfieldvalues on cfs.v_ComponentFieldId equals cfsv.v_ComponentFieldId
                                          join res in dbContext.componentfieldvaluesrestriction on cfsv.v_ComponentFieldValuesId equals res.v_ComponentFieldValuesId
                                          join mres in dbContext.masterrecommendationrestricction on res.v_MasterRecommendationRestricctionId equals mres.v_MasterRecommendationRestricctionId

                                          where (res.i_IsDeleted == isDeleted) &&
                                                (mres.i_TypifyingId == restricId) &&
                                                (s.v_ServiceId == pstrServiceId) &&
                                              //(sc.v_ComponentId == pstrComponentId)
                                                (list.Contains(sc.v_ComponentId))
                                          select new RestrictionList
                                          {
                                              v_ComponentFieldValuesRestrictionId = res.v_ComponentFieldValuesRestrictionId,
                                              v_ComponentFieldValuesId = res.v_ComponentFieldValuesId,
                                              v_MasterRestrictionId = res.v_MasterRecommendationRestricctionId,
                                              v_RestrictionName = mres.v_Name,
                                              v_ComponentId = sc.v_ComponentId,
                                              i_RecordStatus = (int)RecordStatus.Grabado,
                                              i_RecordType = (int)RecordType.NoTemporal
                                          }).ToList();
                #endregion

                #region Values

                var _valueFields = (from s in dbContext.service
                                    join sc in dbContext.servicecomponent on s.v_ServiceId equals sc.v_ServiceId
                                    join c in dbContext.component on sc.v_ComponentId equals c.v_ComponentId
                                    join cfs in dbContext.componentfields on c.v_ComponentId equals cfs.v_ComponentId
                                    join cfsv in dbContext.componentfieldvalues on cfs.v_ComponentFieldId equals cfsv.v_ComponentFieldId
                                    join dise in dbContext.diseases on cfsv.v_Diseases equals dise.v_DiseasesId
                                    where (cfsv.i_IsDeleted == isDeleted) &&
                                          (s.v_ServiceId == pstrServiceId) &&
                                        //(sc.v_ComponentId == pstrComponentId)
                                            (list.Contains(sc.v_ComponentId))
                                    select new ComponentFieldValues
                                    {
                                        v_ComponentFieldValuesId = cfsv.v_ComponentFieldValuesId,
                                        v_ComponentFieldsId = cfsv.v_ComponentFieldId,
                                        v_AnalyzingValue1 = cfsv.v_AnalyzingValue1,
                                        v_AnalyzingValue2 = cfsv.v_AnalyzingValue2,
                                        i_OperatorId = cfsv.i_OperatorId.Value,
                                        v_LegalStandard = cfsv.v_LegalStandard,
                                        i_IsAnormal = cfsv.i_IsAnormal,
                                        i_ValidationMonths = cfsv.i_ValidationMonths,
                                        v_DiseasesName = cfsv.diseases.v_Name,
                                        v_DiseasesId = cfsv.v_Diseases,
                                        v_ComponentId = sc.v_ComponentId,
                                        i_GenderId = cfsv.i_GenderId,
                                        v_CIE10 = dise.v_CIE10Id

                                    }).ToList();

                _valueFields.ForEach(a =>
                {
                    a.Recomendations = _valueFieldsRecome.FindAll(p => p.v_ComponentFieldValuesId == a.v_ComponentFieldValuesId);
                    a.Restrictions = _valueFieldsRestri.FindAll(p => p.v_ComponentFieldValuesId == a.v_ComponentFieldValuesId);
                });

                #endregion

                #region Fields

                var _comFields = (from s in dbContext.service
                                  join sc in dbContext.servicecomponent on s.v_ServiceId equals sc.v_ServiceId
                                  join c in dbContext.component on sc.v_ComponentId equals c.v_ComponentId
                                  join cfs in dbContext.componentfields on c.v_ComponentId equals cfs.v_ComponentId
                                  join cf in dbContext.componentfield on cfs.v_ComponentFieldId equals cf.v_ComponentFieldId

                                  let hazAutoDx = (from jjj in dbContext.diagnosticrepository
                                                   where (jjj.v_ComponentFieldId == cfs.v_ComponentFieldId) &&
                                                       (jjj.v_ServiceId == pstrServiceId) &&
                                                       (jjj.i_IsDeleted == isDeleted)
                                                   //select jjj.v_ComponentFieldId != null ? (int?)SiNo.SI : (int?)SiNo.NO)
                                                   select new
                                                   {
                                                       //v_ComponentFieldId = jjj.v_ComponentFieldId
                                                       i_HasAutomaticDxId = jjj.v_ComponentFieldId != null ? (int?)SiNo.SI : (int?)SiNo.NO
                                                   })

                                  //let measurementUnitId = cfs.componentfield.i_MeasurementUnitId.Value

                                  join dh in dbContext.datahierarchy on new { a = groupMeasurementUnitId, b = cf.i_MeasurementUnitId.Value }  // UNID MEDIDA
                                                      equals new { a = dh.i_GroupId, b = dh.i_ItemId } into dh_join
                                  from dh in dh_join.DefaultIfEmpty()

                                  where (cfs.i_IsDeleted == isDeleted) &&
                                        (cf.i_IsDeleted == isDeleted) &&
                                        (s.v_ServiceId == pstrServiceId) &&
                                      //(sc.v_ComponentId == pstrComponentId)
                                         (list.Contains(sc.v_ComponentId))
                                  select new ComponentFieldsList
                                  {
                                      v_ComponentFieldId = cf.v_ComponentFieldId,
                                      v_TextLabel = cf.v_TextLabel,
                                      v_ComponentId = cfs.v_ComponentId,
                                      i_LabelWidth = cf.i_LabelWidth.Value,
                                      v_DefaultText = cf.v_DefaultText,
                                      i_ControlId = cf.i_ControlId.Value,
                                      i_GroupId = cf.i_GroupId.Value,
                                      i_ItemId = cf.i_ItemId.Value,
                                      i_ControlWidth = cf.i_WidthControl.Value,
                                      i_HeightControl = cf.i_HeightControl.Value,
                                      i_MaxLenght = cf.i_MaxLenght.Value,
                                      i_IsRequired = cf.i_IsRequired.Value,
                                      i_Column = cf.i_Column.Value,
                                      v_MeasurementUnitName = dh.v_Value1,
                                      i_IsCalculate = cf.i_IsCalculate.Value,
                                      i_Order = cf.i_Order.Value,
                                      i_MeasurementUnitId = cf.i_MeasurementUnitId.Value,
                                      r_ValidateValue1 = cf.r_ValidateValue1.Value,
                                      r_ValidateValue2 = cf.r_ValidateValue2.Value,
                                      v_Group = cfs.v_Group,
                                      v_Formula = cf.v_Formula,
                                      i_NroDecimales = cf.i_NroDecimales.Value,
                                      i_ReadOnly = cf.i_ReadOnly.Value,
                                      i_Enabled = cf.i_Enabled.Value,
                                      //i_LabelHeight = cf.i_HeightLabel, // este campo no existe
                                      //i_HasAutomaticDxId = hazAutoDx.FirstOrDefault().v_ComponentFieldId != null ? (int?)SiNo.SI : (int?)SiNo.NO
                                      i_HasAutomaticDxId = hazAutoDx.FirstOrDefault().i_HasAutomaticDxId,
                                      //Values = _valueFields.Where(p => p.v_ComponentFieldsId == cfs.v_ComponentFieldId)
                                      //Values = xcfsv
                                  }).ToList();

                // Ordenar la lista temp para hacer busquedas rapidas sobre ella (obligatorio)
                _valueFields.Sort((x, y) => x.v_ComponentFieldsId.CompareTo(y.v_ComponentFieldsId));
                _comFields.Sort((x, y) => x.v_ComponentFieldId.CompareTo(y.v_ComponentFieldId));
                _comFields.ForEach(a => a.Values = _valueFields.FindAll(p => p.v_ComponentFieldsId == a.v_ComponentFieldId));


                Formulate formu = null;
                TargetFieldOfCalculate targetFieldOfCalculate = null;

                foreach (var item in _comFields)
                {
                    List<Formulate> formuList = new List<Formulate>();
                    List<TargetFieldOfCalculate> targetFieldOfCalculateList = new List<TargetFieldOfCalculate>();

                    var find = _comFields.FindAll(p => p.v_Formula != null && p.v_Formula.Contains(item.v_ComponentFieldId));

                    if (find.Count != 0)
                    {
                        item.i_IsSourceFieldToCalculate = (int)SiNo.SI;

                        foreach (var f in find)
                        {
                            formu = new Formulate();
                            formu.v_Formula = f.v_Formula;
                            formu.v_TargetFieldOfCalculateId = f.v_ComponentFieldId;
                            formuList.Add(formu);

                            targetFieldOfCalculate = new TargetFieldOfCalculate();
                            targetFieldOfCalculate.v_TargetFieldOfCalculateId = f.v_ComponentFieldId;
                            targetFieldOfCalculateList.Add(targetFieldOfCalculate);
                        }

                        item.Formula = formuList;
                        item.TargetFieldOfCalculateId = targetFieldOfCalculateList;
                    }

                }

                // obligatorio para que los controles se dibujen en orden adecuado
                _comFields.Sort((x, y) => x.i_Order.CompareTo(y.i_Order));

                #endregion

                #region Components

                List<ComponentList> components = (from aaa in dbContext.servicecomponent
                                                  join bbb in dbContext.component on aaa.v_ComponentId equals bbb.v_ComponentId
                                                  join J1 in dbContext.systemuser on new { i_InsertUserId = aaa.i_InsertUserId.Value }
                                                                  equals new { i_InsertUserId = J1.i_SystemUserId } into J1_join
                                                  from J1 in J1_join.DefaultIfEmpty()

                                                  join J2 in dbContext.systemuser on new { i_UpdateUserId = aaa.i_UpdateUserId.Value }
                                                                                  equals new { i_UpdateUserId = J2.i_SystemUserId } into J2_join
                                                  from J2 in J2_join.DefaultIfEmpty()

                                                  join fff in dbContext.systemparameter on new { a = bbb.i_CategoryId.Value, b = 116 } // CATEGORIA DEL EXAMEN
                                                                                               equals new { a = fff.i_ParameterId, b = fff.i_GroupId } into J5_join
                                                  from fff in J5_join.DefaultIfEmpty()

                                                  where (aaa.v_ServiceId == pstrServiceId) &&
                                                        (bbb.i_ComponentTypeId == (int?)ComponentType.Examen) &&
                                                        (aaa.i_IsDeleted == 0) &&
                                                        (aaa.i_IsRequiredId == (int?)SiNo.SI) &&
                                                      //(aaa.v_ComponentId == pstrComponentId)
                                                        (list.Contains(aaa.v_ComponentId))
                                                  //orderby aaa.v_ServiceComponentId, aaa.i_index
                                                  select new ComponentList
                                                  {
                                                      v_ComponentId = bbb.v_ComponentId,
                                                      v_Name = bbb.v_Name,
                                                      i_UIIsVisibleId = bbb.i_UIIsVisibleId,
                                                      i_ComponentTypeId = bbb.i_ComponentTypeId,
                                                      v_ServiceComponentId = aaa.v_ServiceComponentId,
                                                      v_CreationUser = J1.v_UserName,
                                                      v_UpdateUser = J2.v_UserName,
                                                      d_CreationDate = aaa.d_InsertDate,
                                                      d_UpdateDate = aaa.d_UpdateDate,
                                                      i_IsDeleted = aaa.i_IsDeleted.Value,
                                                      i_CategoryId = bbb.i_CategoryId,
                                                      v_CategoryName = fff.v_Value1,
                                                      i_GroupedComponentId = bbb.i_CategoryId,
                                                      v_GroupedComponentName = fff.v_Value1,
                                                      v_ComponentCopyId = bbb.v_ComponentId,
                                                      i_ServiceComponentStatusId = aaa.i_ServiceComponentStatusId.Value,
                                                      //i_Index = aaa.i_index
                                                      i_Index = bbb.i_UIIndex
                                                  }).ToList();

                // Ordenar la lista temp para hacer busquedas rapidas sobre ella (obligatorio)

                components.Sort((x, y) => x.v_ComponentId.CompareTo(y.v_ComponentId));
                components.ForEach(a => a.Fields = _comFields.FindAll(p => p.v_ComponentId == a.v_ComponentId));


                // Orden obligatorio para capturar siempre el v_ServiceComponentId correcto
                components.OrderBy(o1 => o1.v_ServiceComponentId).ThenBy(o2 => o2.i_Index).ToList();

                #endregion

                #region Agrupar componentes individuales en un solo examen component ejem: Laboratorio , Psicologia

                List<ComponentList> groupedComponentsName = null;

                var categories = components.FindAll(p => p.i_CategoryId != -1)
                                .GroupBy(g => g.i_CategoryId)
                                .Select(s => s.First())
                    //.OrderBy(o => o.i_CategoryId).ToList();
                                .OrderByDescending(o => o.v_CategoryName).ToList();
                // Ordenar la lista temp para hacer busquedas rapidas sobre ella (obligatorio)
                components.Sort((x, y) => x.i_CategoryId.Value.CompareTo(y.i_CategoryId.Value));

                for (int i = 0; i < categories.Count; i++)
                {
                    var categoryId = categories[i].i_CategoryId;

                    var componentsByCategory = components.FindAll(p => p.i_CategoryId == categoryId)
                                              .OrderBy(o => o.i_Index).ToList();

                    var join = string.Join("|", componentsByCategory.Select(p => p.v_ComponentId));
                    categories[i].v_ComponentId = join;

                    groupedComponentsName = new List<ComponentList>();

                    for (int j = 0; j < componentsByCategory.Count; j++)
                    {
                        var groupedComponentName = new ComponentList();
                        groupedComponentName.v_ComponentId = componentsByCategory[j].v_ComponentCopyId;
                        groupedComponentName.v_GroupedComponentName = componentsByCategory[j].v_Name;
                        groupedComponentName.i_Index = componentsByCategory[j].i_Index;
                        groupedComponentsName.Add(groupedComponentName);
                    }

                    categories[i].GroupedComponentsName = groupedComponentsName;
                }


                // Buscar componentes individuales
                var componentsToImport = components.FindAll(p => p.i_CategoryId != -1)
                                        .OrderBy(o => o.i_CategoryId).ToList();

                // Importar los campos de cada uno de los componentes individuales hacia el nuevo componente             
                for (int i = 0; i < categories.Count; i++)
                {
                    var categoryId = categories[i].i_CategoryId;

                    var fields = componentsToImport.FindAll(p => p.i_CategoryId == categoryId)
                                .SelectMany(p => p.Fields).ToList();

                    categories[i].i_IsGroupedComponent = (int)SiNo.SI;
                    categories[i].v_Name = categories[i].v_CategoryName;
                    categories[i].Fields = new List<ComponentFieldsList>();
                    categories[i].Fields.AddRange(fields);
                }

                // Eliminar los componentes individuales ya no sirven
                for (int i = 0; i < componentsToImport.Count; i++)
                {
                    components.Remove(componentsToImport[i]);
                }

                // Agregar los nuevos componentes (LAB,PSICOLOGIA) a la lista de examenes que va alimentar el ESO
                components.AddRange(categories);

                #endregion

                pobjOperationResult.Success = 1;

                return components;
            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
                return null;
            }
        }
        public ServiceData GetServiceData(ref OperationResult pobjOperationResult, string pstrServiceId)
        {
            //mon.IsActive = true;
            var isDeleted = 0;

            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                var query = from A in dbContext.service
                            join B in dbContext.person on A.v_PersonId equals B.v_PersonId
                            join C in dbContext.protocol on A.v_ProtocolId equals C.v_ProtocolId

                            where (A.v_ServiceId == pstrServiceId) &&
                                  (A.i_IsDeleted == isDeleted)
                            select new ServiceData
                            {
                                HasSymptomId = A.i_HasSymptomId,
                                Story = A.v_Story,
                                MainSymptom = A.v_MainSymptom,
                                TimeOfDiseaseTypeId = A.i_TimeOfDiseaseTypeId,
                                TimeOfDisease = A.i_TimeOfDisease,
                                DreamId = A.i_DreamId,
                                AppetiteId = A.i_AppetiteId,
                                DepositionId = A.i_DepositionId,
                                UrineId = A.i_UrineId,
                                ThirstId = A.i_ThirstId,
                                Findings = A.v_Findings,
                                Menarquia = A.v_Menarquia,
                                Gestapara = A.v_Gestapara,
                                Pap = A.d_PAP.Value,
                                Fur = A.d_Fur.Value,
                                MacId = A.i_MacId,
                                Mamografia = A.d_Mamografia.Value,
                                CatemenialRegime = A.v_CatemenialRegime,
                                CiruGine = A.v_CiruGine,
                                SexTypeId = B.i_SexTypeId,
                                PersonId = B.v_PersonId,
                                ServiceId = A.v_ServiceId,
                                Trabajador = B.v_FirstLastName + " " + B.v_SecondLastName + " " + B.v_FirstName,
                                ProtocolName = C.v_Name,
                                EsoTypeId = C.i_EsoTypeId.Value,
                                FechaNacimiento = B.d_Birthdate.Value,
                                GlobalExpirationDate = A.d_GlobalExpirationDate.Value,
                                AptitudeStatusId = A.i_AptitudeStatusId.Value
                            };

                ServiceData objData = query.FirstOrDefault();
                pobjOperationResult.Success = 1;
                return objData;
            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
                return null;
            }
        }
        public WorkerData GetWorkerData(string serviceId)
        {
            SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
            var result = (from A in dbContext.service
                          join B in dbContext.person on A.v_PersonId equals B.v_PersonId
                          join C in dbContext.systemparameter on new { a = B.i_SexTypeId.Value, b = 100 }
                              equals new { a = C.i_ParameterId, b = C.i_GroupId } into C_join
                          from C in C_join.DefaultIfEmpty()
                          join D in dbContext.protocol on A.v_ProtocolId equals D.v_ProtocolId
                          join E in dbContext.systemparameter on new { a = D.i_EsoTypeId.Value, b = 118 }
                                          equals new { a = E.i_ParameterId, b = E.i_GroupId }
                          join F in dbContext.groupoccupation on D.v_GroupOccupationId equals F.v_GroupOccupationId

                          where A.v_ServiceId == serviceId
                          select new WorkerData
                          {
                              Trabajador = B.v_FirstName + " " + B.v_FirstLastName + " " + B.v_SecondLastName,
                              FechaNacimiento = B.d_Birthdate.Value,
                              Genero = C.v_Value1,
                              Puesto = B.v_CurrentOccupation,
                              Protocolo = D.v_Name,
                              TipoExamen = E.v_Value1,
                              Grupo = F.v_Name,
                              PersonId = B.v_PersonId,
                              PersonImage = B.b_PersonImage,
                              Email = B.v_Mail
                          }).FirstOrDefault();
            return result;
        }
        #endregion



        public List<ReporteViewModel> ReporteFichasCovid19(DateTime fi, DateTime ff)
        {
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
                dbContext.CommandTimeout = 1000;
                var groupUbigeo = 113;
                var fechaInici = fi.Date;
                var fechaFin = ff.Date.AddDays(1);
                //var x = Console.Out;
                
                //dbContext.Database.Log = s => System.Diagnostics.Debug.WriteLine(s);
                var query = (from A in dbContext.service
                             join B in dbContext.servicecomponent on A.v_ServiceId equals B.v_ServiceId
                             join C in dbContext.servicecomponentfields on B.v_ServiceComponentId equals C.v_ServiceComponentId
                             join D in dbContext.servicecomponentfieldvalues on C.v_ServiceComponentFieldsId equals D.v_ServiceComponentFieldsId
                             join E in dbContext.person on A.v_PersonId equals E.v_PersonId
                             join F in dbContext.protocol on A.v_ProtocolId equals F.v_ProtocolId
                             join G in dbContext.organization on F.v_CustomerOrganizationId equals G.v_OrganizationId
                             // Ubigeo de la persona *******************************************************
                             join dep in dbContext.datahierarchy on new { a = E.i_DepartmentId.Value, b = groupUbigeo }
                                                  equals new { a = dep.i_ItemId, b = dep.i_GroupId } into dep_join
                             from dep in dep_join.DefaultIfEmpty()

                             join prov in dbContext.datahierarchy on new { a = E.i_ProvinceId.Value, b = groupUbigeo }
                                                   equals new { a = prov.i_ItemId, b = prov.i_GroupId } into prov_join
                             from prov in prov_join.DefaultIfEmpty()

                             join distri in dbContext.datahierarchy on new { a = E.i_DistrictId.Value, b = groupUbigeo }
                                                   equals new { a = distri.i_ItemId, b = distri.i_GroupId } into distri_join
                             from distri in distri_join.DefaultIfEmpty()
                             //*********************************************************************************************
                             join K in dbContext.systemparameter on new { a = A.i_AptitudeStatusId.Value, b = 124 } equals new { a = K.i_ParameterId, b = K.i_GroupId }
                             where A.d_ServiceDate >= fechaInici && A.d_ServiceDate <= fechaFin
                                    && B.i_IsDeleted == 0
                                    && C.i_IsDeleted == 0
                             //&& A.v_ServiceId.Contains("N101")
                             let varDpto = dep.v_Value1 == null ? "" : dep.v_Value1
                             let varProv = prov.v_Value1 == null ? "" : prov.v_Value1
                             let varDistri = distri.v_Value1 == null ? "" : distri.v_Value1

                             select new
                             {
                                 ServiceId = A.v_ServiceId,
                                 ComponentId = B.v_ComponentId,
                                 ServiceComponentId = B.v_ServiceComponentId,
                                 ComponentFieldId = C.v_ComponentFieldId,
                                 Value1 = D.v_Value1,
                                 //Tipo = "",
                                 Centro_medico = "SALUS LABORIS",
                                 Ciudad = "LIMA",
                                 Fecha = A.d_ServiceDate,
                                 Empleador = G.v_Name,
                                 Empresa_principal = G.v_Name,
                                 ProtocolName = F.v_Name,
                                 //Sede = "LIMA",
                                 Tipo_documento = E.i_DocTypeId,
                                 Nro_documento = E.v_DocNumber,
                                 Apellido_paterno = E.v_FirstLastName,
                                 ApellidoMaterno = E.v_SecondLastName,
                                 Nombres = E.v_FirstName,
                                 FechaNacimiento = E.d_Birthdate,
                                 Sexo = E.i_SexTypeId,
                                 Celular = E.v_TelephoneNumber,
                                 Otro_telefono = E.v_TelephoneNumber,
                                 Ubigeo = varDistri + "-" + varProv + "-" + varDpto,
                                 Aptitud = K.v_Value1
                             });

                
                //var sql = ((ObjectQuery)query).ToTraceString();
                System.Diagnostics.Trace.WriteLine(query.ToString());

                var objectQuery = query as ObjectQuery;
                string consultaSql = objectQuery.ToTraceString();

                //var query = query.ToList();

                var servicios = query.GroupBy(g => g.ServiceId).Select(s => s.First()).ToList();

                var lista = new List<ReporteViewModel>();

                //foreach (var servicio in servicios)
                //{
                //    var oReporteViewModel = new ReporteViewModel();
                //    var datosServicio = query.FindAll(p => p.ServiceId == servicio.ServiceId);

                //    oReporteViewModel.Tipo = datosServicio.Find(p => p.ComponentId == Constants.CERTIFICADO_COVID_ID) != null ? "CERTIFICADO COVID19" : "PRUEBA RÁPIDA COVID19";
                //    oReporteViewModel.Centro_medico = servicio.Centro_medico;
                //    oReporteViewModel.Ciudad = servicio.Ciudad;
                //    oReporteViewModel.Fecha = servicio.Fecha.Value.Date.ToString("dd/MM/yyyy");
                //    oReporteViewModel.Empleador = servicio.Empleador;
                //    oReporteViewModel.Empresa_principal = servicio.Empresa_principal;
                //    oReporteViewModel.Sede = ObtenerSede(servicio.ProtocolName);
                //    oReporteViewModel.Tipo_documento = ObtenerTipoDocumento(servicio.Tipo_documento);
                //    oReporteViewModel.Nro_documento = servicio.Nro_documento;
                //    oReporteViewModel.Apellido_paterno = servicio.Apellido_paterno;

                //    oReporteViewModel.ApellidoMaterno = servicio.ApellidoMaterno;
                //    oReporteViewModel.Nombres = servicio.Nombres;
                //    oReporteViewModel.Edad = servicio.FechaNacimiento != null ? GetAge(servicio.FechaNacimiento).ToString() : "--";
                //    oReporteViewModel.Sexo = servicio.Sexo == 1 ? "Masculino" : "Femenino";
                //    oReporteViewModel.Celular = servicio.Celular;
                //    oReporteViewModel.Otro_telefono = servicio.Celular;

                //    oReporteViewModel.Domicilio_residencia = datosServicio.Find(p => p.ComponentFieldId == Constants.CERTIFICADO_COVID_DOMICILIO_ID || p.ComponentFieldId == Constants.COVID_DOMICILIO_ID) == null ? "" : ObtenerDomicilio(datosServicio.Find(p => p.ComponentFieldId == Constants.CERTIFICADO_COVID_DOMICILIO_ID || p.ComponentFieldId == Constants.COVID_DOMICILIO_ID).Value1);
                //    oReporteViewModel.Direccion_donde_reside = datosServicio.Find(p => p.ComponentFieldId == Constants.CERTIFICADO_COVID_GEOLOCALIZACION_ID || p.ComponentFieldId == Constants.COVID_GEOLOCALIZACION_ID) == null ? "" : datosServicio.Find(p => p.ComponentFieldId == Constants.CERTIFICADO_COVID_GEOLOCALIZACION_ID || p.ComponentFieldId == Constants.COVID_GEOLOCALIZACION_ID).Value1;
                //    oReporteViewModel.Departamento_Provincia_Distrito = servicio.Ubigeo;
                //    oReporteViewModel.Ha_viajado_fuera_del_pais = datosServicio.Find(p => p.ComponentFieldId == Constants.CERTIFICADO_COVID_VIAJADO_FUERA_PAIS_ID) == null ? "" : ObtenerSINO(datosServicio.Find(p => p.ComponentFieldId == Constants.CERTIFICADO_COVID_VIAJADO_FUERA_PAIS_ID).Value1);
                //    oReporteViewModel.Ha_tenido_usted_un_contacto_directo_con_algun_caso_CONFIRMADO_COVID19 = datosServicio.Find(p => p.ComponentFieldId == Constants.CERTIFICADO_COVID_CONTACTO_DIRECTO_ID) == null ? "" : ObtenerSINO(datosServicio.Find(p => p.ComponentFieldId == Constants.CERTIFICADO_COVID_CONTACTO_DIRECTO_ID).Value1);
                //    oReporteViewModel.Ha_visitado_algun_establecimiento_de_salud = datosServicio.Find(p => p.ComponentFieldId == Constants.CERTIFICADO_COVID_ESTABLECIMIENTO_SALUD_ID) == null ? "" : ObtenerSINO(datosServicio.Find(p => p.ComponentFieldId == Constants.CERTIFICADO_COVID_ESTABLECIMIENTO_SALUD_ID).Value1);
                //    oReporteViewModel.Esta_tomando_alguna_medicacion = datosServicio.Find(p => p.ComponentFieldId == Constants.CERTIFICADO_COVID_TOMA_MEDICACION_ID) == null ? "" : ObtenerSINO(datosServicio.Find(p => p.ComponentFieldId == Constants.CERTIFICADO_COVID_TOMA_MEDICACION_ID).Value1);
                //    //oReporteViewModel.Si_la_respuesta_es_SI_especifique = datosServicio.Find(p => p.ComponentFieldId == Constants.CERTIFICADO_COVID_DOMICILIO_ID || p.ComponentFieldId == Constants.COVID_DOMICILIO_ID) == null ? "" : datosServicio.Find(p => p.ComponentFieldId == Constants.CERTIFICADO_COVID_DOMICILIO_ID || p.ComponentFieldId == Constants.COVID_DOMICILIO_ID).Value1;
                //    oReporteViewModel.Mayor_65 = datosServicio.Find(p => p.ComponentFieldId == Constants.CERTIFICADO_COVID_MAYOR_60_ID || p.ComponentFieldId == Constants.COVID_MAYOR_60_ID) == null ? "" : ObtenerSINO(datosServicio.Find(p => p.ComponentFieldId == Constants.CERTIFICADO_COVID_MAYOR_60_ID || p.ComponentFieldId == Constants.COVID_MAYOR_60_ID).Value1);
                //    oReporteViewModel.Diabetes = datosServicio.Find(p => p.ComponentFieldId == Constants.CERTIFICADO_COVID_DIABETES_ID || p.ComponentFieldId == Constants.COVID_DIABETES_ID) == null ? "" : ObtenerSINO(datosServicio.Find(p => p.ComponentFieldId == Constants.CERTIFICADO_COVID_DIABETES_ID || p.ComponentFieldId == Constants.COVID_DIABETES_ID).Value1);
                //    oReporteViewModel.Enfermedad_pulmonar_cronica = datosServicio.Find(p => p.ComponentFieldId == Constants.CERTIFICADO_COVID_ENF_PULMONAR_ID || p.ComponentFieldId == Constants.COVID_ENF_PULMONAR_ID) == null ? "" : ObtenerSINO(datosServicio.Find(p => p.ComponentFieldId == Constants.CERTIFICADO_COVID_ENF_PULMONAR_ID || p.ComponentFieldId == Constants.COVID_ENF_PULMONAR_ID).Value1);
                //    oReporteViewModel.Cancer = datosServicio.Find(p => p.ComponentFieldId == Constants.CERTIFICADO_COVID_CANCER_ID || p.ComponentFieldId == Constants.COVID_CANCER_ID) == null ? "" : ObtenerSINO(datosServicio.Find(p => p.ComponentFieldId == Constants.CERTIFICADO_COVID_CANCER_ID || p.ComponentFieldId == Constants.COVID_CANCER_ID).Value1);
                //    oReporteViewModel.Hipertension_arterial = datosServicio.Find(p => p.ComponentFieldId == Constants.CERTIFICADO_COVID_HIPERTENCION_ARTERIAL_ID || p.ComponentFieldId == Constants.COVID_HIPERTENCION_ARTERIAL_ID) == null ? "" : ObtenerSINO(datosServicio.Find(p => p.ComponentFieldId == Constants.CERTIFICADO_COVID_HIPERTENCION_ARTERIAL_ID || p.ComponentFieldId == Constants.COVID_HIPERTENCION_ARTERIAL_ID).Value1);
                //    oReporteViewModel.Obesidad_IMC_40 = datosServicio.Find(p => p.ComponentFieldId == Constants.CERTIFICADO_COVID_OBESIDAD_ID || p.ComponentFieldId == Constants.COVID_OBESIDAD_ID) == null ? "" : ObtenerSINO(datosServicio.Find(p => p.ComponentFieldId == Constants.CERTIFICADO_COVID_OBESIDAD_ID || p.ComponentFieldId == Constants.COVID_OBESIDAD_ID).Value1);

                //    oReporteViewModel.Insuficiencia_renal_cronica = datosServicio.Find(p => p.ComponentFieldId == Constants.CERTIFICADO_COVID_INSUFICIENCIA_RENAL_ID || p.ComponentFieldId == Constants.COVID_INSUFICIENCIA_RENAL_ID) == null ? "" : ObtenerSINO(datosServicio.Find(p => p.ComponentFieldId == Constants.CERTIFICADO_COVID_INSUFICIENCIA_RENAL_ID || p.ComponentFieldId == Constants.COVID_INSUFICIENCIA_RENAL_ID).Value1);
                //    oReporteViewModel.Embarazo_o_puerperio = datosServicio.Find(p => p.ComponentFieldId == Constants.CERTIFICADO_COVID_EMBARAZO_ID || p.ComponentFieldId == Constants.COVID_EMBARAZO_ID) == null ? "" : ObtenerSINO(datosServicio.Find(p => p.ComponentFieldId == Constants.CERTIFICADO_COVID_EMBARAZO_ID || p.ComponentFieldId == Constants.COVID_EMBARAZO_ID).Value1);
                //    oReporteViewModel.Enf_cardiovascular = datosServicio.Find(p => p.ComponentFieldId == Constants.CERTIFICADO_COVID_ENF_CARDIO_ID || p.ComponentFieldId == Constants.COVID_ENF_CARDIO_ID) == null ? "" : ObtenerSINO(datosServicio.Find(p => p.ComponentFieldId == Constants.CERTIFICADO_COVID_ENF_CARDIO_ID || p.ComponentFieldId == Constants.COVID_ENF_CARDIO_ID).Value1);
                //    oReporteViewModel.Asma = datosServicio.Find(p => p.ComponentFieldId == Constants.CERTIFICADO_COVID_ASMA_ID || p.ComponentFieldId == Constants.COVID_ASMA_ID) == null ? "" : ObtenerSINO(datosServicio.Find(p => p.ComponentFieldId == Constants.CERTIFICADO_COVID_ASMA_ID || p.ComponentFieldId == Constants.COVID_ASMA_ID).Value1);
                //    oReporteViewModel.Enf_o_tratamiento_inmunosupresor = datosServicio.Find(p => p.ComponentFieldId == Constants.CERTIFICADO_COVID_INMUNOSUPRESOR_ID || p.ComponentFieldId == Constants.COVID_INMUNOSUPRESOR_ID) == null ? "" : ObtenerSINO(datosServicio.Find(p => p.ComponentFieldId == Constants.CERTIFICADO_COVID_INMUNOSUPRESOR_ID || p.ComponentFieldId == Constants.COVID_INMUNOSUPRESOR_ID).Value1);
                //    oReporteViewModel.Condicion_Personal_de_salud = datosServicio.Find(p => p.ComponentFieldId == Constants.CERTIFICADO_COVID_ES_PERSONAL_SALUD_ID || p.ComponentFieldId == Constants.COVID_ES_PERSONAL_SALUD_ID) == null ? "" : (datosServicio.Find(p => p.ComponentFieldId == Constants.CERTIFICADO_COVID_ES_PERSONAL_SALUD_ID || p.ComponentFieldId == Constants.COVID_ES_PERSONAL_SALUD_ID).Value1);
                //    oReporteViewModel.Pregunta_Es_personal_de_salud = datosServicio.Find(p => p.ComponentFieldId == Constants.CERTIFICADO_COVID_PERSONAL_SALUD_ID || p.ComponentFieldId == Constants.COVID_PERSONAL_SALUD_ID) == null ? "" : ObtenerSINO(datosServicio.Find(p => p.ComponentFieldId == Constants.CERTIFICADO_COVID_PERSONAL_SALUD_ID || p.ComponentFieldId == Constants.COVID_PERSONAL_SALUD_ID).Value1);
                //    oReporteViewModel.Cual_es_su_profesion = datosServicio.Find(p => p.ComponentFieldId == Constants.CERTIFICADO_COVID_PROFESION_ID || p.ComponentFieldId == Constants.COVID_PROFESION_ID) == null ? "" : ObtenerProfesion(datosServicio.Find(p => p.ComponentFieldId == Constants.CERTIFICADO_COVID_PROFESION_ID || p.ComponentFieldId == Constants.COVID_PROFESION_ID).Value1);
                //    oReporteViewModel.Tiene_sintomas = datosServicio.Find(p => p.ComponentFieldId == Constants.CERTIFICADO_COVID_TIENE_SINTOMAS_ID || p.ComponentFieldId == Constants.COVID_TIENE_SINTOMAS_ID) == null ? "" : ObtenerSINO(datosServicio.Find(p => p.ComponentFieldId == Constants.CERTIFICADO_COVID_TIENE_SINTOMAS_ID || p.ComponentFieldId == Constants.COVID_TIENE_SINTOMAS_ID).Value1);
                //    oReporteViewModel.Fecha_inicio_de_sintomas = datosServicio.Find(p => p.ComponentFieldId == Constants.CERTIFICADO_COVID_INICIO_SINTOMAS_ID || p.ComponentFieldId == Constants.COVID_INICIO_SINTOMAS_ID) == null ? "" : datosServicio.Find(p => p.ComponentFieldId == Constants.CERTIFICADO_COVID_INICIO_SINTOMAS_ID || p.ComponentFieldId == Constants.COVID_INICIO_SINTOMAS_ID).Value1;
                //    oReporteViewModel.Tos = datosServicio.Find(p => p.ComponentFieldId == Constants.CERTIFICADO_COVID_TOS_ID || p.ComponentFieldId == Constants.COVID_TOS_ID) == null ? "" : ObtenerSINO(datosServicio.Find(p => p.ComponentFieldId == Constants.CERTIFICADO_COVID_TOS_ID || p.ComponentFieldId == Constants.COVID_TOS_ID).Value1);
                //    oReporteViewModel.Fiebre_Escalofrio = datosServicio.Find(p => p.ComponentFieldId == Constants.CERTIFICADO_COVID_FIEBRE_ESCALOFRIO_ID || p.ComponentFieldId == Constants.COVID_FIEBRE_ESCALOFRIO_ID) == null ? "" : ObtenerSINO(datosServicio.Find(p => p.ComponentFieldId == Constants.CERTIFICADO_COVID_FIEBRE_ESCALOFRIO_ID || p.ComponentFieldId == Constants.COVID_FIEBRE_ESCALOFRIO_ID).Value1);
                //    oReporteViewModel.Cefalea = datosServicio.Find(p => p.ComponentFieldId == Constants.CERTIFICADO_COVID_CEFALEA_ID || p.ComponentFieldId == Constants.COVID_CEFALEA_ID) == null ? "" : ObtenerSINO(datosServicio.Find(p => p.ComponentFieldId == Constants.CERTIFICADO_COVID_CEFALEA_ID || p.ComponentFieldId == Constants.COVID_CEFALEA_ID).Value1);
                //    oReporteViewModel.Dolor_de_garganta = datosServicio.Find(p => p.ComponentFieldId == Constants.CERTIFICADO_COVID_DOLOR_GARGANTA_ID || p.ComponentFieldId == Constants.COVID_DOLOR_GARGANTA_ID) == null ? "" : ObtenerSINO(datosServicio.Find(p => p.ComponentFieldId == Constants.CERTIFICADO_COVID_DOLOR_GARGANTA_ID || p.ComponentFieldId == Constants.COVID_DOLOR_GARGANTA_ID).Value1);
                //    oReporteViewModel.Malestar_general = datosServicio.Find(p => p.ComponentFieldId == Constants.CERTIFICADO_COVID_MALESTAR_GENERAL_ID || p.ComponentFieldId == Constants.COVID_MALESTAR_GENERAL_ID) == null ? "" : ObtenerSINO(datosServicio.Find(p => p.ComponentFieldId == Constants.CERTIFICADO_COVID_MALESTAR_GENERAL_ID || p.ComponentFieldId == Constants.COVID_MALESTAR_GENERAL_ID).Value1);
                //    oReporteViewModel.Irritacion_Confusion = datosServicio.Find(p => p.ComponentFieldId == Constants.CERTIFICADO_COVID_IRRITABILIDAD_ID || p.ComponentFieldId == Constants.COVID_IRRITABILIDAD_ID) == null ? "" : ObtenerSINO(datosServicio.Find(p => p.ComponentFieldId == Constants.CERTIFICADO_COVID_IRRITABILIDAD_ID || p.ComponentFieldId == Constants.COVID_IRRITABILIDAD_ID).Value1);
                //    oReporteViewModel.Congestion_nasal = datosServicio.Find(p => p.ComponentFieldId == Constants.CERTIFICADO_COVID_CONGESTION_NASAL_ID || p.ComponentFieldId == Constants.COVID_CONGESTION_NASAL_ID) == null ? "" : ObtenerSINO(datosServicio.Find(p => p.ComponentFieldId == Constants.CERTIFICADO_COVID_CONGESTION_NASAL_ID || p.ComponentFieldId == Constants.COVID_CONGESTION_NASAL_ID).Value1);
                //    oReporteViewModel.Diarrea = datosServicio.Find(p => p.ComponentFieldId == Constants.CERTIFICADO_COVID_DIARREA_ID || p.ComponentFieldId == Constants.COVID_DIARREA_ID) == null ? "" : ObtenerSINO(datosServicio.Find(p => p.ComponentFieldId == Constants.CERTIFICADO_COVID_DIARREA_ID || p.ComponentFieldId == Constants.COVID_DIARREA_ID).Value1);
                //    oReporteViewModel.Dolor = datosServicio.Find(p => p.ComponentFieldId == Constants.CERTIFICADO_COVID_DOLOR_ID || p.ComponentFieldId == Constants.COVID_DOLOR_ID) == null ? "" : ObtenerSINO(datosServicio.Find(p => p.ComponentFieldId == Constants.CERTIFICADO_COVID_DOLOR_ID || p.ComponentFieldId == Constants.COVID_DOLOR_ID).Value1);
                //    oReporteViewModel.Dificultad_respiratoria = datosServicio.Find(p => p.ComponentFieldId == Constants.CERTIFICADO_COVID_DIFIC_RESPIRA_ID || p.ComponentFieldId == Constants.COVID_DIFIC_RESPIRA_ID) == null ? "" : ObtenerSINO(datosServicio.Find(p => p.ComponentFieldId == Constants.CERTIFICADO_COVID_DIFIC_RESPIRA_ID || p.ComponentFieldId == Constants.COVID_DIFIC_RESPIRA_ID).Value1);
                //    oReporteViewModel.Nauseas_Vomitos = datosServicio.Find(p => p.ComponentFieldId == Constants.CERTIFICADO_COVID_NAUSEAS_ID || p.ComponentFieldId == Constants.COVID_NAUSEAS_ID) == null ? "" : ObtenerSINO(datosServicio.Find(p => p.ComponentFieldId == Constants.CERTIFICADO_COVID_NAUSEAS_ID || p.ComponentFieldId == Constants.COVID_NAUSEAS_ID).Value1);
                //    oReporteViewModel.Expectoracion = datosServicio.Find(p => p.ComponentFieldId == Constants.CERTIFICADO_COVID_OTROS_ID || p.ComponentFieldId == Constants.COVID_OTROS_ID) == null ? "" : ObtenerSINO(datosServicio.Find(p => p.ComponentFieldId == Constants.CERTIFICADO_COVID_OTROS_ID || p.ComponentFieldId == Constants.COVID_OTROS_ID).Value1);
                //    oReporteViewModel.Dolor_muscular = datosServicio.Find(p => p.ComponentFieldId == Constants.CERTIFICADO_COVID_MUSCULAR_ID || p.ComponentFieldId == Constants.COVID_MUSCULAR_ID) == null ? "" : ObtenerSINO(datosServicio.Find(p => p.ComponentFieldId == Constants.CERTIFICADO_COVID_MUSCULAR_ID || p.ComponentFieldId == Constants.COVID_MUSCULAR_ID).Value1);
                //    oReporteViewModel.Dolor_abdominal = datosServicio.Find(p => p.ComponentFieldId == Constants.CERTIFICADO_COVID_ABDOMINAL_ID || p.ComponentFieldId == Constants.COVID_ABDOMINAL_ID) == null ? "" : ObtenerSINO(datosServicio.Find(p => p.ComponentFieldId == Constants.CERTIFICADO_COVID_ABDOMINAL_ID || p.ComponentFieldId == Constants.COVID_ABDOMINAL_ID).Value1);
                //    oReporteViewModel.Dolor_pecho = datosServicio.Find(p => p.ComponentFieldId == Constants.CERTIFICADO_COVID_PECHO_ID || p.ComponentFieldId == Constants.COVID_PECHO_ID) == null ? "" : ObtenerSINO(datosServicio.Find(p => p.ComponentFieldId == Constants.CERTIFICADO_COVID_PECHO_ID || p.ComponentFieldId == Constants.COVID_PECHO_ID).Value1);
                //    oReporteViewModel.Dolor_articulaciones = datosServicio.Find(p => p.ComponentFieldId == Constants.CERTIFICADO_COVID_ARTICULACIONES_ID || p.ComponentFieldId == Constants.COVID_ARTICULACIONES_ID) == null ? "" : ObtenerSINO(datosServicio.Find(p => p.ComponentFieldId == Constants.CERTIFICADO_COVID_ARTICULACIONES_ID || p.ComponentFieldId == Constants.COVID_ARTICULACIONES_ID).Value1);
                //    oReporteViewModel.Otros_sintomas_especificar = datosServicio.Find(p => p.ComponentFieldId == Constants.CERTIFICADO_COVID_OTROS_SINTOMAS_ID || p.ComponentFieldId == Constants.COVID_OTROS_SINTOMAS_ID) == null ? "" : ObtenerSINO(datosServicio.Find(p => p.ComponentFieldId == Constants.CERTIFICADO_COVID_OTROS_SINTOMAS_ID || p.ComponentFieldId == Constants.COVID_OTROS_SINTOMAS_ID).Value1);
                //    oReporteViewModel.Clasificacion_clinica_de_severidad = datosServicio.Find(p => p.ComponentFieldId == Constants.CERTIFICADO_COVID_CLASIFICACION_CLINICA_ID || p.ComponentFieldId == Constants.COVID_CLASIFICACION_CLINICA_ID) == null ? "" : ObtenerClasificacion(datosServicio.Find(p => p.ComponentFieldId == Constants.CERTIFICADO_COVID_CLASIFICACION_CLINICA_ID || p.ComponentFieldId == Constants.COVID_CLASIFICACION_CLINICA_ID).Value1);
                //    oReporteViewModel.Temperatura = datosServicio.Find(p => p.ComponentFieldId == Constants.FUNCIONES_VITALES_TEMPERATURA_ID) == null ? "--" : datosServicio.Find(p => p.ComponentFieldId == Constants.FUNCIONES_VITALES_TEMPERATURA_ID).Value1;
                //    oReporteViewModel.Peso = datosServicio.Find(p => p.ComponentFieldId == Constants.ANTROPOMETRIA_PESO_ID) == null ? "--" : datosServicio.Find(p => p.ComponentFieldId == Constants.ANTROPOMETRIA_PESO_ID).Value1;
                //    oReporteViewModel.Talla = datosServicio.Find(p => p.ComponentFieldId == Constants.ANTROPOMETRIA_TALLA_ID) == null ? "--" : datosServicio.Find(p => p.ComponentFieldId == Constants.ANTROPOMETRIA_TALLA_ID).Value1;
                //    oReporteViewModel.IMC = datosServicio.Find(p => p.ComponentFieldId == Constants.ANTROPOMETRIA_IMC_ID) == null ? "--" : datosServicio.Find(p => p.ComponentFieldId == Constants.ANTROPOMETRIA_IMC_ID).Value1;

                //    oReporteViewModel.Procedencia_Solicitud = datosServicio.Find(p => p.ComponentFieldId == Constants.CERTIFICADO_COVID_PROCEDENCIA_SOLICITUD_ID || p.ComponentFieldId == Constants.COVID_PROCEDENCIA_SOLICITUD_ID) == null ? "" : ObtenerProcedimiento(datosServicio.Find(p => p.ComponentFieldId == Constants.CERTIFICADO_COVID_PROCEDENCIA_SOLICITUD_ID || p.ComponentFieldId == Constants.COVID_PROCEDENCIA_SOLICITUD_ID).Value1);
                //    oReporteViewModel.Resultado_prueba_rapida = datosServicio.Find(p => p.ComponentFieldId == Constants.CERTIFICADO_COVID_RES_1_PRUEBA_ID || p.ComponentFieldId == Constants.COVID_RES_1_PRUEBA_ID) == null ? "" : ObtenerResultado(datosServicio.Find(p => p.ComponentFieldId == Constants.CERTIFICADO_COVID_RES_1_PRUEBA_ID || p.ComponentFieldId == Constants.COVID_RES_1_PRUEBA_ID).Value1);
                //    oReporteViewModel.Resultado_de_segunda_prueba_rapida = datosServicio.Find(p => p.ComponentFieldId == Constants.CERTIFICADO_COVID_RES_2_PRUEBA_ID || p.ComponentFieldId == Constants.COVID_RES_2_PRUEBA_ID) == null ? "" : ObtenerResultado(datosServicio.Find(p => p.ComponentFieldId == Constants.CERTIFICADO_COVID_RES_2_PRUEBA_ID || p.ComponentFieldId == Constants.COVID_RES_2_PRUEBA_ID).Value1);
                //    oReporteViewModel.Profesional_quien_realiza_la_prueba = "";
                //    oReporteViewModel.Aptitud = servicio.Aptitud;

                //    lista.Add(oReporteViewModel);
                //}

                return lista;

            }
            catch (Exception)
            {
                return null;
            }

        }

        private string ObtenerClasificacion(string p)
        {
            if (p == "1")
            {
                return "Leve";
            }
            else if (p == "2")
            {
                return "Moderado";
            }
            else if (p == "3")
            {
                return "Severa";
            }
            else
            {
                return "--";
            }
        }

        private string ObtenerResultado(string p)
        {
            if (p == "0")
            {
                return "Negativo ";
            }
            else if (p == "1")
            {
                return "No válido";
            }
            else if (p == "2")
            {
                return "IgM Positivo";
            }
            else if (p == "3")
            {
                return "IgG Positivo";
            }
            else if (p == "4")
            {
                return "IgM e IgG positivo";
            }
            else
            {
                return "--";
            }
        }

        private string ObtenerProcedimiento(string p)
        {
            if (p == "0")
            {
                return "Repetir prueba en 7 días";
            }
            else if (p == "1")
            {
                return "Seg. clínico presencial c 72 hrs y remota c 24 hrs";
            }
            else if (p == "2")
            {
                return "Seg. clínico remoto c 24 hrs";
            }
            else if (p == "3")
            {
                return "Traslado al hospital ";
            }
            else if (p == "4")
            {
                return "Traslado al hospital UCI";
            }
            else
            {
                return "--";
            }
        }

        private string ObtenerProfesion(string p)
        {
            if (p == "0")
            {
                return "Médico";
            }
            else if (p == "1")
            {
                return "Enfermero(a)";
            }
            else if (p == "2")
            {
                return "Obstetra";
            }
            else if (p == "3")
            {
                return "Biólogo";
            }
            else if (p == "4")
            {
                return "Tecnólogo Médico";
            }
            else if (p == "5")
            {
                return "Técnico de enfermeria";
            }
            else if (p == "6")
            {
                return "Otros";
            }
            else
            {
                return "--";
            }
        }

        private string ObtenerSINO(string p)
        {
            return p == "0" ? "NO" : "SI";
        }

        private string ObtenerSede(string p)
        {
            if (p.Contains("|| CONONORTE"))
            {
                return "CONO NORTE";
            }
            else if (p.Contains("|| RIMAC"))
            {
                return "RIMAC";
            }
            else if (p.Contains("|| ATE"))
            {
                return "ATE";
            }
            else if (p.Contains("|| CONOSUR"))
            {
                return "CONOSUR";
            }
            else if (p.Contains("|| CALLAO"))
            {
                return "CALLAO";
            }
            else if (p.Contains("|| VEGUETA"))
            {
                return "VEGUETA";
            }
            else if (p.Contains("|| TINGO MARIA"))
            {
                return "TINGO MARIA";
            }
            else if (p.Contains("|| NAZCA"))
            {
                return "NAZCA";
            }
            else if (p.Contains("|| TRUJILLO"))
            {
                return "TRUJILLO";
            }
            else if (p.Contains("|| CHIMBOTE"))
            {
                return "CHIMBOTE";
            }
            else if (p.Contains("|| PIURA"))
            {
                return "PIURA";
            }
            else if (p.Contains("|| TUMBES"))
            {
                return "TUMBES";
            }
            else if (p.Contains("|| CHANCHAMAYO"))
            {
                return "CHANCHAMAYO";
            }
            else if (p.Contains("|| CAÑETE"))
            {
                return "CAÑETE";
            }
            else if (p.Contains("|| TALARA"))
            {
                return "TALARA";
            }
            else if (p.Contains("|| SATIPO"))
            {
                return "SATIPO";
            }
            else if (p.Contains("|| HUANUCO"))
            {
                return "HUANUCO";
            }
            else if (p.Contains("|| ICA"))
            {
                return "ICA";
            }
            else
            {
                return "----";
            }

        }

        private string ObtenerDomicilio(string p)
        {
            switch (p)
            {
                case "1":
                    return "Domicilio";
                case "2":
                    return "Hospedaje Actual";

                default:
                    return "";
            }
        }

        private string ObtenerTipoDocumento(int? id)
        {
            switch (id)
            {
                case 1:
                    return "DNI";
                case 2:
                    return "Pasaporte";
                case 3:
                    return "Licencia de Conducir";
                case 4:
                    return "Carnet de Extanjería";

                default:
                    return "";
            }
        }

        public List<SedeEmpresa> ObtenerSedePorEmpresa(string empresaId)
        {

            SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
            var objEntity = (from a in dbContext.location
                             where a.v_OrganizationId == empresaId
                             select new SedeEmpresa
                             {
                                 SedeId = a.v_LocationId,
                                 NombreSede = a.v_Name
                             }).ToList();

            return objEntity;
        }

        public string CorreosPorEmpresaEmpleadora(string empresaEmpleadora)
        {
            SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
            var objEntity = (from a in dbContext.empresasempleadoras
                             where a.Nombre == empresaEmpleadora
                             select new 
                             {
                                 Correos = a.Correo
                             }).ToList();

            return string.Join("; ", objEntity.Select(p => p.Correos));
        }

    }
}
